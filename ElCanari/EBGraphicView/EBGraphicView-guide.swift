//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBGraphicView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension EBGraphicView {

  //····················································································································

  final func invalidateGuideBezierPath () {
    if let bp = self.mGuideBezierPath, !bp.isEmpty {
      let r = bp.bounds.insetBy (dx: -bp.lineWidth / 2.0 - 0.5, dy: -bp.lineWidth / 2.0 - 0.5)
      self.setNeedsDisplay (r)
    }
  }

  //····················································································································

  final func guideFor (objectIndexes inIndexSet : Set <Int>) {
    let alignmentPointSetArray = self.viewController?.alignmentPointSetArray () ?? []
    let bp = NSBezierPath ()
    for index in inIndexSet {
      let objectAlignmentPoints = alignmentPointSetArray [index]
      for alignmentPoint in objectAlignmentPoints {
        var minX = alignmentPoint.x
        var maxX = alignmentPoint.x
        var minY = alignmentPoint.y
        var maxY = alignmentPoint.y
        var idx = 0
        while idx < alignmentPointSetArray.count {
          if !inIndexSet.contains (idx) {
            for ap in alignmentPointSetArray [idx] {
              if ap.x == alignmentPoint.x {
                minY = min (minY, ap.y)
                maxY = max (maxY, ap.y)
              }
              if ap.y == alignmentPoint.y {
                minX = min (minX, ap.x)
                maxX = max (maxX, ap.x)
              }
            }
          }
          idx += 1
        }
        if minX < maxX {
          bp.move (to: CanariPoint (x: minX, y: alignmentPoint.y).cocoaPoint)
          bp.line (to: CanariPoint (x: maxX, y: alignmentPoint.y).cocoaPoint)
        }
        if minY < maxY {
          bp.move (to: CanariPoint (x: alignmentPoint.x, y: minY).cocoaPoint)
          bp.line (to: CanariPoint (x: alignmentPoint.x, y: maxY).cocoaPoint)
        }
      }
    }
    if bp.isEmpty {
      self.mGuideBezierPath = nil
    }else{
      bp.lineWidth = 0.0
      self.mGuideBezierPath = bp
    }
  }

  //····················································································································  //····················································································································

  final func guideFor (possibleObjectIndex inPossibleIndex : Int?) {
    if let idx = inPossibleIndex {
      self.guideFor (objectIndexes: [idx])
    }else{
      self.mGuideBezierPath = nil
    }
  }

  //····················································································································  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

