//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBGraphicView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBGraphicView : NSView, EBUserClassNameProtocol, EBGraphicViewScaleProvider {

  //····················································································································
  // MARK: -
  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    noteObjectAllocation (self)
    DispatchQueue.main.async { self.configureGraphicView () }
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    noteObjectAllocation (self)
    DispatchQueue.main.async { self.configureGraphicView () }
 }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  private func configureGraphicView () {
 //   NSLog ("configureGraphicView \(self)")
  //  super.awakeFromNib ()
    self.wantsLayer = true
    self.postsFrameChangedNotifications = true
    NotificationCenter.default.addObserver (
      self,
      selector: #selector (self.ebFrameChanged (_:)),
      name: NSView.frameDidChangeNotification,
      object: self
    )
    if !self.wantsLayer {
      presentErrorWindow (#file, #line, "EBGraphicView requires layer")
    }
    self.installLiveScrollingNotification ()
    self.addEndLiveMagnificationObserver ()
    self.setNeedsDisplayAndUpdateViewBounds ()
  //--- Track flags changed events, event if view is not first responder
    self.mEventMonitor = NSEvent.addLocalMonitorForEvents (matching: .flagsChanged) { [weak self] inEvent in
      if let me = self {
        let unalignedLocationInView = me.convert (inEvent.locationInWindow, from: nil)
        if me.bounds.contains (unalignedLocationInView), let isKeyWindow = me.window?.isKeyWindow, isKeyWindow {
          me.flagsChanged (with: inEvent)
        }else{
          me.removeXYHelperWindow ()
        }
      }
      return inEvent
    }
  }

  //····················································································································

  override func ebCleanUp () {
    self.unbind_arrowKeyMagnitude ()
    self.unbind_backColor ()
    self.unbind_backgroundImageOpacity ()
    self.unbind_foregroundImageData ()
    self.unbind_gridCrossColor ()
    self.unbind_gridDisplayFactor ()
    self.unbind_gridLineColor ()
    self.unbind_gridStep ()
    self.unbind_gridStyle ()
    self.unbind_horizontalFlip ()
    self.unbind_mouseGrid ()
    self.unbind_overObjectsDisplay ()
    self.unbind_shiftArrowKeyMagnitude ()
    self.unbind_underObjectsDisplay ()
    self.unbind_verticalFlip ()
    self.unbind_xPlacardUnit ()
    self.unbind_yPlacardUnit ()
    self.unbind_zoom ()
    self.mViewController = nil
    self.removeXYHelperWindow ()
    NotificationCenter.default.removeObserver (
      self,
      name: NSView.frameDidChangeNotification,
      object: self
    )
    super.ebCleanUp ()
  }

  //····················································································································

  final internal var mZoomDidChangeCallback : Optional < (_ inZoom : Int) -> Void > = nil
  final var mHelperStringForOptionModifier : String? = nil
  final internal var mHelperStringDidChangeCallback : Optional < (_ inString : String) -> Void > = nil
  final internal var mXYwindow : NSWindow? = nil

  //····················································································································

  final weak var mFocusRingView : EBFocusRingViewProtocol? = nil // SHOULD be weak

  //····················································································································

  final func set (focusRingView inView : EBFocusRingViewProtocol) {
    self.mFocusRingView = inView
  }

  //····················································································································

  final override var isFlipped : Bool { return false }

  //····················································································································

  final internal var mTrackingArea : NSTrackingArea? = nil

  //····················································································································

  final internal var mZoomPropertyCache = 0 { // Used in EBGraphicView-magnify-and-zoom.swift
    didSet {
      if self.mZoomPropertyCache != oldValue {
        _ = self.mZoomController?.updateModel (withCandidateValue: self.mZoomPropertyCache, windowForSheet: self.window)
        self.applyZoom ()
      }
    }
  }

  //····················································································································

  final var mDrawFrameIssue = true

  //····················································································································

  private var mEventMonitor : Any? = nil // For tracking option key change

  //····················································································································
  // MARK: -
  //····················································································································

  @objc private func ebFrameChanged (_ inNotification : Notification) {
    self.defineToolTips ()
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mMouseDownBehaviour = DefaultBehaviourOnMouseDown ()

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mStartOptionMouseDownCallback : Optional < (_ inUnalignedMouseLocation : NSPoint) -> Void > = nil
  final internal var mContinueOptionMouseDraggedCallback : Optional < (_ inUnalignedMouseLocation : NSPoint, _ inModifierFlags : NSEvent.ModifierFlags) -> Void > = nil
  final internal var mAbortOptionMouseOperationCallback : Optional < () -> Void > = nil
  final internal var mHelperStringOptionMouseOperationCallback : Optional < (_ inModifierFlags : NSEvent.ModifierFlags) -> String? > = nil
  final internal var mStopOptionMouseUpCallback : Optional < (_ inUnalignedMouseLocation : NSPoint) -> Bool > = nil

  //····················································································································

  final func setOptionMouseCallbacks (start inStartCallback : @escaping (_ inUnalignedMouseLocation : NSPoint) -> Void,
                                      continue inContinueCallback : @escaping (_ inUnalignedMouseLocation : NSPoint, _ inModifierFlags : NSEvent.ModifierFlags) -> Void,
                                      abort inAbortCallback : @escaping () -> Void,
                                      helper inHelperCallback : @escaping (_ inModifierFlags : NSEvent.ModifierFlags) -> String?,
                                      stop inStopCallback : @escaping (_ inUnalignedMouseLocation : NSPoint) -> Bool) {
    self.mStartOptionMouseDownCallback = inStartCallback
    self.mContinueOptionMouseDraggedCallback = inContinueCallback
    self.mAbortOptionMouseOperationCallback = inAbortCallback
    self.mHelperStringOptionMouseOperationCallback = inHelperCallback
    self.mStopOptionMouseUpCallback = inStopCallback
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mMouseMovedOrFlagsChangedCallback : Optional < (_ inMouseUnalignedLocation : NSPoint) -> Void> = nil

  //····················································································································

  final func setMouseMovedOrFlagsChangedCallback (_ inCallback : @escaping (_ inMouseUnalignedLocation : NSPoint) -> Void) {
    self.mMouseMovedOrFlagsChangedCallback = inCallback
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mOptionalFrontShape : EBShape? = nil {
    didSet {
      if self.mOptionalFrontShape != oldValue {
        if let oldBox = oldValue?.boundingBox {
          self.setNeedsDisplay (oldBox)
        }
        if let newBox = self.mOptionalFrontShape?.boundingBox {
          self.setNeedsDisplay (newBox)
        }
      }
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mMouseExitCallback : Optional < () -> Void> = nil

  //····················································································································

  final func setMouseExitCallback (_ inCallback : @escaping () -> Void) {
    self.mMouseExitCallback = inCallback
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mKeyDownCallback : Optional < (_ inMouseLocation : NSPoint, _ inKey : UnicodeScalar) -> Void> = nil

  //····················································································································

  final func setKeyDownCallback (_ inCallback : @escaping (_ inMouseLocation : NSPoint, _ inKey : UnicodeScalar) -> Void) {
    self.mKeyDownCallback = inCallback
  }

  //····················································································································
  // MARK: -
  //····················································································································

   final private weak var mViewController : EBGraphicViewControllerProtocol? = nil // SOULD BE WEAK

  //····················································································································

  final var viewController : EBGraphicViewControllerProtocol? { return self.mViewController }

  //····················································································································

  final func set (controller inController : EBGraphicViewControllerProtocol?) {
    self.mViewController = inController
  }

  //····················································································································

  final func objectWithIndexIsSelected (_ inIndex : Int) -> Bool {
    return self.mViewController?.selectedIndexesSet.contains (inIndex) ?? false
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mSelectionRectangle : NSRect? = nil {
    didSet {
      if let oldSelectionRectangle = oldValue {
        self.setNeedsDisplay (oldSelectionRectangle.insetBy (dx: -1.0, dy: -1.0))
      }
      if let newSelectionRectangle = self.mSelectionRectangle {
        self.setNeedsDisplay (newSelectionRectangle.insetBy (dx: -1.0, dy: -1.0))
      }
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final var mUnderObjectsDisplay = EBShape () {
    didSet {
      self.noteInvalidRectangles (old: oldValue, new: self.mUnderObjectsDisplay)
      if self.mUnderObjectsDisplay != oldValue {
        self.setNeedsDisplayAndUpdateViewBounds ()
      }
    }
  }

  //····················································································································

  final internal var mUnderObjectsDisplayController : EBReadOnlyPropertyController?

  //····················································································································
  // MARK: -
  //····················································································································

  final var mOverObjectsDisplay = EBShape () {
    didSet {
      self.noteInvalidRectangles (old: oldValue, new: self.mOverObjectsDisplay)
      if self.mOverObjectsDisplay != oldValue {
        self.setNeedsDisplayAndUpdateViewBounds ()
      }
    }
  }

  //····················································································································

  final internal var mOverObjectsDisplayController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mGuideBezierPath : NSBezierPath? = nil {
    willSet {
      self.invalidateGuideBezierPath ()
    }
    didSet {
      self.invalidateGuideBezierPath ()
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final private var mArrowKeyMagnitude : Int = milsToCanariUnit (fromInt: 25)

  //····················································································································

  final var arrowKeyMagnitude : Int { return self.mArrowKeyMagnitude }

  //····················································································································

  final func set (arrowKeyMagnitude : Int) {
    self.mArrowKeyMagnitude = arrowKeyMagnitude
  }

  //····················································································································

  final internal var mArrowKeyMagnitudeController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final private var mShiftArrowKeyMagnitude : Int = milsToCanariUnit (fromInt: 100)

  //····················································································································

  final var shiftArrowKeyMagnitude : Int { return self.mShiftArrowKeyMagnitude }

 //····················································································································

  final func set (shiftArrowKeyMagnitude : Int) {
    self.mShiftArrowKeyMagnitude = shiftArrowKeyMagnitude
  }

 //····················································································································

  final internal var mShiftArrowKeyMagnitudeController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mBackColor : NSColor = NSColor.white {
    didSet {
      self.needsDisplay = true
      if let scrollView = self.superview?.superview as? NSScrollView {
        scrollView.backgroundColor = self.mBackColor
      }
    }
  }

  //····················································································································

  final internal var mBackColorController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final private var mObjectDisplayArray = [EBShape] () {
    didSet {
      if self.mObjectDisplayArray != oldValue {
        self.noteInvalidRectangles (old: oldValue, new: self.mObjectDisplayArray)
        self.setNeedsDisplayAndUpdateViewBounds ()
        self.defineToolTips ()
      }
    }
  }

  //····················································································································

  final var objectDisplayArray : [EBShape] { return mObjectDisplayArray }

  //····················································································································

  final var objectDisplayBounds : NSRect {
    var r = NSZeroRect
    for shape in self.mObjectDisplayArray {
      r = r.union (shape.boundingBox)
    }
    return r
  }

  //····················································································································

  final func updateObjectDisplay (_ inObjectDisplayArray : [EBShape]) {
    self.mObjectDisplayArray = inObjectDisplayArray
  }

  //····················································································································

  final var contentsBoundingBox : NSRect {
    var r = NSRect () // For including (0, 0)
    r = r.union (self.objectDisplayBounds)
    r = r.union (self.issueBoundingBox)
    r = r.union (self.mUnderObjectsDisplay.boundingBox)
    r = r.union (self.mOverObjectsDisplay.boundingBox)
    r = r.union (self.selectionShapeBoundingBox)
    if let ciImage = self.mBackgroundImage {
      let rImage = ciImage.extent
      let bp = self.mBackgroundImageAffineTransform.transform (NSBezierPath (rect: rImage))
      r = r.union (bp.bounds)
    }
    if let ciImage = self.mForegroundImage {
      let rImage = ciImage.extent
      let bp = self.mForegroundImageAffineTransform.transform (NSBezierPath (rect: rImage))
      r = r.union (bp.bounds)
    }
    return r
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final fileprivate var mMouseGridInCanariUnit : Int = 1 // No grid for mouse

  //····················································································································

  final var mouseGridInCanariUnit : Int { return mMouseGridInCanariUnit }

  //····················································································································

  final func set (mouseGridInCanariUnit : Int) {
    self.mMouseGridInCanariUnit = mouseGridInCanariUnit
  }

  //····················································································································

  final internal var mMouseGridController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final private var mPasteboardType : NSPasteboard.PasteboardType? = nil

  //····················································································································

  final var pasteboardType : NSPasteboard.PasteboardType? { return self.mPasteboardType }

  //····················································································································

  final func register (pasteboardType inPasteboardType : NSPasteboard.PasteboardType?) {
    self.mPasteboardType = inPasteboardType
  }

  //····················································································································
  //   MARK: -
  //   Selection Layer
  //····················································································································

  final private var mSelectionShapes = [EBShape] ()

  //····················································································································

  final var selectionShapes : [EBShape] {
    self.mViewController?.computeSelectionShape ()
    return self.mSelectionShapes
  }

  //····················································································································

  final var selectionShapeBoundingBox : NSRect {
    var r = NSRect.null
    for shape in self.mSelectionShapes {
      r = r.union (shape.boundingBox)
    }
    return r
  }

  //····················································································································

  final func updateSelectionShape (_ inShapes : [EBShape]) {
    if self.mSelectionShapes != inShapes {
//      Swift.print ("updateSelectionShape Change")
      for shape in self.mSelectionShapes {
        if !shape.boundingBox.isEmpty {
          // Swift.print ("  old \(shape.boundingBox)")
          self.setNeedsDisplay (shape.boundingBox.insetBy(dx: -1.0, dy: -1.0))
        }
      }
      self.mSelectionShapes = inShapes
      for shape in self.mSelectionShapes {
        if !shape.boundingBox.isEmpty {
           //Swift.print ("  new \(shape.boundingBox)")
          self.setNeedsDisplay (shape.boundingBox.insetBy(dx: -1.0, dy: -1.0))
        }
      }
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  //····················································································································
  //  MARK: -
  //····················································································································

  final private var mDeferredUpdateViewFrameAndBoundsRegistered = false
  final var mReferenceBounds : NSRect? = nil

  final func setNeedsDisplayAndUpdateViewBounds () {
    self.needsDisplay = true
    let candidateBounds = self.contentsBoundingBox
    if let referenceBounds = self.mReferenceBounds, referenceBounds == candidateBounds {
    }else if self.enclosingScrollView != nil, !self.mDeferredUpdateViewFrameAndBoundsRegistered {
      self.mDeferredUpdateViewFrameAndBoundsRegistered = true
      self.deferredApplyZoom ()
    }
  }

  //····················································································································

  private func deferredApplyZoom () {
    if NSEvent.pressedMouseButtons == 0 { // No pressed button
      self.mDeferredUpdateViewFrameAndBoundsRegistered = false
      self.applyZoom ()
    }else{
      DispatchQueue.main.async { self.deferredApplyZoom () }
    }
  }

  //····················································································································
  //  MARK: -
  //····················································································································

  final func setHelperTextField (_ inString : String) {
    self.mHelperStringDidChangeCallback? (inString)
  }

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mXPlacardUnit = 2286 // mils

  //····················································································································

  final func set (XPlacardUnit inUnit : Int) {
     self.mXPlacardUnit = inUnit
  }

  //····················································································································

  final internal var mXPlacardUnitController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mYPlacardUnit = 2286 // mils

  //····················································································································

  final func set (YPlacardUnit inUnit : Int) {
     self.mYPlacardUnit = inUnit
  }

  //····················································································································

  final internal var mYPlacardUnitController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mIssueBezierPathes = [EBBezierPath] ()
  final internal var mIssueKind : CanariIssueKind = .error // Any value, not used if mIssueBezierPath is nil

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mZoomController : EBGenericReadWritePropertyController <Int>? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final internal var mControlKeyHiliteDiameterController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final private var mHorizontalFlip = false
  final private var mVerticalFlip = false

  //····················································································································

  final func set (horizontalFlip inFlip : Bool) {
    self.flip (horizontal: inFlip, vertical: self.mVerticalFlip)
  }

  //····················································································································

  final var horizontalFlip : Bool {
    return self.mHorizontalFlip
  }

  //····················································································································

  final func setVerticalFlip (_ inFlip : Bool) {
    self.flip (horizontal: self.mHorizontalFlip, vertical: inFlip)
  }

  //····················································································································

  final var verticalFlip : Bool {
    return self.mVerticalFlip
  }

  //····················································································································

  final fileprivate func flip (horizontal inHorizontalFlip : Bool, vertical inVerticalFlip : Bool) {
     if let clipView = self.superview as? NSClipView {
       let toggleHorizontalFlip : CGFloat = (inHorizontalFlip != self.mHorizontalFlip) ? -1.0 : 1.0
       let toggleVerticalFlip   : CGFloat = (inVerticalFlip   != self.mVerticalFlip)   ? -1.0 : 1.0
       clipView.scaleUnitSquare (to: NSSize (width: toggleHorizontalFlip, height: toggleVerticalFlip))
       self.mHorizontalFlip = inHorizontalFlip
       self.mVerticalFlip = inVerticalFlip
     }
  }

  //····················································································································

  final internal var mHorizontalFlipController : EBReadOnlyPropertyController? = nil

  //····················································································································

  final internal var mVerticalFlipController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // Grid Style
  // MARK: -
  //····················································································································

  final var mGridStyle : GridStyle = .noGrid {
    didSet {
      if self.mGridStyle != oldValue {
        self.needsDisplay = true
      }
    }
  }

  //····················································································································

  final internal var mGridStyleController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mGridStepInCanariUnit : Int = milsToCanariUnit (fromInt: 25) {
    didSet {
      if (self.mGridStepInCanariUnit != oldValue) && (self.mGridStyle != .noGrid)  {
        self.needsDisplay = true
      }
    }
  }

  //····················································································································

  final internal var mGridStepController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mGridDisplayFactor : Int = 4 {
    didSet {
      if (self.mGridDisplayFactor != oldValue) && (self.mGridStyle != .noGrid)  {
        self.needsDisplay = true
      }
    }
  }

  //····················································································································

  final internal var mGridDisplayFactorController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mGridLineColor : NSColor = .black {
    didSet {
      if (self.mGridLineColor != oldValue) && (self.mGridStyle == .line)  {
        self.needsDisplay = true
      }
    }
  }

  //····················································································································

  final internal var mGridLineColorController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mGridCrossColor : NSColor = .black {
    didSet {
      if (self.mGridCrossColor != oldValue) && (self.mGridStyle == .cross)  {
        self.needsDisplay = true
      }
    }
  }

  //····················································································································

  final internal var mGridCrossColorController : EBReadOnlyPropertyController? = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final var mContextualMenuBuilder : Optional < (_ inPoint : CanariPoint) -> NSMenu > = nil

  //····················································································································
  // MARK: -
  //····················································································································

  final override var acceptsFirstResponder : Bool { return true }

  //····················································································································

  final private var mIsFirstResponder = false {
    didSet {
      if self.mIsFirstResponder != oldValue {
        self.mFocusRingView?.setFocusRing (self.mIsFirstResponder)
      }
    }
  }

  //····················································································································

  final override func becomeFirstResponder () -> Bool {
    self.mIsFirstResponder = true
    return true
  }

  //····················································································································

  final override func resignFirstResponder () -> Bool {
    self.mIsFirstResponder = false
    return true
  }

  //····················································································································
  // BACKGROUND IMAGE
  //····················································································································

  final var mBackgroundImage : CIImage? = nil {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  final var mBackgroundImageDataController : EBReadOnlyPropertyController? = nil

  final var mBackgroundImageOpacity : CGFloat = 1.0
  final var mBackgroundImageOpacityController : EBReadOnlyPropertyController? = nil

  final var mBackgroundImageAffineTransform = NSAffineTransform () {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  //····················································································································
  // FOREGROUND IMAGE
  //····················································································································

  final var mForegroundImage : CIImage? = nil {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  final var mForegroundImageDataController : EBReadOnlyPropertyController? = nil

  final var mForegroundImageOpacity : CGFloat = 1.0
  final var mForegroundImageOpacityController : EBReadOnlyPropertyController? = nil

  final var mForegroundImageAffineTransform = NSAffineTransform () {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  //····················································································································
  // REGISTER DRAGGED TYPES
  // MARK: -
  // https://stackoverflow.com/questions/4782636/nsview-subviews-interrupting-drag-operation
  //····················································································································

  func ebRegister (draggedTypes inPasteboardTypes : [NSPasteboard.PasteboardType]) {
    if let scrollView = self.enclosingScrollView {
      scrollView.registerForDraggedTypes (inPasteboardTypes)
    }else{
      self.registerForDraggedTypes (inPasteboardTypes)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

