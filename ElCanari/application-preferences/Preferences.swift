//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor var gPreferences : Preferences? = nil

//--------------------------------------------------------------------------------------------------

class Preferences : Preferences_SuperClass, NSWindowDelegate {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mWindow : CanariWindow? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Show Preferences window
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @IBAction func showPreferencesWindowAction (_ inSender : Any?) {
    let window : CanariWindow
    if let w = self.mWindow {
      window = w
    }else{
      window = CanariWindow (
        contentRect: .zero,
        styleMask: [.closable, .resizable, .titled],
        backing: .buffered,
        defer: false
      )
      self.mWindow = window
      window.setFrameAutosaveName ("PrefsWindowSettings")
      window.title = "Preferences"
      window.isReleasedWhenClosed = false
      window.setContentView (self.mPrefsMainView ())
    //--- Contrôler le comportement en plein écran
      window.collectionBehavior = [.fullScreenAuxiliary, .fullScreenNone]
      let zoomButton = window.standardWindowButton (.zoomButton)
      zoomButton?.isEnabled = false
    }
    window.makeKeyAndOrderFront (nil)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW mPrefsMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func mPrefsMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .large)
    let prefsPageView = self.PrefsPageView ()
    let prefsUserInterfacePage = self.PrefsUserInterfacePage ()
    let prefsAppUpdatePage = self.PrefsAppUpdatePage ()
    let prefsLibraryPage = self.PrefsLibraryPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutSegmentedControlWithPages (documentView: prefsPageView, equalWidth: true, size: .regular)
          .addPage (image: "settings", title: "User Interface", tooltip: "User Interface", pageView: prefsUserInterfacePage)
          .addPage (image: "update", title: "Application Update", tooltip: "Application Update", pageView: prefsAppUpdatePage)
          .addPage (image: "library", title: "Library", tooltip: "Library", pageView: prefsLibraryPage)
          .bind_selectedPage (preferences_mSelectedPrefsPage_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendView (prefsPageView)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PrefsPageView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PrefsPageView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PrefsAppUpdatePage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PrefsAppUpdatePage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Application Update", bold: true, size: .regular, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Check for Application Updates…", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.checkForAppUpdateAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Using…", bold: false, size: .regular, alignment: .center)
        self.configure_usingSparkleTextFieldConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Automatically Check for Updates", size: .regular)
        self.configure_automaticallyCheckForUpdatesConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutPopUpButton (size: .regular)
        self.configure_updateCheckIntervalPopUpButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Last Check Time", bold: false, size: .regular, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "?", bold: false, size: .regular, alignment: .center)
        self.configure_sparkleLastCheckTimeTextFieldConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutWebView (url: "https://pierremolinaro.github.io/ElCanari-distribution/release-notes.html")
        .set (minHeight: 200)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PrefsUserInterfacePage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PrefsUserInterfacePage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .large)
    _ = hStackView.appendFlexibleSpace ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "User Interface", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Selection Hilite Color", bold: false, size: .regular, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutColorWell ()
            .bind_color (preferences_selectionHiliteColor_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Selection Width", bold: false, size: .regular, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutTaggedPopUpButton (size: .regular)
            .add (title: "0.5 Point", withTag: 5)
            .add (title: "1.0 Point", withTag: 10)
            .add (title: "1.5 Point", withTag: 15)
            .add (title: "2.0 Points", withTag: 20)
            .add (title: "2.5 Points", withTag: 25)
            .bind_selectedTag (preferences_hiliteWidthMultipliedByTen_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCheckbox (title: "Show Debug Menu", size: .regular)
          self.configure_showDebugMenu (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "FreeRouting Application Directory", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "", size: .regular)
        self.configure_configureFreeRoutingPath (hStackView_view_view) // Configurator
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendFlexibleSpace ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PrefsLibraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PrefsLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "System Library", bold: true, size: .regular, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.revealUserLibraryInFinderAction (_:))
          )
        self.mRevealInFinderSystemLibraryButton = vStackView_view_view // Outlet
        self.configure_revealInFinderSystemLibraryButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Uses", size: .regular)
          .bind_value (preferences_usesUserLibrary_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Check for System Library Updates…", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.checkSystemLibraryUpdateAction (_:))
          )
        self.mCheckForLibraryUpdatesButton = vStackView_view_view // Outlet
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "At Start Up", size: .regular)
          .bind_value (preferences_checkForSystemLibraryAtStartUp_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutPopUpButton (size: .regular)
          .bind_enabled (.prop (preferences_checkForSystemLibraryAtStartUp_property))
        self.configure_lastSystemLibraryCheckTimeButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Show Library Update Log Window", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.showSystemLibraryLogAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Last Check", bold: false, size: .regular, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutDateLabel (bold: false, size: .regular)
          .bind_date (preferences_mLastSystemLibraryCheckTime_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "User Libraries", bold: true, size: .regular, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTableView (size: .small, addControlButtons: false)
      preferences_userLibraryArrayController.bind_tableView (vStackView_view)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.addLibraryEntryAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reveal in Finder", size: .regular)
          .bind_enabled (.intcmp (.prop (preferences_userLibraryArrayController.selectedArray_property.count_property), .eq, .literalInt (1)))
          .bind_run (
            target: self,
            selector: #selector (Preferences.revealInFinderLibraryFolderAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "-", size: .regular)
          .bind_enabled (.intcmp (.prop (preferences_userLibraryArrayController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (Preferences.removeLibraryEntryAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "System Library + User Libraries", bold: true, size: .regular, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutImageObserverView (size: .small)
          .bind_image (preferences_fileSystemLibraryStatusImage_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Show Library Consistency Window", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (Preferences.showLibraryConsistencyLogWindowAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mCheckForLibraryUpdatesButton : AutoLayoutButton? = nil
  weak final var mRevealInFinderSystemLibraryButton : AutoLayoutButton? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Undo Manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mUndoManager = UndoManager ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var undoManager : UndoManager { return self.mUndoManager }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // The preferences window should register this object as delegate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.undoManager
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
    gPreferences = self
  //--- Read from preferences
  //--- To many property: additionnalLibraryArray (no option)
    preferences_additionnalLibraryArray_property.undoManager = self.undoManager
  //--- Array controller property: userLibraryArrayController
    preferences_userLibraryArrayController.bind_model (preferences_additionnalLibraryArray_property, self.undoManager)
  //--- Atomic property: fileSystemLibraryStatusImage
    preferences_fileSystemLibraryStatusImage_property.mReadModelFunction = {
        let s0 = preferences_fileSystemLibraryIsOk_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_Preferences_fileSystemLibraryStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_fileSystemLibraryIsOk_property.startsBeingObserved (by: preferences_fileSystemLibraryStatusImage_property)
  //--- Atomic property: mValueRevealInFinder_packages
    preferences_mValueRevealInFinder_packages_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsBeingObserved (by: preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsBeingObserved (by: preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsBeingObserved (by: preferences_mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    preferences_mValueRevealInFinder_devices_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsBeingObserved (by: preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsBeingObserved (by: preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsBeingObserved (by: preferences_mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    preferences_mValueRevealInFinder_fonts_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsBeingObserved (by: preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsBeingObserved (by: preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsBeingObserved (by: preferences_mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    preferences_mValueRevealInFinder_artworks_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsBeingObserved (by: preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsBeingObserved (by: preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsBeingObserved (by: preferences_mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    preferences_mValueRevealInFinder_symbols_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsBeingObserved (by: preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsBeingObserved (by: preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsBeingObserved (by: preferences_mValueRevealInFinder_symbols_property)
    //--- Extern functions
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    awakeFromNib
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func awakeFromNib () {
    DispatchQueue.main.async {
      checkOutletConnection (self.mMenuRevealInFinder_artworks, "mMenuRevealInFinder_artworks", CanariMenu.self, #file, #line)
      checkOutletConnection (self.mMenuRevealInFinder_devices, "mMenuRevealInFinder_devices", CanariMenu.self, #file, #line)
      checkOutletConnection (self.mMenuRevealInFinder_fonts, "mMenuRevealInFinder_fonts", CanariMenu.self, #file, #line)
      checkOutletConnection (self.mMenuRevealInFinder_packages, "mMenuRevealInFinder_packages", CanariMenu.self, #file, #line)
      checkOutletConnection (self.mMenuRevealInFinder_symbols, "mMenuRevealInFinder_symbols", CanariMenu.self, #file, #line)
    //--------------------------- Install bindings
      self.mMenuRevealInFinder_symbols?.bind_populateSubmenus (preferences_mValueRevealInFinder_symbols_property)
      self.mMenuRevealInFinder_packages?.bind_populateSubmenus (preferences_mValueRevealInFinder_packages_property)
      self.mMenuRevealInFinder_devices?.bind_populateSubmenus (preferences_mValueRevealInFinder_devices_property)
      self.mMenuRevealInFinder_fonts?.bind_populateSubmenus (preferences_mValueRevealInFinder_fonts_property)
      self.mMenuRevealInFinder_artworks?.bind_populateSubmenus (preferences_mValueRevealInFinder_artworks_property)
    //--------------------------- Install multiple bindings
    //--------------------------- Array controller
    //--------------------------- Set targets / actions
    //--------------------------- Extern functions
      self.configureLibraryFileSystemObservation ()
      self.checkFileSystemLibrary ()
    }
    super.awakeFromNib ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

@MainActor let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
@MainActor let Preferences_symbolColor = "Preferences:symbolColor"
@MainActor let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
@MainActor let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
@MainActor let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
@MainActor let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
@MainActor let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
@MainActor let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
@MainActor let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
@MainActor let Preferences_packageColor = "Preferences:packageColor"
@MainActor let Preferences_frontSidePadColor = "Preferences:frontSidePadColor"
@MainActor let Preferences_backSidePadColor = "Preferences:backSidePadColor"
@MainActor let Preferences_displayPackageBackSidePads = "Preferences:displayPackageBackSidePads"
@MainActor let Preferences_padNumberColor = "Preferences:padNumberColor"
@MainActor let Preferences_padNumberFont = "Preferences:padNumberFont"
@MainActor let Preferences_showPadNumber = "Preferences:showPadNumber"
@MainActor let Preferences_packageGuideColor = "Preferences:packageGuideColor"
@MainActor let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
@MainActor let Preferences_dimensionFont = "Preferences:dimensionFont"
@MainActor let Preferences_padZoneColor = "Preferences:padZoneColor"
@MainActor let Preferences_padZoneFont = "Preferences:padZoneFont"
@MainActor let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
@MainActor let Preferences_mSymbolBackColorForDevice = "Preferences:mSymbolBackColorForDevice"
@MainActor let Preferences_mPackageBackColorForDevice = "Preferences:mPackageBackColorForDevice"
@MainActor let Preferences_mSymbolHorizontalFlipForDevice = "Preferences:mSymbolHorizontalFlipForDevice"
@MainActor let Preferences_mSymbolVerticalFlipForDevice = "Preferences:mSymbolVerticalFlipForDevice"
@MainActor let Preferences_mPackageHorizontalFlipForDevice = "Preferences:mPackageHorizontalFlipForDevice"
@MainActor let Preferences_mPackageVerticalFlipForDevice = "Preferences:mPackageVerticalFlipForDevice"
@MainActor let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
@MainActor let Preferences_mFrontSidePadColorForDevice = "Preferences:mFrontSidePadColorForDevice"
@MainActor let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
@MainActor let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
@MainActor let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
@MainActor let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
@MainActor let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
@MainActor let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
@MainActor let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
@MainActor let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
@MainActor let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
@MainActor let Preferences_schematicBackColor = "Preferences:schematicBackColor"
@MainActor let Preferences_schematicFrameColor = "Preferences:schematicFrameColor"
@MainActor let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
@MainActor let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
@MainActor let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
@MainActor let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
@MainActor let Preferences_componentNameColorForSchematic = "Preferences:componentNameColorForSchematic"
@MainActor let Preferences_componentNameFontForSchematic = "Preferences:componentNameFontForSchematic"
@MainActor let Preferences_componentValueColorForSchematic = "Preferences:componentValueColorForSchematic"
@MainActor let Preferences_componentValueFontForSchematic = "Preferences:componentValueFontForSchematic"
@MainActor let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
@MainActor let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
@MainActor let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
@MainActor let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
@MainActor let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
@MainActor let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
@MainActor let Preferences_crossColorGridForBoard = "Preferences:crossColorGridForBoard"
@MainActor let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
@MainActor let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
@MainActor let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
@MainActor let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
@MainActor let Preferences_drawWarningBackgroundForBoard = "Preferences:drawWarningBackgroundForBoard"
@MainActor let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
@MainActor let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
@MainActor let Preferences_frontSideRestrictRectangleColorForBoard = "Preferences:frontSideRestrictRectangleColorForBoard"
@MainActor let Preferences_backSideRestrictRectangleColorForBoard = "Preferences:backSideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner1SideRestrictRectangleColorForBoard = "Preferences:inner1SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner2SideRestrictRectangleColorForBoard = "Preferences:inner2SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner3SideRestrictRectangleColorForBoard = "Preferences:inner3SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner4SideRestrictRectangleColorForBoard = "Preferences:inner4SideRestrictRectangleColorForBoard"
@MainActor let Preferences_frontSideLegendColorForBoard = "Preferences:frontSideLegendColorForBoard"
@MainActor let Preferences_frontSideLayoutColorForBoard = "Preferences:frontSideLayoutColorForBoard"
@MainActor let Preferences_backSideLayoutColorForBoard = "Preferences:backSideLayoutColorForBoard"
@MainActor let Preferences_inner1LayoutColorForBoard = "Preferences:inner1LayoutColorForBoard"
@MainActor let Preferences_inner2LayoutColorForBoard = "Preferences:inner2LayoutColorForBoard"
@MainActor let Preferences_inner3LayoutColorForBoard = "Preferences:inner3LayoutColorForBoard"
@MainActor let Preferences_inner4LayoutColorForBoard = "Preferences:inner4LayoutColorForBoard"
@MainActor let Preferences_backSideLegendColorForBoard = "Preferences:backSideLegendColorForBoard"
@MainActor let Preferences_frontSidePadColorForBoard = "Preferences:frontSidePadColorForBoard"
@MainActor let Preferences_backSidePadColorForBoard = "Preferences:backSidePadColorForBoard"
@MainActor let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
@MainActor let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
@MainActor let Preferences_rastnetColorForBoard = "Preferences:rastnetColorForBoard"
@MainActor let Preferences_workingAreaColorForBoard = "Preferences:workingAreaColorForBoard"
@MainActor let Preferences_mShowComponentRotationKnobInBoard = "Preferences:mShowComponentRotationKnobInBoard"
@MainActor let Preferences_mShowTextRotationKnobInBoard = "Preferences:mShowTextRotationKnobInBoard"
@MainActor let Preferences_sampleString = "Preferences:sampleString"
@MainActor let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
@MainActor let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
@MainActor let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
@MainActor let Preferences_fileSystemLibraryIsOk = "Preferences:fileSystemLibraryIsOk"
@MainActor let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
@MainActor let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
@MainActor let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
@MainActor let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
@MainActor let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
@MainActor let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
@MainActor let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
@MainActor let Preferences_mergerModelViewDisplayModelBoardLimits = "Preferences:mergerModelViewDisplayModelBoardLimits"
@MainActor let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
@MainActor let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
@MainActor let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
@MainActor let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
@MainActor let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
@MainActor let Preferences_mergerModelViewDisplayInner1Tracks = "Preferences:mergerModelViewDisplayInner1Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner2Tracks = "Preferences:mergerModelViewDisplayInner2Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner3Tracks = "Preferences:mergerModelViewDisplayInner3Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner4Tracks = "Preferences:mergerModelViewDisplayInner4Tracks"
@MainActor let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
@MainActor let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
@MainActor let Preferences_mergerModelViewDisplayTraversingPads = "Preferences:mergerModelViewDisplayTraversingPads"
@MainActor let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
@MainActor let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
@MainActor let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
@MainActor let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
@MainActor let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
@MainActor let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
@MainActor let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
@MainActor let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
@MainActor let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
@MainActor let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
@MainActor let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
@MainActor let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
@MainActor let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
@MainActor let Preferences_mergerBoardViewDisplayTraversingPads = "Preferences:mergerBoardViewDisplayTraversingPads"
@MainActor let Preferences_mergerBoardViewDisplayModelBoardsLimits = "Preferences:mergerBoardViewDisplayModelBoardsLimits"
@MainActor let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
@MainActor let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
@MainActor let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
@MainActor let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
@MainActor let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
@MainActor let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
@MainActor let Preferences_mergerBoardViewDisplayInner1Tracks = "Preferences:mergerBoardViewDisplayInner1Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner2Tracks = "Preferences:mergerBoardViewDisplayInner2Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner3Tracks = "Preferences:mergerBoardViewDisplayInner3Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner4Tracks = "Preferences:mergerBoardViewDisplayInner4Tracks"
@MainActor let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
@MainActor let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
@MainActor let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
@MainActor let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
@MainActor let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
@MainActor let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
@MainActor let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
@MainActor let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
@MainActor let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
@MainActor let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
@MainActor let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
@MainActor let Preferences_mergerColorVias = "Preferences:mergerColorVias"
@MainActor let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
@MainActor let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
@MainActor let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
@MainActor let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
@MainActor let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
@MainActor let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
@MainActor let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
@MainActor let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
@MainActor let Preferences_mergerColorInner1Tracks = "Preferences:mergerColorInner1Tracks"
@MainActor let Preferences_mergerColorInner2Tracks = "Preferences:mergerColorInner2Tracks"
@MainActor let Preferences_mergerColorInner3Tracks = "Preferences:mergerColorInner3Tracks"
@MainActor let Preferences_mergerColorInner4Tracks = "Preferences:mergerColorInner4Tracks"
@MainActor let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
@MainActor let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
@MainActor let Preferences_mergerColorTraversingPads = "Preferences:mergerColorTraversingPads"
@MainActor let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
@MainActor let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
@MainActor let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
@MainActor let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
@MainActor let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
@MainActor let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
@MainActor let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
@MainActor let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
@MainActor let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
@MainActor let Preferences_mergerShowModelBackground = "Preferences:mergerShowModelBackground"
@MainActor let Preferences_mergerShowInstanceBackground = "Preferences:mergerShowInstanceBackground"
@MainActor let Preferences_artworkDialogFilterString = "Preferences:artworkDialogFilterString"
@MainActor let Preferences_mSelectedPrefsPage = "Preferences:mSelectedPrefsPage"
@MainActor let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
@MainActor let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
fileprivate let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
@MainActor let Preferences_pinNameFont = "Preferences:pinNameFont"
@MainActor let Preferences_displayPackageFrontSidePads = "Preferences:displayPackageFrontSidePads"
@MainActor let Preferences_mFreeRouterGuiDefaultFileContents = "Preferences:mFreeRouterGuiDefaultFileContents"
@MainActor let Preferences_sampleStringSize = "Preferences:sampleStringSize"
@MainActor let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//································································································
//   Atomic property: hiliteWidthMultipliedByTen
//································································································

@MainActor let preferences_hiliteWidthMultipliedByTen_property = EBPreferenceProperty <Int> (defaultValue: 15, prefKey: Preferences_hiliteWidthMultipliedByTen)

//································································································
//   Atomic property: symbolColor
//································································································

@MainActor let preferences_symbolColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_symbolColor)

//································································································
//   Atomic property: crossColorOfSymbolGrid
//································································································

@MainActor let preferences_crossColorOfSymbolGrid_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

//································································································
//   Atomic property: lineColorOfSymbolGrid
//································································································

@MainActor let preferences_lineColorOfSymbolGrid_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

//································································································
//   Atomic property: symbolBackgroundColor
//································································································

@MainActor let preferences_symbolBackgroundColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_symbolBackgroundColor)

//································································································
//   Atomic property: symbolDrawingWidthMultipliedByTen
//································································································

@MainActor let preferences_symbolDrawingWidthMultipliedByTen_property = EBPreferenceProperty <Int> (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

//································································································
//   Atomic property: crossColorOfPackageGrid
//································································································

@MainActor let preferences_crossColorOfPackageGrid_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

//································································································
//   Atomic property: lineColorOfPackageGrid
//································································································

@MainActor let preferences_lineColorOfPackageGrid_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

//································································································
//   Atomic property: packageBackgroundColor
//································································································

@MainActor let preferences_packageBackgroundColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_packageBackgroundColor)

//································································································
//   Atomic property: packageColor
//································································································

@MainActor let preferences_packageColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_packageColor)

//································································································
//   Atomic property: frontSidePadColor
//································································································

@MainActor let preferences_frontSidePadColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColor)

//································································································
//   Atomic property: backSidePadColor
//································································································

@MainActor let preferences_backSidePadColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColor)

//································································································
//   Atomic property: displayPackageBackSidePads
//································································································

@MainActor let preferences_displayPackageBackSidePads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_displayPackageBackSidePads)

//································································································
//   Atomic property: padNumberColor
//································································································

@MainActor let preferences_padNumberColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.red, prefKey: Preferences_padNumberColor)

//································································································
//   Atomic property: padNumberFont
//································································································

@MainActor let preferences_padNumberFont_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

//································································································
//   Atomic property: showPadNumber
//································································································

@MainActor let preferences_showPadNumber_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_showPadNumber)

//································································································
//   Atomic property: packageGuideColor
//································································································

@MainActor let preferences_packageGuideColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_packageGuideColor)

//································································································
//   Atomic property: packageDimensionColor
//································································································

@MainActor let preferences_packageDimensionColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.orange, prefKey: Preferences_packageDimensionColor)

//································································································
//   Atomic property: dimensionFont
//································································································

@MainActor let preferences_dimensionFont_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

//································································································
//   Atomic property: padZoneColor
//································································································

@MainActor let preferences_padZoneColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.magenta, prefKey: Preferences_padZoneColor)

//································································································
//   Atomic property: padZoneFont
//································································································

@MainActor let preferences_padZoneFont_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

//································································································
//   Atomic property: packageDrawingWidthMultipliedByTen
//································································································

@MainActor let preferences_packageDrawingWidthMultipliedByTen_property = EBPreferenceProperty <Int> (defaultValue: 15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

//································································································
//   Atomic property: mSymbolBackColorForDevice
//································································································

@MainActor let preferences_mSymbolBackColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_mSymbolBackColorForDevice)

//································································································
//   Atomic property: mPackageBackColorForDevice
//································································································

@MainActor let preferences_mPackageBackColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_mPackageBackColorForDevice)

//································································································
//   Atomic property: mSymbolHorizontalFlipForDevice
//································································································

@MainActor let preferences_mSymbolHorizontalFlipForDevice_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mSymbolHorizontalFlipForDevice)

//································································································
//   Atomic property: mSymbolVerticalFlipForDevice
//································································································

@MainActor let preferences_mSymbolVerticalFlipForDevice_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mSymbolVerticalFlipForDevice)

//································································································
//   Atomic property: mPackageHorizontalFlipForDevice
//································································································

@MainActor let preferences_mPackageHorizontalFlipForDevice_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mPackageHorizontalFlipForDevice)

//································································································
//   Atomic property: mPackageVerticalFlipForDevice
//································································································

@MainActor let preferences_mPackageVerticalFlipForDevice_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mPackageVerticalFlipForDevice)

//································································································
//   Atomic property: mPackageColorForDevice
//································································································

@MainActor let preferences_mPackageColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

//································································································
//   Atomic property: mFrontSidePadColorForDevice
//································································································

@MainActor let preferences_mFrontSidePadColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_mFrontSidePadColorForDevice)

//································································································
//   Atomic property: mBottomSidePadColorForDevice
//································································································

@MainActor let preferences_mBottomSidePadColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

//································································································
//   Atomic property: mPadNumberColorForDevice
//································································································

@MainActor let preferences_mPadNumberColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

//································································································
//   Atomic property: mPackageNameFontForDevice
//································································································

@MainActor let preferences_mPackageNameFontForDevice_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

//································································································
//   Atomic property: mPadNumberFontForDevice
//································································································

@MainActor let preferences_mPadNumberFontForDevice_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

//································································································
//   Atomic property: mSymbolColorForDevice
//································································································

@MainActor let preferences_mSymbolColorForDevice_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

//································································································
//   Atomic property: mSymbolNameFontForDevice
//································································································

@MainActor let preferences_mSymbolNameFontForDevice_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

//································································································
//   Atomic property: mPinNameFontForDevice
//································································································

@MainActor let preferences_mPinNameFontForDevice_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

//································································································
//   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
//································································································

@MainActor let preferences_symbolDrawingWidthForDeviceMultipliedByTen_property = EBPreferenceProperty <Int> (defaultValue: 15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

//································································································
//   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
//································································································

@MainActor let preferences_packageDrawingWidthForDeviceMultipliedByTen_property = EBPreferenceProperty <Int> (defaultValue: 15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

//································································································
//   Atomic property: schematicBackColor
//································································································

@MainActor let preferences_schematicBackColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_schematicBackColor)

//································································································
//   Atomic property: schematicFrameColor
//································································································

@MainActor let preferences_schematicFrameColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_schematicFrameColor)

//································································································
//   Atomic property: dotColorGridForSchematic
//································································································

@MainActor let preferences_dotColorGridForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

//································································································
//   Atomic property: lineColorGridForSchematic
//································································································

@MainActor let preferences_lineColorGridForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

//································································································
//   Atomic property: symbolColorForUnplacedComponentsForSchematic
//································································································

@MainActor let preferences_symbolColorForUnplacedComponentsForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

//································································································
//   Atomic property: symbolColorForSchematic
//································································································

@MainActor let preferences_symbolColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

//································································································
//   Atomic property: componentNameColorForSchematic
//································································································

@MainActor let preferences_componentNameColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_componentNameColorForSchematic)

//································································································
//   Atomic property: componentNameFontForSchematic
//································································································

@MainActor let preferences_componentNameFontForSchematic_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentNameFontForSchematic)

//································································································
//   Atomic property: componentValueColorForSchematic
//································································································

@MainActor let preferences_componentValueColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_componentValueColorForSchematic)

//································································································
//   Atomic property: componentValueFontForSchematic
//································································································

@MainActor let preferences_componentValueFontForSchematic_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentValueFontForSchematic)

//································································································
//   Atomic property: pinNameFontForSchematic
//································································································

@MainActor let preferences_pinNameFontForSchematic_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

//································································································
//   Atomic property: pinNameColorForSchematic
//································································································

@MainActor let preferences_pinNameColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

//································································································
//   Atomic property: pinNumberFontForSchematic
//································································································

@MainActor let preferences_pinNumberFontForSchematic_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

//································································································
//   Atomic property: pinNumberColorForSchematic
//································································································

@MainActor let preferences_pinNumberColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

//································································································
//   Atomic property: connectionColorForSchematic
//································································································

@MainActor let preferences_connectionColorForSchematic_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_connectionColorForSchematic)

//································································································
//   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
//································································································

@MainActor let preferences_symbolDrawingWidthMultipliedByTenForSchematic_property = EBPreferenceProperty <Int> (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

//································································································
//   Atomic property: crossColorGridForBoard
//································································································

@MainActor let preferences_crossColorGridForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_crossColorGridForBoard)

//································································································
//   Atomic property: lineColorGridForBoard
//································································································

@MainActor let preferences_lineColorGridForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.lightGray, prefKey: Preferences_lineColorGridForBoard)

//································································································
//   Atomic property: boardBackgroundColorForBoard
//································································································

@MainActor let preferences_boardBackgroundColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

//································································································
//   Atomic property: errorBackgroundColorForBoard
//································································································

@MainActor let preferences_errorBackgroundColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

//································································································
//   Atomic property: warningBackgroundColorForBoard
//································································································

@MainActor let preferences_warningBackgroundColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

//································································································
//   Atomic property: drawWarningBackgroundForBoard
//································································································

@MainActor let preferences_drawWarningBackgroundForBoard_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_drawWarningBackgroundForBoard)

//································································································
//   Atomic property: boardLimitsColorForBoard
//································································································

@MainActor let preferences_boardLimitsColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

//································································································
//   Atomic property: boardClearanceColorForBoard
//································································································

@MainActor let preferences_boardClearanceColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

//································································································
//   Atomic property: frontSideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_frontSideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_frontSideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: backSideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_backSideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_backSideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: inner1SideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_inner1SideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_inner1SideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: inner2SideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_inner2SideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.orange, prefKey: Preferences_inner2SideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: inner3SideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_inner3SideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.purple, prefKey: Preferences_inner3SideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: inner4SideRestrictRectangleColorForBoard
//································································································

@MainActor let preferences_inner4SideRestrictRectangleColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.magenta, prefKey: Preferences_inner4SideRestrictRectangleColorForBoard)

//································································································
//   Atomic property: frontSideLegendColorForBoard
//································································································

@MainActor let preferences_frontSideLegendColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_frontSideLegendColorForBoard)

//································································································
//   Atomic property: frontSideLayoutColorForBoard
//································································································

@MainActor let preferences_frontSideLayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_frontSideLayoutColorForBoard)

//································································································
//   Atomic property: backSideLayoutColorForBoard
//································································································

@MainActor let preferences_backSideLayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_backSideLayoutColorForBoard)

//································································································
//   Atomic property: inner1LayoutColorForBoard
//································································································

@MainActor let preferences_inner1LayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_inner1LayoutColorForBoard)

//································································································
//   Atomic property: inner2LayoutColorForBoard
//································································································

@MainActor let preferences_inner2LayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_inner2LayoutColorForBoard)

//································································································
//   Atomic property: inner3LayoutColorForBoard
//································································································

@MainActor let preferences_inner3LayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_inner3LayoutColorForBoard)

//································································································
//   Atomic property: inner4LayoutColorForBoard
//································································································

@MainActor let preferences_inner4LayoutColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_inner4LayoutColorForBoard)

//································································································
//   Atomic property: backSideLegendColorForBoard
//································································································

@MainActor let preferences_backSideLegendColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_backSideLegendColorForBoard)

//································································································
//   Atomic property: frontSidePadColorForBoard
//································································································

@MainActor let preferences_frontSidePadColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColorForBoard)

//································································································
//   Atomic property: backSidePadColorForBoard
//································································································

@MainActor let preferences_backSidePadColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColorForBoard)

//································································································
//   Atomic property: padNumberFontForBoard
//································································································

@MainActor let preferences_padNumberFontForBoard_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

//································································································
//   Atomic property: padNumberColorForBoard
//································································································

@MainActor let preferences_padNumberColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.red, prefKey: Preferences_padNumberColorForBoard)

//································································································
//   Atomic property: rastnetColorForBoard
//································································································

@MainActor let preferences_rastnetColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_rastnetColorForBoard)

//································································································
//   Atomic property: workingAreaColorForBoard
//································································································

@MainActor let preferences_workingAreaColorForBoard_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_workingAreaColorForBoard)

//································································································
//   Atomic property: mShowComponentRotationKnobInBoard
//································································································

@MainActor let preferences_mShowComponentRotationKnobInBoard_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mShowComponentRotationKnobInBoard)

//································································································
//   Atomic property: mShowTextRotationKnobInBoard
//································································································

@MainActor let preferences_mShowTextRotationKnobInBoard_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mShowTextRotationKnobInBoard)

//································································································
//   Atomic property: sampleString
//································································································

@MainActor let preferences_sampleString_property = EBPreferenceProperty <String> (defaultValue: "The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

//································································································
//   Atomic property: showGerberDrawingFlow
//································································································

@MainActor let preferences_showGerberDrawingFlow_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_showGerberDrawingFlow)

//································································································
//   Atomic property: showGerberDrawingIndexes
//································································································

@MainActor let preferences_showGerberDrawingIndexes_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_showGerberDrawingIndexes)

//································································································
//   Atomic property: fontEditionTransparency
//································································································

@MainActor let preferences_fontEditionTransparency_property = EBPreferenceProperty <Double> (defaultValue: 0.5, prefKey: Preferences_fontEditionTransparency)

//································································································
//   Atomic property: fileSystemLibraryIsOk
//································································································

@MainActor let preferences_fileSystemLibraryIsOk_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_fileSystemLibraryIsOk)

//································································································
//   Atomic property: checkForSystemLibraryAtStartUp
//································································································

@MainActor let preferences_checkForSystemLibraryAtStartUp_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

//································································································
//   Atomic property: systemLibraryCheckTimeInterval
//································································································

@MainActor let preferences_systemLibraryCheckTimeInterval_property = EBPreferenceProperty <Int> (defaultValue: 0, prefKey: Preferences_systemLibraryCheckTimeInterval)

//································································································
//   Atomic property: mergerModelViewHorizontalFlip
//································································································

@MainActor let preferences_mergerModelViewHorizontalFlip_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewHorizontalFlip)

//································································································
//   Atomic property: mergerModelViewVerticalFlip
//································································································

@MainActor let preferences_mergerModelViewVerticalFlip_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewVerticalFlip)

//································································································
//   Atomic property: mergerModelViewDisplayHoles
//································································································

@MainActor let preferences_mergerModelViewDisplayHoles_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayHoles)

//································································································
//   Atomic property: mergerModelViewDisplayVias
//································································································

@MainActor let preferences_mergerModelViewDisplayVias_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayVias)

//································································································
//   Atomic property: mergerModelViewDisplayFrontPads
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

//································································································
//   Atomic property: mergerModelViewDisplayModelBoardLimits
//································································································

@MainActor let preferences_mergerModelViewDisplayModelBoardLimits_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayModelBoardLimits)

//································································································
//   Atomic property: mergerModelViewDisplayFrontComponentNames
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontComponentNames_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

//································································································
//   Atomic property: mergerModelViewDisplayFrontComponentValues
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontComponentValues_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

//································································································
//   Atomic property: mergerModelViewDisplayFrontPackages
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontPackages_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

//································································································
//   Atomic property: mergerModelViewDisplayFrontLegendTexts
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontLegendTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

//································································································
//   Atomic property: mergerModelViewDisplayFrontTracks
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontTracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

//································································································
//   Atomic property: mergerModelViewDisplayInner1Tracks
//································································································

@MainActor let preferences_mergerModelViewDisplayInner1Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner1Tracks)

//································································································
//   Atomic property: mergerModelViewDisplayInner2Tracks
//································································································

@MainActor let preferences_mergerModelViewDisplayInner2Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner2Tracks)

//································································································
//   Atomic property: mergerModelViewDisplayInner3Tracks
//································································································

@MainActor let preferences_mergerModelViewDisplayInner3Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner3Tracks)

//································································································
//   Atomic property: mergerModelViewDisplayInner4Tracks
//································································································

@MainActor let preferences_mergerModelViewDisplayInner4Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner4Tracks)

//································································································
//   Atomic property: mergerModelViewDisplayFrontLayoutTexts
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontLayoutTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

//································································································
//   Atomic property: mergerModelViewDisplayBackPads
//································································································

@MainActor let preferences_mergerModelViewDisplayBackPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackPads)

//································································································
//   Atomic property: mergerModelViewDisplayTraversingPads
//································································································

@MainActor let preferences_mergerModelViewDisplayTraversingPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayTraversingPads)

//································································································
//   Atomic property: mergerModelViewDisplayBackComponentNames
//································································································

@MainActor let preferences_mergerModelViewDisplayBackComponentNames_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

//································································································
//   Atomic property: mergerModelViewDisplayBackComponentValues
//································································································

@MainActor let preferences_mergerModelViewDisplayBackComponentValues_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

//································································································
//   Atomic property: mergerModelViewDisplayBackLegendTexts
//································································································

@MainActor let preferences_mergerModelViewDisplayBackLegendTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

//································································································
//   Atomic property: mergerModelViewDisplayBackPackages
//································································································

@MainActor let preferences_mergerModelViewDisplayBackPackages_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

//································································································
//   Atomic property: mergerModelViewDisplayBackTracks
//································································································

@MainActor let preferences_mergerModelViewDisplayBackTracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

//································································································
//   Atomic property: mergerModelViewDisplayBackLayoutTexts
//································································································

@MainActor let preferences_mergerModelViewDisplayBackLayoutTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

//································································································
//   Atomic property: mergerModelViewDisplayFrontLegendLines
//································································································

@MainActor let preferences_mergerModelViewDisplayFrontLegendLines_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

//································································································
//   Atomic property: mergerModelViewDisplayBackLegendLines
//································································································

@MainActor let preferences_mergerModelViewDisplayBackLegendLines_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

//································································································
//   Atomic property: mergerBoardViewHorizontalFlip
//································································································

@MainActor let preferences_mergerBoardViewHorizontalFlip_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

//································································································
//   Atomic property: mergerBoardViewVerticalFlip
//································································································

@MainActor let preferences_mergerBoardViewVerticalFlip_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewVerticalFlip)

//································································································
//   Atomic property: mergerBoardViewDisplayHoles
//································································································

@MainActor let preferences_mergerBoardViewDisplayHoles_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayHoles)

//································································································
//   Atomic property: mergerBoardViewDisplayVias
//································································································

@MainActor let preferences_mergerBoardViewDisplayVias_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayVias)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontPads
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

//································································································
//   Atomic property: mergerBoardViewDisplayTraversingPads
//································································································

@MainActor let preferences_mergerBoardViewDisplayTraversingPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayTraversingPads)

//································································································
//   Atomic property: mergerBoardViewDisplayModelBoardsLimits
//································································································

@MainActor let preferences_mergerBoardViewDisplayModelBoardsLimits_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayModelBoardsLimits)

//································································································
//   Atomic property: mergerBoardViewDisplayBoardLimits
//································································································

@MainActor let preferences_mergerBoardViewDisplayBoardLimits_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentNames
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontComponentNames_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentValues
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontComponentValues_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontPackages
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontPackages_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendTexts
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLegendTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontTracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontTracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

//································································································
//   Atomic property: mergerBoardViewDisplayInner1Tracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayInner1Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner1Tracks)

//································································································
//   Atomic property: mergerBoardViewDisplayInner2Tracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayInner2Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner2Tracks)

//································································································
//   Atomic property: mergerBoardViewDisplayInner3Tracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayInner3Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner3Tracks)

//································································································
//   Atomic property: mergerBoardViewDisplayInner4Tracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayInner4Tracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner4Tracks)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLayoutTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

//································································································
//   Atomic property: mergerBoardViewDisplayBackPads
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackPads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

//································································································
//   Atomic property: mergerBoardViewDisplayBackComponentNames
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackComponentNames_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

//································································································
//   Atomic property: mergerBoardViewDisplayBackComponentValues
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackComponentValues_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

//································································································
//   Atomic property: mergerBoardViewDisplayBackLegendTexts
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackLegendTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

//································································································
//   Atomic property: mergerBoardViewDisplayBackPackages
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackPackages_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

//································································································
//   Atomic property: mergerBoardViewDisplayBackTracks
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackTracks_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

//································································································
//   Atomic property: mergerBoardViewDisplayBackLayoutTexts
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackLayoutTexts_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

//································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendLines
//································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLegendLines_property = EBPreferenceProperty <Bool> (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

//································································································
//   Atomic property: mergerBoardViewDisplayBackLegendLines
//································································································

@MainActor let preferences_mergerBoardViewDisplayBackLegendLines_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

//································································································
//   Atomic property: mergerColorHoles
//································································································

@MainActor let preferences_mergerColorHoles_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.white, prefKey: Preferences_mergerColorHoles)

//································································································
//   Atomic property: mergerColorVias
//································································································

@MainActor let preferences_mergerColorVias_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.red, prefKey: Preferences_mergerColorVias)

//································································································
//   Atomic property: mergerColorFrontPads
//································································································

@MainActor let preferences_mergerColorFrontPads_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

//································································································
//   Atomic property: mergerColorBoardLimits
//································································································

@MainActor let preferences_mergerColorBoardLimits_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

//································································································
//   Atomic property: mergerColorInternalBoardsLimits
//································································································

@MainActor let preferences_mergerColorInternalBoardsLimits_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

//································································································
//   Atomic property: mergerColorFrontComponentNames
//································································································

@MainActor let preferences_mergerColorFrontComponentNames_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

//································································································
//   Atomic property: mergerColorFrontComponentValues
//································································································

@MainActor let preferences_mergerColorFrontComponentValues_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

//································································································
//   Atomic property: mergerColorFrontPackages
//································································································

@MainActor let preferences_mergerColorFrontPackages_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

//································································································
//   Atomic property: mergerColorFrontLegendTexts
//································································································

@MainActor let preferences_mergerColorFrontLegendTexts_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

//································································································
//   Atomic property: mergerColorFrontTracks
//································································································

@MainActor let preferences_mergerColorFrontTracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

//································································································
//   Atomic property: mergerColorInner1Tracks
//································································································

@MainActor let preferences_mergerColorInner1Tracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorInner1Tracks)

//································································································
//   Atomic property: mergerColorInner2Tracks
//································································································

@MainActor let preferences_mergerColorInner2Tracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorInner2Tracks)

//································································································
//   Atomic property: mergerColorInner3Tracks
//································································································

@MainActor let preferences_mergerColorInner3Tracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInner3Tracks)

//································································································
//   Atomic property: mergerColorInner4Tracks
//································································································

@MainActor let preferences_mergerColorInner4Tracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.purple, prefKey: Preferences_mergerColorInner4Tracks)

//································································································
//   Atomic property: mergerColorFrontLayoutTexts
//································································································

@MainActor let preferences_mergerColorFrontLayoutTexts_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

//································································································
//   Atomic property: mergerColorBackPads
//································································································

@MainActor let preferences_mergerColorBackPads_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorBackPads)

//································································································
//   Atomic property: mergerColorTraversingPads
//································································································

@MainActor let preferences_mergerColorTraversingPads_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorTraversingPads)

//································································································
//   Atomic property: mergerColorBackComponentNames
//································································································

@MainActor let preferences_mergerColorBackComponentNames_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

//································································································
//   Atomic property: mergerColorBackComponentValues
//································································································

@MainActor let preferences_mergerColorBackComponentValues_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

//································································································
//   Atomic property: mergerColorBackLegendTexts
//································································································

@MainActor let preferences_mergerColorBackLegendTexts_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

//································································································
//   Atomic property: mergerColorBackPackages
//································································································

@MainActor let preferences_mergerColorBackPackages_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

//································································································
//   Atomic property: mergerColorBackTracks
//································································································

@MainActor let preferences_mergerColorBackTracks_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackTracks)

//································································································
//   Atomic property: mergerColorBackLayoutTexts
//································································································

@MainActor let preferences_mergerColorBackLayoutTexts_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

//································································································
//   Atomic property: mergerColorFrontLegendLines
//································································································

@MainActor let preferences_mergerColorFrontLegendLines_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

//································································································
//   Atomic property: mergerColorBackLegendLines
//································································································

@MainActor let preferences_mergerColorBackLegendLines_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

//································································································
//   Atomic property: mergerColorBackground
//································································································

@MainActor let preferences_mergerColorBackground_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

//································································································
//   Atomic property: mergerShowModelBackground
//································································································

@MainActor let preferences_mergerShowModelBackground_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerShowModelBackground)

//································································································
//   Atomic property: mergerShowInstanceBackground
//································································································

@MainActor let preferences_mergerShowInstanceBackground_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_mergerShowInstanceBackground)

//································································································
//   Atomic property: artworkDialogFilterString
//································································································

@MainActor let preferences_artworkDialogFilterString_property = EBPreferenceProperty <String> (defaultValue: "", prefKey: Preferences_artworkDialogFilterString)

//································································································
//   Atomic property: mSelectedPrefsPage
//································································································

@MainActor let preferences_mSelectedPrefsPage_property = EBPreferenceProperty <Int> (defaultValue: 0, prefKey: Preferences_mSelectedPrefsPage)

//································································································
//   Atomic property: selectionHiliteColor
//································································································

@MainActor let preferences_selectionHiliteColor_property = EBPreferenceProperty <NSColor> (defaultValue: NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

//································································································
//   Atomic property: usesUserLibrary
//································································································

@MainActor let preferences_usesUserLibrary_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_usesUserLibrary)

//································································································
//   To many property: additionnalLibraryArray
//································································································

@MainActor let preferences_additionnalLibraryArray_property = PreferencesArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

//································································································
//   Atomic property: pinNameFont
//································································································

@MainActor let preferences_pinNameFont_property = EBPreferenceProperty <NSFont> (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

//································································································
//   Atomic property: displayPackageFrontSidePads
//································································································

@MainActor let preferences_displayPackageFrontSidePads_property = EBPreferenceProperty <Bool> (defaultValue: true, prefKey: Preferences_displayPackageFrontSidePads)

//································································································
//   Atomic property: mFreeRouterGuiDefaultFileContents
//································································································

@MainActor let preferences_mFreeRouterGuiDefaultFileContents_property = EBPreferenceProperty <String> (defaultValue: "", prefKey: Preferences_mFreeRouterGuiDefaultFileContents)

//································································································
//   Atomic property: sampleStringSize
//································································································

@MainActor let preferences_sampleStringSize_property = EBPreferenceProperty <Double> (defaultValue: 24, prefKey: Preferences_sampleStringSize)

//································································································
//   Atomic property: mLastSystemLibraryCheckTime
//································································································

@MainActor let preferences_mLastSystemLibraryCheckTime_property = EBPreferenceProperty <Date> (defaultValue: Date.distantPast, prefKey: Preferences_mLastSystemLibraryCheckTime)

//································································································
//   Table View controller: userLibraryArrayController
//································································································

@MainActor let preferences_userLibraryArrayController = Controller_Preferences_userLibraryArrayController ()

//································································································
//   Transient property: fileSystemLibraryStatusImage
//································································································

@MainActor let preferences_fileSystemLibraryStatusImage_property = EBTransientProperty <NSImage> ()

//································································································
//   Transient property: mValueRevealInFinder_packages
//································································································

@MainActor let preferences_mValueRevealInFinder_packages_property = EBTransientProperty <StringArray> ()

//································································································
//   Transient property: mValueRevealInFinder_devices
//································································································

@MainActor let preferences_mValueRevealInFinder_devices_property = EBTransientProperty <StringArray> ()

//································································································
//   Transient property: mValueRevealInFinder_fonts
//································································································

@MainActor let preferences_mValueRevealInFinder_fonts_property = EBTransientProperty <StringArray> ()

//································································································
//   Transient property: mValueRevealInFinder_artworks
//································································································

@MainActor let preferences_mValueRevealInFinder_artworks_property = EBTransientProperty <StringArray> ()

//································································································
//   Transient property: mValueRevealInFinder_symbols
//································································································

@MainActor let preferences_mValueRevealInFinder_symbols_property = EBTransientProperty <StringArray> ()


//--------------------------------------------------------------------------------------------------

