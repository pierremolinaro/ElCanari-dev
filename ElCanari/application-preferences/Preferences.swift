//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor var g_Preferences : Preferences? = nil

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Preferences) final class Preferences : Preferences_SuperClass, NSWindowDelegate {

  //····················································································································

  private final var mWindow : CanariWindow? = nil

  //····················································································································
  //    Show Preferences window
  //····················································································································

  @IBAction func showPreferencesWindowAction (_ inSender : Any?) {
    let window : CanariWindow
    if let w = self.mWindow {
      window = w
    }else{
      window = CanariWindow (
        contentRect: .zero,
        styleMask: [.closable, .resizable, .titled],
        backing: .buffered,
        defer: false
      )
      self.mWindow = window
      window.setFrameAutosaveName ("PrefsWindowSettings")
      window.title = "Preferences"
      window.isReleasedWhenClosed = false
      window.contentView = AutoLayoutWindowContentView (view: self.mPrefsMainView ())
    //--- Contrôler le comportement en plein écran
      window.collectionBehavior = [.fullScreenAuxiliary, .fullScreenNone]
      let zoomButton = window.standardWindowButton (.zoomButton)
      zoomButton?.isEnabled = false
    }
    window.makeKeyAndOrderFront (nil)
  }

  //····················································································································
  //    VIEW mPrefsMainView
  //····················································································································

  final func mPrefsMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
      .set (topMargin: 12)
    let prefsPageView = self.PrefsPageView ()
    let prefsUserInterfacePage = self.PrefsUserInterfacePage ()
    let prefsAppUpdatePage = self.PrefsAppUpdatePage ()
    let prefsLibraryPage = self.PrefsLibraryPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutSegmentedControlWithPages (documentView: prefsPageView, equalWidth: false, size: .regular)
        .addPage (image: "settings", title: "User Interface", tooltip: "User Interface", pageView: prefsUserInterfacePage)
        .addPage (image: "update", title: "Application Update", tooltip: "Application Update", pageView: prefsAppUpdatePage)
        .addPage (image: "library", title: "Library", tooltip: "Library", pageView: prefsLibraryPage)
        .bind_selectedPage (preferences_mSelectedPrefsPage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = prefsPageView
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW PrefsPageView
  //····················································································································

  final func PrefsPageView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    return vStackView
  }

  //····················································································································
  //    VIEW PrefsAppUpdatePage
  //····················································································································

  final func PrefsAppUpdatePage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    let view_0 = AutoLayoutStaticLabel (title: "Application Update", bold: true, size: .regular, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutButton (title: "Check for Application Updates…", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.checkForAppUpdateAction (_:))
        )
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutStaticLabel (title: "Using…", bold: false, size: .regular, alignment: .center)
      self.configure_usingSparkleTextFieldConfigurator (view_1_1) // Configurator
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutCheckbox (title: "Automatically Check for Updates", size: .regular)
      self.configure_automaticallyCheckForUpdatesConfigurator (view_2_0) // Configurator
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutPopUpButton (size: .regular)
      self.configure_updateCheckIntervalPopUpButtonConfigurator (view_2_1) // Configurator
      _ = view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_2)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutStaticLabel (title: "Last Check Time", bold: false, size: .regular, alignment: .center)
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutStaticLabel (title: "?", bold: false, size: .regular, alignment: .center)
      self.configure_sparkleLastCheckTimeTextFieldConfigurator (view_3_1) // Configurator
      _ = view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_2)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutWebView (url: "https://pierremolinaro.github.io/ElCanari-distribution/release-notes.html")
      .set (minHeight: 500)
    _ = vStackView.appendView (view_4)
    return vStackView
  }

  //····················································································································
  //    VIEW PrefsUserInterfacePage
  //····················································································································

  final func PrefsUserInterfacePage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    let view_0 = AutoLayoutStaticLabel (title: "User Interface", bold: true, size: .regular, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutGridView2 ()
        .addCenterYAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addCenterYAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW PrefsLibraryPage
  //····················································································································

  final func PrefsLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    let view_0 = AutoLayoutStaticLabel (title: "System Library", bold: true, size: .regular, alignment: .left)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutButton (title: "", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.revealUserLibraryInFinderAction (_:))
        )
      self.mRevealInFinderSystemLibraryButton = view_1_0 // Outlet
      self.configure_revealInFinderSystemLibraryButtonConfigurator (view_1_0) // Configurator
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutCheckbox (title: "Uses", size: .regular)
        .bind_value (preferences_usesUserLibrary_property)
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutButton (title: "Check for System Library Updates…", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.checkSystemLibraryUpdateAction (_:))
        )
      self.mCheckForLibraryUpdatesButton = view_2_0 // Outlet
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutCheckbox (title: "At Start Up", size: .regular)
        .bind_value (preferences_checkForSystemLibraryAtStartUp_property)
      _ = view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutPopUpButton (size: .regular)
        .bind_enabled (.prop (preferences_checkForSystemLibraryAtStartUp_property))
      self.configure_lastSystemLibraryCheckTimeButtonConfigurator (view_2_2) // Configurator
      _ = view_2.appendView (view_2_2)
      let view_2_3 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_3)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutButton (title: "Show Library Update Log Window", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.showSystemLibraryLogAction (_:))
        )
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutStaticLabel (title: "Last Check", bold: false, size: .regular, alignment: .left)
      _ = view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutDateLabel (bold: false, size: .regular)
        .bind_date (preferences_mLastSystemLibraryCheckTime_property)
      _ = view_3.appendView (view_3_2)
      let view_3_3 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_3)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutStaticLabel (title: "User Libraries", bold: true, size: .regular, alignment: .left)
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutTableView (size: .small, addControlButtons: false)
    preferences_userLibraryArrayController.bind_tableView (view_5)
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutHorizontalStackView ()
    do{
      let view_6_0 = AutoLayoutButton (title: "+", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.addLibraryEntryAction (_:))
        )
      _ = view_6.appendView (view_6_0)
      let view_6_1 = AutoLayoutButton (title: "Reveal in Finder", size: .regular)
        .bind_enabled (.intcmp (.prop (preferences_userLibraryArrayController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (Preferences.revealInFinderLibraryFolderAction (_:))
        )
      _ = view_6.appendView (view_6_1)
      let view_6_2 = AutoLayoutButton (title: "-", size: .regular)
        .bind_enabled (.intcmp (.prop (preferences_userLibraryArrayController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (Preferences.removeLibraryEntryAction (_:))
        )
      _ = view_6.appendView (view_6_2)
      let view_6_3 = AutoLayoutFlexibleSpace ()
      _ = view_6.appendView (view_6_3)
    }
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutStaticLabel (title: "System Library + User Libraries", bold: true, size: .regular, alignment: .left)
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutHorizontalStackView ()
    do{
      let view_8_0 = AutoLayoutButton (title: "Check Library Consistency", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.checkLibraryAction (_:))
        )
      _ = view_8.appendView (view_8_0)
      let view_8_1 = AutoLayoutButton (title: "Show Library Consistency Log Window", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (Preferences.showLibraryConsistencyLogWindowAction (_:))
        )
      _ = view_8.appendView (view_8_1)
      let view_8_2 = AutoLayoutFlexibleSpace ()
      _ = view_8.appendView (view_8_2)
    }
    _ = vStackView.appendView (view_8)
    return vStackView
  }

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Selection Hilite Color", bold: false, size: .regular, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_selectionHiliteColor_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Selection Width", bold: false, size: .regular, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .regular)
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Points", withTag: 20)
      .add (title: "2.5 Points", withTag: 25)
      .bind_selectedTag (preferences_hiliteWidthMultipliedByTen_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Show Debug Menu", size: .regular)
      .bind_value (preferences_showDebugMenu_property)
    return view
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mCheckForLibraryUpdatesButton : AutoLayoutButton? = nil
  weak final var mRevealInFinderSystemLibraryButton : AutoLayoutButton? = nil

  //····················································································································
  //    Outlets (EX)
  //····················································································································

  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var undoManager : UndoManager { return self.mUndoManager }

  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)
  //····················································································································

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.undoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- To many property: additionnalLibraryArray (no option)
    preferences_additionnalLibraryArray_property.undoManager = self.undoManager
  //--- Array controller property: userLibraryArrayController
    preferences_userLibraryArrayController.bind_model (preferences_additionnalLibraryArray_property, self.undoManager)
  //--- Atomic property: mValueRevealInFinder_packages
    preferences_mValueRevealInFinder_packages_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsToBeObserved (by: preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsToBeObserved (by: preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsToBeObserved (by: preferences_mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    preferences_mValueRevealInFinder_devices_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsToBeObserved (by: preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsToBeObserved (by: preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsToBeObserved (by: preferences_mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    preferences_mValueRevealInFinder_fonts_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsToBeObserved (by: preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsToBeObserved (by: preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsToBeObserved (by: preferences_mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    preferences_mValueRevealInFinder_artworks_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsToBeObserved (by: preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsToBeObserved (by: preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsToBeObserved (by: preferences_mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    preferences_mValueRevealInFinder_symbols_property.mReadModelFunction = {
        let s0 = preferences_usesUserLibrary_property.selection
        let s1 = preferences_additionnalLibraryArray_property.selection
        let s2 = preferences_additionnalLibraryArray_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.startsToBeObserved (by: preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.toMany_mUses_StartsToBeObserved (by: preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.toMany_mPath_StartsToBeObserved (by: preferences_mValueRevealInFinder_symbols_property)
  //--- Notify application will terminate
    /* NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    ) */
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    checkOutletConnection (self.mMenuRevealInFinder_artworks, "mMenuRevealInFinder_artworks", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_devices, "mMenuRevealInFinder_devices", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_fonts, "mMenuRevealInFinder_fonts", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_packages, "mMenuRevealInFinder_packages", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_symbols, "mMenuRevealInFinder_symbols", CanariMenu.self, #file, #line)
  //--------------------------- Install bindings
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (preferences_mValueRevealInFinder_symbols_property)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (preferences_mValueRevealInFinder_packages_property)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (preferences_mValueRevealInFinder_devices_property)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (preferences_mValueRevealInFinder_fonts_property)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (preferences_mValueRevealInFinder_artworks_property)
  //--------------------------- Install multiple bindings
  //--------------------------- Array controller
  //--------------------------- Set targets / actions
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
@MainActor let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
@MainActor let Preferences_symbolColor = "Preferences:symbolColor"
@MainActor let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
@MainActor let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
@MainActor let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
@MainActor let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
@MainActor let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
@MainActor let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
@MainActor let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
@MainActor let Preferences_packageColor = "Preferences:packageColor"
@MainActor let Preferences_frontSidePadColor = "Preferences:frontSidePadColor"
@MainActor let Preferences_displayPackageFrontSidePads = "Preferences:displayPackageFrontSidePads"
@MainActor let Preferences_backSidePadColor = "Preferences:backSidePadColor"
@MainActor let Preferences_displayPackageBackSidePads = "Preferences:displayPackageBackSidePads"
@MainActor let Preferences_padNumberColor = "Preferences:padNumberColor"
@MainActor let Preferences_padNumberFont = "Preferences:padNumberFont"
@MainActor let Preferences_showPadNumber = "Preferences:showPadNumber"
@MainActor let Preferences_packageGuideColor = "Preferences:packageGuideColor"
@MainActor let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
@MainActor let Preferences_dimensionFont = "Preferences:dimensionFont"
@MainActor let Preferences_padZoneColor = "Preferences:padZoneColor"
@MainActor let Preferences_padZoneFont = "Preferences:padZoneFont"
@MainActor let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
@MainActor let Preferences_mSymbolBackColorForDevice = "Preferences:mSymbolBackColorForDevice"
@MainActor let Preferences_mPackageBackColorForDevice = "Preferences:mPackageBackColorForDevice"
@MainActor let Preferences_mSymbolHorizontalFlipForDevice = "Preferences:mSymbolHorizontalFlipForDevice"
@MainActor let Preferences_mSymbolVerticalFlipForDevice = "Preferences:mSymbolVerticalFlipForDevice"
@MainActor let Preferences_mPackageHorizontalFlipForDevice = "Preferences:mPackageHorizontalFlipForDevice"
@MainActor let Preferences_mPackageVerticalFlipForDevice = "Preferences:mPackageVerticalFlipForDevice"
@MainActor let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
@MainActor let Preferences_mFrontSidePadColorForDevice = "Preferences:mFrontSidePadColorForDevice"
@MainActor let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
@MainActor let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
@MainActor let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
@MainActor let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
@MainActor let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
@MainActor let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
@MainActor let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
@MainActor let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
@MainActor let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
@MainActor let Preferences_schematicBackColor = "Preferences:schematicBackColor"
@MainActor let Preferences_schematicFrameColor = "Preferences:schematicFrameColor"
@MainActor let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
@MainActor let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
@MainActor let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
@MainActor let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
@MainActor let Preferences_componentNameColorForSchematic = "Preferences:componentNameColorForSchematic"
@MainActor let Preferences_componentNameFontForSchematic = "Preferences:componentNameFontForSchematic"
@MainActor let Preferences_componentValueColorForSchematic = "Preferences:componentValueColorForSchematic"
@MainActor let Preferences_componentValueFontForSchematic = "Preferences:componentValueFontForSchematic"
@MainActor let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
@MainActor let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
@MainActor let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
@MainActor let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
@MainActor let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
@MainActor let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
@MainActor let Preferences_crossColorGridForBoard = "Preferences:crossColorGridForBoard"
@MainActor let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
@MainActor let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
@MainActor let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
@MainActor let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
@MainActor let Preferences_drawWarningBackgroundForBoard = "Preferences:drawWarningBackgroundForBoard"
@MainActor let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
@MainActor let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
@MainActor let Preferences_frontSideRestrictRectangleColorForBoard = "Preferences:frontSideRestrictRectangleColorForBoard"
@MainActor let Preferences_backSideRestrictRectangleColorForBoard = "Preferences:backSideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner1SideRestrictRectangleColorForBoard = "Preferences:inner1SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner2SideRestrictRectangleColorForBoard = "Preferences:inner2SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner3SideRestrictRectangleColorForBoard = "Preferences:inner3SideRestrictRectangleColorForBoard"
@MainActor let Preferences_inner4SideRestrictRectangleColorForBoard = "Preferences:inner4SideRestrictRectangleColorForBoard"
@MainActor let Preferences_frontSideLegendColorForBoard = "Preferences:frontSideLegendColorForBoard"
@MainActor let Preferences_frontSideLayoutColorForBoard = "Preferences:frontSideLayoutColorForBoard"
@MainActor let Preferences_backSideLayoutColorForBoard = "Preferences:backSideLayoutColorForBoard"
@MainActor let Preferences_inner1LayoutColorForBoard = "Preferences:inner1LayoutColorForBoard"
@MainActor let Preferences_inner2LayoutColorForBoard = "Preferences:inner2LayoutColorForBoard"
@MainActor let Preferences_inner3LayoutColorForBoard = "Preferences:inner3LayoutColorForBoard"
@MainActor let Preferences_inner4LayoutColorForBoard = "Preferences:inner4LayoutColorForBoard"
@MainActor let Preferences_backSideLegendColorForBoard = "Preferences:backSideLegendColorForBoard"
@MainActor let Preferences_frontSidePadColorForBoard = "Preferences:frontSidePadColorForBoard"
@MainActor let Preferences_backSidePadColorForBoard = "Preferences:backSidePadColorForBoard"
@MainActor let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
@MainActor let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
@MainActor let Preferences_mShowComponentRotationKnobInBoard = "Preferences:mShowComponentRotationKnobInBoard"
@MainActor let Preferences_mShowTextRotationKnobInBoard = "Preferences:mShowTextRotationKnobInBoard"
@MainActor let Preferences_sampleString = "Preferences:sampleString"
@MainActor let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
@MainActor let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
@MainActor let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
@MainActor let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
@MainActor let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
@MainActor let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
@MainActor let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
@MainActor let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
@MainActor let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
@MainActor let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
@MainActor let Preferences_mergerModelViewDisplayModelBoardLimits = "Preferences:mergerModelViewDisplayModelBoardLimits"
@MainActor let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
@MainActor let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
@MainActor let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
@MainActor let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
@MainActor let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
@MainActor let Preferences_mergerModelViewDisplayInner1Tracks = "Preferences:mergerModelViewDisplayInner1Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner2Tracks = "Preferences:mergerModelViewDisplayInner2Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner3Tracks = "Preferences:mergerModelViewDisplayInner3Tracks"
@MainActor let Preferences_mergerModelViewDisplayInner4Tracks = "Preferences:mergerModelViewDisplayInner4Tracks"
@MainActor let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
@MainActor let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
@MainActor let Preferences_mergerModelViewDisplayTraversingPads = "Preferences:mergerModelViewDisplayTraversingPads"
@MainActor let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
@MainActor let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
@MainActor let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
@MainActor let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
@MainActor let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
@MainActor let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
@MainActor let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
@MainActor let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
@MainActor let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
@MainActor let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
@MainActor let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
@MainActor let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
@MainActor let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
@MainActor let Preferences_mergerBoardViewDisplayTraversingPads = "Preferences:mergerBoardViewDisplayTraversingPads"
@MainActor let Preferences_mergerBoardViewDisplayModelBoardsLimits = "Preferences:mergerBoardViewDisplayModelBoardsLimits"
@MainActor let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
@MainActor let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
@MainActor let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
@MainActor let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
@MainActor let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
@MainActor let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
@MainActor let Preferences_mergerBoardViewDisplayInner1Tracks = "Preferences:mergerBoardViewDisplayInner1Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner2Tracks = "Preferences:mergerBoardViewDisplayInner2Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner3Tracks = "Preferences:mergerBoardViewDisplayInner3Tracks"
@MainActor let Preferences_mergerBoardViewDisplayInner4Tracks = "Preferences:mergerBoardViewDisplayInner4Tracks"
@MainActor let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
@MainActor let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
@MainActor let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
@MainActor let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
@MainActor let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
@MainActor let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
@MainActor let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
@MainActor let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
@MainActor let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
@MainActor let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
@MainActor let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
@MainActor let Preferences_mergerColorVias = "Preferences:mergerColorVias"
@MainActor let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
@MainActor let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
@MainActor let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
@MainActor let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
@MainActor let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
@MainActor let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
@MainActor let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
@MainActor let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
@MainActor let Preferences_mergerColorInner1Tracks = "Preferences:mergerColorInner1Tracks"
@MainActor let Preferences_mergerColorInner2Tracks = "Preferences:mergerColorInner2Tracks"
@MainActor let Preferences_mergerColorInner3Tracks = "Preferences:mergerColorInner3Tracks"
@MainActor let Preferences_mergerColorInner4Tracks = "Preferences:mergerColorInner4Tracks"
@MainActor let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
@MainActor let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
@MainActor let Preferences_mergerColorTraversingPads = "Preferences:mergerColorTraversingPads"
@MainActor let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
@MainActor let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
@MainActor let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
@MainActor let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
@MainActor let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
@MainActor let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
@MainActor let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
@MainActor let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
@MainActor let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
@MainActor let Preferences_artworkDialogFilterString = "Preferences:artworkDialogFilterString"
@MainActor let Preferences_mSelectedPrefsPage = "Preferences:mSelectedPrefsPage"
@MainActor let Preferences_showDebugMenu = "Preferences:showDebugMenu"
@MainActor let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
fileprivate let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
@MainActor let Preferences_pinNameFont = "Preferences:pinNameFont"
@MainActor let Preferences_mFreeRouterGuiDefaultFileContents = "Preferences:mFreeRouterGuiDefaultFileContents"
@MainActor let Preferences_sampleStringSize = "Preferences:sampleStringSize"
@MainActor let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//····················································································································
//   Atomic property: hiliteWidthMultipliedByTen
//····················································································································

@MainActor let preferences_hiliteWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_hiliteWidthMultipliedByTen)

//····················································································································

@MainActor var preferences_hiliteWidthMultipliedByTen : Int {
  get { return preferences_hiliteWidthMultipliedByTen_property.propval }
  set { preferences_hiliteWidthMultipliedByTen_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: usesUserLibrary
//····················································································································

@MainActor let preferences_usesUserLibrary_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_usesUserLibrary)

//····················································································································

@MainActor var preferences_usesUserLibrary : Bool {
  get { return preferences_usesUserLibrary_property.propval }
  set { preferences_usesUserLibrary_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolColor
//····················································································································

@MainActor let preferences_symbolColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColor)

//····················································································································

@MainActor var preferences_symbolColor : NSColor {
  get { return preferences_symbolColor_property.propval }
  set { preferences_symbolColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: crossColorOfSymbolGrid
//····················································································································

@MainActor let preferences_crossColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

//····················································································································

@MainActor var preferences_crossColorOfSymbolGrid : NSColor {
  get { return preferences_crossColorOfSymbolGrid_property.propval }
  set { preferences_crossColorOfSymbolGrid_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: lineColorOfSymbolGrid
//····················································································································

@MainActor let preferences_lineColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

//····················································································································

@MainActor var preferences_lineColorOfSymbolGrid : NSColor {
  get { return preferences_lineColorOfSymbolGrid_property.propval }
  set { preferences_lineColorOfSymbolGrid_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolBackgroundColor
//····················································································································

@MainActor let preferences_symbolBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_symbolBackgroundColor)

//····················································································································

@MainActor var preferences_symbolBackgroundColor : NSColor {
  get { return preferences_symbolBackgroundColor_property.propval }
  set { preferences_symbolBackgroundColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTen
//····················································································································

@MainActor let preferences_symbolDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

//····················································································································

@MainActor var preferences_symbolDrawingWidthMultipliedByTen : Int {
  get { return preferences_symbolDrawingWidthMultipliedByTen_property.propval }
  set { preferences_symbolDrawingWidthMultipliedByTen_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: crossColorOfPackageGrid
//····················································································································

@MainActor let preferences_crossColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

//····················································································································

@MainActor var preferences_crossColorOfPackageGrid : NSColor {
  get { return preferences_crossColorOfPackageGrid_property.propval }
  set { preferences_crossColorOfPackageGrid_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: lineColorOfPackageGrid
//····················································································································

@MainActor let preferences_lineColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

//····················································································································

@MainActor var preferences_lineColorOfPackageGrid : NSColor {
  get { return preferences_lineColorOfPackageGrid_property.propval }
  set { preferences_lineColorOfPackageGrid_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageBackgroundColor
//····················································································································

@MainActor let preferences_packageBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_packageBackgroundColor)

//····················································································································

@MainActor var preferences_packageBackgroundColor : NSColor {
  get { return preferences_packageBackgroundColor_property.propval }
  set { preferences_packageBackgroundColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageColor
//····················································································································

@MainActor let preferences_packageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_packageColor)

//····················································································································

@MainActor var preferences_packageColor : NSColor {
  get { return preferences_packageColor_property.propval }
  set { preferences_packageColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: frontSidePadColor
//····················································································································

@MainActor let preferences_frontSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColor)

//····················································································································

@MainActor var preferences_frontSidePadColor : NSColor {
  get { return preferences_frontSidePadColor_property.propval }
  set { preferences_frontSidePadColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: displayPackageFrontSidePads
//····················································································································

@MainActor let preferences_displayPackageFrontSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageFrontSidePads)

//····················································································································

@MainActor var preferences_displayPackageFrontSidePads : Bool {
  get { return preferences_displayPackageFrontSidePads_property.propval }
  set { preferences_displayPackageFrontSidePads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: backSidePadColor
//····················································································································

@MainActor let preferences_backSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColor)

//····················································································································

@MainActor var preferences_backSidePadColor : NSColor {
  get { return preferences_backSidePadColor_property.propval }
  set { preferences_backSidePadColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: displayPackageBackSidePads
//····················································································································

@MainActor let preferences_displayPackageBackSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageBackSidePads)

//····················································································································

@MainActor var preferences_displayPackageBackSidePads : Bool {
  get { return preferences_displayPackageBackSidePads_property.propval }
  set { preferences_displayPackageBackSidePads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padNumberColor
//····················································································································

@MainActor let preferences_padNumberColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColor)

//····················································································································

@MainActor var preferences_padNumberColor : NSColor {
  get { return preferences_padNumberColor_property.propval }
  set { preferences_padNumberColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padNumberFont
//····················································································································

@MainActor let preferences_padNumberFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

//····················································································································

@MainActor var preferences_padNumberFont : NSFont {
  get { return preferences_padNumberFont_property.propval }
  set { preferences_padNumberFont_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: showPadNumber
//····················································································································

@MainActor let preferences_showPadNumber_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showPadNumber)

//····················································································································

@MainActor var preferences_showPadNumber : Bool {
  get { return preferences_showPadNumber_property.propval }
  set { preferences_showPadNumber_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageGuideColor
//····················································································································

@MainActor let preferences_packageGuideColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_packageGuideColor)

//····················································································································

@MainActor var preferences_packageGuideColor : NSColor {
  get { return preferences_packageGuideColor_property.propval }
  set { preferences_packageGuideColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageDimensionColor
//····················································································································

@MainActor let preferences_packageDimensionColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_packageDimensionColor)

//····················································································································

@MainActor var preferences_packageDimensionColor : NSColor {
  get { return preferences_packageDimensionColor_property.propval }
  set { preferences_packageDimensionColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: dimensionFont
//····················································································································

@MainActor let preferences_dimensionFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

//····················································································································

@MainActor var preferences_dimensionFont : NSFont {
  get { return preferences_dimensionFont_property.propval }
  set { preferences_dimensionFont_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padZoneColor
//····················································································································

@MainActor let preferences_padZoneColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.magenta, prefKey: Preferences_padZoneColor)

//····················································································································

@MainActor var preferences_padZoneColor : NSColor {
  get { return preferences_padZoneColor_property.propval }
  set { preferences_padZoneColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padZoneFont
//····················································································································

@MainActor let preferences_padZoneFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

//····················································································································

@MainActor var preferences_padZoneFont : NSFont {
  get { return preferences_padZoneFont_property.propval }
  set { preferences_padZoneFont_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageDrawingWidthMultipliedByTen
//····················································································································

@MainActor let preferences_packageDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

//····················································································································

@MainActor var preferences_packageDrawingWidthMultipliedByTen : Int {
  get { return preferences_packageDrawingWidthMultipliedByTen_property.propval }
  set { preferences_packageDrawingWidthMultipliedByTen_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSymbolBackColorForDevice
//····················································································································

@MainActor let preferences_mSymbolBackColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mSymbolBackColorForDevice)

//····················································································································

@MainActor var preferences_mSymbolBackColorForDevice : NSColor {
  get { return preferences_mSymbolBackColorForDevice_property.propval }
  set { preferences_mSymbolBackColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPackageBackColorForDevice
//····················································································································

@MainActor let preferences_mPackageBackColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mPackageBackColorForDevice)

//····················································································································

@MainActor var preferences_mPackageBackColorForDevice : NSColor {
  get { return preferences_mPackageBackColorForDevice_property.propval }
  set { preferences_mPackageBackColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSymbolHorizontalFlipForDevice
//····················································································································

@MainActor let preferences_mSymbolHorizontalFlipForDevice_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mSymbolHorizontalFlipForDevice)

//····················································································································

@MainActor var preferences_mSymbolHorizontalFlipForDevice : Bool {
  get { return preferences_mSymbolHorizontalFlipForDevice_property.propval }
  set { preferences_mSymbolHorizontalFlipForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSymbolVerticalFlipForDevice
//····················································································································

@MainActor let preferences_mSymbolVerticalFlipForDevice_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mSymbolVerticalFlipForDevice)

//····················································································································

@MainActor var preferences_mSymbolVerticalFlipForDevice : Bool {
  get { return preferences_mSymbolVerticalFlipForDevice_property.propval }
  set { preferences_mSymbolVerticalFlipForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPackageHorizontalFlipForDevice
//····················································································································

@MainActor let preferences_mPackageHorizontalFlipForDevice_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mPackageHorizontalFlipForDevice)

//····················································································································

@MainActor var preferences_mPackageHorizontalFlipForDevice : Bool {
  get { return preferences_mPackageHorizontalFlipForDevice_property.propval }
  set { preferences_mPackageHorizontalFlipForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPackageVerticalFlipForDevice
//····················································································································

@MainActor let preferences_mPackageVerticalFlipForDevice_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mPackageVerticalFlipForDevice)

//····················································································································

@MainActor var preferences_mPackageVerticalFlipForDevice : Bool {
  get { return preferences_mPackageVerticalFlipForDevice_property.propval }
  set { preferences_mPackageVerticalFlipForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPackageColorForDevice
//····················································································································

@MainActor let preferences_mPackageColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

//····················································································································

@MainActor var preferences_mPackageColorForDevice : NSColor {
  get { return preferences_mPackageColorForDevice_property.propval }
  set { preferences_mPackageColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mFrontSidePadColorForDevice
//····················································································································

@MainActor let preferences_mFrontSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mFrontSidePadColorForDevice)

//····················································································································

@MainActor var preferences_mFrontSidePadColorForDevice : NSColor {
  get { return preferences_mFrontSidePadColorForDevice_property.propval }
  set { preferences_mFrontSidePadColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mBottomSidePadColorForDevice
//····················································································································

@MainActor let preferences_mBottomSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

//····················································································································

@MainActor var preferences_mBottomSidePadColorForDevice : NSColor {
  get { return preferences_mBottomSidePadColorForDevice_property.propval }
  set { preferences_mBottomSidePadColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPadNumberColorForDevice
//····················································································································

@MainActor let preferences_mPadNumberColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

//····················································································································

@MainActor var preferences_mPadNumberColorForDevice : NSColor {
  get { return preferences_mPadNumberColorForDevice_property.propval }
  set { preferences_mPadNumberColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPackageNameFontForDevice
//····················································································································

@MainActor let preferences_mPackageNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

//····················································································································

@MainActor var preferences_mPackageNameFontForDevice : NSFont {
  get { return preferences_mPackageNameFontForDevice_property.propval }
  set { preferences_mPackageNameFontForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPadNumberFontForDevice
//····················································································································

@MainActor let preferences_mPadNumberFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

//····················································································································

@MainActor var preferences_mPadNumberFontForDevice : NSFont {
  get { return preferences_mPadNumberFontForDevice_property.propval }
  set { preferences_mPadNumberFontForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSymbolColorForDevice
//····················································································································

@MainActor let preferences_mSymbolColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

//····················································································································

@MainActor var preferences_mSymbolColorForDevice : NSColor {
  get { return preferences_mSymbolColorForDevice_property.propval }
  set { preferences_mSymbolColorForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSymbolNameFontForDevice
//····················································································································

@MainActor let preferences_mSymbolNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

//····················································································································

@MainActor var preferences_mSymbolNameFontForDevice : NSFont {
  get { return preferences_mSymbolNameFontForDevice_property.propval }
  set { preferences_mSymbolNameFontForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mPinNameFontForDevice
//····················································································································

@MainActor let preferences_mPinNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

//····················································································································

@MainActor var preferences_mPinNameFontForDevice : NSFont {
  get { return preferences_mPinNameFontForDevice_property.propval }
  set { preferences_mPinNameFontForDevice_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
//····················································································································

@MainActor let preferences_symbolDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

//····················································································································

@MainActor var preferences_symbolDrawingWidthForDeviceMultipliedByTen : Int {
  get { return preferences_symbolDrawingWidthForDeviceMultipliedByTen_property.propval }
  set { preferences_symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
//····················································································································

@MainActor let preferences_packageDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

//····················································································································

@MainActor var preferences_packageDrawingWidthForDeviceMultipliedByTen : Int {
  get { return preferences_packageDrawingWidthForDeviceMultipliedByTen_property.propval }
  set { preferences_packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: schematicBackColor
//····················································································································

@MainActor let preferences_schematicBackColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_schematicBackColor)

//····················································································································

@MainActor var preferences_schematicBackColor : NSColor {
  get { return preferences_schematicBackColor_property.propval }
  set { preferences_schematicBackColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: schematicFrameColor
//····················································································································

@MainActor let preferences_schematicFrameColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_schematicFrameColor)

//····················································································································

@MainActor var preferences_schematicFrameColor : NSColor {
  get { return preferences_schematicFrameColor_property.propval }
  set { preferences_schematicFrameColor_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: dotColorGridForSchematic
//····················································································································

@MainActor let preferences_dotColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

//····················································································································

@MainActor var preferences_dotColorGridForSchematic : NSColor {
  get { return preferences_dotColorGridForSchematic_property.propval }
  set { preferences_dotColorGridForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: lineColorGridForSchematic
//····················································································································

@MainActor let preferences_lineColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

//····················································································································

@MainActor var preferences_lineColorGridForSchematic : NSColor {
  get { return preferences_lineColorGridForSchematic_property.propval }
  set { preferences_lineColorGridForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolColorForUnplacedComponentsForSchematic
//····················································································································

@MainActor let preferences_symbolColorForUnplacedComponentsForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

//····················································································································

@MainActor var preferences_symbolColorForUnplacedComponentsForSchematic : NSColor {
  get { return preferences_symbolColorForUnplacedComponentsForSchematic_property.propval }
  set { preferences_symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolColorForSchematic
//····················································································································

@MainActor let preferences_symbolColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

//····················································································································

@MainActor var preferences_symbolColorForSchematic : NSColor {
  get { return preferences_symbolColorForSchematic_property.propval }
  set { preferences_symbolColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: componentNameColorForSchematic
//····················································································································

@MainActor let preferences_componentNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_componentNameColorForSchematic)

//····················································································································

@MainActor var preferences_componentNameColorForSchematic : NSColor {
  get { return preferences_componentNameColorForSchematic_property.propval }
  set { preferences_componentNameColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: componentNameFontForSchematic
//····················································································································

@MainActor let preferences_componentNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentNameFontForSchematic)

//····················································································································

@MainActor var preferences_componentNameFontForSchematic : NSFont {
  get { return preferences_componentNameFontForSchematic_property.propval }
  set { preferences_componentNameFontForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: componentValueColorForSchematic
//····················································································································

@MainActor let preferences_componentValueColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_componentValueColorForSchematic)

//····················································································································

@MainActor var preferences_componentValueColorForSchematic : NSColor {
  get { return preferences_componentValueColorForSchematic_property.propval }
  set { preferences_componentValueColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: componentValueFontForSchematic
//····················································································································

@MainActor let preferences_componentValueFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentValueFontForSchematic)

//····················································································································

@MainActor var preferences_componentValueFontForSchematic : NSFont {
  get { return preferences_componentValueFontForSchematic_property.propval }
  set { preferences_componentValueFontForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: pinNameFontForSchematic
//····················································································································

@MainActor let preferences_pinNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

//····················································································································

@MainActor var preferences_pinNameFontForSchematic : NSFont {
  get { return preferences_pinNameFontForSchematic_property.propval }
  set { preferences_pinNameFontForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: pinNameColorForSchematic
//····················································································································

@MainActor let preferences_pinNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

//····················································································································

@MainActor var preferences_pinNameColorForSchematic : NSColor {
  get { return preferences_pinNameColorForSchematic_property.propval }
  set { preferences_pinNameColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: pinNumberFontForSchematic
//····················································································································

@MainActor let preferences_pinNumberFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

//····················································································································

@MainActor var preferences_pinNumberFontForSchematic : NSFont {
  get { return preferences_pinNumberFontForSchematic_property.propval }
  set { preferences_pinNumberFontForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: pinNumberColorForSchematic
//····················································································································

@MainActor let preferences_pinNumberColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

//····················································································································

@MainActor var preferences_pinNumberColorForSchematic : NSColor {
  get { return preferences_pinNumberColorForSchematic_property.propval }
  set { preferences_pinNumberColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: connectionColorForSchematic
//····················································································································

@MainActor let preferences_connectionColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_connectionColorForSchematic)

//····················································································································

@MainActor var preferences_connectionColorForSchematic : NSColor {
  get { return preferences_connectionColorForSchematic_property.propval }
  set { preferences_connectionColorForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
//····················································································································

@MainActor let preferences_symbolDrawingWidthMultipliedByTenForSchematic_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

//····················································································································

@MainActor var preferences_symbolDrawingWidthMultipliedByTenForSchematic : Int {
  get { return preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.propval }
  set { preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: crossColorGridForBoard
//····················································································································

@MainActor let preferences_crossColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorGridForBoard)

//····················································································································

@MainActor var preferences_crossColorGridForBoard : NSColor {
  get { return preferences_crossColorGridForBoard_property.propval }
  set { preferences_crossColorGridForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: lineColorGridForBoard
//····················································································································

@MainActor let preferences_lineColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_lineColorGridForBoard)

//····················································································································

@MainActor var preferences_lineColorGridForBoard : NSColor {
  get { return preferences_lineColorGridForBoard_property.propval }
  set { preferences_lineColorGridForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: boardBackgroundColorForBoard
//····················································································································

@MainActor let preferences_boardBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

//····················································································································

@MainActor var preferences_boardBackgroundColorForBoard : NSColor {
  get { return preferences_boardBackgroundColorForBoard_property.propval }
  set { preferences_boardBackgroundColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: errorBackgroundColorForBoard
//····················································································································

@MainActor let preferences_errorBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

//····················································································································

@MainActor var preferences_errorBackgroundColorForBoard : NSColor {
  get { return preferences_errorBackgroundColorForBoard_property.propval }
  set { preferences_errorBackgroundColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: warningBackgroundColorForBoard
//····················································································································

@MainActor let preferences_warningBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

//····················································································································

@MainActor var preferences_warningBackgroundColorForBoard : NSColor {
  get { return preferences_warningBackgroundColorForBoard_property.propval }
  set { preferences_warningBackgroundColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: drawWarningBackgroundForBoard
//····················································································································

@MainActor let preferences_drawWarningBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawWarningBackgroundForBoard)

//····················································································································

@MainActor var preferences_drawWarningBackgroundForBoard : Bool {
  get { return preferences_drawWarningBackgroundForBoard_property.propval }
  set { preferences_drawWarningBackgroundForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: boardLimitsColorForBoard
//····················································································································

@MainActor let preferences_boardLimitsColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

//····················································································································

@MainActor var preferences_boardLimitsColorForBoard : NSColor {
  get { return preferences_boardLimitsColorForBoard_property.propval }
  set { preferences_boardLimitsColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: boardClearanceColorForBoard
//····················································································································

@MainActor let preferences_boardClearanceColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

//····················································································································

@MainActor var preferences_boardClearanceColorForBoard : NSColor {
  get { return preferences_boardClearanceColorForBoard_property.propval }
  set { preferences_boardClearanceColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: frontSideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_frontSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_frontSideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_frontSideRestrictRectangleColorForBoard_property.propval }
  set { preferences_frontSideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: backSideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_backSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_backSideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_backSideRestrictRectangleColorForBoard_property.propval }
  set { preferences_backSideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner1SideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_inner1SideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_inner1SideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_inner1SideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_inner1SideRestrictRectangleColorForBoard_property.propval }
  set { preferences_inner1SideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner2SideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_inner2SideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_inner2SideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_inner2SideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_inner2SideRestrictRectangleColorForBoard_property.propval }
  set { preferences_inner2SideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner3SideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_inner3SideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.purple, prefKey: Preferences_inner3SideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_inner3SideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_inner3SideRestrictRectangleColorForBoard_property.propval }
  set { preferences_inner3SideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner4SideRestrictRectangleColorForBoard
//····················································································································

@MainActor let preferences_inner4SideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.magenta, prefKey: Preferences_inner4SideRestrictRectangleColorForBoard)

//····················································································································

@MainActor var preferences_inner4SideRestrictRectangleColorForBoard : NSColor {
  get { return preferences_inner4SideRestrictRectangleColorForBoard_property.propval }
  set { preferences_inner4SideRestrictRectangleColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: frontSideLegendColorForBoard
//····················································································································

@MainActor let preferences_frontSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_frontSideLegendColorForBoard)

//····················································································································

@MainActor var preferences_frontSideLegendColorForBoard : NSColor {
  get { return preferences_frontSideLegendColorForBoard_property.propval }
  set { preferences_frontSideLegendColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: frontSideLayoutColorForBoard
//····················································································································

@MainActor let preferences_frontSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideLayoutColorForBoard)

//····················································································································

@MainActor var preferences_frontSideLayoutColorForBoard : NSColor {
  get { return preferences_frontSideLayoutColorForBoard_property.propval }
  set { preferences_frontSideLayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: backSideLayoutColorForBoard
//····················································································································

@MainActor let preferences_backSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideLayoutColorForBoard)

//····················································································································

@MainActor var preferences_backSideLayoutColorForBoard : NSColor {
  get { return preferences_backSideLayoutColorForBoard_property.propval }
  set { preferences_backSideLayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner1LayoutColorForBoard
//····················································································································

@MainActor let preferences_inner1LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner1LayoutColorForBoard)

//····················································································································

@MainActor var preferences_inner1LayoutColorForBoard : NSColor {
  get { return preferences_inner1LayoutColorForBoard_property.propval }
  set { preferences_inner1LayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner2LayoutColorForBoard
//····················································································································

@MainActor let preferences_inner2LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner2LayoutColorForBoard)

//····················································································································

@MainActor var preferences_inner2LayoutColorForBoard : NSColor {
  get { return preferences_inner2LayoutColorForBoard_property.propval }
  set { preferences_inner2LayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner3LayoutColorForBoard
//····················································································································

@MainActor let preferences_inner3LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner3LayoutColorForBoard)

//····················································································································

@MainActor var preferences_inner3LayoutColorForBoard : NSColor {
  get { return preferences_inner3LayoutColorForBoard_property.propval }
  set { preferences_inner3LayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: inner4LayoutColorForBoard
//····················································································································

@MainActor let preferences_inner4LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner4LayoutColorForBoard)

//····················································································································

@MainActor var preferences_inner4LayoutColorForBoard : NSColor {
  get { return preferences_inner4LayoutColorForBoard_property.propval }
  set { preferences_inner4LayoutColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: backSideLegendColorForBoard
//····················································································································

@MainActor let preferences_backSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_backSideLegendColorForBoard)

//····················································································································

@MainActor var preferences_backSideLegendColorForBoard : NSColor {
  get { return preferences_backSideLegendColorForBoard_property.propval }
  set { preferences_backSideLegendColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: frontSidePadColorForBoard
//····················································································································

@MainActor let preferences_frontSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColorForBoard)

//····················································································································

@MainActor var preferences_frontSidePadColorForBoard : NSColor {
  get { return preferences_frontSidePadColorForBoard_property.propval }
  set { preferences_frontSidePadColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: backSidePadColorForBoard
//····················································································································

@MainActor let preferences_backSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColorForBoard)

//····················································································································

@MainActor var preferences_backSidePadColorForBoard : NSColor {
  get { return preferences_backSidePadColorForBoard_property.propval }
  set { preferences_backSidePadColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padNumberFontForBoard
//····················································································································

@MainActor let preferences_padNumberFontForBoard_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

//····················································································································

@MainActor var preferences_padNumberFontForBoard : NSFont {
  get { return preferences_padNumberFontForBoard_property.propval }
  set { preferences_padNumberFontForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: padNumberColorForBoard
//····················································································································

@MainActor let preferences_padNumberColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColorForBoard)

//····················································································································

@MainActor var preferences_padNumberColorForBoard : NSColor {
  get { return preferences_padNumberColorForBoard_property.propval }
  set { preferences_padNumberColorForBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mShowComponentRotationKnobInBoard
//····················································································································

@MainActor let preferences_mShowComponentRotationKnobInBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mShowComponentRotationKnobInBoard)

//····················································································································

@MainActor var preferences_mShowComponentRotationKnobInBoard : Bool {
  get { return preferences_mShowComponentRotationKnobInBoard_property.propval }
  set { preferences_mShowComponentRotationKnobInBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mShowTextRotationKnobInBoard
//····················································································································

@MainActor let preferences_mShowTextRotationKnobInBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mShowTextRotationKnobInBoard)

//····················································································································

@MainActor var preferences_mShowTextRotationKnobInBoard : Bool {
  get { return preferences_mShowTextRotationKnobInBoard_property.propval }
  set { preferences_mShowTextRotationKnobInBoard_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: sampleString
//····················································································································

@MainActor let preferences_sampleString_property = EBPreferencesProperty_String (defaultValue: "The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

//····················································································································

@MainActor var preferences_sampleString : String {
  get { return preferences_sampleString_property.propval }
  set { preferences_sampleString_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: showGerberDrawingFlow
//····················································································································

@MainActor let preferences_showGerberDrawingFlow_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingFlow)

//····················································································································

@MainActor var preferences_showGerberDrawingFlow : Bool {
  get { return preferences_showGerberDrawingFlow_property.propval }
  set { preferences_showGerberDrawingFlow_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: showGerberDrawingIndexes
//····················································································································

@MainActor let preferences_showGerberDrawingIndexes_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingIndexes)

//····················································································································

@MainActor var preferences_showGerberDrawingIndexes : Bool {
  get { return preferences_showGerberDrawingIndexes_property.propval }
  set { preferences_showGerberDrawingIndexes_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: fontEditionTransparency
//····················································································································

@MainActor let preferences_fontEditionTransparency_property = EBPreferencesProperty_Double (defaultValue: 0.5, prefKey: Preferences_fontEditionTransparency)

//····················································································································

@MainActor var preferences_fontEditionTransparency : Double {
  get { return preferences_fontEditionTransparency_property.propval }
  set { preferences_fontEditionTransparency_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: checkForSystemLibraryAtStartUp
//····················································································································

@MainActor let preferences_checkForSystemLibraryAtStartUp_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

//····················································································································

@MainActor var preferences_checkForSystemLibraryAtStartUp : Bool {
  get { return preferences_checkForSystemLibraryAtStartUp_property.propval }
  set { preferences_checkForSystemLibraryAtStartUp_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: systemLibraryCheckTimeInterval
//····················································································································

@MainActor let preferences_systemLibraryCheckTimeInterval_property = EBPreferencesProperty_Int (defaultValue: 0, prefKey: Preferences_systemLibraryCheckTimeInterval)

//····················································································································

@MainActor var preferences_systemLibraryCheckTimeInterval : Int {
  get { return preferences_systemLibraryCheckTimeInterval_property.propval }
  set { preferences_systemLibraryCheckTimeInterval_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewHorizontalFlip
//····················································································································

@MainActor let preferences_mergerModelViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewHorizontalFlip)

//····················································································································

@MainActor var preferences_mergerModelViewHorizontalFlip : Bool {
  get { return preferences_mergerModelViewHorizontalFlip_property.propval }
  set { preferences_mergerModelViewHorizontalFlip_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewVerticalFlip
//····················································································································

@MainActor let preferences_mergerModelViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewVerticalFlip)

//····················································································································

@MainActor var preferences_mergerModelViewVerticalFlip : Bool {
  get { return preferences_mergerModelViewVerticalFlip_property.propval }
  set { preferences_mergerModelViewVerticalFlip_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayHoles
//····················································································································

@MainActor let preferences_mergerModelViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayHoles)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayHoles : Bool {
  get { return preferences_mergerModelViewDisplayHoles_property.propval }
  set { preferences_mergerModelViewDisplayHoles_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayVias
//····················································································································

@MainActor let preferences_mergerModelViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayVias)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayVias : Bool {
  get { return preferences_mergerModelViewDisplayVias_property.propval }
  set { preferences_mergerModelViewDisplayVias_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPads
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontPads : Bool {
  get { return preferences_mergerModelViewDisplayFrontPads_property.propval }
  set { preferences_mergerModelViewDisplayFrontPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayModelBoardLimits
//····················································································································

@MainActor let preferences_mergerModelViewDisplayModelBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayModelBoardLimits)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayModelBoardLimits : Bool {
  get { return preferences_mergerModelViewDisplayModelBoardLimits_property.propval }
  set { preferences_mergerModelViewDisplayModelBoardLimits_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentNames
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontComponentNames : Bool {
  get { return preferences_mergerModelViewDisplayFrontComponentNames_property.propval }
  set { preferences_mergerModelViewDisplayFrontComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentValues
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontComponentValues : Bool {
  get { return preferences_mergerModelViewDisplayFrontComponentValues_property.propval }
  set { preferences_mergerModelViewDisplayFrontComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPackages
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontPackages : Bool {
  get { return preferences_mergerModelViewDisplayFrontPackages_property.propval }
  set { preferences_mergerModelViewDisplayFrontPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendTexts
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontLegendTexts : Bool {
  get { return preferences_mergerModelViewDisplayFrontLegendTexts_property.propval }
  set { preferences_mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontTracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontTracks : Bool {
  get { return preferences_mergerModelViewDisplayFrontTracks_property.propval }
  set { preferences_mergerModelViewDisplayFrontTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayInner1Tracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayInner1Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner1Tracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayInner1Tracks : Bool {
  get { return preferences_mergerModelViewDisplayInner1Tracks_property.propval }
  set { preferences_mergerModelViewDisplayInner1Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayInner2Tracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayInner2Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner2Tracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayInner2Tracks : Bool {
  get { return preferences_mergerModelViewDisplayInner2Tracks_property.propval }
  set { preferences_mergerModelViewDisplayInner2Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayInner3Tracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayInner3Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner3Tracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayInner3Tracks : Bool {
  get { return preferences_mergerModelViewDisplayInner3Tracks_property.propval }
  set { preferences_mergerModelViewDisplayInner3Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayInner4Tracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayInner4Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner4Tracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayInner4Tracks : Bool {
  get { return preferences_mergerModelViewDisplayInner4Tracks_property.propval }
  set { preferences_mergerModelViewDisplayInner4Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLayoutTexts
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontLayoutTexts : Bool {
  get { return preferences_mergerModelViewDisplayFrontLayoutTexts_property.propval }
  set { preferences_mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPads
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackPads)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackPads : Bool {
  get { return preferences_mergerModelViewDisplayBackPads_property.propval }
  set { preferences_mergerModelViewDisplayBackPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayTraversingPads
//····················································································································

@MainActor let preferences_mergerModelViewDisplayTraversingPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayTraversingPads)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayTraversingPads : Bool {
  get { return preferences_mergerModelViewDisplayTraversingPads_property.propval }
  set { preferences_mergerModelViewDisplayTraversingPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentNames
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackComponentNames : Bool {
  get { return preferences_mergerModelViewDisplayBackComponentNames_property.propval }
  set { preferences_mergerModelViewDisplayBackComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentValues
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackComponentValues : Bool {
  get { return preferences_mergerModelViewDisplayBackComponentValues_property.propval }
  set { preferences_mergerModelViewDisplayBackComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendTexts
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackLegendTexts : Bool {
  get { return preferences_mergerModelViewDisplayBackLegendTexts_property.propval }
  set { preferences_mergerModelViewDisplayBackLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPackages
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackPackages : Bool {
  get { return preferences_mergerModelViewDisplayBackPackages_property.propval }
  set { preferences_mergerModelViewDisplayBackPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackTracks
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackTracks : Bool {
  get { return preferences_mergerModelViewDisplayBackTracks_property.propval }
  set { preferences_mergerModelViewDisplayBackTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLayoutTexts
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackLayoutTexts : Bool {
  get { return preferences_mergerModelViewDisplayBackLayoutTexts_property.propval }
  set { preferences_mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendLines
//····················································································································

@MainActor let preferences_mergerModelViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayFrontLegendLines : Bool {
  get { return preferences_mergerModelViewDisplayFrontLegendLines_property.propval }
  set { preferences_mergerModelViewDisplayFrontLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendLines
//····················································································································

@MainActor let preferences_mergerModelViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

//····················································································································

@MainActor var preferences_mergerModelViewDisplayBackLegendLines : Bool {
  get { return preferences_mergerModelViewDisplayBackLegendLines_property.propval }
  set { preferences_mergerModelViewDisplayBackLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewHorizontalFlip
//····················································································································

@MainActor let preferences_mergerBoardViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

//····················································································································

@MainActor var preferences_mergerBoardViewHorizontalFlip : Bool {
  get { return preferences_mergerBoardViewHorizontalFlip_property.propval }
  set { preferences_mergerBoardViewHorizontalFlip_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewVerticalFlip
//····················································································································

@MainActor let preferences_mergerBoardViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewVerticalFlip)

//····················································································································

@MainActor var preferences_mergerBoardViewVerticalFlip : Bool {
  get { return preferences_mergerBoardViewVerticalFlip_property.propval }
  set { preferences_mergerBoardViewVerticalFlip_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayHoles
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayHoles)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayHoles : Bool {
  get { return preferences_mergerBoardViewDisplayHoles_property.propval }
  set { preferences_mergerBoardViewDisplayHoles_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayVias
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayVias)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayVias : Bool {
  get { return preferences_mergerBoardViewDisplayVias_property.propval }
  set { preferences_mergerBoardViewDisplayVias_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPads
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontPads : Bool {
  get { return preferences_mergerBoardViewDisplayFrontPads_property.propval }
  set { preferences_mergerBoardViewDisplayFrontPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayTraversingPads
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayTraversingPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayTraversingPads)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayTraversingPads : Bool {
  get { return preferences_mergerBoardViewDisplayTraversingPads_property.propval }
  set { preferences_mergerBoardViewDisplayTraversingPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayModelBoardsLimits
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayModelBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayModelBoardsLimits)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayModelBoardsLimits : Bool {
  get { return preferences_mergerBoardViewDisplayModelBoardsLimits_property.propval }
  set { preferences_mergerBoardViewDisplayModelBoardsLimits_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBoardLimits
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBoardLimits : Bool {
  get { return preferences_mergerBoardViewDisplayBoardLimits_property.propval }
  set { preferences_mergerBoardViewDisplayBoardLimits_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentNames
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontComponentNames : Bool {
  get { return preferences_mergerBoardViewDisplayFrontComponentNames_property.propval }
  set { preferences_mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentValues
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontComponentValues : Bool {
  get { return preferences_mergerBoardViewDisplayFrontComponentValues_property.propval }
  set { preferences_mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPackages
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontPackages : Bool {
  get { return preferences_mergerBoardViewDisplayFrontPackages_property.propval }
  set { preferences_mergerBoardViewDisplayFrontPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendTexts
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontLegendTexts : Bool {
  get { return preferences_mergerBoardViewDisplayFrontLegendTexts_property.propval }
  set { preferences_mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontTracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontTracks : Bool {
  get { return preferences_mergerBoardViewDisplayFrontTracks_property.propval }
  set { preferences_mergerBoardViewDisplayFrontTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner1Tracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayInner1Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner1Tracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayInner1Tracks : Bool {
  get { return preferences_mergerBoardViewDisplayInner1Tracks_property.propval }
  set { preferences_mergerBoardViewDisplayInner1Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner2Tracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayInner2Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner2Tracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayInner2Tracks : Bool {
  get { return preferences_mergerBoardViewDisplayInner2Tracks_property.propval }
  set { preferences_mergerBoardViewDisplayInner2Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner3Tracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayInner3Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner3Tracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayInner3Tracks : Bool {
  get { return preferences_mergerBoardViewDisplayInner3Tracks_property.propval }
  set { preferences_mergerBoardViewDisplayInner3Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner4Tracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayInner4Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner4Tracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayInner4Tracks : Bool {
  get { return preferences_mergerBoardViewDisplayInner4Tracks_property.propval }
  set { preferences_mergerBoardViewDisplayInner4Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontLayoutTexts : Bool {
  get { return preferences_mergerBoardViewDisplayFrontLayoutTexts_property.propval }
  set { preferences_mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPads
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackPads : Bool {
  get { return preferences_mergerBoardViewDisplayBackPads_property.propval }
  set { preferences_mergerBoardViewDisplayBackPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentNames
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackComponentNames : Bool {
  get { return preferences_mergerBoardViewDisplayBackComponentNames_property.propval }
  set { preferences_mergerBoardViewDisplayBackComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentValues
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackComponentValues : Bool {
  get { return preferences_mergerBoardViewDisplayBackComponentValues_property.propval }
  set { preferences_mergerBoardViewDisplayBackComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendTexts
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackLegendTexts : Bool {
  get { return preferences_mergerBoardViewDisplayBackLegendTexts_property.propval }
  set { preferences_mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPackages
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackPackages : Bool {
  get { return preferences_mergerBoardViewDisplayBackPackages_property.propval }
  set { preferences_mergerBoardViewDisplayBackPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackTracks
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackTracks : Bool {
  get { return preferences_mergerBoardViewDisplayBackTracks_property.propval }
  set { preferences_mergerBoardViewDisplayBackTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLayoutTexts
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackLayoutTexts : Bool {
  get { return preferences_mergerBoardViewDisplayBackLayoutTexts_property.propval }
  set { preferences_mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendLines
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayFrontLegendLines : Bool {
  get { return preferences_mergerBoardViewDisplayFrontLegendLines_property.propval }
  set { preferences_mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendLines
//····················································································································

@MainActor let preferences_mergerBoardViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

//····················································································································

@MainActor var preferences_mergerBoardViewDisplayBackLegendLines : Bool {
  get { return preferences_mergerBoardViewDisplayBackLegendLines_property.propval }
  set { preferences_mergerBoardViewDisplayBackLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorHoles
//····················································································································

@MainActor let preferences_mergerColorHoles_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mergerColorHoles)

//····················································································································

@MainActor var preferences_mergerColorHoles : NSColor {
  get { return preferences_mergerColorHoles_property.propval }
  set { preferences_mergerColorHoles_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorVias
//····················································································································

@MainActor let preferences_mergerColorVias_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mergerColorVias)

//····················································································································

@MainActor var preferences_mergerColorVias : NSColor {
  get { return preferences_mergerColorVias_property.propval }
  set { preferences_mergerColorVias_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontPads
//····················································································································

@MainActor let preferences_mergerColorFrontPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

//····················································································································

@MainActor var preferences_mergerColorFrontPads : NSColor {
  get { return preferences_mergerColorFrontPads_property.propval }
  set { preferences_mergerColorFrontPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBoardLimits
//····················································································································

@MainActor let preferences_mergerColorBoardLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

//····················································································································

@MainActor var preferences_mergerColorBoardLimits : NSColor {
  get { return preferences_mergerColorBoardLimits_property.propval }
  set { preferences_mergerColorBoardLimits_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorInternalBoardsLimits
//····················································································································

@MainActor let preferences_mergerColorInternalBoardsLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

//····················································································································

@MainActor var preferences_mergerColorInternalBoardsLimits : NSColor {
  get { return preferences_mergerColorInternalBoardsLimits_property.propval }
  set { preferences_mergerColorInternalBoardsLimits_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontComponentNames
//····················································································································

@MainActor let preferences_mergerColorFrontComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

//····················································································································

@MainActor var preferences_mergerColorFrontComponentNames : NSColor {
  get { return preferences_mergerColorFrontComponentNames_property.propval }
  set { preferences_mergerColorFrontComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontComponentValues
//····················································································································

@MainActor let preferences_mergerColorFrontComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

//····················································································································

@MainActor var preferences_mergerColorFrontComponentValues : NSColor {
  get { return preferences_mergerColorFrontComponentValues_property.propval }
  set { preferences_mergerColorFrontComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontPackages
//····················································································································

@MainActor let preferences_mergerColorFrontPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

//····················································································································

@MainActor var preferences_mergerColorFrontPackages : NSColor {
  get { return preferences_mergerColorFrontPackages_property.propval }
  set { preferences_mergerColorFrontPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontLegendTexts
//····················································································································

@MainActor let preferences_mergerColorFrontLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

//····················································································································

@MainActor var preferences_mergerColorFrontLegendTexts : NSColor {
  get { return preferences_mergerColorFrontLegendTexts_property.propval }
  set { preferences_mergerColorFrontLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontTracks
//····················································································································

@MainActor let preferences_mergerColorFrontTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

//····················································································································

@MainActor var preferences_mergerColorFrontTracks : NSColor {
  get { return preferences_mergerColorFrontTracks_property.propval }
  set { preferences_mergerColorFrontTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorInner1Tracks
//····················································································································

@MainActor let preferences_mergerColorInner1Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorInner1Tracks)

//····················································································································

@MainActor var preferences_mergerColorInner1Tracks : NSColor {
  get { return preferences_mergerColorInner1Tracks_property.propval }
  set { preferences_mergerColorInner1Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorInner2Tracks
//····················································································································

@MainActor let preferences_mergerColorInner2Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorInner2Tracks)

//····················································································································

@MainActor var preferences_mergerColorInner2Tracks : NSColor {
  get { return preferences_mergerColorInner2Tracks_property.propval }
  set { preferences_mergerColorInner2Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorInner3Tracks
//····················································································································

@MainActor let preferences_mergerColorInner3Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInner3Tracks)

//····················································································································

@MainActor var preferences_mergerColorInner3Tracks : NSColor {
  get { return preferences_mergerColorInner3Tracks_property.propval }
  set { preferences_mergerColorInner3Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorInner4Tracks
//····················································································································

@MainActor let preferences_mergerColorInner4Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.purple, prefKey: Preferences_mergerColorInner4Tracks)

//····················································································································

@MainActor var preferences_mergerColorInner4Tracks : NSColor {
  get { return preferences_mergerColorInner4Tracks_property.propval }
  set { preferences_mergerColorInner4Tracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontLayoutTexts
//····················································································································

@MainActor let preferences_mergerColorFrontLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

//····················································································································

@MainActor var preferences_mergerColorFrontLayoutTexts : NSColor {
  get { return preferences_mergerColorFrontLayoutTexts_property.propval }
  set { preferences_mergerColorFrontLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackPads
//····················································································································

@MainActor let preferences_mergerColorBackPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorBackPads)

//····················································································································

@MainActor var preferences_mergerColorBackPads : NSColor {
  get { return preferences_mergerColorBackPads_property.propval }
  set { preferences_mergerColorBackPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorTraversingPads
//····················································································································

@MainActor let preferences_mergerColorTraversingPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorTraversingPads)

//····················································································································

@MainActor var preferences_mergerColorTraversingPads : NSColor {
  get { return preferences_mergerColorTraversingPads_property.propval }
  set { preferences_mergerColorTraversingPads_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackComponentNames
//····················································································································

@MainActor let preferences_mergerColorBackComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

//····················································································································

@MainActor var preferences_mergerColorBackComponentNames : NSColor {
  get { return preferences_mergerColorBackComponentNames_property.propval }
  set { preferences_mergerColorBackComponentNames_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackComponentValues
//····················································································································

@MainActor let preferences_mergerColorBackComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

//····················································································································

@MainActor var preferences_mergerColorBackComponentValues : NSColor {
  get { return preferences_mergerColorBackComponentValues_property.propval }
  set { preferences_mergerColorBackComponentValues_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackLegendTexts
//····················································································································

@MainActor let preferences_mergerColorBackLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

//····················································································································

@MainActor var preferences_mergerColorBackLegendTexts : NSColor {
  get { return preferences_mergerColorBackLegendTexts_property.propval }
  set { preferences_mergerColorBackLegendTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackPackages
//····················································································································

@MainActor let preferences_mergerColorBackPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

//····················································································································

@MainActor var preferences_mergerColorBackPackages : NSColor {
  get { return preferences_mergerColorBackPackages_property.propval }
  set { preferences_mergerColorBackPackages_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackTracks
//····················································································································

@MainActor let preferences_mergerColorBackTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackTracks)

//····················································································································

@MainActor var preferences_mergerColorBackTracks : NSColor {
  get { return preferences_mergerColorBackTracks_property.propval }
  set { preferences_mergerColorBackTracks_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackLayoutTexts
//····················································································································

@MainActor let preferences_mergerColorBackLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

//····················································································································

@MainActor var preferences_mergerColorBackLayoutTexts : NSColor {
  get { return preferences_mergerColorBackLayoutTexts_property.propval }
  set { preferences_mergerColorBackLayoutTexts_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorFrontLegendLines
//····················································································································

@MainActor let preferences_mergerColorFrontLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

//····················································································································

@MainActor var preferences_mergerColorFrontLegendLines : NSColor {
  get { return preferences_mergerColorFrontLegendLines_property.propval }
  set { preferences_mergerColorFrontLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackLegendLines
//····················································································································

@MainActor let preferences_mergerColorBackLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

//····················································································································

@MainActor var preferences_mergerColorBackLegendLines : NSColor {
  get { return preferences_mergerColorBackLegendLines_property.propval }
  set { preferences_mergerColorBackLegendLines_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mergerColorBackground
//····················································································································

@MainActor let preferences_mergerColorBackground_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

//····················································································································

@MainActor var preferences_mergerColorBackground : NSColor {
  get { return preferences_mergerColorBackground_property.propval }
  set { preferences_mergerColorBackground_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: artworkDialogFilterString
//····················································································································

@MainActor let preferences_artworkDialogFilterString_property = EBPreferencesProperty_String (defaultValue: "", prefKey: Preferences_artworkDialogFilterString)

//····················································································································

@MainActor var preferences_artworkDialogFilterString : String {
  get { return preferences_artworkDialogFilterString_property.propval }
  set { preferences_artworkDialogFilterString_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mSelectedPrefsPage
//····················································································································

@MainActor let preferences_mSelectedPrefsPage_property = EBPreferencesProperty_Int (defaultValue: 0, prefKey: Preferences_mSelectedPrefsPage)

//····················································································································

@MainActor var preferences_mSelectedPrefsPage : Int {
  get { return preferences_mSelectedPrefsPage_property.propval }
  set { preferences_mSelectedPrefsPage_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: showDebugMenu
//····················································································································

@MainActor let preferences_showDebugMenu_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_showDebugMenu)

//····················································································································

@MainActor var preferences_showDebugMenu : Bool {
  get { return preferences_showDebugMenu_property.propval }
  set { preferences_showDebugMenu_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: selectionHiliteColor
//····················································································································

@MainActor let preferences_selectionHiliteColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

//····················································································································

@MainActor var preferences_selectionHiliteColor : NSColor {
  get { return preferences_selectionHiliteColor_property.propval }
  set { preferences_selectionHiliteColor_property.setProp (newValue) }
}

//····················································································································
//   To many property: additionnalLibraryArray
//····················································································································

@MainActor let preferences_additionnalLibraryArray_property = PreferencesArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

//····················································································································

@MainActor var preferences_additionnalLibraryArray : EBReferenceArray <CanariLibraryEntry> {
  get { return preferences_additionnalLibraryArray_property.propval }
  set { preferences_additionnalLibraryArray_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: pinNameFont
//····················································································································

@MainActor let preferences_pinNameFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

//····················································································································

@MainActor var preferences_pinNameFont : NSFont {
  get { return preferences_pinNameFont_property.propval }
  set { preferences_pinNameFont_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mFreeRouterGuiDefaultFileContents
//····················································································································

@MainActor let preferences_mFreeRouterGuiDefaultFileContents_property = EBPreferencesProperty_String (defaultValue: "", prefKey: Preferences_mFreeRouterGuiDefaultFileContents)

//····················································································································

@MainActor var preferences_mFreeRouterGuiDefaultFileContents : String {
  get { return preferences_mFreeRouterGuiDefaultFileContents_property.propval }
  set { preferences_mFreeRouterGuiDefaultFileContents_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: sampleStringSize
//····················································································································

@MainActor let preferences_sampleStringSize_property = EBPreferencesProperty_Double (defaultValue: 24, prefKey: Preferences_sampleStringSize)

//····················································································································

@MainActor var preferences_sampleStringSize : Double {
  get { return preferences_sampleStringSize_property.propval }
  set { preferences_sampleStringSize_property.setProp (newValue) }
}

//····················································································································
//   Atomic property: mLastSystemLibraryCheckTime
//····················································································································

@MainActor let preferences_mLastSystemLibraryCheckTime_property = EBPreferencesProperty_Date (defaultValue: Date.distantPast, prefKey: Preferences_mLastSystemLibraryCheckTime)

//····················································································································

@MainActor var preferences_mLastSystemLibraryCheckTime : Date {
  get { return preferences_mLastSystemLibraryCheckTime_property.propval }
  set { preferences_mLastSystemLibraryCheckTime_property.setProp (newValue) }
}

//····················································································································
//   Table View controller: userLibraryArrayController
//····················································································································

@MainActor let preferences_userLibraryArrayController = Controller_Preferences_userLibraryArrayController ()

//····················································································································
//   Transient property: mValueRevealInFinder_packages
//····················································································································

@MainActor let preferences_mValueRevealInFinder_packages_property = EBTransientProperty_StringArray ()

//····················································································································

@MainActor var preferences_mValueRevealInFinder_packages : StringArray? {
  return preferences_mValueRevealInFinder_packages_property.optionalValue
}

//····················································································································
//   Transient property: mValueRevealInFinder_devices
//····················································································································

@MainActor let preferences_mValueRevealInFinder_devices_property = EBTransientProperty_StringArray ()

//····················································································································

@MainActor var preferences_mValueRevealInFinder_devices : StringArray? {
  return preferences_mValueRevealInFinder_devices_property.optionalValue
}

//····················································································································
//   Transient property: mValueRevealInFinder_fonts
//····················································································································

@MainActor let preferences_mValueRevealInFinder_fonts_property = EBTransientProperty_StringArray ()

//····················································································································

@MainActor var preferences_mValueRevealInFinder_fonts : StringArray? {
  return preferences_mValueRevealInFinder_fonts_property.optionalValue
}

//····················································································································
//   Transient property: mValueRevealInFinder_artworks
//····················································································································

@MainActor let preferences_mValueRevealInFinder_artworks_property = EBTransientProperty_StringArray ()

//····················································································································

@MainActor var preferences_mValueRevealInFinder_artworks : StringArray? {
  return preferences_mValueRevealInFinder_artworks_property.optionalValue
}

//····················································································································
//   Transient property: mValueRevealInFinder_symbols
//····················································································································

@MainActor let preferences_mValueRevealInFinder_symbols_property = EBTransientProperty_StringArray ()

//····················································································································

@MainActor var preferences_mValueRevealInFinder_symbols : StringArray? {
  return preferences_mValueRevealInFinder_symbols_property.optionalValue
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

