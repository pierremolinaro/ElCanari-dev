//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

var g_Preferences : Preferences? = nil

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let Preferences_warningMessageColor = "Preferences:warningMessageColor"
let Preferences_successMessageColor = "Preferences:successMessageColor"
let Preferences_mAutoLayoutStyle = "Preferences:mAutoLayoutStyle"
let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
let Preferences_symbolColor = "Preferences:symbolColor"
let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
let Preferences_packageColor = "Preferences:packageColor"
let Preferences_frontSidePadColor = "Preferences:frontSidePadColor"
let Preferences_displayPackageFrontSidePads = "Preferences:displayPackageFrontSidePads"
let Preferences_backSidePadColor = "Preferences:backSidePadColor"
let Preferences_displayPackageBackSidePads = "Preferences:displayPackageBackSidePads"
let Preferences_padNumberColor = "Preferences:padNumberColor"
let Preferences_padNumberFont = "Preferences:padNumberFont"
let Preferences_showPadNumber = "Preferences:showPadNumber"
let Preferences_packageGuideColor = "Preferences:packageGuideColor"
let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
let Preferences_dimensionFont = "Preferences:dimensionFont"
let Preferences_padZoneColor = "Preferences:padZoneColor"
let Preferences_padZoneFont = "Preferences:padZoneFont"
let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
let Preferences_mSymbolAndPackageGridDotColorForDevice = "Preferences:mSymbolAndPackageGridDotColorForDevice"
let Preferences_mSymbolAndPackageGridLineColorForDevice = "Preferences:mSymbolAndPackageGridLineColorForDevice"
let Preferences_mSymbolAndPackageBackgroundColorForDevice = "Preferences:mSymbolAndPackageBackgroundColorForDevice"
let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
let Preferences_mFrontSidePadColorForDevice = "Preferences:mFrontSidePadColorForDevice"
let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
let Preferences_schematicBackColor = "Preferences:schematicBackColor"
let Preferences_schematicFrameColor = "Preferences:schematicFrameColor"
let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
let Preferences_componentNameColorForSchematic = "Preferences:componentNameColorForSchematic"
let Preferences_componentNameFontForSchematic = "Preferences:componentNameFontForSchematic"
let Preferences_componentValueColorForSchematic = "Preferences:componentValueColorForSchematic"
let Preferences_componentValueFontForSchematic = "Preferences:componentValueFontForSchematic"
let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
let Preferences_crossColorGridForBoard = "Preferences:crossColorGridForBoard"
let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
let Preferences_drawErrorBackgroundForBoard = "Preferences:drawErrorBackgroundForBoard"
let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
let Preferences_drawWarningBackgroundForBoard = "Preferences:drawWarningBackgroundForBoard"
let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
let Preferences_displayFrontRestrictRectangles = "Preferences:displayFrontRestrictRectangles"
let Preferences_frontSideRestrictRectangleColorForBoard = "Preferences:frontSideRestrictRectangleColorForBoard"
let Preferences_displayBackRestrictRectangles = "Preferences:displayBackRestrictRectangles"
let Preferences_backSideRestrictRectangleColorForBoard = "Preferences:backSideRestrictRectangleColorForBoard"
let Preferences_displayFrontLegendForBoard = "Preferences:displayFrontLegendForBoard"
let Preferences_frontSideLegendColorForBoard = "Preferences:frontSideLegendColorForBoard"
let Preferences_displayFrontLayoutForBoard = "Preferences:displayFrontLayoutForBoard"
let Preferences_frontSideLayoutColorForBoard = "Preferences:frontSideLayoutColorForBoard"
let Preferences_displayBackLayoutForBoard = "Preferences:displayBackLayoutForBoard"
let Preferences_backSideLayoutColorForBoard = "Preferences:backSideLayoutColorForBoard"
let Preferences_displayInner1LayoutForBoard = "Preferences:displayInner1LayoutForBoard"
let Preferences_inner1LayoutColorForBoard = "Preferences:inner1LayoutColorForBoard"
let Preferences_displayInner2LayoutForBoard = "Preferences:displayInner2LayoutForBoard"
let Preferences_inner2LayoutColorForBoard = "Preferences:inner2LayoutColorForBoard"
let Preferences_displayInner3LayoutForBoard = "Preferences:displayInner3LayoutForBoard"
let Preferences_inner3LayoutColorForBoard = "Preferences:inner3LayoutColorForBoard"
let Preferences_displayInner4LayoutForBoard = "Preferences:displayInner4LayoutForBoard"
let Preferences_inner4LayoutColorForBoard = "Preferences:inner4LayoutColorForBoard"
let Preferences_displayBackLegendForBoard = "Preferences:displayBackLegendForBoard"
let Preferences_backSideLegendColorForBoard = "Preferences:backSideLegendColorForBoard"
let Preferences_displayFrontPadsForBoard = "Preferences:displayFrontPadsForBoard"
let Preferences_frontSidePadColorForBoard = "Preferences:frontSidePadColorForBoard"
let Preferences_displayBackPadsForBoard = "Preferences:displayBackPadsForBoard"
let Preferences_backSidePadColorForBoard = "Preferences:backSidePadColorForBoard"
let Preferences_displayPadNumbersForBoard = "Preferences:displayPadNumbersForBoard"
let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
let Preferences_packageDrawingWidthMultpliedByTenForBoard = "Preferences:packageDrawingWidthMultpliedByTenForBoard"
let Preferences_mShowRotationKnobInBoard = "Preferences:mShowRotationKnobInBoard"
let Preferences_sampleString = "Preferences:sampleString"
let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
let Preferences_mergerModelViewDisplayInternalBoardsLimits = "Preferences:mergerModelViewDisplayInternalBoardsLimits"
let Preferences_mergerModelViewDisplayBoardLimits = "Preferences:mergerModelViewDisplayBoardLimits"
let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
let Preferences_mergerModelViewDisplayInner1Tracks = "Preferences:mergerModelViewDisplayInner1Tracks"
let Preferences_mergerModelViewDisplayInner2Tracks = "Preferences:mergerModelViewDisplayInner2Tracks"
let Preferences_mergerModelViewDisplayInner3Tracks = "Preferences:mergerModelViewDisplayInner3Tracks"
let Preferences_mergerModelViewDisplayInner4Tracks = "Preferences:mergerModelViewDisplayInner4Tracks"
let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
let Preferences_mergerModelViewDisplayTraversingPads = "Preferences:mergerModelViewDisplayTraversingPads"
let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
let Preferences_mergerBoardViewDisplayTraversingPads = "Preferences:mergerBoardViewDisplayTraversingPads"
let Preferences_mergerBoardViewDisplayInternalBoardsLimits = "Preferences:mergerBoardViewDisplayInternalBoardsLimits"
let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
let Preferences_mergerBoardViewDisplayInner1Tracks = "Preferences:mergerBoardViewDisplayInner1Tracks"
let Preferences_mergerBoardViewDisplayInner2Tracks = "Preferences:mergerBoardViewDisplayInner2Tracks"
let Preferences_mergerBoardViewDisplayInner3Tracks = "Preferences:mergerBoardViewDisplayInner3Tracks"
let Preferences_mergerBoardViewDisplayInner4Tracks = "Preferences:mergerBoardViewDisplayInner4Tracks"
let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
let Preferences_mergerColorVias = "Preferences:mergerColorVias"
let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
let Preferences_mergerColorInner1Tracks = "Preferences:mergerColorInner1Tracks"
let Preferences_mergerColorInner2Tracks = "Preferences:mergerColorInner2Tracks"
let Preferences_mergerColorInner3Tracks = "Preferences:mergerColorInner3Tracks"
let Preferences_mergerColorInner4Tracks = "Preferences:mergerColorInner4Tracks"
let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
let Preferences_mergerColorTraversingPads = "Preferences:mergerColorTraversingPads"
let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
let Preferences_artworkDialogFilterString = "Preferences:artworkDialogFilterString"
let Preferences_errorMessageColor = "Preferences:errorMessageColor"
let Preferences_showDebugMenu = "Preferences:showDebugMenu"
let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
let Preferences_pinNameFont = "Preferences:pinNameFont"
let Preferences_mFreeRouterGuiDefaultFileContents = "Preferences:mFreeRouterGuiDefaultFileContents"
let Preferences_sampleStringSize = "Preferences:sampleStringSize"
let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//····················································································································
//   Atomic property: warningMessageColor
//····················································································································

  let preferences_warningMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningMessageColor)

//····················································································································

  var preferences_warningMessageColor : NSColor {
    get { return preferences_warningMessageColor_property.propval }
    set { preferences_warningMessageColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: successMessageColor
//····················································································································

  let preferences_successMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_successMessageColor)

//····················································································································

  var preferences_successMessageColor : NSColor {
    get { return preferences_successMessageColor_property.propval }
    set { preferences_successMessageColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mAutoLayoutStyle
//····················································································································

  let preferences_mAutoLayoutStyle_property = EBPreferencesProperty_AutoLayoutUserInterfaceStyle (defaultValue: AutoLayoutUserInterfaceStyle.roundedBezel, prefKey: Preferences_mAutoLayoutStyle)

//····················································································································

  var preferences_mAutoLayoutStyle : AutoLayoutUserInterfaceStyle {
    get { return preferences_mAutoLayoutStyle_property.propval }
    set { preferences_mAutoLayoutStyle_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: selectionHiliteColor
//····················································································································

  let preferences_selectionHiliteColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

//····················································································································

  var preferences_selectionHiliteColor : NSColor {
    get { return preferences_selectionHiliteColor_property.propval }
    set { preferences_selectionHiliteColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: usesUserLibrary
//····················································································································

  let preferences_usesUserLibrary_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_usesUserLibrary)

//····················································································································

  var preferences_usesUserLibrary : Bool {
    get { return preferences_usesUserLibrary_property.propval }
    set { preferences_usesUserLibrary_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolColor
//····················································································································

  let preferences_symbolColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColor)

//····················································································································

  var preferences_symbolColor : NSColor {
    get { return preferences_symbolColor_property.propval }
    set { preferences_symbolColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: crossColorOfSymbolGrid
//····················································································································

  let preferences_crossColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

//····················································································································

  var preferences_crossColorOfSymbolGrid : NSColor {
    get { return preferences_crossColorOfSymbolGrid_property.propval }
    set { preferences_crossColorOfSymbolGrid_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: lineColorOfSymbolGrid
//····················································································································

  let preferences_lineColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

//····················································································································

  var preferences_lineColorOfSymbolGrid : NSColor {
    get { return preferences_lineColorOfSymbolGrid_property.propval }
    set { preferences_lineColorOfSymbolGrid_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolBackgroundColor
//····················································································································

  let preferences_symbolBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_symbolBackgroundColor)

//····················································································································

  var preferences_symbolBackgroundColor : NSColor {
    get { return preferences_symbolBackgroundColor_property.propval }
    set { preferences_symbolBackgroundColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTen
//····················································································································

  let preferences_symbolDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

//····················································································································

  var preferences_symbolDrawingWidthMultipliedByTen : Int {
    get { return preferences_symbolDrawingWidthMultipliedByTen_property.propval }
    set { preferences_symbolDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: crossColorOfPackageGrid
//····················································································································

  let preferences_crossColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

//····················································································································

  var preferences_crossColorOfPackageGrid : NSColor {
    get { return preferences_crossColorOfPackageGrid_property.propval }
    set { preferences_crossColorOfPackageGrid_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: lineColorOfPackageGrid
//····················································································································

  let preferences_lineColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

//····················································································································

  var preferences_lineColorOfPackageGrid : NSColor {
    get { return preferences_lineColorOfPackageGrid_property.propval }
    set { preferences_lineColorOfPackageGrid_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageBackgroundColor
//····················································································································

  let preferences_packageBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_packageBackgroundColor)

//····················································································································

  var preferences_packageBackgroundColor : NSColor {
    get { return preferences_packageBackgroundColor_property.propval }
    set { preferences_packageBackgroundColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageColor
//····················································································································

  let preferences_packageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_packageColor)

//····················································································································

  var preferences_packageColor : NSColor {
    get { return preferences_packageColor_property.propval }
    set { preferences_packageColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: frontSidePadColor
//····················································································································

  let preferences_frontSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColor)

//····················································································································

  var preferences_frontSidePadColor : NSColor {
    get { return preferences_frontSidePadColor_property.propval }
    set { preferences_frontSidePadColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayPackageFrontSidePads
//····················································································································

  let preferences_displayPackageFrontSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageFrontSidePads)

//····················································································································

  var preferences_displayPackageFrontSidePads : Bool {
    get { return preferences_displayPackageFrontSidePads_property.propval }
    set { preferences_displayPackageFrontSidePads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: backSidePadColor
//····················································································································

  let preferences_backSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColor)

//····················································································································

  var preferences_backSidePadColor : NSColor {
    get { return preferences_backSidePadColor_property.propval }
    set { preferences_backSidePadColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayPackageBackSidePads
//····················································································································

  let preferences_displayPackageBackSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageBackSidePads)

//····················································································································

  var preferences_displayPackageBackSidePads : Bool {
    get { return preferences_displayPackageBackSidePads_property.propval }
    set { preferences_displayPackageBackSidePads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padNumberColor
//····················································································································

  let preferences_padNumberColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColor)

//····················································································································

  var preferences_padNumberColor : NSColor {
    get { return preferences_padNumberColor_property.propval }
    set { preferences_padNumberColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padNumberFont
//····················································································································

  let preferences_padNumberFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

//····················································································································

  var preferences_padNumberFont : NSFont {
    get { return preferences_padNumberFont_property.propval }
    set { preferences_padNumberFont_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: showPadNumber
//····················································································································

  let preferences_showPadNumber_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showPadNumber)

//····················································································································

  var preferences_showPadNumber : Bool {
    get { return preferences_showPadNumber_property.propval }
    set { preferences_showPadNumber_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageGuideColor
//····················································································································

  let preferences_packageGuideColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_packageGuideColor)

//····················································································································

  var preferences_packageGuideColor : NSColor {
    get { return preferences_packageGuideColor_property.propval }
    set { preferences_packageGuideColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageDimensionColor
//····················································································································

  let preferences_packageDimensionColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_packageDimensionColor)

//····················································································································

  var preferences_packageDimensionColor : NSColor {
    get { return preferences_packageDimensionColor_property.propval }
    set { preferences_packageDimensionColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: dimensionFont
//····················································································································

  let preferences_dimensionFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

//····················································································································

  var preferences_dimensionFont : NSFont {
    get { return preferences_dimensionFont_property.propval }
    set { preferences_dimensionFont_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padZoneColor
//····················································································································

  let preferences_padZoneColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.magenta, prefKey: Preferences_padZoneColor)

//····················································································································

  var preferences_padZoneColor : NSColor {
    get { return preferences_padZoneColor_property.propval }
    set { preferences_padZoneColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padZoneFont
//····················································································································

  let preferences_padZoneFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

//····················································································································

  var preferences_padZoneFont : NSFont {
    get { return preferences_padZoneFont_property.propval }
    set { preferences_padZoneFont_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageDrawingWidthMultipliedByTen
//····················································································································

  let preferences_packageDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

//····················································································································

  var preferences_packageDrawingWidthMultipliedByTen : Int {
    get { return preferences_packageDrawingWidthMultipliedByTen_property.propval }
    set { preferences_packageDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mSymbolAndPackageGridDotColorForDevice
//····················································································································

  let preferences_mSymbolAndPackageGridDotColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_mSymbolAndPackageGridDotColorForDevice)

//····················································································································

  var preferences_mSymbolAndPackageGridDotColorForDevice : NSColor {
    get { return preferences_mSymbolAndPackageGridDotColorForDevice_property.propval }
    set { preferences_mSymbolAndPackageGridDotColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mSymbolAndPackageGridLineColorForDevice
//····················································································································

  let preferences_mSymbolAndPackageGridLineColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mSymbolAndPackageGridLineColorForDevice)

//····················································································································

  var preferences_mSymbolAndPackageGridLineColorForDevice : NSColor {
    get { return preferences_mSymbolAndPackageGridLineColorForDevice_property.propval }
    set { preferences_mSymbolAndPackageGridLineColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mSymbolAndPackageBackgroundColorForDevice
//····················································································································

  let preferences_mSymbolAndPackageBackgroundColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mSymbolAndPackageBackgroundColorForDevice)

//····················································································································

  var preferences_mSymbolAndPackageBackgroundColorForDevice : NSColor {
    get { return preferences_mSymbolAndPackageBackgroundColorForDevice_property.propval }
    set { preferences_mSymbolAndPackageBackgroundColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mPackageColorForDevice
//····················································································································

  let preferences_mPackageColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

//····················································································································

  var preferences_mPackageColorForDevice : NSColor {
    get { return preferences_mPackageColorForDevice_property.propval }
    set { preferences_mPackageColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mFrontSidePadColorForDevice
//····················································································································

  let preferences_mFrontSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mFrontSidePadColorForDevice)

//····················································································································

  var preferences_mFrontSidePadColorForDevice : NSColor {
    get { return preferences_mFrontSidePadColorForDevice_property.propval }
    set { preferences_mFrontSidePadColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mBottomSidePadColorForDevice
//····················································································································

  let preferences_mBottomSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

//····················································································································

  var preferences_mBottomSidePadColorForDevice : NSColor {
    get { return preferences_mBottomSidePadColorForDevice_property.propval }
    set { preferences_mBottomSidePadColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mPadNumberColorForDevice
//····················································································································

  let preferences_mPadNumberColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

//····················································································································

  var preferences_mPadNumberColorForDevice : NSColor {
    get { return preferences_mPadNumberColorForDevice_property.propval }
    set { preferences_mPadNumberColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mPackageNameFontForDevice
//····················································································································

  let preferences_mPackageNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

//····················································································································

  var preferences_mPackageNameFontForDevice : NSFont {
    get { return preferences_mPackageNameFontForDevice_property.propval }
    set { preferences_mPackageNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mPadNumberFontForDevice
//····················································································································

  let preferences_mPadNumberFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

//····················································································································

  var preferences_mPadNumberFontForDevice : NSFont {
    get { return preferences_mPadNumberFontForDevice_property.propval }
    set { preferences_mPadNumberFontForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mSymbolColorForDevice
//····················································································································

  let preferences_mSymbolColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

//····················································································································

  var preferences_mSymbolColorForDevice : NSColor {
    get { return preferences_mSymbolColorForDevice_property.propval }
    set { preferences_mSymbolColorForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mSymbolNameFontForDevice
//····················································································································

  let preferences_mSymbolNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

//····················································································································

  var preferences_mSymbolNameFontForDevice : NSFont {
    get { return preferences_mSymbolNameFontForDevice_property.propval }
    set { preferences_mSymbolNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mPinNameFontForDevice
//····················································································································

  let preferences_mPinNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

//····················································································································

  var preferences_mPinNameFontForDevice : NSFont {
    get { return preferences_mPinNameFontForDevice_property.propval }
    set { preferences_mPinNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
//····················································································································

  let preferences_symbolDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

//····················································································································

  var preferences_symbolDrawingWidthForDeviceMultipliedByTen : Int {
    get { return preferences_symbolDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { preferences_symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
//····················································································································

  let preferences_packageDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

//····················································································································

  var preferences_packageDrawingWidthForDeviceMultipliedByTen : Int {
    get { return preferences_packageDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { preferences_packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: schematicBackColor
//····················································································································

  let preferences_schematicBackColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_schematicBackColor)

//····················································································································

  var preferences_schematicBackColor : NSColor {
    get { return preferences_schematicBackColor_property.propval }
    set { preferences_schematicBackColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: schematicFrameColor
//····················································································································

  let preferences_schematicFrameColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_schematicFrameColor)

//····················································································································

  var preferences_schematicFrameColor : NSColor {
    get { return preferences_schematicFrameColor_property.propval }
    set { preferences_schematicFrameColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: dotColorGridForSchematic
//····················································································································

  let preferences_dotColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

//····················································································································

  var preferences_dotColorGridForSchematic : NSColor {
    get { return preferences_dotColorGridForSchematic_property.propval }
    set { preferences_dotColorGridForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: lineColorGridForSchematic
//····················································································································

  let preferences_lineColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

//····················································································································

  var preferences_lineColorGridForSchematic : NSColor {
    get { return preferences_lineColorGridForSchematic_property.propval }
    set { preferences_lineColorGridForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolColorForUnplacedComponentsForSchematic
//····················································································································

  let preferences_symbolColorForUnplacedComponentsForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

//····················································································································

  var preferences_symbolColorForUnplacedComponentsForSchematic : NSColor {
    get { return preferences_symbolColorForUnplacedComponentsForSchematic_property.propval }
    set { preferences_symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolColorForSchematic
//····················································································································

  let preferences_symbolColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

//····················································································································

  var preferences_symbolColorForSchematic : NSColor {
    get { return preferences_symbolColorForSchematic_property.propval }
    set { preferences_symbolColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: componentNameColorForSchematic
//····················································································································

  let preferences_componentNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_componentNameColorForSchematic)

//····················································································································

  var preferences_componentNameColorForSchematic : NSColor {
    get { return preferences_componentNameColorForSchematic_property.propval }
    set { preferences_componentNameColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: componentNameFontForSchematic
//····················································································································

  let preferences_componentNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentNameFontForSchematic)

//····················································································································

  var preferences_componentNameFontForSchematic : NSFont {
    get { return preferences_componentNameFontForSchematic_property.propval }
    set { preferences_componentNameFontForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: componentValueColorForSchematic
//····················································································································

  let preferences_componentValueColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_componentValueColorForSchematic)

//····················································································································

  var preferences_componentValueColorForSchematic : NSColor {
    get { return preferences_componentValueColorForSchematic_property.propval }
    set { preferences_componentValueColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: componentValueFontForSchematic
//····················································································································

  let preferences_componentValueFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_componentValueFontForSchematic)

//····················································································································

  var preferences_componentValueFontForSchematic : NSFont {
    get { return preferences_componentValueFontForSchematic_property.propval }
    set { preferences_componentValueFontForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNameFontForSchematic
//····················································································································

  let preferences_pinNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

//····················································································································

  var preferences_pinNameFontForSchematic : NSFont {
    get { return preferences_pinNameFontForSchematic_property.propval }
    set { preferences_pinNameFontForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNameColorForSchematic
//····················································································································

  let preferences_pinNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

//····················································································································

  var preferences_pinNameColorForSchematic : NSColor {
    get { return preferences_pinNameColorForSchematic_property.propval }
    set { preferences_pinNameColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNumberFontForSchematic
//····················································································································

  let preferences_pinNumberFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

//····················································································································

  var preferences_pinNumberFontForSchematic : NSFont {
    get { return preferences_pinNumberFontForSchematic_property.propval }
    set { preferences_pinNumberFontForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNumberColorForSchematic
//····················································································································

  let preferences_pinNumberColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

//····················································································································

  var preferences_pinNumberColorForSchematic : NSColor {
    get { return preferences_pinNumberColorForSchematic_property.propval }
    set { preferences_pinNumberColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: connectionColorForSchematic
//····················································································································

  let preferences_connectionColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_connectionColorForSchematic)

//····················································································································

  var preferences_connectionColorForSchematic : NSColor {
    get { return preferences_connectionColorForSchematic_property.propval }
    set { preferences_connectionColorForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
//····················································································································

  let preferences_symbolDrawingWidthMultipliedByTenForSchematic_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

//····················································································································

  var preferences_symbolDrawingWidthMultipliedByTenForSchematic : Int {
    get { return preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.propval }
    set { preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: crossColorGridForBoard
//····················································································································

  let preferences_crossColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorGridForBoard)

//····················································································································

  var preferences_crossColorGridForBoard : NSColor {
    get { return preferences_crossColorGridForBoard_property.propval }
    set { preferences_crossColorGridForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: lineColorGridForBoard
//····················································································································

  let preferences_lineColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_lineColorGridForBoard)

//····················································································································

  var preferences_lineColorGridForBoard : NSColor {
    get { return preferences_lineColorGridForBoard_property.propval }
    set { preferences_lineColorGridForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: boardBackgroundColorForBoard
//····················································································································

  let preferences_boardBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

//····················································································································

  var preferences_boardBackgroundColorForBoard : NSColor {
    get { return preferences_boardBackgroundColorForBoard_property.propval }
    set { preferences_boardBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: errorBackgroundColorForBoard
//····················································································································

  let preferences_errorBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

//····················································································································

  var preferences_errorBackgroundColorForBoard : NSColor {
    get { return preferences_errorBackgroundColorForBoard_property.propval }
    set { preferences_errorBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: drawErrorBackgroundForBoard
//····················································································································

  let preferences_drawErrorBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawErrorBackgroundForBoard)

//····················································································································

  var preferences_drawErrorBackgroundForBoard : Bool {
    get { return preferences_drawErrorBackgroundForBoard_property.propval }
    set { preferences_drawErrorBackgroundForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: warningBackgroundColorForBoard
//····················································································································

  let preferences_warningBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

//····················································································································

  var preferences_warningBackgroundColorForBoard : NSColor {
    get { return preferences_warningBackgroundColorForBoard_property.propval }
    set { preferences_warningBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: drawWarningBackgroundForBoard
//····················································································································

  let preferences_drawWarningBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawWarningBackgroundForBoard)

//····················································································································

  var preferences_drawWarningBackgroundForBoard : Bool {
    get { return preferences_drawWarningBackgroundForBoard_property.propval }
    set { preferences_drawWarningBackgroundForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: boardLimitsColorForBoard
//····················································································································

  let preferences_boardLimitsColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

//····················································································································

  var preferences_boardLimitsColorForBoard : NSColor {
    get { return preferences_boardLimitsColorForBoard_property.propval }
    set { preferences_boardLimitsColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: boardClearanceColorForBoard
//····················································································································

  let preferences_boardClearanceColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

//····················································································································

  var preferences_boardClearanceColorForBoard : NSColor {
    get { return preferences_boardClearanceColorForBoard_property.propval }
    set { preferences_boardClearanceColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayFrontRestrictRectangles
//····················································································································

  let preferences_displayFrontRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontRestrictRectangles)

//····················································································································

  var preferences_displayFrontRestrictRectangles : Bool {
    get { return preferences_displayFrontRestrictRectangles_property.propval }
    set { preferences_displayFrontRestrictRectangles_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: frontSideRestrictRectangleColorForBoard
//····················································································································

  let preferences_frontSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideRestrictRectangleColorForBoard)

//····················································································································

  var preferences_frontSideRestrictRectangleColorForBoard : NSColor {
    get { return preferences_frontSideRestrictRectangleColorForBoard_property.propval }
    set { preferences_frontSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayBackRestrictRectangles
//····················································································································

  let preferences_displayBackRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackRestrictRectangles)

//····················································································································

  var preferences_displayBackRestrictRectangles : Bool {
    get { return preferences_displayBackRestrictRectangles_property.propval }
    set { preferences_displayBackRestrictRectangles_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: backSideRestrictRectangleColorForBoard
//····················································································································

  let preferences_backSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideRestrictRectangleColorForBoard)

//····················································································································

  var preferences_backSideRestrictRectangleColorForBoard : NSColor {
    get { return preferences_backSideRestrictRectangleColorForBoard_property.propval }
    set { preferences_backSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayFrontLegendForBoard
//····················································································································

  let preferences_displayFrontLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLegendForBoard)

//····················································································································

  var preferences_displayFrontLegendForBoard : Bool {
    get { return preferences_displayFrontLegendForBoard_property.propval }
    set { preferences_displayFrontLegendForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: frontSideLegendColorForBoard
//····················································································································

  let preferences_frontSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_frontSideLegendColorForBoard)

//····················································································································

  var preferences_frontSideLegendColorForBoard : NSColor {
    get { return preferences_frontSideLegendColorForBoard_property.propval }
    set { preferences_frontSideLegendColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayFrontLayoutForBoard
//····················································································································

  let preferences_displayFrontLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLayoutForBoard)

//····················································································································

  var preferences_displayFrontLayoutForBoard : Bool {
    get { return preferences_displayFrontLayoutForBoard_property.propval }
    set { preferences_displayFrontLayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: frontSideLayoutColorForBoard
//····················································································································

  let preferences_frontSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideLayoutColorForBoard)

//····················································································································

  var preferences_frontSideLayoutColorForBoard : NSColor {
    get { return preferences_frontSideLayoutColorForBoard_property.propval }
    set { preferences_frontSideLayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayBackLayoutForBoard
//····················································································································

  let preferences_displayBackLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLayoutForBoard)

//····················································································································

  var preferences_displayBackLayoutForBoard : Bool {
    get { return preferences_displayBackLayoutForBoard_property.propval }
    set { preferences_displayBackLayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: backSideLayoutColorForBoard
//····················································································································

  let preferences_backSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideLayoutColorForBoard)

//····················································································································

  var preferences_backSideLayoutColorForBoard : NSColor {
    get { return preferences_backSideLayoutColorForBoard_property.propval }
    set { preferences_backSideLayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayInner1LayoutForBoard
//····················································································································

  let preferences_displayInner1LayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayInner1LayoutForBoard)

//····················································································································

  var preferences_displayInner1LayoutForBoard : Bool {
    get { return preferences_displayInner1LayoutForBoard_property.propval }
    set { preferences_displayInner1LayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: inner1LayoutColorForBoard
//····················································································································

  let preferences_inner1LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner1LayoutColorForBoard)

//····················································································································

  var preferences_inner1LayoutColorForBoard : NSColor {
    get { return preferences_inner1LayoutColorForBoard_property.propval }
    set { preferences_inner1LayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayInner2LayoutForBoard
//····················································································································

  let preferences_displayInner2LayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayInner2LayoutForBoard)

//····················································································································

  var preferences_displayInner2LayoutForBoard : Bool {
    get { return preferences_displayInner2LayoutForBoard_property.propval }
    set { preferences_displayInner2LayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: inner2LayoutColorForBoard
//····················································································································

  let preferences_inner2LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner2LayoutColorForBoard)

//····················································································································

  var preferences_inner2LayoutColorForBoard : NSColor {
    get { return preferences_inner2LayoutColorForBoard_property.propval }
    set { preferences_inner2LayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayInner3LayoutForBoard
//····················································································································

  let preferences_displayInner3LayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayInner3LayoutForBoard)

//····················································································································

  var preferences_displayInner3LayoutForBoard : Bool {
    get { return preferences_displayInner3LayoutForBoard_property.propval }
    set { preferences_displayInner3LayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: inner3LayoutColorForBoard
//····················································································································

  let preferences_inner3LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner3LayoutColorForBoard)

//····················································································································

  var preferences_inner3LayoutColorForBoard : NSColor {
    get { return preferences_inner3LayoutColorForBoard_property.propval }
    set { preferences_inner3LayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayInner4LayoutForBoard
//····················································································································

  let preferences_displayInner4LayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayInner4LayoutForBoard)

//····················································································································

  var preferences_displayInner4LayoutForBoard : Bool {
    get { return preferences_displayInner4LayoutForBoard_property.propval }
    set { preferences_displayInner4LayoutForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: inner4LayoutColorForBoard
//····················································································································

  let preferences_inner4LayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_inner4LayoutColorForBoard)

//····················································································································

  var preferences_inner4LayoutColorForBoard : NSColor {
    get { return preferences_inner4LayoutColorForBoard_property.propval }
    set { preferences_inner4LayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayBackLegendForBoard
//····················································································································

  let preferences_displayBackLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLegendForBoard)

//····················································································································

  var preferences_displayBackLegendForBoard : Bool {
    get { return preferences_displayBackLegendForBoard_property.propval }
    set { preferences_displayBackLegendForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: backSideLegendColorForBoard
//····················································································································

  let preferences_backSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_backSideLegendColorForBoard)

//····················································································································

  var preferences_backSideLegendColorForBoard : NSColor {
    get { return preferences_backSideLegendColorForBoard_property.propval }
    set { preferences_backSideLegendColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayFrontPadsForBoard
//····················································································································

  let preferences_displayFrontPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontPadsForBoard)

//····················································································································

  var preferences_displayFrontPadsForBoard : Bool {
    get { return preferences_displayFrontPadsForBoard_property.propval }
    set { preferences_displayFrontPadsForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: frontSidePadColorForBoard
//····················································································································

  let preferences_frontSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColorForBoard)

//····················································································································

  var preferences_frontSidePadColorForBoard : NSColor {
    get { return preferences_frontSidePadColorForBoard_property.propval }
    set { preferences_frontSidePadColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayBackPadsForBoard
//····················································································································

  let preferences_displayBackPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackPadsForBoard)

//····················································································································

  var preferences_displayBackPadsForBoard : Bool {
    get { return preferences_displayBackPadsForBoard_property.propval }
    set { preferences_displayBackPadsForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: backSidePadColorForBoard
//····················································································································

  let preferences_backSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColorForBoard)

//····················································································································

  var preferences_backSidePadColorForBoard : NSColor {
    get { return preferences_backSidePadColorForBoard_property.propval }
    set { preferences_backSidePadColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: displayPadNumbersForBoard
//····················································································································

  let preferences_displayPadNumbersForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPadNumbersForBoard)

//····················································································································

  var preferences_displayPadNumbersForBoard : Bool {
    get { return preferences_displayPadNumbersForBoard_property.propval }
    set { preferences_displayPadNumbersForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padNumberFontForBoard
//····················································································································

  let preferences_padNumberFontForBoard_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

//····················································································································

  var preferences_padNumberFontForBoard : NSFont {
    get { return preferences_padNumberFontForBoard_property.propval }
    set { preferences_padNumberFontForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: padNumberColorForBoard
//····················································································································

  let preferences_padNumberColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColorForBoard)

//····················································································································

  var preferences_padNumberColorForBoard : NSColor {
    get { return preferences_padNumberColorForBoard_property.propval }
    set { preferences_padNumberColorForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: packageDrawingWidthMultpliedByTenForBoard
//····················································································································

  let preferences_packageDrawingWidthMultpliedByTenForBoard_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_packageDrawingWidthMultpliedByTenForBoard)

//····················································································································

  var preferences_packageDrawingWidthMultpliedByTenForBoard : Int {
    get { return preferences_packageDrawingWidthMultpliedByTenForBoard_property.propval }
    set { preferences_packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mShowRotationKnobInBoard
//····················································································································

  let preferences_mShowRotationKnobInBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mShowRotationKnobInBoard)

//····················································································································

  var preferences_mShowRotationKnobInBoard : Bool {
    get { return preferences_mShowRotationKnobInBoard_property.propval }
    set { preferences_mShowRotationKnobInBoard_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: sampleString
//····················································································································

  let preferences_sampleString_property = EBPreferencesProperty_String (defaultValue: "The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

//····················································································································

  var preferences_sampleString : String {
    get { return preferences_sampleString_property.propval }
    set { preferences_sampleString_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: showGerberDrawingFlow
//····················································································································

  let preferences_showGerberDrawingFlow_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingFlow)

//····················································································································

  var preferences_showGerberDrawingFlow : Bool {
    get { return preferences_showGerberDrawingFlow_property.propval }
    set { preferences_showGerberDrawingFlow_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: showGerberDrawingIndexes
//····················································································································

  let preferences_showGerberDrawingIndexes_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingIndexes)

//····················································································································

  var preferences_showGerberDrawingIndexes : Bool {
    get { return preferences_showGerberDrawingIndexes_property.propval }
    set { preferences_showGerberDrawingIndexes_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: fontEditionTransparency
//····················································································································

  let preferences_fontEditionTransparency_property = EBPreferencesProperty_Double (defaultValue: 0.5, prefKey: Preferences_fontEditionTransparency)

//····················································································································

  var preferences_fontEditionTransparency : Double {
    get { return preferences_fontEditionTransparency_property.propval }
    set { preferences_fontEditionTransparency_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: checkForSystemLibraryAtStartUp
//····················································································································

  let preferences_checkForSystemLibraryAtStartUp_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

//····················································································································

  var preferences_checkForSystemLibraryAtStartUp : Bool {
    get { return preferences_checkForSystemLibraryAtStartUp_property.propval }
    set { preferences_checkForSystemLibraryAtStartUp_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: systemLibraryCheckTimeInterval
//····················································································································

  let preferences_systemLibraryCheckTimeInterval_property = EBPreferencesProperty_Int (defaultValue: 0, prefKey: Preferences_systemLibraryCheckTimeInterval)

//····················································································································

  var preferences_systemLibraryCheckTimeInterval : Int {
    get { return preferences_systemLibraryCheckTimeInterval_property.propval }
    set { preferences_systemLibraryCheckTimeInterval_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewHorizontalFlip
//····················································································································

  let preferences_mergerModelViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewHorizontalFlip)

//····················································································································

  var preferences_mergerModelViewHorizontalFlip : Bool {
    get { return preferences_mergerModelViewHorizontalFlip_property.propval }
    set { preferences_mergerModelViewHorizontalFlip_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewVerticalFlip
//····················································································································

  let preferences_mergerModelViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewVerticalFlip)

//····················································································································

  var preferences_mergerModelViewVerticalFlip : Bool {
    get { return preferences_mergerModelViewVerticalFlip_property.propval }
    set { preferences_mergerModelViewVerticalFlip_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayHoles
//····················································································································

  let preferences_mergerModelViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayHoles)

//····················································································································

  var preferences_mergerModelViewDisplayHoles : Bool {
    get { return preferences_mergerModelViewDisplayHoles_property.propval }
    set { preferences_mergerModelViewDisplayHoles_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayVias
//····················································································································

  let preferences_mergerModelViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayVias)

//····················································································································

  var preferences_mergerModelViewDisplayVias : Bool {
    get { return preferences_mergerModelViewDisplayVias_property.propval }
    set { preferences_mergerModelViewDisplayVias_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPads
//····················································································································

  let preferences_mergerModelViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

//····················································································································

  var preferences_mergerModelViewDisplayFrontPads : Bool {
    get { return preferences_mergerModelViewDisplayFrontPads_property.propval }
    set { preferences_mergerModelViewDisplayFrontPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayInternalBoardsLimits
//····················································································································

  let preferences_mergerModelViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayInternalBoardsLimits)

//····················································································································

  var preferences_mergerModelViewDisplayInternalBoardsLimits : Bool {
    get { return preferences_mergerModelViewDisplayInternalBoardsLimits_property.propval }
    set { preferences_mergerModelViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBoardLimits
//····················································································································

  let preferences_mergerModelViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBoardLimits)

//····················································································································

  var preferences_mergerModelViewDisplayBoardLimits : Bool {
    get { return preferences_mergerModelViewDisplayBoardLimits_property.propval }
    set { preferences_mergerModelViewDisplayBoardLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentNames
//····················································································································

  let preferences_mergerModelViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

//····················································································································

  var preferences_mergerModelViewDisplayFrontComponentNames : Bool {
    get { return preferences_mergerModelViewDisplayFrontComponentNames_property.propval }
    set { preferences_mergerModelViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentValues
//····················································································································

  let preferences_mergerModelViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

//····················································································································

  var preferences_mergerModelViewDisplayFrontComponentValues : Bool {
    get { return preferences_mergerModelViewDisplayFrontComponentValues_property.propval }
    set { preferences_mergerModelViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPackages
//····················································································································

  let preferences_mergerModelViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

//····················································································································

  var preferences_mergerModelViewDisplayFrontPackages : Bool {
    get { return preferences_mergerModelViewDisplayFrontPackages_property.propval }
    set { preferences_mergerModelViewDisplayFrontPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendTexts
//····················································································································

  let preferences_mergerModelViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

//····················································································································

  var preferences_mergerModelViewDisplayFrontLegendTexts : Bool {
    get { return preferences_mergerModelViewDisplayFrontLegendTexts_property.propval }
    set { preferences_mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontTracks
//····················································································································

  let preferences_mergerModelViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

//····················································································································

  var preferences_mergerModelViewDisplayFrontTracks : Bool {
    get { return preferences_mergerModelViewDisplayFrontTracks_property.propval }
    set { preferences_mergerModelViewDisplayFrontTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayInner1Tracks
//····················································································································

  let preferences_mergerModelViewDisplayInner1Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner1Tracks)

//····················································································································

  var preferences_mergerModelViewDisplayInner1Tracks : Bool {
    get { return preferences_mergerModelViewDisplayInner1Tracks_property.propval }
    set { preferences_mergerModelViewDisplayInner1Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayInner2Tracks
//····················································································································

  let preferences_mergerModelViewDisplayInner2Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner2Tracks)

//····················································································································

  var preferences_mergerModelViewDisplayInner2Tracks : Bool {
    get { return preferences_mergerModelViewDisplayInner2Tracks_property.propval }
    set { preferences_mergerModelViewDisplayInner2Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayInner3Tracks
//····················································································································

  let preferences_mergerModelViewDisplayInner3Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner3Tracks)

//····················································································································

  var preferences_mergerModelViewDisplayInner3Tracks : Bool {
    get { return preferences_mergerModelViewDisplayInner3Tracks_property.propval }
    set { preferences_mergerModelViewDisplayInner3Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayInner4Tracks
//····················································································································

  let preferences_mergerModelViewDisplayInner4Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayInner4Tracks)

//····················································································································

  var preferences_mergerModelViewDisplayInner4Tracks : Bool {
    get { return preferences_mergerModelViewDisplayInner4Tracks_property.propval }
    set { preferences_mergerModelViewDisplayInner4Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLayoutTexts
//····················································································································

  let preferences_mergerModelViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

//····················································································································

  var preferences_mergerModelViewDisplayFrontLayoutTexts : Bool {
    get { return preferences_mergerModelViewDisplayFrontLayoutTexts_property.propval }
    set { preferences_mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPads
//····················································································································

  let preferences_mergerModelViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackPads)

//····················································································································

  var preferences_mergerModelViewDisplayBackPads : Bool {
    get { return preferences_mergerModelViewDisplayBackPads_property.propval }
    set { preferences_mergerModelViewDisplayBackPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayTraversingPads
//····················································································································

  let preferences_mergerModelViewDisplayTraversingPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayTraversingPads)

//····················································································································

  var preferences_mergerModelViewDisplayTraversingPads : Bool {
    get { return preferences_mergerModelViewDisplayTraversingPads_property.propval }
    set { preferences_mergerModelViewDisplayTraversingPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentNames
//····················································································································

  let preferences_mergerModelViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

//····················································································································

  var preferences_mergerModelViewDisplayBackComponentNames : Bool {
    get { return preferences_mergerModelViewDisplayBackComponentNames_property.propval }
    set { preferences_mergerModelViewDisplayBackComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentValues
//····················································································································

  let preferences_mergerModelViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

//····················································································································

  var preferences_mergerModelViewDisplayBackComponentValues : Bool {
    get { return preferences_mergerModelViewDisplayBackComponentValues_property.propval }
    set { preferences_mergerModelViewDisplayBackComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendTexts
//····················································································································

  let preferences_mergerModelViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

//····················································································································

  var preferences_mergerModelViewDisplayBackLegendTexts : Bool {
    get { return preferences_mergerModelViewDisplayBackLegendTexts_property.propval }
    set { preferences_mergerModelViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPackages
//····················································································································

  let preferences_mergerModelViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

//····················································································································

  var preferences_mergerModelViewDisplayBackPackages : Bool {
    get { return preferences_mergerModelViewDisplayBackPackages_property.propval }
    set { preferences_mergerModelViewDisplayBackPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackTracks
//····················································································································

  let preferences_mergerModelViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

//····················································································································

  var preferences_mergerModelViewDisplayBackTracks : Bool {
    get { return preferences_mergerModelViewDisplayBackTracks_property.propval }
    set { preferences_mergerModelViewDisplayBackTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLayoutTexts
//····················································································································

  let preferences_mergerModelViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

//····················································································································

  var preferences_mergerModelViewDisplayBackLayoutTexts : Bool {
    get { return preferences_mergerModelViewDisplayBackLayoutTexts_property.propval }
    set { preferences_mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendLines
//····················································································································

  let preferences_mergerModelViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

//····················································································································

  var preferences_mergerModelViewDisplayFrontLegendLines : Bool {
    get { return preferences_mergerModelViewDisplayFrontLegendLines_property.propval }
    set { preferences_mergerModelViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendLines
//····················································································································

  let preferences_mergerModelViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

//····················································································································

  var preferences_mergerModelViewDisplayBackLegendLines : Bool {
    get { return preferences_mergerModelViewDisplayBackLegendLines_property.propval }
    set { preferences_mergerModelViewDisplayBackLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewHorizontalFlip
//····················································································································

  let preferences_mergerBoardViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

//····················································································································

  var preferences_mergerBoardViewHorizontalFlip : Bool {
    get { return preferences_mergerBoardViewHorizontalFlip_property.propval }
    set { preferences_mergerBoardViewHorizontalFlip_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewVerticalFlip
//····················································································································

  let preferences_mergerBoardViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewVerticalFlip)

//····················································································································

  var preferences_mergerBoardViewVerticalFlip : Bool {
    get { return preferences_mergerBoardViewVerticalFlip_property.propval }
    set { preferences_mergerBoardViewVerticalFlip_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayHoles
//····················································································································

  let preferences_mergerBoardViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayHoles)

//····················································································································

  var preferences_mergerBoardViewDisplayHoles : Bool {
    get { return preferences_mergerBoardViewDisplayHoles_property.propval }
    set { preferences_mergerBoardViewDisplayHoles_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayVias
//····················································································································

  let preferences_mergerBoardViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayVias)

//····················································································································

  var preferences_mergerBoardViewDisplayVias : Bool {
    get { return preferences_mergerBoardViewDisplayVias_property.propval }
    set { preferences_mergerBoardViewDisplayVias_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPads
//····················································································································

  let preferences_mergerBoardViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontPads : Bool {
    get { return preferences_mergerBoardViewDisplayFrontPads_property.propval }
    set { preferences_mergerBoardViewDisplayFrontPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayTraversingPads
//····················································································································

  let preferences_mergerBoardViewDisplayTraversingPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayTraversingPads)

//····················································································································

  var preferences_mergerBoardViewDisplayTraversingPads : Bool {
    get { return preferences_mergerBoardViewDisplayTraversingPads_property.propval }
    set { preferences_mergerBoardViewDisplayTraversingPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInternalBoardsLimits
//····················································································································

  let preferences_mergerBoardViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayInternalBoardsLimits)

//····················································································································

  var preferences_mergerBoardViewDisplayInternalBoardsLimits : Bool {
    get { return preferences_mergerBoardViewDisplayInternalBoardsLimits_property.propval }
    set { preferences_mergerBoardViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBoardLimits
//····················································································································

  let preferences_mergerBoardViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

//····················································································································

  var preferences_mergerBoardViewDisplayBoardLimits : Bool {
    get { return preferences_mergerBoardViewDisplayBoardLimits_property.propval }
    set { preferences_mergerBoardViewDisplayBoardLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentNames
//····················································································································

  let preferences_mergerBoardViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontComponentNames : Bool {
    get { return preferences_mergerBoardViewDisplayFrontComponentNames_property.propval }
    set { preferences_mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentValues
//····················································································································

  let preferences_mergerBoardViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontComponentValues : Bool {
    get { return preferences_mergerBoardViewDisplayFrontComponentValues_property.propval }
    set { preferences_mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPackages
//····················································································································

  let preferences_mergerBoardViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontPackages : Bool {
    get { return preferences_mergerBoardViewDisplayFrontPackages_property.propval }
    set { preferences_mergerBoardViewDisplayFrontPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendTexts
//····················································································································

  let preferences_mergerBoardViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontLegendTexts : Bool {
    get { return preferences_mergerBoardViewDisplayFrontLegendTexts_property.propval }
    set { preferences_mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontTracks
//····················································································································

  let preferences_mergerBoardViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontTracks : Bool {
    get { return preferences_mergerBoardViewDisplayFrontTracks_property.propval }
    set { preferences_mergerBoardViewDisplayFrontTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner1Tracks
//····················································································································

  let preferences_mergerBoardViewDisplayInner1Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner1Tracks)

//····················································································································

  var preferences_mergerBoardViewDisplayInner1Tracks : Bool {
    get { return preferences_mergerBoardViewDisplayInner1Tracks_property.propval }
    set { preferences_mergerBoardViewDisplayInner1Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner2Tracks
//····················································································································

  let preferences_mergerBoardViewDisplayInner2Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner2Tracks)

//····················································································································

  var preferences_mergerBoardViewDisplayInner2Tracks : Bool {
    get { return preferences_mergerBoardViewDisplayInner2Tracks_property.propval }
    set { preferences_mergerBoardViewDisplayInner2Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner3Tracks
//····················································································································

  let preferences_mergerBoardViewDisplayInner3Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner3Tracks)

//····················································································································

  var preferences_mergerBoardViewDisplayInner3Tracks : Bool {
    get { return preferences_mergerBoardViewDisplayInner3Tracks_property.propval }
    set { preferences_mergerBoardViewDisplayInner3Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInner4Tracks
//····················································································································

  let preferences_mergerBoardViewDisplayInner4Tracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayInner4Tracks)

//····················································································································

  var preferences_mergerBoardViewDisplayInner4Tracks : Bool {
    get { return preferences_mergerBoardViewDisplayInner4Tracks_property.propval }
    set { preferences_mergerBoardViewDisplayInner4Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
//····················································································································

  let preferences_mergerBoardViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontLayoutTexts : Bool {
    get { return preferences_mergerBoardViewDisplayFrontLayoutTexts_property.propval }
    set { preferences_mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPads
//····················································································································

  let preferences_mergerBoardViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

//····················································································································

  var preferences_mergerBoardViewDisplayBackPads : Bool {
    get { return preferences_mergerBoardViewDisplayBackPads_property.propval }
    set { preferences_mergerBoardViewDisplayBackPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentNames
//····················································································································

  let preferences_mergerBoardViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

//····················································································································

  var preferences_mergerBoardViewDisplayBackComponentNames : Bool {
    get { return preferences_mergerBoardViewDisplayBackComponentNames_property.propval }
    set { preferences_mergerBoardViewDisplayBackComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentValues
//····················································································································

  let preferences_mergerBoardViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

//····················································································································

  var preferences_mergerBoardViewDisplayBackComponentValues : Bool {
    get { return preferences_mergerBoardViewDisplayBackComponentValues_property.propval }
    set { preferences_mergerBoardViewDisplayBackComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendTexts
//····················································································································

  let preferences_mergerBoardViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

//····················································································································

  var preferences_mergerBoardViewDisplayBackLegendTexts : Bool {
    get { return preferences_mergerBoardViewDisplayBackLegendTexts_property.propval }
    set { preferences_mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPackages
//····················································································································

  let preferences_mergerBoardViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

//····················································································································

  var preferences_mergerBoardViewDisplayBackPackages : Bool {
    get { return preferences_mergerBoardViewDisplayBackPackages_property.propval }
    set { preferences_mergerBoardViewDisplayBackPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackTracks
//····················································································································

  let preferences_mergerBoardViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

//····················································································································

  var preferences_mergerBoardViewDisplayBackTracks : Bool {
    get { return preferences_mergerBoardViewDisplayBackTracks_property.propval }
    set { preferences_mergerBoardViewDisplayBackTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLayoutTexts
//····················································································································

  let preferences_mergerBoardViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

//····················································································································

  var preferences_mergerBoardViewDisplayBackLayoutTexts : Bool {
    get { return preferences_mergerBoardViewDisplayBackLayoutTexts_property.propval }
    set { preferences_mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendLines
//····················································································································

  let preferences_mergerBoardViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

//····················································································································

  var preferences_mergerBoardViewDisplayFrontLegendLines : Bool {
    get { return preferences_mergerBoardViewDisplayFrontLegendLines_property.propval }
    set { preferences_mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendLines
//····················································································································

  let preferences_mergerBoardViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

//····················································································································

  var preferences_mergerBoardViewDisplayBackLegendLines : Bool {
    get { return preferences_mergerBoardViewDisplayBackLegendLines_property.propval }
    set { preferences_mergerBoardViewDisplayBackLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorHoles
//····················································································································

  let preferences_mergerColorHoles_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mergerColorHoles)

//····················································································································

  var preferences_mergerColorHoles : NSColor {
    get { return preferences_mergerColorHoles_property.propval }
    set { preferences_mergerColorHoles_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorVias
//····················································································································

  let preferences_mergerColorVias_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mergerColorVias)

//····················································································································

  var preferences_mergerColorVias : NSColor {
    get { return preferences_mergerColorVias_property.propval }
    set { preferences_mergerColorVias_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontPads
//····················································································································

  let preferences_mergerColorFrontPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

//····················································································································

  var preferences_mergerColorFrontPads : NSColor {
    get { return preferences_mergerColorFrontPads_property.propval }
    set { preferences_mergerColorFrontPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBoardLimits
//····················································································································

  let preferences_mergerColorBoardLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

//····················································································································

  var preferences_mergerColorBoardLimits : NSColor {
    get { return preferences_mergerColorBoardLimits_property.propval }
    set { preferences_mergerColorBoardLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorInternalBoardsLimits
//····················································································································

  let preferences_mergerColorInternalBoardsLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

//····················································································································

  var preferences_mergerColorInternalBoardsLimits : NSColor {
    get { return preferences_mergerColorInternalBoardsLimits_property.propval }
    set { preferences_mergerColorInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontComponentNames
//····················································································································

  let preferences_mergerColorFrontComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

//····················································································································

  var preferences_mergerColorFrontComponentNames : NSColor {
    get { return preferences_mergerColorFrontComponentNames_property.propval }
    set { preferences_mergerColorFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontComponentValues
//····················································································································

  let preferences_mergerColorFrontComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

//····················································································································

  var preferences_mergerColorFrontComponentValues : NSColor {
    get { return preferences_mergerColorFrontComponentValues_property.propval }
    set { preferences_mergerColorFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontPackages
//····················································································································

  let preferences_mergerColorFrontPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

//····················································································································

  var preferences_mergerColorFrontPackages : NSColor {
    get { return preferences_mergerColorFrontPackages_property.propval }
    set { preferences_mergerColorFrontPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontLegendTexts
//····················································································································

  let preferences_mergerColorFrontLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

//····················································································································

  var preferences_mergerColorFrontLegendTexts : NSColor {
    get { return preferences_mergerColorFrontLegendTexts_property.propval }
    set { preferences_mergerColorFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontTracks
//····················································································································

  let preferences_mergerColorFrontTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

//····················································································································

  var preferences_mergerColorFrontTracks : NSColor {
    get { return preferences_mergerColorFrontTracks_property.propval }
    set { preferences_mergerColorFrontTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorInner1Tracks
//····················································································································

  let preferences_mergerColorInner1Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorInner1Tracks)

//····················································································································

  var preferences_mergerColorInner1Tracks : NSColor {
    get { return preferences_mergerColorInner1Tracks_property.propval }
    set { preferences_mergerColorInner1Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorInner2Tracks
//····················································································································

  let preferences_mergerColorInner2Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorInner2Tracks)

//····················································································································

  var preferences_mergerColorInner2Tracks : NSColor {
    get { return preferences_mergerColorInner2Tracks_property.propval }
    set { preferences_mergerColorInner2Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorInner3Tracks
//····················································································································

  let preferences_mergerColorInner3Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInner3Tracks)

//····················································································································

  var preferences_mergerColorInner3Tracks : NSColor {
    get { return preferences_mergerColorInner3Tracks_property.propval }
    set { preferences_mergerColorInner3Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorInner4Tracks
//····················································································································

  let preferences_mergerColorInner4Tracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.purple, prefKey: Preferences_mergerColorInner4Tracks)

//····················································································································

  var preferences_mergerColorInner4Tracks : NSColor {
    get { return preferences_mergerColorInner4Tracks_property.propval }
    set { preferences_mergerColorInner4Tracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontLayoutTexts
//····················································································································

  let preferences_mergerColorFrontLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

//····················································································································

  var preferences_mergerColorFrontLayoutTexts : NSColor {
    get { return preferences_mergerColorFrontLayoutTexts_property.propval }
    set { preferences_mergerColorFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackPads
//····················································································································

  let preferences_mergerColorBackPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorBackPads)

//····················································································································

  var preferences_mergerColorBackPads : NSColor {
    get { return preferences_mergerColorBackPads_property.propval }
    set { preferences_mergerColorBackPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorTraversingPads
//····················································································································

  let preferences_mergerColorTraversingPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorTraversingPads)

//····················································································································

  var preferences_mergerColorTraversingPads : NSColor {
    get { return preferences_mergerColorTraversingPads_property.propval }
    set { preferences_mergerColorTraversingPads_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackComponentNames
//····················································································································

  let preferences_mergerColorBackComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

//····················································································································

  var preferences_mergerColorBackComponentNames : NSColor {
    get { return preferences_mergerColorBackComponentNames_property.propval }
    set { preferences_mergerColorBackComponentNames_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackComponentValues
//····················································································································

  let preferences_mergerColorBackComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

//····················································································································

  var preferences_mergerColorBackComponentValues : NSColor {
    get { return preferences_mergerColorBackComponentValues_property.propval }
    set { preferences_mergerColorBackComponentValues_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackLegendTexts
//····················································································································

  let preferences_mergerColorBackLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

//····················································································································

  var preferences_mergerColorBackLegendTexts : NSColor {
    get { return preferences_mergerColorBackLegendTexts_property.propval }
    set { preferences_mergerColorBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackPackages
//····················································································································

  let preferences_mergerColorBackPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

//····················································································································

  var preferences_mergerColorBackPackages : NSColor {
    get { return preferences_mergerColorBackPackages_property.propval }
    set { preferences_mergerColorBackPackages_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackTracks
//····················································································································

  let preferences_mergerColorBackTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackTracks)

//····················································································································

  var preferences_mergerColorBackTracks : NSColor {
    get { return preferences_mergerColorBackTracks_property.propval }
    set { preferences_mergerColorBackTracks_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackLayoutTexts
//····················································································································

  let preferences_mergerColorBackLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

//····················································································································

  var preferences_mergerColorBackLayoutTexts : NSColor {
    get { return preferences_mergerColorBackLayoutTexts_property.propval }
    set { preferences_mergerColorBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorFrontLegendLines
//····················································································································

  let preferences_mergerColorFrontLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

//····················································································································

  var preferences_mergerColorFrontLegendLines : NSColor {
    get { return preferences_mergerColorFrontLegendLines_property.propval }
    set { preferences_mergerColorFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackLegendLines
//····················································································································

  let preferences_mergerColorBackLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

//····················································································································

  var preferences_mergerColorBackLegendLines : NSColor {
    get { return preferences_mergerColorBackLegendLines_property.propval }
    set { preferences_mergerColorBackLegendLines_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mergerColorBackground
//····················································································································

  let preferences_mergerColorBackground_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

//····················································································································

  var preferences_mergerColorBackground : NSColor {
    get { return preferences_mergerColorBackground_property.propval }
    set { preferences_mergerColorBackground_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: artworkDialogFilterString
//····················································································································

  let preferences_artworkDialogFilterString_property = EBPreferencesProperty_String (defaultValue: "", prefKey: Preferences_artworkDialogFilterString)

//····················································································································

  var preferences_artworkDialogFilterString : String {
    get { return preferences_artworkDialogFilterString_property.propval }
    set { preferences_artworkDialogFilterString_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: errorMessageColor
//····················································································································

  let preferences_errorMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorMessageColor)

//····················································································································

  var preferences_errorMessageColor : NSColor {
    get { return preferences_errorMessageColor_property.propval }
    set { preferences_errorMessageColor_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: showDebugMenu
//····················································································································

  let preferences_showDebugMenu_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_showDebugMenu)

//····················································································································

  var preferences_showDebugMenu : Bool {
    get { return preferences_showDebugMenu_property.propval }
    set { preferences_showDebugMenu_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: hiliteWidthMultipliedByTen
//····················································································································

  let preferences_hiliteWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_hiliteWidthMultipliedByTen)

//····················································································································

  var preferences_hiliteWidthMultipliedByTen : Int {
    get { return preferences_hiliteWidthMultipliedByTen_property.propval }
    set { preferences_hiliteWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································
//   To many property: additionnalLibraryArray
//····················································································································

  let preferences_additionnalLibraryArray_property = PreferencesArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

//····················································································································

  var preferences_additionnalLibraryArray : EBReferenceArray <CanariLibraryEntry> {
    get { return preferences_additionnalLibraryArray_property.propval }
    set { preferences_additionnalLibraryArray_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNameFont
//····················································································································

  let preferences_pinNameFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

//····················································································································

  var preferences_pinNameFont : NSFont {
    get { return preferences_pinNameFont_property.propval }
    set { preferences_pinNameFont_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mFreeRouterGuiDefaultFileContents
//····················································································································

  let preferences_mFreeRouterGuiDefaultFileContents_property = EBPreferencesProperty_String (defaultValue: "", prefKey: Preferences_mFreeRouterGuiDefaultFileContents)

//····················································································································

  var preferences_mFreeRouterGuiDefaultFileContents : String {
    get { return preferences_mFreeRouterGuiDefaultFileContents_property.propval }
    set { preferences_mFreeRouterGuiDefaultFileContents_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: sampleStringSize
//····················································································································

  let preferences_sampleStringSize_property = EBPreferencesProperty_Double (defaultValue: 24, prefKey: Preferences_sampleStringSize)

//····················································································································

  var preferences_sampleStringSize : Double {
    get { return preferences_sampleStringSize_property.propval }
    set { preferences_sampleStringSize_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: mLastSystemLibraryCheckTime
//····················································································································

  let preferences_mLastSystemLibraryCheckTime_property = EBPreferencesProperty_Date (defaultValue: Date.distantPast, prefKey: Preferences_mLastSystemLibraryCheckTime)

//····················································································································

  var preferences_mLastSystemLibraryCheckTime : Date {
    get { return preferences_mLastSystemLibraryCheckTime_property.propval }
    set { preferences_mLastSystemLibraryCheckTime_property.setProp (newValue) }
  }

//····················································································································
//   Array controller: additionnalLibraryArrayController
//····················································································································

  var preferences_additionnalLibraryArrayController = Controller_Preferences_additionnalLibraryArrayController ()

//····················································································································
//   Transient property: mValueRevealInFinder_packages
//····················································································································

  let preferences_mValueRevealInFinder_packages_property = EBTransientProperty_StringArray ()

//····················································································································

  var preferences_mValueRevealInFinder_packages : StringArray? {
    switch preferences_mValueRevealInFinder_packages_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_devices
//····················································································································

  let preferences_mValueRevealInFinder_devices_property = EBTransientProperty_StringArray ()

//····················································································································

  var preferences_mValueRevealInFinder_devices : StringArray? {
    switch preferences_mValueRevealInFinder_devices_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_fonts
//····················································································································

  let preferences_mValueRevealInFinder_fonts_property = EBTransientProperty_StringArray ()

//····················································································································

  var preferences_mValueRevealInFinder_fonts : StringArray? {
    switch preferences_mValueRevealInFinder_fonts_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_artworks
//····················································································································

  let preferences_mValueRevealInFinder_artworks_property = EBTransientProperty_StringArray ()

//····················································································································

  var preferences_mValueRevealInFinder_artworks : StringArray? {
    switch preferences_mValueRevealInFinder_artworks_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_symbols
//····················································································································

  let preferences_mValueRevealInFinder_symbols_property = EBTransientProperty_StringArray ()

//····················································································································

  var preferences_mValueRevealInFinder_symbols : StringArray? {
    switch preferences_mValueRevealInFinder_symbols_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Preferences) final class Preferences : EBObjcBaseObject, NSWindowDelegate {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mAutoLayoutStylePopUpButton : EBPopUpButton? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardInner1LayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardInner2LayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardInner3LayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardInner4LayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCancelButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : NSButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mComponentNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mComponentNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mComponentValueColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mComponentValueFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryRepositoryCommitButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryCurrentReleaseTextField : NSTextField? = nil
  @IBOutlet var mLibraryRepositoryLoadCurrentReleaseButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryRepositoryStatusButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryTextField : NSTextField? = nil
  @IBOutlet var mLibraryRevisionListScrollView : NSScrollView? = nil
  @IBOutlet var mLibraryRevisionListTableView : NSTableView? = nil
  @IBOutlet var mLibraryUpdateLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLibraryUploadWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPrefsWindow : EBWindow? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSULastCheckTimeTextField : NSTextField? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mSetLibraryRepositoryButton : NSButton? = nil
  @IBOutlet var mSetUserAndPasswordButton : NSButton? = nil
  @IBOutlet var mShowDebugMenuSwitch : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mToolbar : CanariToolbar? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mUserAndPasswordTextField : NSTextField? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var nextSystemLibraryCheckDate : CanariDateObserverField? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalPopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalTitleTextField : NSTextField? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_nextSystemLibraryCheckDate_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalPopupButton_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalTitleTextField_hidden : MultipleBindingController_hidden?
  private var mController_mRemoveLibraryEntryButton_enabled : MultipleBindingController_enabled?

  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var ebUndoManager : EBUndoManager { return self.mUndoManager }

  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.ebUndoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- To many property: additionnalLibraryArray (no option)
    preferences_additionnalLibraryArray_property.ebUndoManager = self.ebUndoManager
  //--- Array controller property: additionnalLibraryArrayController
    preferences_additionnalLibraryArrayController.bind_model (preferences_additionnalLibraryArray_property, self.ebUndoManager)
  //--- Atomic property: mValueRevealInFinder_packages
    preferences_mValueRevealInFinder_packages_property.mReadModelFunction = {
        switch (preferences_usesUserLibrary_property.selection, preferences_additionnalLibraryArray_property.selection, preferences_additionnalLibraryArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.addEBObserver (preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mUses (preferences_mValueRevealInFinder_packages_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mPath (preferences_mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    preferences_mValueRevealInFinder_devices_property.mReadModelFunction = {
        switch (preferences_usesUserLibrary_property.selection, preferences_additionnalLibraryArray_property.selection, preferences_additionnalLibraryArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.addEBObserver (preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mUses (preferences_mValueRevealInFinder_devices_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mPath (preferences_mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    preferences_mValueRevealInFinder_fonts_property.mReadModelFunction = {
        switch (preferences_usesUserLibrary_property.selection, preferences_additionnalLibraryArray_property.selection, preferences_additionnalLibraryArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.addEBObserver (preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mUses (preferences_mValueRevealInFinder_fonts_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mPath (preferences_mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    preferences_mValueRevealInFinder_artworks_property.mReadModelFunction = {
        switch (preferences_usesUserLibrary_property.selection, preferences_additionnalLibraryArray_property.selection, preferences_additionnalLibraryArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.addEBObserver (preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mUses (preferences_mValueRevealInFinder_artworks_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mPath (preferences_mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    preferences_mValueRevealInFinder_symbols_property.mReadModelFunction = {
        switch (preferences_usesUserLibrary_property.selection, preferences_additionnalLibraryArray_property.selection, preferences_additionnalLibraryArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_usesUserLibrary_property.addEBObserver (preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mUses (preferences_mValueRevealInFinder_symbols_property)
    preferences_additionnalLibraryArray_property.addEBObserverOf_mPath (preferences_mValueRevealInFinder_symbols_property)
  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    checkOutletConnection (self.mAddLibraryEntryButton, "mAddLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAdditionnalLibraryArrayTableView, "mAdditionnalLibraryArrayTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mAutoLayoutStylePopUpButton, "mAutoLayoutStylePopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardBackgroundColorWell, "mBoardBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLayoutColorWell, "mBoardBottomSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLegendColorWell, "mBoardBottomSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSidePadColorWell, "mBoardBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideRestrictRectangleColorWell, "mBoardBottomSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardClearanceColorWell, "mBoardClearanceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDotColorGridColorWell, "mBoardDotColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDrawErrorBackgroundCheckbox, "mBoardDrawErrorBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardDrawWarningBackgroundCheckbox, "mBoardDrawWarningBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardErrorBackgroundColorWell, "mBoardErrorBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardInner1LayoutColorWell, "mBoardInner1LayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardInner2LayoutColorWell, "mBoardInner2LayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardInner3LayoutColorWell, "mBoardInner3LayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardInner4LayoutColorWell, "mBoardInner4LayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLimitsColorWell, "mBoardLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLineColorGridColorWell, "mBoardLineColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardPackageDrawingWidthMultipliedByTenPopupButton, "mBoardPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadFontButton, "mBoardPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadNumberColorWell, "mBoardPadNumberColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLayoutColorWell, "mBoardTopSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLegendColorWell, "mBoardTopSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSidePadColorWell, "mBoardTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideRestrictRectangleColorWell, "mBoardTopSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardWarningBackgroundColorWell, "mBoardWarningBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorDorDeviveColorWell, "mBottomSidePadColorDorDeviveColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorWell, "mBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCancelButtonInLibraryUpdateWindow, "mCancelButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckForLibraryUpdatesButton, "mCheckForLibraryUpdatesButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mCheckForSystemLibraryAtStartUpSwitch, "mCheckForSystemLibraryAtStartUpSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryAction, "mCheckLibraryAction", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryResultTextView, "mCheckLibraryResultTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateProgressIndicator, "mCheckingForLibraryUpdateProgressIndicator", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateWindow, "mCheckingForLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mComponentNameColorForSchematicColorWell, "mComponentNameColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mComponentNameFontForSchematicFontButton, "mComponentNameFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mComponentValueColorForSchematicColorWell, "mComponentValueColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mComponentValueFontForSchematicFontButton, "mComponentValueFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mConnectionColorForSchematicColorWell, "mConnectionColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCrossColorOfSymbolGridColorWell, "mCrossColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDimensionFontButton, "mDimensionFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mDotColorGridForSchematicColorWell, "mDotColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDotColorOfPackageGridColorWell, "mDotColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencySlider, "mEditionTransparencySlider", EBSlider.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencyTextField, "mEditionTransparencyTextField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mErrorMessageColorColorWell, "mErrorMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mInformativeTextInLibraryUpdateWindow, "mInformativeTextInLibraryUpdateWindow", EBTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCommitButton, "mLibraryRepositoryCommitButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCurrentReleaseTextField, "mLibraryRepositoryCurrentReleaseTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLoadCurrentReleaseButton, "mLibraryRepositoryLoadCurrentReleaseButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLogTextView, "mLibraryRepositoryLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryStatusButton, "mLibraryRepositoryStatusButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryTextField, "mLibraryRepositoryTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListScrollView, "mLibraryRevisionListScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListTableView, "mLibraryRevisionListTableView", NSTableView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateLogTextView, "mLibraryUpdateLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateWindow, "mLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLibraryUploadWindow, "mLibraryUploadWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLineColorGridForSchematicColorWell, "mLineColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfPackageGridColorWell, "mLineColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfSymbolGridColorWell, "mLineColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_artworks, "mMenuRevealInFinder_artworks", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_devices, "mMenuRevealInFinder_devices", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_fonts, "mMenuRevealInFinder_fonts", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_packages, "mMenuRevealInFinder_packages", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_symbols, "mMenuRevealInFinder_symbols", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mPackageBackgroundColorColorWell, "mPackageBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorColorWell, "mPackageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorForDeviceColorWell, "mPackageColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDimensionColorWell, "mPackageDimensionColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenForDevicePopupButton, "mPackageDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenPopupButton, "mPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageGuideColorWell, "mPackageGuideColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageNameFontForDeviceFontButton, "mPackageNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadFontButton, "mPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorColorWell, "mPadNumberColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorForDeviceColorWell, "mPadNumberColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberFontForDeviceFontButton, "mPadNumberFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadZoneColorColorWell, "mPadZoneColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameColorForSchematicColorWell, "mPinNameColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameFontButton, "mPinNameFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForDeviceFontButton, "mPinNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForSchematicFontButton, "mPinNameFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNumberColorForSchematicColorWell, "mPinNumberColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNumberFontForSchematicFontButton, "mPinNumberFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPrefsWindow, "mPrefsWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mProgressIndicatorInLibraryUpdateWindow, "mProgressIndicatorInLibraryUpdateWindow", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mRemoveLibraryEntryButton, "mRemoveLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRevealInFinderLibraryInUserApplicationSupportButton, "mRevealInFinderLibraryInUserApplicationSupportButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSULastCheckTimeTextField, "mSULastCheckTimeTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringField, "mSampleStringField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringSizeField, "mSampleStringSizeField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mSelectionHiliteColorColorWell, "mSelectionHiliteColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSetLibraryRepositoryButton, "mSetLibraryRepositoryButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mSetUserAndPasswordButton, "mSetUserAndPasswordButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mShowDebugMenuSwitch, "mShowDebugMenuSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingFlowCheckbox, "mShowGerberDrawingFlowCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingIndexesCheckbox, "mShowGerberDrawingIndexesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSuccessMessageColorColorWell, "mSuccessMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageBackgroundColorForDeviceColorWell, "mSymbolAndPackageBackgroundColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageGridDotColorForDeviceColorWell, "mSymbolAndPackageGridDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageLineDotColorForDeviceColorWell, "mSymbolAndPackageLineDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolBackgroundColorColorWell, "mSymbolBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorColorWell, "mSymbolColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForDeviceColorWell, "mSymbolColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForSchematicColorWell, "mSymbolColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForDevicePopupButton, "mSymbolDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton, "mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenPopupButton, "mSymbolDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolNameFontForDeviceFontButton, "mSymbolNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mTableViewInLibraryUpdateWindow, "mTableViewInLibraryUpdateWindow", EBTableView.self, #file, #line)
    checkOutletConnection (self.mToolbar, "mToolbar", CanariToolbar.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorForDeviceColorWell, "mTopSidePadColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorWell, "mTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUnplacedComponentsColorForSchematicColorWell, "mUnplacedComponentsColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUpDateButtonInLibraryUpdateWindow, "mUpDateButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpDateLibraryMenuItemInCanariMenu, "mUpDateLibraryMenuItemInCanariMenu", EBMenuItem.self, #file, #line)
    checkOutletConnection (self.mUseLibraryInUserApplicationSupportPathCheckBox, "mUseLibraryInUserApplicationSupportPathCheckBox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mUserAndPasswordTextField, "mUserAndPasswordTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mWarningMessageColorColorWell, "mWarningMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.nextSystemLibraryCheckDate, "nextSystemLibraryCheckDate", CanariDateObserverField.self, #file, #line)
    checkOutletConnection (self.selectionHilitePopupButton, "selectionHilitePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalPopupButton, "systemLibraryCheckTimeIntervalPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalTitleTextField, "systemLibraryCheckTimeIntervalTitleTextField", NSTextField.self, #file, #line)
  //--------------------------- Install bindings
    mErrorMessageColorColorWell?.bind_color (preferences_errorMessageColor_property, sendContinously:true)
    mWarningMessageColorColorWell?.bind_color (preferences_warningMessageColor_property, sendContinously:true)
    mSuccessMessageColorColorWell?.bind_color (preferences_successMessageColor_property, sendContinously:true)
    mShowDebugMenuSwitch?.bind_value (preferences_showDebugMenu_property)
    mAutoLayoutStylePopUpButton?.bind_selectedIndex (preferences_mAutoLayoutStyle_property)
    mSelectionHiliteColorColorWell?.bind_color (preferences_selectionHiliteColor_property, sendContinously:true)
    selectionHilitePopupButton?.bind_selectedTag (preferences_hiliteWidthMultipliedByTen_property)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (preferences_mValueRevealInFinder_symbols_property)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (preferences_mValueRevealInFinder_packages_property)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (preferences_mValueRevealInFinder_devices_property)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (preferences_mValueRevealInFinder_fonts_property)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (preferences_mValueRevealInFinder_artworks_property)
    mSymbolColorColorWell?.bind_color (preferences_symbolColor_property, sendContinously:true)
    mCrossColorOfSymbolGridColorWell?.bind_color (preferences_crossColorOfSymbolGrid_property, sendContinously:true)
    mLineColorOfSymbolGridColorWell?.bind_color (preferences_lineColorOfSymbolGrid_property, sendContinously:true)
    mSymbolBackgroundColorColorWell?.bind_color (preferences_symbolBackgroundColor_property, sendContinously:true)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTen_property)
    mPinNameFontButton?.bind_fontValue (preferences_pinNameFont_property)
    mDotColorOfPackageGridColorWell?.bind_color (preferences_crossColorOfPackageGrid_property, sendContinously:true)
    mLineColorOfPackageGridColorWell?.bind_color (preferences_lineColorOfPackageGrid_property, sendContinously:true)
    mPackageBackgroundColorColorWell?.bind_color (preferences_packageBackgroundColor_property, sendContinously:true)
    mPackageColorColorWell?.bind_color (preferences_packageColor_property, sendContinously:true)
    mTopSidePadColorWell?.bind_color (preferences_frontSidePadColor_property, sendContinously:true)
    mBottomSidePadColorWell?.bind_color (preferences_backSidePadColor_property, sendContinously:true)
    mPadNumberColorColorWell?.bind_color (preferences_padNumberColor_property, sendContinously:true)
    mPadFontButton?.bind_fontValue (preferences_padNumberFont_property)
    mPackageGuideColorWell?.bind_color (preferences_packageGuideColor_property, sendContinously:true)
    mPackageDimensionColorWell?.bind_color (preferences_packageDimensionColor_property, sendContinously:true)
    mDimensionFontButton?.bind_fontValue (preferences_dimensionFont_property)
    mPadZoneColorColorWell?.bind_color (preferences_padZoneColor_property, sendContinously:true)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (preferences_packageDrawingWidthMultipliedByTen_property)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (preferences_mSymbolAndPackageGridDotColorForDevice_property, sendContinously:true)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (preferences_mSymbolAndPackageGridLineColorForDevice_property, sendContinously:true)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (preferences_mSymbolAndPackageBackgroundColorForDevice_property, sendContinously:true)
    mPackageColorForDeviceColorWell?.bind_color (preferences_mPackageColorForDevice_property, sendContinously:true)
    mTopSidePadColorForDeviceColorWell?.bind_color (preferences_mFrontSidePadColorForDevice_property, sendContinously:true)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (preferences_mBottomSidePadColorForDevice_property, sendContinously:true)
    mPadNumberColorForDeviceColorWell?.bind_color (preferences_mPadNumberColorForDevice_property, sendContinously:true)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (preferences_mPadNumberFontForDevice_property)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (preferences_mPadNumberFontForDevice_property)
    mSymbolColorForDeviceColorWell?.bind_color (preferences_mSymbolColorForDevice_property, sendContinously:true)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (preferences_mSymbolNameFontForDevice_property)
    mPinNameFontForDeviceFontButton?.bind_fontValue (preferences_mPinNameFontForDevice_property)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (preferences_symbolDrawingWidthForDeviceMultipliedByTen_property)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (preferences_packageDrawingWidthForDeviceMultipliedByTen_property)
    mDotColorGridForSchematicColorWell?.bind_color (preferences_dotColorGridForSchematic_property, sendContinously:true)
    mLineColorGridForSchematicColorWell?.bind_color (preferences_lineColorGridForSchematic_property, sendContinously:true)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (preferences_symbolColorForUnplacedComponentsForSchematic_property, sendContinously:true)
    mSymbolColorForSchematicColorWell?.bind_color (preferences_symbolColorForSchematic_property, sendContinously:true)
    mComponentNameColorForSchematicColorWell?.bind_color (preferences_componentNameColorForSchematic_property, sendContinously:true)
    mComponentNameFontForSchematicFontButton?.bind_fontValue (preferences_componentNameFontForSchematic_property)
    mComponentValueColorForSchematicColorWell?.bind_color (preferences_componentValueColorForSchematic_property, sendContinously:true)
    mComponentValueFontForSchematicFontButton?.bind_fontValue (preferences_componentValueFontForSchematic_property)
    mPinNameFontForSchematicFontButton?.bind_fontValue (preferences_pinNameFontForSchematic_property)
    mPinNameColorForSchematicColorWell?.bind_color (preferences_pinNameColorForSchematic_property, sendContinously:true)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (preferences_pinNumberFontForSchematic_property)
    mPinNumberColorForSchematicColorWell?.bind_color (preferences_pinNumberColorForSchematic_property, sendContinously:true)
    mConnectionColorForSchematicColorWell?.bind_color (preferences_connectionColorForSchematic_property, sendContinously:true)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTenForSchematic_property)
    mBoardDotColorGridColorWell?.bind_color (preferences_crossColorGridForBoard_property, sendContinously:true)
    mBoardLineColorGridColorWell?.bind_color (preferences_lineColorGridForBoard_property, sendContinously:true)
    mBoardBackgroundColorWell?.bind_color (preferences_boardBackgroundColorForBoard_property, sendContinously:true)
    mBoardErrorBackgroundColorWell?.bind_color (preferences_errorBackgroundColorForBoard_property, sendContinously:true)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (preferences_drawErrorBackgroundForBoard_property)
    mBoardWarningBackgroundColorWell?.bind_color (preferences_warningBackgroundColorForBoard_property, sendContinously:true)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (preferences_drawWarningBackgroundForBoard_property)
    mBoardLimitsColorWell?.bind_color (preferences_boardLimitsColorForBoard_property, sendContinously:true)
    mBoardClearanceColorWell?.bind_color (preferences_boardClearanceColorForBoard_property, sendContinously:true)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (preferences_frontSideRestrictRectangleColorForBoard_property, sendContinously:true)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (preferences_backSideRestrictRectangleColorForBoard_property, sendContinously:true)
    mBoardTopSideLegendColorWell?.bind_color (preferences_frontSideLegendColorForBoard_property, sendContinously:true)
    mBoardTopSideLayoutColorWell?.bind_color (preferences_frontSideLayoutColorForBoard_property, sendContinously:true)
    mBoardBottomSideLayoutColorWell?.bind_color (preferences_backSideLayoutColorForBoard_property, sendContinously:true)
    mBoardInner1LayoutColorWell?.bind_color (preferences_inner1LayoutColorForBoard_property, sendContinously:true)
    mBoardInner2LayoutColorWell?.bind_color (preferences_inner2LayoutColorForBoard_property, sendContinously:true)
    mBoardInner3LayoutColorWell?.bind_color (preferences_inner3LayoutColorForBoard_property, sendContinously:true)
    mBoardInner4LayoutColorWell?.bind_color (preferences_inner4LayoutColorForBoard_property, sendContinously:true)
    mBoardBottomSideLegendColorWell?.bind_color (preferences_backSideLegendColorForBoard_property, sendContinously:true)
    mBoardTopSidePadColorWell?.bind_color (preferences_frontSidePadColorForBoard_property, sendContinously:true)
    mBoardBottomSidePadColorWell?.bind_color (preferences_backSidePadColorForBoard_property, sendContinously:true)
    mBoardPadFontButton?.bind_fontValue (preferences_padNumberFontForBoard_property)
    mBoardPadNumberColorWell?.bind_color (preferences_padNumberColorForBoard_property, sendContinously:true)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (preferences_packageDrawingWidthMultpliedByTenForBoard_property)
    mSampleStringField?.bind_value (preferences_sampleString_property, sendContinously:true)
    mSampleStringSizeField?.bind_value (preferences_sampleStringSize_property, sendContinously:true, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (preferences_showGerberDrawingFlow_property)
    mShowGerberDrawingIndexesCheckbox?.bind_value (preferences_showGerberDrawingIndexes_property)
    mEditionTransparencySlider?.bind_doubleValue (preferences_fontEditionTransparency_property, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (preferences_fontEditionTransparency_property, sendContinously:true, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (preferences_usesUserLibrary_property)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (preferences_checkForSystemLibraryAtStartUp_property)
    nextSystemLibraryCheckDate?.bind_dateObserver (preferences_mLastSystemLibraryCheckTime_property)
    systemLibraryCheckTimeIntervalPopupButton?.bind_selectedTag (preferences_systemLibraryCheckTimeInterval_property)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .not (.id (preferences_checkForSystemLibraryAtStartUp_property)),
        outlet: self.nextSystemLibraryCheckDate
      )
      self.mController_nextSystemLibraryCheckDate_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .not (.id (preferences_checkForSystemLibraryAtStartUp_property)),
        outlet: self.systemLibraryCheckTimeIntervalPopupButton
      )
      self.mController_systemLibraryCheckTimeIntervalPopupButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .not (.id (preferences_checkForSystemLibraryAtStartUp_property)),
        outlet: self.systemLibraryCheckTimeIntervalTitleTextField
      )
      self.mController_systemLibraryCheckTimeIntervalTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (preferences_additionnalLibraryArrayController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.mRemoveLibraryEntryButton
      )
      self.mController_mRemoveLibraryEntryButton_enabled = controller
    }
  //--------------------------- Array controller
    preferences_additionnalLibraryArrayController.bind_tableView (self.mAdditionnalLibraryArrayTableView)
  //--------------------------- Set targets / actions
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    self.mAddLibraryEntryButton?.target = self
    self.mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    self.mRemoveLibraryEntryButton?.target = preferences_additionnalLibraryArrayController
    self.mRemoveLibraryEntryButton?.action = #selector (Controller_Preferences_additionnalLibraryArrayController.remove (_:))
    self.mCheckLibraryAction?.target = self
    self.mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
    preferences_additionnalLibraryArrayController.unbind_tableView (self.mAdditionnalLibraryArrayTableView)
  //--- Array controller property: additionnalLibraryArrayController
    preferences_additionnalLibraryArrayController.unbind_model ()
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_packages_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_devices_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_fonts_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_artworks_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_symbols_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

