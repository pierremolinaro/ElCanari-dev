//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CanariLibraryEntry_mPath : AnyObject {
  var mPath : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CanariLibraryEntry_mUses : AnyObject {
  var mUses : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CanariLibraryEntry_mLibraryRepositoryURL : AnyObject {
  var mLibraryRepositoryURL : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CanariLibraryEntry_mUserAndPasswordTag : AnyObject {
  var mUserAndPasswordTag : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CanariLibraryEntry_mStatusImage : AnyObject {
  var mStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class CanariLibraryEntry : EBManagedObject,
         CanariLibraryEntry_mPath,
         CanariLibraryEntry_mUses,
         CanariLibraryEntry_mLibraryRepositoryURL,
         CanariLibraryEntry_mUserAndPasswordTag,
         CanariLibraryEntry_mStatusImage {

  //····················································································································
  //   Atomic property: mPath
  //····················································································································

  final let mPath_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPath_toDefaultValue () {
    self.mPath = "Hello"
  }

  //····················································································································

  final var mPath : String {
    get { return self.mPath_property.propval }
    set { self.mPath_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mUses
  //····················································································································

  final let mUses_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mUses_toDefaultValue () {
    self.mUses = true
  }

  //····················································································································

  final var mUses : Bool {
    get { return self.mUses_property.propval }
    set { self.mUses_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLibraryRepositoryURL
  //····················································································································

  final let mLibraryRepositoryURL_property : EBStoredProperty_String

  //····················································································································

  final func reset_mLibraryRepositoryURL_toDefaultValue () {
    self.mLibraryRepositoryURL = ""
  }

  //····················································································································

  final var mLibraryRepositoryURL : String {
    get { return self.mLibraryRepositoryURL_property.propval }
    set { self.mLibraryRepositoryURL_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mUserAndPasswordTag
  //····················································································································

  final let mUserAndPasswordTag_property : EBStoredProperty_String

  //····················································································································

  final func reset_mUserAndPasswordTag_toDefaultValue () {
    self.mUserAndPasswordTag = ""
  }

  //····················································································································

  final var mUserAndPasswordTag : String {
    get { return self.mUserAndPasswordTag_property.propval }
    set { self.mUserAndPasswordTag_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mPath_property = EBStoredProperty_String (defaultValue: "Hello", undoManager: ebUndoManager)
    self.mUses_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mLibraryRepositoryURL_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mUserAndPasswordTag_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    super.init (ebUndoManager)
    gInitSemaphore.wait ()
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_CanariLibraryEntry_mStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPath_property.addEBObserver (self.mStatusImage_property)
    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
    self.mExternDelegate0 = CanariLibraryEntryDelegate (object: self)
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································

  final var mExternDelegate0 : CanariLibraryEntryDelegate? = nil

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mPath",
        object: self.mPath_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPath_property.mObserverExplorer,
        valueExplorer: &self.mPath_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mUses",
        object: self.mUses_property,
        y: &y,
        view: view,
        observerExplorer: &self.mUses_property.mObserverExplorer,
        valueExplorer: &self.mUses_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mLibraryRepositoryURL",
        object: self.mLibraryRepositoryURL_property,
        y: &y,
        view: view,
        observerExplorer: &self.mLibraryRepositoryURL_property.mObserverExplorer,
        valueExplorer: &self.mLibraryRepositoryURL_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mUserAndPasswordTag",
        object: self.mUserAndPasswordTag_property,
        y: &y,
        view: view,
        observerExplorer: &self.mUserAndPasswordTag_property.mObserverExplorer,
        valueExplorer: &self.mUserAndPasswordTag_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "mStatusImage",
        object: self.mStatusImage_property,
        y: &y,
        view: view,
        observerExplorer: &self.mStatusImage_property.mObserverExplorer,
        valueExplorer: &self.mStatusImage_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mPath
    self.mPath_property.mObserverExplorer = nil
    self.mPath_property.mValueExplorer = nil
  //--- Atomic property: mUses
    self.mUses_property.mObserverExplorer = nil
    self.mUses_property.mValueExplorer = nil
  //--- Atomic property: mLibraryRepositoryURL
    self.mLibraryRepositoryURL_property.mObserverExplorer = nil
    self.mLibraryRepositoryURL_property.mValueExplorer = nil
  //--- Atomic property: mUserAndPasswordTag
    self.mUserAndPasswordTag_property.mObserverExplorer = nil
    self.mUserAndPasswordTag_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mPath
      self.mPath_property.storeIn (dictionary: ioDictionary, forKey: "mPath")
    //--- Atomic property: mUses
      self.mUses_property.storeIn (dictionary: ioDictionary, forKey: "mUses")
    //--- Atomic property: mLibraryRepositoryURL
      self.mLibraryRepositoryURL_property.storeIn (dictionary: ioDictionary, forKey: "mLibraryRepositoryURL")
    //--- Atomic property: mUserAndPasswordTag
      self.mUserAndPasswordTag_property.storeIn (dictionary: ioDictionary, forKey: "mUserAndPasswordTag")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPath
    self.mPath_property.readFrom (dictionary: inDictionary, forKey: "mPath")
  //--- Atomic property: mUses
    self.mUses_property.readFrom (dictionary: inDictionary, forKey: "mUses")
  //--- Atomic property: mLibraryRepositoryURL
    self.mLibraryRepositoryURL_property.readFrom (dictionary: inDictionary, forKey: "mLibraryRepositoryURL")
  //--- Atomic property: mUserAndPasswordTag
    self.mUserAndPasswordTag_property.readFrom (dictionary: inDictionary, forKey: "mUserAndPasswordTag")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mPath\n"
    ioString += "mUses\n"
    ioString += "mLibraryRepositoryURL\n"
    ioString += "mUserAndPasswordTag\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mPath.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mUses.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLibraryRepositoryURL.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mUserAndPasswordTag.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mPath"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mPath = value
      }
      if let range = inDictionary ["mUses"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mUses = value
      }
      if let range = inDictionary ["mLibraryRepositoryURL"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mLibraryRepositoryURL = value
      }
      if let range = inDictionary ["mUserAndPasswordTag"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mUserAndPasswordTag = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

