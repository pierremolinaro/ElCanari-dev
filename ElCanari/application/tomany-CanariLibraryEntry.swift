//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_CanariLibraryEntry : ReadOnlyAbstractArrayProperty <CanariLibraryEntry> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <CanariLibraryEntry>,                            
                                 addedSet inAddedSet : EBReferenceSet <CanariLibraryEntry>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mPath_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mUses_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLibraryRepositoryURL_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mUserAndPasswordTag_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mPath_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mUses_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLibraryRepositoryURL_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mUserAndPasswordTag_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mStatusImage_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mPath' stored property
  //····················································································································

  private final var mObserversOf_mPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPath (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPath (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPath_toElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    if !self.mObserversOf_mPath.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPath.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mPath_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPath.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPath_fromElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for (_, entry) in self.mObserversOf_mPath.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPath_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPath.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mUses' stored property
  //····················································································································

  private final var mObserversOf_mUses = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mUses (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUses.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUses_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUses (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUses.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUses_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mUses_toElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    if !self.mObserversOf_mUses.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mUses.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mUses_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mUses.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUses_fromElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for (_, entry) in self.mObserversOf_mUses.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUses_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mUses.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mLibraryRepositoryURL' stored property
  //····················································································································

  private final var mObserversOf_mLibraryRepositoryURL = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLibraryRepositoryURL (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLibraryRepositoryURL.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLibraryRepositoryURL_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLibraryRepositoryURL (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLibraryRepositoryURL.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLibraryRepositoryURL_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLibraryRepositoryURL_toElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    if !self.mObserversOf_mLibraryRepositoryURL.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mLibraryRepositoryURL.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mLibraryRepositoryURL_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mLibraryRepositoryURL.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLibraryRepositoryURL_fromElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for (_, entry) in self.mObserversOf_mLibraryRepositoryURL.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mLibraryRepositoryURL_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mLibraryRepositoryURL.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mUserAndPasswordTag' stored property
  //····················································································································

  private final var mObserversOf_mUserAndPasswordTag = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mUserAndPasswordTag (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUserAndPasswordTag.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUserAndPasswordTag_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUserAndPasswordTag (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUserAndPasswordTag.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUserAndPasswordTag_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mUserAndPasswordTag_toElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    if !self.mObserversOf_mUserAndPasswordTag.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mUserAndPasswordTag.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mUserAndPasswordTag_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mUserAndPasswordTag.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUserAndPasswordTag_fromElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for (_, entry) in self.mObserversOf_mUserAndPasswordTag.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUserAndPasswordTag_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mUserAndPasswordTag.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mStatusImage' transient property
  //····················································································································

  private final var mObserversOf_mStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStatusImage (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStatusImage (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_mStatusImage.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.mStatusImage_property.addEBObserver (observer)
        }else{
          self.mObserversOf_mStatusImage.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <CanariLibraryEntry>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_mStatusImage.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.mStatusImage_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_mStatusImage.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_CanariLibraryEntry : ReadOnlyArrayOf_CanariLibraryEntry {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : CanariLibraryEntry, _ right : CanariLibraryEntry) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_CanariLibraryEntry? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_CanariLibraryEntry,
                        sortCallback inSortCallBack : Optional < (_ left : CanariLibraryEntry, _ right : CanariLibraryEntry) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <CanariLibraryEntry>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [CanariLibraryEntry] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <CanariLibraryEntry> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_CanariLibraryEntry is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_CanariLibraryEntry : ReadOnlyArrayOf_CanariLibraryEntry {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <CanariLibraryEntry>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_CanariLibraryEntry is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_CanariLibraryEntry : ReadWriteArrayOf_CanariLibraryEntry, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <CanariLibraryEntry>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <CanariLibraryEntry>,
                                 addedSet inAddedSet : EBReferenceSet <CanariLibraryEntry>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [CanariLibraryEntry] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <CanariLibraryEntry>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <CanariLibraryEntry> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : CanariLibraryEntry) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : CanariLibraryEntry) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_CanariLibraryEntry : ReadWriteArrayOf_CanariLibraryEntry {

  //····················································································································

  override var selection : EBSelection < [CanariLibraryEntry] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <CanariLibraryEntry>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <CanariLibraryEntry> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : CanariLibraryEntry) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : CanariLibraryEntry) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: CanariLibraryEntry
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_CanariLibraryEntry : StoredArrayOf_CanariLibraryEntry {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <CanariLibraryEntry> ()
      for dictionary in array {
        let object = newInstanceOfEntityNamed (self.undoManager, "CanariLibraryEntry") as! CanariLibraryEntry
        object.setUpAtomicPropertiesWithDictionary (dictionary)
        objectArray.append (object)
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mPath (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mUses (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLibraryRepositoryURL (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mUserAndPasswordTag (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { [weak self] in self?.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

