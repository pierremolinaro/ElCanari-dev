//
//  AutoLayoutImageObserverView.swift
//
//  Created by Pierre Molinaro on 05/02/2021.
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   AutoLayoutImageObserverView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class AutoLayoutImageObserverView : NSImageView, EBUserClassNameProtocol {

  //····················································································································

  private let mSize : EBControlSize

  //····················································································································

  init (size inSize : EBControlSize) {
    self.mSize = inSize
    super.init (frame: NSRect ())
    noteObjectAllocation (self)
    self.translatesAutoresizingMaskIntoConstraints = false
    self.imageScaling = .scaleProportionallyUpOrDown
    self.imageFrameStyle = .none
    self.controlSize = inSize.cocoaControlSize
    self.font = NSFont.systemFont (ofSize: NSFont.systemFontSize (for: self.controlSize))
    self.frame.size = self.intrinsicContentSize
  }

  //····················································································································

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override var intrinsicContentSize : NSSize {
    let s : CGFloat
    switch self.mSize {
    case .mini : s = 15.0 // ???
    case .small : s = 17.0
    case .regular : s =  24.0
    }
    return NSSize (width: s, height: s)
  }

  //····················································································································
  //  $enabled binding
  //····················································································································

  private var mEnabledBindingController : EnabledBindingController? = nil
  var enabledBindingController : EnabledBindingController? { return self.mEnabledBindingController }

  //····················································································································

  final func bind_enabled (_ inExpression : EBMultipleBindingBooleanExpression) -> Self {
    self.mEnabledBindingController = EnabledBindingController (inExpression, self)
    return self
  }

  //····················································································································
  //  image binding
  //····················································································································

  fileprivate func updateImage (_ object : EBReadOnlyProperty_NSImage) {
    switch object.selection {
    case .empty :
      self.image = nil
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .multiple :
      self.image = nil
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .single (let propertyValue) :
      self.image = propertyValue
      self.enable (fromValueBinding: true, self.enabledBindingController)
    }
  }

  //····················································································································

  fileprivate var mImageController : EBObservablePropertyController? = nil

  //····················································································································

  final func bind_image (_ object : EBReadOnlyProperty_NSImage) -> Self {
    self.mImageController = EBObservablePropertyController (
      observedObjects: [object],
      callBack: { [weak self] in self?.updateImage (object) ; }
    )
    return self
  }

  //····················································································································
  //  tooltip binding
  //····················································································································

  fileprivate func updateTooltip (_ object : EBReadOnlyProperty_String) {
    switch object.selection {
    case .empty :
      self.toolTip = nil
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .multiple :
      self.toolTip = nil
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .single (let propertyValue) :
      self.toolTip = propertyValue
      self.enable (fromValueBinding: true, self.enabledBindingController)
    }
  }

  //····················································································································

  private var mTooltipController : EBObservablePropertyController? = nil

  //····················································································································

  final func bind_tooltip (_ object : EBReadOnlyProperty_String) -> Self {
    self.mTooltipController = EBObservablePropertyController (
      observedObjects: [object],
      callBack: { [weak self] in self?.updateTooltip (object) }
    )
    return self
  }

  //····················································································································
  //  $hidden binding
  //····················································································································

  private var mHiddenBindingController : HiddenBindingController? = nil
  var hiddenBindingController : HiddenBindingController? { return self.mHiddenBindingController }

  //····················································································································

  final func bind_hidden (_ inExpression : EBMultipleBindingBooleanExpression) -> Self {
    self.mHiddenBindingController = HiddenBindingController (inExpression, self)
    return self
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
