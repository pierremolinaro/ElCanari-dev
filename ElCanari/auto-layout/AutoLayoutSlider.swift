//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   AutoLayoutDoubleSlider
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class AutoLayoutDoubleSlider : NSSlider, EBUserClassNameProtocol {

  private var mWidth : CGFloat
  
  //····················································································································

  init (width inWidth : Int, min inMin : Int, max inMax : Int, ticks inTickCount : Int) {
    self.mWidth = CGFloat (inWidth)
    super.init (frame: NSRect ())
    noteObjectAllocation (self)
    self.translatesAutoresizingMaskIntoConstraints = false

    self.minValue = Double (inMin)
    self.maxValue = Double (inMax)
    self.numberOfTickMarks = inTickCount
    self.allowsTickMarkValuesOnly = true
  }

  //····················································································································

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    _ = self.mDoubleValueController?.updateModel (withCandidateValue: self.doubleValue, windowForSheet: self.window)
    let r = super.sendAction (action, to: to)
    flushOutletEvents ()
    return r
  }

  //····················································································································
  //  By Default, super.intrinsicContentSize.width is -1, meaning the text field is invisible
  //  So we need to define intrinsicContentSize.width explicitly
  //  super.intrinsicContentSize.height is valid (19.0 for small size, 22.0 for regular size, ...)-
  //····················································································································

  override var intrinsicContentSize : NSSize {
    let s = super.intrinsicContentSize
    return NSSize (width: self.mWidth, height: s.height)
  }

  //····················································································································
  //  doubleValue binding
  //····················································································································

  fileprivate func update (from object : EBReadOnlyProperty_Double) {
    switch object.selection {
    case .empty, .multiple :
      self.stringValue = "-"
      self.enableFromValueBinding (false)
    case .single (let propertyValue) :
      self.doubleValue = propertyValue
      self.enableFromValueBinding (true)
    }
  }

  //····················································································································

  private var mDoubleValueController : EBGenericReadWritePropertyController <Double>? = nil

  //····················································································································

  final func bind_value (_ object : EBReadWriteProperty_Double) -> Self {
    self.mDoubleValueController = EBGenericReadWritePropertyController <Double> (
      observedObject: object,
      callBack: { [weak self] in self?.update (from: object) }
    )
//    self.isContinuous = sendContinously
    return self
  }

  //····················································································································

  final func unbind_value () {
    self.mDoubleValueController?.unregister ()
    self.mDoubleValueController = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
