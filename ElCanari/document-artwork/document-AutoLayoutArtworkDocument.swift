//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutArtworkDocument) class AutoLayoutArtworkDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: mDataController
  //································································································

  final var mDataController = Controller_AutoLayoutArtworkDocument_mDataController ()

  //································································································
  //   Selection controller: mDataSelection
  //································································································

  final var mDataSelection = SelectionController_AutoLayoutArtworkDocument_mDataSelection ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtensionImage
  //································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    return self.emptyDrillFileExtensionImage_property.optionalValue
  }

  //································································································
  //   Transient property: generatedFileCountString
  //································································································

  final let generatedFileCountString_property = EBTransientProperty <String> ()

  //································································································

  final var generatedFileCountString : String? {
    return self.generatedFileCountString_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlDataIssueImage
  //································································································

  final let segmentedControlDataIssueImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var segmentedControlDataIssueImage : NSImage? {
    return self.segmentedControlDataIssueImage_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : ArtworkRoot { return self.mRootObject as! ArtworkRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.PageMasterView ()
    let descriptionPage = self.DescriptionPage ()
    let minimaPage = self.MinimaPage ()
    let dataPage = self.DataPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
            .addPage (title: "Description", tooltip: "Artwork Description", pageView: descriptionPage)
            .addPage (title: "Minima", tooltip: "Minima Editor", pageView: minimaPage)
            .addPage (title: "Data", tooltip: "Data Editor", pageView: dataPage)
            .bind_selectedPage (self.rootObject.selectedTab_property)
            .bind_segmentImage (self.segmentedControlDataIssueImage_property, segmentIndex:2)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Page", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSignatureField (size: .regular)
            .bind_signature (self.signatureObserver_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutVersionField (size: .regular)
            .bind_version (self.versionObserver_property)
            .bind_versionShouldChange (self.versionShouldChangeObserver_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Version", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
          .bind_hidden (.prop (preferences_fileSystemLibraryIsOk_property))
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Show Consistency Window", size: .regular)
            .bind_image (preferences_fileSystemLibraryStatusImage_property)
            .bind_run (
              target: gPreferences!,
              selector: #selector (Preferences.showLibraryConsistencyLogWindowAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "File System Library requires attention", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.statusMessage_property)
            .bind_errorCount (self.statusErrorCount_property)
            .bind_warningCount (self.statusWarningCount_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Status", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    _ = vStackView.appendView (pageMasterView)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 56, size: .regular)
        .expandableWidth ()
        .set (alignment: .left)
        .bind_value (self.rootObject.title_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Layout", bold: false, size: .regular, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .regular)
          .bind_selectedIndex (self.rootObject.layerConfiguration_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutArtworkDocument.resetVersionAndSignatureAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW MinimaPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func MinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    _ = vStackView.appendFlexibleSpace ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticImageView (name: "artwork")
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DataPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DataPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutTextField (minWidth: 112, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutImageObserverView (size: .small)
          .bind_image (self.emptyDrillFileExtensionImage_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (leftMargin: .regular)
        .set (rightMargin: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.generatedFileCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTableView (size: .small, addControlButtons: true)
          self.mDataController.bind_tableView (vStackView_view_view_view)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutTextField (minWidth: 56, size: .small)
                .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutImageObserverView (size: .small)
              .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
              .setOrangeTextColor ()
              .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Images", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawImagesTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side QRCodes", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawQRCodesTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawPadsTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
              .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTraversingPads_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              _ = vStackView_view_view_view_view_view.appendFlexibleSpace ()
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              _ = vStackView_view_view_view_view_view.appendFlexibleSpace ()
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Images", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawImagesBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side QRCodes", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawQRCodesBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawPadsBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Vias", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawVias_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Board Limits", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawBoardLimits_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.horizontalMirror_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.setContentView (mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)


  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusErrorCount (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusErrorCount_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusMessage (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusMessage_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.startsBeingObserved (by: self.generatedFileCountString_property)

  //--- Atomic property: segmentedControlDataIssueImage
    self.segmentedControlDataIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.hasDataWarning_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_AutoLayoutArtworkDocument_segmentedControlDataIssueImage (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.hasDataWarning_property.startsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.segmentedControlDataIssueImage_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusWarningCount (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusWarningCount_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusWarningCount_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

