//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutArtworkDocument) class AutoLayoutArtworkDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: mDataController
  //································································································

  final var mDataController = Controller_AutoLayoutArtworkDocument_mDataController ()

  //································································································
  //   Selection controller: mDataSelection
  //································································································

  final var mDataSelection = SelectionController_AutoLayoutArtworkDocument_mDataSelection ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtensionImage
  //································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    return self.emptyDrillFileExtensionImage_property.optionalValue
  }

  //································································································
  //   Transient property: generatedFileCountString
  //································································································

  final let generatedFileCountString_property = EBTransientProperty <String> ()

  //································································································

  final var generatedFileCountString : String? {
    return self.generatedFileCountString_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlDataIssueImage
  //································································································

  final let segmentedControlDataIssueImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var segmentedControlDataIssueImage : NSImage? {
    return self.segmentedControlDataIssueImage_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : ArtworkRoot { return self.mRootObject as! ArtworkRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let pageMasterView = self.PageMasterView ()
    let descriptionPage = self.DescriptionPage ()
    let minimaPage = self.MinimaPage ()
    let dataPage = self.DataPage ()
    let view_0 = AutoLayoutToolBar ()
      .add (title: "Page", item: { () -> NSView in let item = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
  .addPage (title: "Description", tooltip: "Artwork Description", pageView: descriptionPage)
  .addPage (title: "Minima", tooltip: "Minima Editor", pageView: minimaPage)
  .addPage (title: "Data", tooltip: "Data Editor", pageView: dataPage)
  .bind_selectedPage (self.rootObject.selectedTab_property)
  .bind_segmentImage (self.segmentedControlDataIssueImage_property, segmentIndex:2)
 ; return item } ())
      .add (title: "Signature", item: { () -> NSView in let item = AutoLayoutSignatureField (size: .regular)
  .bind_signature (self.signatureObserver_property)
 ; return item } ())
      .add (title: "Version", item: { () -> NSView in let item = AutoLayoutVersionField (size: .regular)
  .bind_version (self.versionObserver_property)
  .bind_versionShouldChange (self.versionShouldChangeObserver_property)
 ; return item } ())
      .addFlexibleSpace ()
      .add (title: "Status", item: { () -> NSView in let item = AutoLayoutStatusBadgeView ()
  .bind_tooltip (self.statusMessage_property)
  .bind_errorCount (self.statusErrorCount_property)
  .bind_warningCount (self.statusWarningCount_property)
 ; return item } ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let view_0 = AutoLayoutTextField (minWidth: 56, size: .regular)
      .expandableWidth ()
      .set (alignment: .left)
      .bind_value (self.rootObject.title_property, sendContinously:true)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutStaticLabel (title: "Layout", bold: false, size: .regular, alignment: .center)
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .regular)
        .bind_selectedIndex (self.rootObject.layerConfiguration_property)
      _ = view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_3)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutTextView ()
      .bind_value (self.rootObject.comments_property)
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutArtworkDocument.resetVersionAndSignatureAction (_:))
        )
      _ = view_3.appendView (view_3_1)
    }
    _ = vStackView.appendView (view_3)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW MinimaPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func MinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let view_0 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_2)
        let view_1_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_3)
        let view_1_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_4)
        let view_1_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_5)
        let view_1_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_6)
        let view_1_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_7)
        let view_1_1_8 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_8)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutStaticImageView (name: "artwork")
      _ = view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_4)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutGridView2 ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (topMargin: .regular)
        .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
 ; return right } ())
        .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
 ; return right } ())
        .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
 ; return right } ())
        .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
 ; return right } ())
      _ = view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_2)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_4)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DataPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DataPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: .regular)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: .regular)
      .set (rightMargin: .regular)
    do{
      let view_2_0 = AutoLayoutVerticalStackView ()
        .set (topMargin: .regular)
      do{
        let view_2_0_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        _ = view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_2_0_1)
        _ = view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_2)
      }
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      _ = view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutVerticalStackView ()
        .set (topMargin: .regular)
      do{
        let view_2_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_2_2_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
            _ = view_2_2_0_0.appendView (view_2_2_0_0_0)
            let view_2_2_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            _ = view_2_2_0_0.appendView (view_2_2_0_0_1)
          }
          _ = view_2_2_0.appendView (view_2_2_0_0)
          let view_2_2_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          _ = view_2_2_0.appendView (view_2_2_0_1)
          let view_2_2_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_0.appendView (view_2_2_0_2)
          let view_2_2_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
            .setOrangeTextColor ()
            .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
          _ = view_2_2_0.appendView (view_2_2_0_3)
        }
        _ = view_2_2.appendView (view_2_2_0)
        let view_2_2_1 = AutoLayoutFlexibleSpace ()
        _ = view_2_2.appendView (view_2_2_1)
        let view_2_2_2 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
        _ = view_2_2.appendView (view_2_2_2)
        let view_2_2_3 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_3_0 = AutoLayoutGridView2 ()
            .set (leftMargin: .large)
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Front Side Images", size: .small)
  .bind_value (self.mDataSelection.drawImagesTopSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Front Side QRCodes", size: .small)
  .bind_value (self.mDataSelection.drawQRCodesTopSide_property)
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
  .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
  .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksTopSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
  .bind_value (self.mDataSelection.drawPadsTopSide_property)
 ; return right } ())
          _ = view_2_2_3.appendView (view_2_2_3_0)
          let view_2_2_3_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_3.appendView (view_2_2_3_1)
        }
        _ = view_2_2.appendView (view_2_2_3)
        let view_2_2_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_4_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          _ = view_2_2_4.appendView (view_2_2_4_0)
          let view_2_2_4_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_4.appendView (view_2_2_4_1)
        }
        _ = view_2_2.appendView (view_2_2_4)
        let view_2_2_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_5_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          _ = view_2_2_5.appendView (view_2_2_5_0)
          let view_2_2_5_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_5.appendView (view_2_2_5_1)
        }
        _ = view_2_2.appendView (view_2_2_5)
        let view_2_2_6 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_6_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          _ = view_2_2_6.appendView (view_2_2_6_0)
          let view_2_2_6_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_6.appendView (view_2_2_6_1)
        }
        _ = view_2_2.appendView (view_2_2_6)
        let view_2_2_7 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .left)
        _ = view_2_2.appendView (view_2_2_7)
        let view_2_2_8 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_8_0 = AutoLayoutGridView2 ()
            .set (leftMargin: .large)
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
  .bind_value (self.mDataSelection.drawTraversingPads_property)
  .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutFlexibleSpace ()
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
  .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
  .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutFlexibleSpace ()
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
  .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
  .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
  .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
  .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
  .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
  .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
  .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
  .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
  .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
  .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
  .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
  .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
 ; return right } ())
          _ = view_2_2_8.appendView (view_2_2_8_0)
          let view_2_2_8_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_8.appendView (view_2_2_8_1)
        }
        _ = view_2_2.appendView (view_2_2_8)
        let view_2_2_9 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .left)
        _ = view_2_2.appendView (view_2_2_9)
        let view_2_2_10 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_10_0 = AutoLayoutGridView2 ()
            .set (leftMargin: .large)
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Back Side Images", size: .small)
  .bind_value (self.mDataSelection.drawImagesBottomSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Back Side QRCodes", size: .small)
  .bind_value (self.mDataSelection.drawQRCodesBottomSide_property)
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
  .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
  .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
 ; return right } ())
            .addFirstBaseLineAligned (left: { () -> NSView in let left = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
  .bind_value (self.mDataSelection.drawTracksBottomSide_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
  .bind_value (self.mDataSelection.drawPadsBottomSide_property)
 ; return right } ())
          _ = view_2_2_10.appendView (view_2_2_10_0)
          let view_2_2_10_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_10.appendView (view_2_2_10_1)
        }
        _ = view_2_2.appendView (view_2_2_10)
        let view_2_2_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_11_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          _ = view_2_2_11.appendView (view_2_2_11_0)
          let view_2_2_11_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_11.appendView (view_2_2_11_1)
        }
        _ = view_2_2.appendView (view_2_2_11)
        let view_2_2_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_12_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          _ = view_2_2_12.appendView (view_2_2_12_0)
          let view_2_2_12_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_12.appendView (view_2_2_12_1)
        }
        _ = view_2_2.appendView (view_2_2_12)
        let view_2_2_13 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_13_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          _ = view_2_2_13.appendView (view_2_2_13_0)
          let view_2_2_13_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_13.appendView (view_2_2_13_1)
        }
        _ = view_2_2.appendView (view_2_2_13)
        let view_2_2_14 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .left)
        _ = view_2_2.appendView (view_2_2_14)
        let view_2_2_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_15_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          _ = view_2_2_15.appendView (view_2_2_15_0)
          let view_2_2_15_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_15.appendView (view_2_2_15_1)
          let view_2_2_15_2 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          _ = view_2_2_15.appendView (view_2_2_15_2)
          let view_2_2_15_3 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_15.appendView (view_2_2_15_3)
          let view_2_2_15_4 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          _ = view_2_2_15.appendView (view_2_2_15_4)
        }
        _ = view_2_2.appendView (view_2_2_15)
        let view_2_2_16 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .left)
        _ = view_2_2.appendView (view_2_2_16)
        let view_2_2_17 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .large)
        do{
          let view_2_2_17_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          _ = view_2_2_17.appendView (view_2_2_17_0)
          let view_2_2_17_1 = AutoLayoutFlexibleSpace ()
          _ = view_2_2_17.appendView (view_2_2_17_1)
        }
        _ = view_2_2.appendView (view_2_2_17)
        let view_2_2_18 = AutoLayoutFlexibleSpace ()
        _ = view_2_2.appendView (view_2_2_18)
      }
      _ = view_2.appendView (view_2_2)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)


  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusErrorCount (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusErrorCount_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusErrorCount_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusMessage (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusMessage_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusMessage_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.startsBeingObserved (by: self.generatedFileCountString_property)

  //--- Atomic property: segmentedControlDataIssueImage
    self.segmentedControlDataIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.hasDataWarning_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_AutoLayoutArtworkDocument_segmentedControlDataIssueImage (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.hasDataWarning_property.startsBeingObserved (by: self.segmentedControlDataIssueImage_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.segmentedControlDataIssueImage_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s1 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s2 = unwSelf.rootObject.fileGenerationParameterArray_property.selection
        let s3 = unwSelf.rootObject.emptyDrillFileExtension_property.selection
        let s4 = unwSelf.documentFileName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusWarningCount (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.toMany_fileExtension_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_name_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.fileGenerationParameterArray_property.toMany_hasNoData_StartsBeingObserved (by: self.statusWarningCount_property)
    self.rootObject.emptyDrillFileExtension_property.startsBeingObserved (by: self.statusWarningCount_property)
    self.documentFileName_property.startsBeingObserved (by: self.statusWarningCount_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

