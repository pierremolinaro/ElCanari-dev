//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutArtworkDocument) class AutoLayoutArtworkDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_AutoLayoutArtworkDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_AutoLayoutArtworkDocument_mDataSelection ()

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtensionImage
  //····················································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    switch self.emptyDrillFileExtensionImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: generatedFileCountString
  //····················································································································

  final let generatedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var generatedFileCountString : String? {
    switch self.generatedFileCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: segmentedControlDataIssueImage
  //····················································································································

  final let segmentedControlDataIssueImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var segmentedControlDataIssueImage : NSImage? {
    switch self.segmentedControlDataIssueImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.postEvent ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: mDataController
      self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
    //--- Selection controller property: mDataSelection
      self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ArtworkRoot { return self.mRootObject as! ArtworkRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Description", tooltip: "Artwork Description", pageView: self.mDescriptionPage)
          .addPage (title: "Minima", tooltip: "Minima Editor", pageView: self.mMinimaPage)
          .addPage (title: "Data", tooltip: "DataEditor", pageView: self.mDataPage)
          .bind_selectedPage (self.rootObject.selectedTab_property)
          .bind_segmentImage (self.segmentedControlDataIssueImage_property, segmentIndex:2)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (size: .regular)
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (size: .regular)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.statusImage_property)
            .bind_tooltip (self.statusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDescriptionPage
  //····················································································································

  lazy var mDescriptionPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutTextField (width: 56, size: .regular)
      .expandableWidth ()
      .set (alignment: .left)
      .bind_value (self.rootObject.title_property, sendContinously:true)
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutStaticLabel (title: "Layout", bold: false, size: .regular)
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .regular)
        .bind_selectedIndex (self.rootObject.layerConfiguration_property)
      view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_3)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutTextView ()
      .bind_value (self.rootObject.comments_property)
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutArtworkDocument.resetVersionAndSignatureAction (_:))
        )
      view_3.appendView (view_3_1)
    }
    vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mMinimaPage
  //····················································································································

  lazy var mMinimaPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_2)
        let view_1_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_3)
        let view_1_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_4)
        let view_1_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_5)
        let view_1_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_6)
        let view_1_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_7)
        let view_1_1_8 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_8)
      }
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutStaticImageView (name: "artwork")
      view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_4)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutTwoColumnsGridView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_2)
    }
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_4)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDataPage
  //····················································································································

  lazy var mDataPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutTextField (width: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    do{
      let view_2_0 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_2_0_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_2_0_1)
        view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_2)
      }
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_2_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_2_2_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small)
            view_2_2_0_0.appendView (view_2_2_0_0_0)
            let view_2_2_0_0_1 = AutoLayoutTextField (width: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            view_2_2_0_0.appendView (view_2_2_0_0_1)
          }
          view_2_2_0.appendView (view_2_2_0_0)
          let view_2_2_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          view_2_2_0.appendView (view_2_2_0_1)
          let view_2_2_0_2 = AutoLayoutFlexibleSpace ()
          view_2_2_0.appendView (view_2_2_0_2)
          let view_2_2_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small)
            .setOrangeTextColor ()
            .bind_hidden (.not (.id (self.mDataSelection.hasNoData_property)))
          view_2_2_0.appendView (view_2_2_0_3)
        }
        view_2_2.appendView (view_2_2_0)
        let view_2_2_1 = AutoLayoutFlexibleSpace ()
        view_2_2.appendView (view_2_2_1)
        let view_2_2_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_2_0 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small)
          view_2_2_2.appendView (view_2_2_2_0)
          let view_2_2_2_1 = AutoLayoutFlexibleSpace ()
          view_2_2_2.appendView (view_2_2_2_1)
        }
        view_2_2.appendView (view_2_2_2)
        let view_2_2_3 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_3_0 = AutoLayoutTwoColumnsGridView ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
          view_2_2_3.appendView (view_2_2_3_0)
          let view_2_2_3_1 = AutoLayoutFlexibleSpace ()
          view_2_2_3.appendView (view_2_2_3_1)
        }
        view_2_2.appendView (view_2_2_3)
        let view_2_2_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_4_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          view_2_2_4.appendView (view_2_2_4_0)
          let view_2_2_4_1 = AutoLayoutFlexibleSpace ()
          view_2_2_4.appendView (view_2_2_4_1)
        }
        view_2_2.appendView (view_2_2_4)
        let view_2_2_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_5_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          view_2_2_5.appendView (view_2_2_5_0)
          let view_2_2_5_1 = AutoLayoutFlexibleSpace ()
          view_2_2_5.appendView (view_2_2_5_1)
        }
        view_2_2.appendView (view_2_2_5)
        let view_2_2_6 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_6_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          view_2_2_6.appendView (view_2_2_6_0)
          let view_2_2_6_1 = AutoLayoutFlexibleSpace ()
          view_2_2_6.appendView (view_2_2_6_1)
        }
        view_2_2.appendView (view_2_2_6)
        let view_2_2_7 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_7_0 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small)
          view_2_2_7.appendView (view_2_2_7_0)
          let view_2_2_7_1 = AutoLayoutFlexibleSpace ()
          view_2_2_7.appendView (view_2_2_7_1)
        }
        view_2_2.appendView (view_2_2_7)
        let view_2_2_8 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_8_0 = AutoLayoutTwoColumnsGridView ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_12 (), right: self.computeImplicitView_13 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
          view_2_2_8.appendView (view_2_2_8_0)
          let view_2_2_8_1 = AutoLayoutFlexibleSpace ()
          view_2_2_8.appendView (view_2_2_8_1)
        }
        view_2_2.appendView (view_2_2_8)
        let view_2_2_9 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_9_0 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small)
          view_2_2_9.appendView (view_2_2_9_0)
          let view_2_2_9_1 = AutoLayoutFlexibleSpace ()
          view_2_2_9.appendView (view_2_2_9_1)
        }
        view_2_2.appendView (view_2_2_9)
        let view_2_2_10 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_10_0 = AutoLayoutTwoColumnsGridView ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
          view_2_2_10.appendView (view_2_2_10_0)
          let view_2_2_10_1 = AutoLayoutFlexibleSpace ()
          view_2_2_10.appendView (view_2_2_10_1)
        }
        view_2_2.appendView (view_2_2_10)
        let view_2_2_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_11_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          view_2_2_11.appendView (view_2_2_11_0)
          let view_2_2_11_1 = AutoLayoutFlexibleSpace ()
          view_2_2_11.appendView (view_2_2_11_1)
        }
        view_2_2.appendView (view_2_2_11)
        let view_2_2_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_12_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          view_2_2_12.appendView (view_2_2_12_0)
          let view_2_2_12_1 = AutoLayoutFlexibleSpace ()
          view_2_2_12.appendView (view_2_2_12_1)
        }
        view_2_2.appendView (view_2_2_12)
        let view_2_2_13 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_13_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          view_2_2_13.appendView (view_2_2_13_0)
          let view_2_2_13_1 = AutoLayoutFlexibleSpace ()
          view_2_2_13.appendView (view_2_2_13_1)
        }
        view_2_2.appendView (view_2_2_13)
        let view_2_2_14 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_14_0 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small)
          view_2_2_14.appendView (view_2_2_14_0)
          let view_2_2_14_1 = AutoLayoutFlexibleSpace ()
          view_2_2_14.appendView (view_2_2_14_1)
        }
        view_2_2.appendView (view_2_2_14)
        let view_2_2_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_15_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          view_2_2_15.appendView (view_2_2_15_0)
          let view_2_2_15_1 = AutoLayoutFlexibleSpace ()
          view_2_2_15.appendView (view_2_2_15_1)
          let view_2_2_15_2 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          view_2_2_15.appendView (view_2_2_15_2)
          let view_2_2_15_3 = AutoLayoutFlexibleSpace ()
          view_2_2_15.appendView (view_2_2_15_3)
          let view_2_2_15_4 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          view_2_2_15.appendView (view_2_2_15_4)
        }
        view_2_2.appendView (view_2_2_15)
        let view_2_2_16 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
          .setFirstBaselineAlignment ()
        do{
          let view_2_2_16_0 = AutoLayoutCheckbox (title: "Pad Holes in PDF file, with diameter", size: .small)
            .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
          view_2_2_16.appendView (view_2_2_16_0)
          let view_2_2_16_1 = AutoLayoutFlexibleSpace ()
          view_2_2_16.appendView (view_2_2_16_1)
          let view_2_2_16_2 = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
            .bind_enabled (.id (self.mDataSelection.drawPadHolesInPDF_property))
          view_2_2_16.appendView (view_2_2_16_2)
        }
        view_2_2.appendView (view_2_2_16)
        let view_2_2_17 = AutoLayoutHorizontalStackView ()
        do{
          let view_2_2_17_0 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small)
          view_2_2_17.appendView (view_2_2_17_0)
          let view_2_2_17_1 = AutoLayoutFlexibleSpace ()
          view_2_2_17.appendView (view_2_2_17_1)
        }
        view_2_2.appendView (view_2_2_17)
        let view_2_2_18 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_2_2_18_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          view_2_2_18.appendView (view_2_2_18_0)
          let view_2_2_18_1 = AutoLayoutFlexibleSpace ()
          view_2_2_18.appendView (view_2_2_18_1)
        }
        view_2_2.appendView (view_2_2_18)
        let view_2_2_19 = AutoLayoutFlexibleSpace ()
        view_2_2.appendView (view_2_2_19)
      }
      view_2.appendView (view_2_2)
    }
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_value (self.mDataSelection.drawTraversingPads_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsBottomSide_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    }
    self.windowForSheet?.contentViewController = EBViewController (mainView)
//    self.windowForSheet?.contentView = mainView
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.emptyDrillFileExtension_property.selection, unwSelf.documentFileName_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusMessage (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.statusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_hasNoData (self.statusMessage_property)
    self.rootObject.emptyDrillFileExtension_property.addEBObserver (self.statusMessage_property)
    self.documentFileName_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.emptyDrillFileExtension_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.emptyDrillFileExtension_property.addEBObserver (self.emptyDrillFileExtensionImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mDataController.sortedArray_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.generatedFileCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: segmentedControlDataIssueImage
    self.segmentedControlDataIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.hasDataWarning_property.selection, unwSelf.rootObject.emptyDrillFileExtension_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_AutoLayoutArtworkDocument_segmentedControlDataIssueImage (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.segmentedControlDataIssueImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.segmentedControlDataIssueImage_property)
    self.rootObject.hasDataWarning_property.addEBObserver (self.segmentedControlDataIssueImage_property)
    self.rootObject.emptyDrillFileExtension_property.addEBObserver (self.segmentedControlDataIssueImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.emptyDrillFileExtension_property.selection, unwSelf.documentFileName_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_AutoLayoutArtworkDocument_statusImage (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.statusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.statusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_hasNoData (self.statusImage_property)
    self.rootObject.emptyDrillFileExtension_property.addEBObserver (self.statusImage_property)
    self.documentFileName_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mDescriptionPage.ebCleanUp ()
    self.mMinimaPage.ebCleanUp ()
    self.mDataPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.statusMessage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.statusMessage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_hasNoData (self.statusMessage_property)
    // self.rootObject.emptyDrillFileExtension_property.removeEBObserver (self.statusMessage_property)
    // self.documentFileName_property.removeEBObserver (self.statusMessage_property)
    // self.rootObject.emptyDrillFileExtension_property.removeEBObserver (self.emptyDrillFileExtensionImage_property)
    // self.mDataController.sortedArray_property.count_property.removeEBObserver (self.generatedFileCountString_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.segmentedControlDataIssueImage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.segmentedControlDataIssueImage_property)
    // self.rootObject.hasDataWarning_property.removeEBObserver (self.segmentedControlDataIssueImage_property)
    // self.rootObject.emptyDrillFileExtension_property.removeEBObserver (self.segmentedControlDataIssueImage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.statusImage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.statusImage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_hasNoData (self.statusImage_property)
    // self.rootObject.emptyDrillFileExtension_property.removeEBObserver (self.statusImage_property)
    // self.documentFileName_property.removeEBObserver (self.statusImage_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

