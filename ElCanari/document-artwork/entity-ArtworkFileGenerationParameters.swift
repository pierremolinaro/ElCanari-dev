//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawBoardLimits : AnyObject {
  var drawBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawInternalBoardLimits : AnyObject {
  var drawInternalBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesTopSide : AnyObject {
  var drawComponentNamesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesBottomSide : AnyObject {
  var drawComponentNamesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesTopSide : AnyObject {
  var drawComponentValuesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesBottomSide : AnyObject {
  var drawComponentValuesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendTopSide : AnyObject {
  var drawPackageLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendBottomSide : AnyObject {
  var drawPackageLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadHolesInPDF : AnyObject {
  var drawPadHolesInPDF : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsTopSide : AnyObject {
  var drawPadsTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsBottomSide : AnyObject {
  var drawPadsBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutTopSide : AnyObject {
  var drawTextsLayoutTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutBottomSide : AnyObject {
  var drawTextsLayoutBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendTopSide : AnyObject {
  var drawTextsLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendBottomSide : AnyObject {
  var drawTextsLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksTopSide : AnyObject {
  var drawTracksTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksInner1Layer : AnyObject {
  var drawTracksInner1Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksInner2Layer : AnyObject {
  var drawTracksInner2Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksInner3Layer : AnyObject {
  var drawTracksInner3Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksInner4Layer : AnyObject {
  var drawTracksInner4Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksBottomSide : AnyObject {
  var drawTracksBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawVias : AnyObject {
  var drawVias : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_fileExtension : AnyObject {
  var fileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_horizontalMirror : AnyObject {
  var horizontalMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_name : AnyObject {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF : AnyObject {
  var measurementUnitForPadHoleInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_padHoleDiameterInPDF : AnyObject {
  var padHoleDiameterInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ArtworkFileGenerationParameters : EBManagedObject,
         ArtworkFileGenerationParameters_drawBoardLimits,
         ArtworkFileGenerationParameters_drawInternalBoardLimits,
         ArtworkFileGenerationParameters_drawComponentNamesTopSide,
         ArtworkFileGenerationParameters_drawComponentNamesBottomSide,
         ArtworkFileGenerationParameters_drawComponentValuesTopSide,
         ArtworkFileGenerationParameters_drawComponentValuesBottomSide,
         ArtworkFileGenerationParameters_drawPackageLegendTopSide,
         ArtworkFileGenerationParameters_drawPackageLegendBottomSide,
         ArtworkFileGenerationParameters_drawPadHolesInPDF,
         ArtworkFileGenerationParameters_drawPadsTopSide,
         ArtworkFileGenerationParameters_drawPadsBottomSide,
         ArtworkFileGenerationParameters_drawTextsLayoutTopSide,
         ArtworkFileGenerationParameters_drawTextsLayoutBottomSide,
         ArtworkFileGenerationParameters_drawTextsLegendTopSide,
         ArtworkFileGenerationParameters_drawTextsLegendBottomSide,
         ArtworkFileGenerationParameters_drawTracksTopSide,
         ArtworkFileGenerationParameters_drawTracksInner1Layer,
         ArtworkFileGenerationParameters_drawTracksInner2Layer,
         ArtworkFileGenerationParameters_drawTracksInner3Layer,
         ArtworkFileGenerationParameters_drawTracksInner4Layer,
         ArtworkFileGenerationParameters_drawTracksBottomSide,
         ArtworkFileGenerationParameters_drawVias,
         ArtworkFileGenerationParameters_fileExtension,
         ArtworkFileGenerationParameters_horizontalMirror,
         ArtworkFileGenerationParameters_name,
         ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF,
         ArtworkFileGenerationParameters_padHoleDiameterInPDF {

  //····················································································································
  //   Atomic property: drawBoardLimits
  //····················································································································

  final let drawBoardLimits_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawBoardLimits_toDefaultValue () {
    self.drawBoardLimits = false
  }

  //····················································································································

  final var drawBoardLimits : Bool {
    get { return self.drawBoardLimits_property.propval }
    set { self.drawBoardLimits_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawInternalBoardLimits
  //····················································································································

  final let drawInternalBoardLimits_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawInternalBoardLimits_toDefaultValue () {
    self.drawInternalBoardLimits = false
  }

  //····················································································································

  final var drawInternalBoardLimits : Bool {
    get { return self.drawInternalBoardLimits_property.propval }
    set { self.drawInternalBoardLimits_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawComponentNamesTopSide
  //····················································································································

  final let drawComponentNamesTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawComponentNamesTopSide_toDefaultValue () {
    self.drawComponentNamesTopSide = false
  }

  //····················································································································

  final var drawComponentNamesTopSide : Bool {
    get { return self.drawComponentNamesTopSide_property.propval }
    set { self.drawComponentNamesTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawComponentNamesBottomSide
  //····················································································································

  final let drawComponentNamesBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawComponentNamesBottomSide_toDefaultValue () {
    self.drawComponentNamesBottomSide = false
  }

  //····················································································································

  final var drawComponentNamesBottomSide : Bool {
    get { return self.drawComponentNamesBottomSide_property.propval }
    set { self.drawComponentNamesBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawComponentValuesTopSide
  //····················································································································

  final let drawComponentValuesTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawComponentValuesTopSide_toDefaultValue () {
    self.drawComponentValuesTopSide = false
  }

  //····················································································································

  final var drawComponentValuesTopSide : Bool {
    get { return self.drawComponentValuesTopSide_property.propval }
    set { self.drawComponentValuesTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawComponentValuesBottomSide
  //····················································································································

  final let drawComponentValuesBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawComponentValuesBottomSide_toDefaultValue () {
    self.drawComponentValuesBottomSide = false
  }

  //····················································································································

  final var drawComponentValuesBottomSide : Bool {
    get { return self.drawComponentValuesBottomSide_property.propval }
    set { self.drawComponentValuesBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawPackageLegendTopSide
  //····················································································································

  final let drawPackageLegendTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawPackageLegendTopSide_toDefaultValue () {
    self.drawPackageLegendTopSide = false
  }

  //····················································································································

  final var drawPackageLegendTopSide : Bool {
    get { return self.drawPackageLegendTopSide_property.propval }
    set { self.drawPackageLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawPackageLegendBottomSide
  //····················································································································

  final let drawPackageLegendBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawPackageLegendBottomSide_toDefaultValue () {
    self.drawPackageLegendBottomSide = false
  }

  //····················································································································

  final var drawPackageLegendBottomSide : Bool {
    get { return self.drawPackageLegendBottomSide_property.propval }
    set { self.drawPackageLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawPadHolesInPDF
  //····················································································································

  final let drawPadHolesInPDF_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawPadHolesInPDF_toDefaultValue () {
    self.drawPadHolesInPDF = false
  }

  //····················································································································

  final var drawPadHolesInPDF : Bool {
    get { return self.drawPadHolesInPDF_property.propval }
    set { self.drawPadHolesInPDF_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawPadsTopSide
  //····················································································································

  final let drawPadsTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawPadsTopSide_toDefaultValue () {
    self.drawPadsTopSide = false
  }

  //····················································································································

  final var drawPadsTopSide : Bool {
    get { return self.drawPadsTopSide_property.propval }
    set { self.drawPadsTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawPadsBottomSide
  //····················································································································

  final let drawPadsBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawPadsBottomSide_toDefaultValue () {
    self.drawPadsBottomSide = false
  }

  //····················································································································

  final var drawPadsBottomSide : Bool {
    get { return self.drawPadsBottomSide_property.propval }
    set { self.drawPadsBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTextsLayoutTopSide
  //····················································································································

  final let drawTextsLayoutTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTextsLayoutTopSide_toDefaultValue () {
    self.drawTextsLayoutTopSide = false
  }

  //····················································································································

  final var drawTextsLayoutTopSide : Bool {
    get { return self.drawTextsLayoutTopSide_property.propval }
    set { self.drawTextsLayoutTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTextsLayoutBottomSide
  //····················································································································

  final let drawTextsLayoutBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTextsLayoutBottomSide_toDefaultValue () {
    self.drawTextsLayoutBottomSide = false
  }

  //····················································································································

  final var drawTextsLayoutBottomSide : Bool {
    get { return self.drawTextsLayoutBottomSide_property.propval }
    set { self.drawTextsLayoutBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTextsLegendTopSide
  //····················································································································

  final let drawTextsLegendTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTextsLegendTopSide_toDefaultValue () {
    self.drawTextsLegendTopSide = false
  }

  //····················································································································

  final var drawTextsLegendTopSide : Bool {
    get { return self.drawTextsLegendTopSide_property.propval }
    set { self.drawTextsLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTextsLegendBottomSide
  //····················································································································

  final let drawTextsLegendBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTextsLegendBottomSide_toDefaultValue () {
    self.drawTextsLegendBottomSide = false
  }

  //····················································································································

  final var drawTextsLegendBottomSide : Bool {
    get { return self.drawTextsLegendBottomSide_property.propval }
    set { self.drawTextsLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksTopSide
  //····················································································································

  final let drawTracksTopSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksTopSide_toDefaultValue () {
    self.drawTracksTopSide = false
  }

  //····················································································································

  final var drawTracksTopSide : Bool {
    get { return self.drawTracksTopSide_property.propval }
    set { self.drawTracksTopSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksInner1Layer
  //····················································································································

  final let drawTracksInner1Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksInner1Layer_toDefaultValue () {
    self.drawTracksInner1Layer = false
  }

  //····················································································································

  final var drawTracksInner1Layer : Bool {
    get { return self.drawTracksInner1Layer_property.propval }
    set { self.drawTracksInner1Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksInner2Layer
  //····················································································································

  final let drawTracksInner2Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksInner2Layer_toDefaultValue () {
    self.drawTracksInner2Layer = false
  }

  //····················································································································

  final var drawTracksInner2Layer : Bool {
    get { return self.drawTracksInner2Layer_property.propval }
    set { self.drawTracksInner2Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksInner3Layer
  //····················································································································

  final let drawTracksInner3Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksInner3Layer_toDefaultValue () {
    self.drawTracksInner3Layer = false
  }

  //····················································································································

  final var drawTracksInner3Layer : Bool {
    get { return self.drawTracksInner3Layer_property.propval }
    set { self.drawTracksInner3Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksInner4Layer
  //····················································································································

  final let drawTracksInner4Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksInner4Layer_toDefaultValue () {
    self.drawTracksInner4Layer = false
  }

  //····················································································································

  final var drawTracksInner4Layer : Bool {
    get { return self.drawTracksInner4Layer_property.propval }
    set { self.drawTracksInner4Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawTracksBottomSide
  //····················································································································

  final let drawTracksBottomSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawTracksBottomSide_toDefaultValue () {
    self.drawTracksBottomSide = false
  }

  //····················································································································

  final var drawTracksBottomSide : Bool {
    get { return self.drawTracksBottomSide_property.propval }
    set { self.drawTracksBottomSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawVias
  //····················································································································

  final let drawVias_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawVias_toDefaultValue () {
    self.drawVias = false
  }

  //····················································································································

  final var drawVias : Bool {
    get { return self.drawVias_property.propval }
    set { self.drawVias_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: fileExtension
  //····················································································································

  final let fileExtension_property : EBStoredProperty_String

  //····················································································································

  final func reset_fileExtension_toDefaultValue () {
    self.fileExtension = "?"
  }

  //····················································································································

  final var fileExtension : String {
    get { return self.fileExtension_property.propval }
    set { self.fileExtension_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: horizontalMirror
  //····················································································································

  final let horizontalMirror_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_horizontalMirror_toDefaultValue () {
    self.horizontalMirror = false
  }

  //····················································································································

  final var horizontalMirror : Bool {
    get { return self.horizontalMirror_property.propval }
    set { self.horizontalMirror_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  final let name_property : EBStoredProperty_String

  //····················································································································

  final func reset_name_toDefaultValue () {
    self.name = "Unnamed"
  }

  //····················································································································

  final var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: measurementUnitForPadHoleInPDF
  //····················································································································

  final let measurementUnitForPadHoleInPDF_property : EBStoredProperty_Int

  //····················································································································

  final func reset_measurementUnitForPadHoleInPDF_toDefaultValue () {
    self.measurementUnitForPadHoleInPDF = 90000
  }

  //····················································································································

  final var measurementUnitForPadHoleInPDF : Int {
    get { return self.measurementUnitForPadHoleInPDF_property.propval }
    set { self.measurementUnitForPadHoleInPDF_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padHoleDiameterInPDF
  //····················································································································

  final let padHoleDiameterInPDF_property : EBStoredProperty_Int

  //····················································································································

  final func reset_padHoleDiameterInPDF_toDefaultValue () {
    self.padHoleDiameterInPDF = 90000
  }

  //····················································································································

  final var padHoleDiameterInPDF : Int {
    get { return self.padHoleDiameterInPDF_property.propval }
    set { self.padHoleDiameterInPDF_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.drawBoardLimits_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawInternalBoardLimits_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawComponentNamesTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawComponentNamesBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawComponentValuesTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawComponentValuesBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawPackageLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawPackageLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawPadHolesInPDF_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawPadsTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawPadsBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTextsLayoutTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTextsLayoutBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTextsLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTextsLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksTopSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksInner1Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksInner2Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksInner3Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksInner4Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawTracksBottomSide_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.drawVias_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.fileExtension_property = EBStoredProperty_String (defaultValue: "?", undoManager: ebUndoManager)
    self.horizontalMirror_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.name_property = EBStoredProperty_String (defaultValue: "Unnamed", undoManager: ebUndoManager)
    self.measurementUnitForPadHoleInPDF_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: ebUndoManager)
    self.padHoleDiameterInPDF_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: self)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: self)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: self)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: self)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: self)
    self.drawPadsTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: self)
    self.drawTracksInner1Layer_property.setSignatureObserver (observer: self)
    self.drawTracksInner2Layer_property.setSignatureObserver (observer: self)
    self.drawTracksInner3Layer_property.setSignatureObserver (observer: self)
    self.drawTracksInner4Layer_property.setSignatureObserver (observer: self)
    self.drawTracksTopSide_property.setSignatureObserver (observer: self)
    self.drawVias_property.setSignatureObserver (observer: self)
    self.fileExtension_property.setSignatureObserver (observer: self)
    self.horizontalMirror_property.setSignatureObserver (observer: self)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: self)
    self.name_property.setSignatureObserver (observer: self)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: nil)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: nil)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPadsTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTracksInner1Layer_property.setSignatureObserver (observer: nil)
    self.drawTracksInner2Layer_property.setSignatureObserver (observer: nil)
    self.drawTracksInner3Layer_property.setSignatureObserver (observer: nil)
    self.drawTracksInner4Layer_property.setSignatureObserver (observer: nil)
    self.drawTracksTopSide_property.setSignatureObserver (observer: nil)
    self.drawVias_property.setSignatureObserver (observer: nil)
    self.fileExtension_property.setSignatureObserver (observer: nil)
    self.horizontalMirror_property.setSignatureObserver (observer: nil)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: nil)
    self.name_property.setSignatureObserver (observer: nil)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "drawBoardLimits",
      idx: self.drawBoardLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawBoardLimits_property.mObserverExplorer,
      valueExplorer: &self.drawBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawInternalBoardLimits",
      idx: self.drawInternalBoardLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawInternalBoardLimits_property.mObserverExplorer,
      valueExplorer: &self.drawInternalBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesTopSide",
      idx: self.drawComponentNamesTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentNamesTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentNamesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesBottomSide",
      idx: self.drawComponentNamesBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentNamesBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentNamesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesTopSide",
      idx: self.drawComponentValuesTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentValuesTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentValuesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesBottomSide",
      idx: self.drawComponentValuesBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentValuesBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentValuesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendTopSide",
      idx: self.drawPackageLegendTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPackageLegendTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawPackageLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendBottomSide",
      idx: self.drawPackageLegendBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPackageLegendBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawPackageLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadHolesInPDF",
      idx: self.drawPadHolesInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadHolesInPDF_property.mObserverExplorer,
      valueExplorer: &self.drawPadHolesInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsTopSide",
      idx: self.drawPadsTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadsTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawPadsTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsBottomSide",
      idx: self.drawPadsBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadsBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawPadsBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutTopSide",
      idx: self.drawTextsLayoutTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLayoutTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLayoutTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutBottomSide",
      idx: self.drawTextsLayoutBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLayoutBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLayoutBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendTopSide",
      idx: self.drawTextsLegendTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLegendTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendBottomSide",
      idx: self.drawTextsLegendBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLegendBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksTopSide",
      idx: self.drawTracksTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTracksTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksInner1Layer",
      idx: self.drawTracksInner1Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksInner1Layer_property.mObserverExplorer,
      valueExplorer: &self.drawTracksInner1Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksInner2Layer",
      idx: self.drawTracksInner2Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksInner2Layer_property.mObserverExplorer,
      valueExplorer: &self.drawTracksInner2Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksInner3Layer",
      idx: self.drawTracksInner3Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksInner3Layer_property.mObserverExplorer,
      valueExplorer: &self.drawTracksInner3Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksInner4Layer",
      idx: self.drawTracksInner4Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksInner4Layer_property.mObserverExplorer,
      valueExplorer: &self.drawTracksInner4Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksBottomSide",
      idx: self.drawTracksBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTracksBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawVias",
      idx: self.drawVias_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawVias_property.mObserverExplorer,
      valueExplorer: &self.drawVias_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fileExtension",
      idx: self.fileExtension_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.fileExtension_property.mObserverExplorer,
      valueExplorer: &self.fileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalMirror",
      idx: self.horizontalMirror_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.horizontalMirror_property.mObserverExplorer,
      valueExplorer: &self.horizontalMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx: self.name_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.name_property.mObserverExplorer,
      valueExplorer: &self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "measurementUnitForPadHoleInPDF",
      idx: self.measurementUnitForPadHoleInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.measurementUnitForPadHoleInPDF_property.mObserverExplorer,
      valueExplorer: &self.measurementUnitForPadHoleInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padHoleDiameterInPDF",
      idx: self.padHoleDiameterInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padHoleDiameterInPDF_property.mObserverExplorer,
      valueExplorer: &self.padHoleDiameterInPDF_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.mObserverExplorer = nil
    self.drawBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.mObserverExplorer = nil
    self.drawInternalBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.mObserverExplorer = nil
    self.drawComponentNamesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.mObserverExplorer = nil
    self.drawComponentNamesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.mObserverExplorer = nil
    self.drawComponentValuesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.mObserverExplorer = nil
    self.drawComponentValuesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.mObserverExplorer = nil
    self.drawPackageLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.mObserverExplorer = nil
    self.drawPackageLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.mObserverExplorer = nil
    self.drawPadHolesInPDF_property.mValueExplorer = nil
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.mObserverExplorer = nil
    self.drawPadsTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.mObserverExplorer = nil
    self.drawPadsBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.mObserverExplorer = nil
    self.drawTextsLayoutTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.mObserverExplorer = nil
    self.drawTextsLayoutBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.mObserverExplorer = nil
    self.drawTextsLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.mObserverExplorer = nil
    self.drawTextsLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.mObserverExplorer = nil
    self.drawTracksTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksInner1Layer
    self.drawTracksInner1Layer_property.mObserverExplorer = nil
    self.drawTracksInner1Layer_property.mValueExplorer = nil
  //--- Atomic property: drawTracksInner2Layer
    self.drawTracksInner2Layer_property.mObserverExplorer = nil
    self.drawTracksInner2Layer_property.mValueExplorer = nil
  //--- Atomic property: drawTracksInner3Layer
    self.drawTracksInner3Layer_property.mObserverExplorer = nil
    self.drawTracksInner3Layer_property.mValueExplorer = nil
  //--- Atomic property: drawTracksInner4Layer
    self.drawTracksInner4Layer_property.mObserverExplorer = nil
    self.drawTracksInner4Layer_property.mValueExplorer = nil
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.mObserverExplorer = nil
    self.drawTracksBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawVias
    self.drawVias_property.mObserverExplorer = nil
    self.drawVias_property.mValueExplorer = nil
  //--- Atomic property: fileExtension
    self.fileExtension_property.mObserverExplorer = nil
    self.fileExtension_property.mValueExplorer = nil
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.mObserverExplorer = nil
    self.horizontalMirror_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.mObserverExplorer = nil
    self.measurementUnitForPadHoleInPDF_property.mValueExplorer = nil
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.mObserverExplorer = nil
    self.padHoleDiameterInPDF_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.storeIn (dictionary: ioDictionary, forKey: "drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.storeIn (dictionary: ioDictionary, forKey: "drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.storeIn (dictionary: ioDictionary, forKey: "drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksTopSide")
  //--- Atomic property: drawTracksInner1Layer
    self.drawTracksInner1Layer_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksInner1Layer")
  //--- Atomic property: drawTracksInner2Layer
    self.drawTracksInner2Layer_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksInner2Layer")
  //--- Atomic property: drawTracksInner3Layer
    self.drawTracksInner3Layer_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksInner3Layer")
  //--- Atomic property: drawTracksInner4Layer
    self.drawTracksInner4Layer_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksInner4Layer")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.storeIn (dictionary: ioDictionary, forKey: "drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.storeIn (dictionary: ioDictionary, forKey: "fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.storeIn (dictionary: ioDictionary, forKey: "horizontalMirror")
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.storeIn (dictionary: ioDictionary, forKey: "measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.storeIn (dictionary: ioDictionary, forKey: "padHoleDiameterInPDF")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.readFrom (dictionary: inDictionary, forKey: "drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.readFrom (dictionary: inDictionary, forKey: "drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.readFrom (dictionary: inDictionary, forKey: "drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.readFrom (dictionary: inDictionary, forKey: "drawTracksTopSide")
  //--- Atomic property: drawTracksInner1Layer
    self.drawTracksInner1Layer_property.readFrom (dictionary: inDictionary, forKey: "drawTracksInner1Layer")
  //--- Atomic property: drawTracksInner2Layer
    self.drawTracksInner2Layer_property.readFrom (dictionary: inDictionary, forKey: "drawTracksInner2Layer")
  //--- Atomic property: drawTracksInner3Layer
    self.drawTracksInner3Layer_property.readFrom (dictionary: inDictionary, forKey: "drawTracksInner3Layer")
  //--- Atomic property: drawTracksInner4Layer
    self.drawTracksInner4Layer_property.readFrom (dictionary: inDictionary, forKey: "drawTracksInner4Layer")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.readFrom (dictionary: inDictionary, forKey: "drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.readFrom (dictionary: inDictionary, forKey: "drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.readFrom (dictionary: inDictionary, forKey: "fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.readFrom (dictionary: inDictionary, forKey: "horizontalMirror")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey: "name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.readFrom (dictionary: inDictionary, forKey: "measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.readFrom (dictionary: inDictionary, forKey: "padHoleDiameterInPDF")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "drawBoardLimits\n"
    ioString += "drawInternalBoardLimits\n"
    ioString += "drawComponentNamesTopSide\n"
    ioString += "drawComponentNamesBottomSide\n"
    ioString += "drawComponentValuesTopSide\n"
    ioString += "drawComponentValuesBottomSide\n"
    ioString += "drawPackageLegendTopSide\n"
    ioString += "drawPackageLegendBottomSide\n"
    ioString += "drawPadHolesInPDF\n"
    ioString += "drawPadsTopSide\n"
    ioString += "drawPadsBottomSide\n"
    ioString += "drawTextsLayoutTopSide\n"
    ioString += "drawTextsLayoutBottomSide\n"
    ioString += "drawTextsLegendTopSide\n"
    ioString += "drawTextsLegendBottomSide\n"
    ioString += "drawTracksTopSide\n"
    ioString += "drawTracksInner1Layer\n"
    ioString += "drawTracksInner2Layer\n"
    ioString += "drawTracksInner3Layer\n"
    ioString += "drawTracksInner4Layer\n"
    ioString += "drawTracksBottomSide\n"
    ioString += "drawVias\n"
    ioString += "fileExtension\n"
    ioString += "horizontalMirror\n"
    ioString += "name\n"
    ioString += "measurementUnitForPadHoleInPDF\n"
    ioString += "padHoleDiameterInPDF\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.drawBoardLimits.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawInternalBoardLimits.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawComponentNamesTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawComponentNamesBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawComponentValuesTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawComponentValuesBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawPackageLegendTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawPackageLegendBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawPadHolesInPDF.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawPadsTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawPadsBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTextsLayoutTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTextsLayoutBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTextsLegendTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTextsLegendBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksTopSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksInner1Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksInner2Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksInner3Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksInner4Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawTracksBottomSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawVias.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.fileExtension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.horizontalMirror.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.name.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.measurementUnitForPadHoleInPDF.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padHoleDiameterInPDF.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["drawBoardLimits"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawBoardLimits = value
      }
      if let range = inDictionary ["drawInternalBoardLimits"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawInternalBoardLimits = value
      }
      if let range = inDictionary ["drawComponentNamesTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawComponentNamesTopSide = value
      }
      if let range = inDictionary ["drawComponentNamesBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawComponentNamesBottomSide = value
      }
      if let range = inDictionary ["drawComponentValuesTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawComponentValuesTopSide = value
      }
      if let range = inDictionary ["drawComponentValuesBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawComponentValuesBottomSide = value
      }
      if let range = inDictionary ["drawPackageLegendTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawPackageLegendTopSide = value
      }
      if let range = inDictionary ["drawPackageLegendBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawPackageLegendBottomSide = value
      }
      if let range = inDictionary ["drawPadHolesInPDF"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawPadHolesInPDF = value
      }
      if let range = inDictionary ["drawPadsTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawPadsTopSide = value
      }
      if let range = inDictionary ["drawPadsBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawPadsBottomSide = value
      }
      if let range = inDictionary ["drawTextsLayoutTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTextsLayoutTopSide = value
      }
      if let range = inDictionary ["drawTextsLayoutBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTextsLayoutBottomSide = value
      }
      if let range = inDictionary ["drawTextsLegendTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTextsLegendTopSide = value
      }
      if let range = inDictionary ["drawTextsLegendBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTextsLegendBottomSide = value
      }
      if let range = inDictionary ["drawTracksTopSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksTopSide = value
      }
      if let range = inDictionary ["drawTracksInner1Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksInner1Layer = value
      }
      if let range = inDictionary ["drawTracksInner2Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksInner2Layer = value
      }
      if let range = inDictionary ["drawTracksInner3Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksInner3Layer = value
      }
      if let range = inDictionary ["drawTracksInner4Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksInner4Layer = value
      }
      if let range = inDictionary ["drawTracksBottomSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawTracksBottomSide = value
      }
      if let range = inDictionary ["drawVias"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.drawVias = value
      }
      if let range = inDictionary ["fileExtension"], let value = String.unarchiveFromDataRange (inData, range) {
        self.fileExtension = value
      }
      if let range = inDictionary ["horizontalMirror"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.horizontalMirror = value
      }
      if let range = inDictionary ["name"], let value = String.unarchiveFromDataRange (inData, range) {
        self.name = value
      }
      if let range = inDictionary ["measurementUnitForPadHoleInPDF"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.measurementUnitForPadHoleInPDF = value
      }
      if let range = inDictionary ["padHoleDiameterInPDF"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.padHoleDiameterInPDF = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.drawBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawInternalBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadHolesInPDF_property.signature ())
    crc.accumulateUInt32 (self.drawPadsBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadsTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksInner1Layer_property.signature ())
    crc.accumulateUInt32 (self.drawTracksInner2Layer_property.signature ())
    crc.accumulateUInt32 (self.drawTracksInner3Layer_property.signature ())
    crc.accumulateUInt32 (self.drawTracksInner4Layer_property.signature ())
    crc.accumulateUInt32 (self.drawTracksTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawVias_property.signature ())
    crc.accumulateUInt32 (self.fileExtension_property.signature ())
    crc.accumulateUInt32 (self.horizontalMirror_property.signature ())
    crc.accumulateUInt32 (self.measurementUnitForPadHoleInPDF_property.signature ())
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.padHoleDiameterInPDF_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

