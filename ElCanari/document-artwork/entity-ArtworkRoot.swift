//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_layerConfiguration : AnyObject {
  var layerConfiguration : LayerConfiguration { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_selectedTab : AnyObject {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_comments : AnyObject {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPPTPTTTWdisplayUnit : AnyObject {
  var minPPTPTTTWdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPPTPTTTW : AnyObject {
  var minPPTPTTTW : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARdisplayUnit : AnyObject {
  var minValueForOARdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARinEBUnit : AnyObject {
  var minValueForOARinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDdisplayUnit : AnyObject {
  var minValueForPHDdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDinEBUnit : AnyObject {
  var minValueForPHDinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForBoardLimitWidthDisplayUnit : AnyObject {
  var minValueForBoardLimitWidthDisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForBoardLimitWidth : AnyObject {
  var minValueForBoardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_title : AnyObject {
  var title : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillDataFileExtension : AnyObject {
  var drillDataFileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_hasInnerElements : AnyObject {
  var hasInnerElements : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_hasSixLayers : AnyObject {
  var hasSixLayers : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_hasDataWarning : AnyObject {
  var hasDataWarning : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_emptyDrillFileExtension : AnyObject {
  var emptyDrillFileExtension : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ArtworkRoot : EBManagedObject,
         ArtworkRoot_layerConfiguration,
         ArtworkRoot_selectedTab,
         ArtworkRoot_comments,
         ArtworkRoot_minPPTPTTTWdisplayUnit,
         ArtworkRoot_minPPTPTTTW,
         ArtworkRoot_minValueForOARdisplayUnit,
         ArtworkRoot_minValueForOARinEBUnit,
         ArtworkRoot_minValueForPHDdisplayUnit,
         ArtworkRoot_minValueForPHDinEBUnit,
         ArtworkRoot_minValueForBoardLimitWidthDisplayUnit,
         ArtworkRoot_minValueForBoardLimitWidth,
         ArtworkRoot_title,
         ArtworkRoot_drillDataFileExtension,
         ArtworkRoot_hasInnerElements,
         ArtworkRoot_hasSixLayers,
         ArtworkRoot_hasDataWarning,
         ArtworkRoot_emptyDrillFileExtension,
         ArtworkRoot_signatureForERCChecking {

  //····················································································································
  //   Atomic property: layerConfiguration
  //····················································································································

  final let layerConfiguration_property : EBStoredProperty_LayerConfiguration

  //····················································································································

  final func reset_layerConfiguration_toDefaultValue () {
    self.layerConfiguration = LayerConfiguration.twoLayers
  }

  //····················································································································

  final var layerConfiguration : LayerConfiguration {
    get { return self.layerConfiguration_property.propval }
    set { self.layerConfiguration_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedTab
  //····················································································································

  final let selectedTab_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedTab_toDefaultValue () {
    self.selectedTab = 0
  }

  //····················································································································

  final var selectedTab : Int {
    get { return self.selectedTab_property.propval }
    set { self.selectedTab_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  final let comments_property : EBStoredProperty_String

  //····················································································································

  final func reset_comments_toDefaultValue () {
    self.comments = ""
  }

  //····················································································································

  final var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minPPTPTTTWdisplayUnit
  //····················································································································

  final let minPPTPTTTWdisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minPPTPTTTWdisplayUnit_toDefaultValue () {
    self.minPPTPTTTWdisplayUnit = 90
  }

  //····················································································································

  final var minPPTPTTTWdisplayUnit : Int {
    get { return self.minPPTPTTTWdisplayUnit_property.propval }
    set { self.minPPTPTTTWdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minPPTPTTTW
  //····················································································································

  final let minPPTPTTTW_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minPPTPTTTW_toDefaultValue () {
    self.minPPTPTTTW = 18000
  }

  //····················································································································

  final var minPPTPTTTW : Int {
    get { return self.minPPTPTTTW_property.propval }
    set { self.minPPTPTTTW_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForOARdisplayUnit
  //····················································································································

  final let minValueForOARdisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForOARdisplayUnit_toDefaultValue () {
    self.minValueForOARdisplayUnit = 90
  }

  //····················································································································

  final var minValueForOARdisplayUnit : Int {
    get { return self.minValueForOARdisplayUnit_property.propval }
    set { self.minValueForOARdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForOARinEBUnit
  //····················································································································

  final let minValueForOARinEBUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForOARinEBUnit_toDefaultValue () {
    self.minValueForOARinEBUnit = 18000
  }

  //····················································································································

  final var minValueForOARinEBUnit : Int {
    get { return self.minValueForOARinEBUnit_property.propval }
    set { self.minValueForOARinEBUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForPHDdisplayUnit
  //····················································································································

  final let minValueForPHDdisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForPHDdisplayUnit_toDefaultValue () {
    self.minValueForPHDdisplayUnit = 90
  }

  //····················································································································

  final var minValueForPHDdisplayUnit : Int {
    get { return self.minValueForPHDdisplayUnit_property.propval }
    set { self.minValueForPHDdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForPHDinEBUnit
  //····················································································································

  final let minValueForPHDinEBUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForPHDinEBUnit_toDefaultValue () {
    self.minValueForPHDinEBUnit = 18000
  }

  //····················································································································

  final var minValueForPHDinEBUnit : Int {
    get { return self.minValueForPHDinEBUnit_property.propval }
    set { self.minValueForPHDinEBUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  final let minValueForBoardLimitWidthDisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForBoardLimitWidthDisplayUnit_toDefaultValue () {
    self.minValueForBoardLimitWidthDisplayUnit = 90000
  }

  //····················································································································

  final var minValueForBoardLimitWidthDisplayUnit : Int {
    get { return self.minValueForBoardLimitWidthDisplayUnit_property.propval }
    set { self.minValueForBoardLimitWidthDisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: minValueForBoardLimitWidth
  //····················································································································

  final let minValueForBoardLimitWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_minValueForBoardLimitWidth_toDefaultValue () {
    self.minValueForBoardLimitWidth = 90000
  }

  //····················································································································

  final var minValueForBoardLimitWidth : Int {
    get { return self.minValueForBoardLimitWidth_property.propval }
    set { self.minValueForBoardLimitWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: title
  //····················································································································

  final let title_property : EBStoredProperty_String

  //····················································································································

  final func reset_title_toDefaultValue () {
    self.title = ""
  }

  //····················································································································

  final var title : String {
    get { return self.title_property.propval }
    set { self.title_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drillDataFileExtension
  //····················································································································

  final let drillDataFileExtension_property : EBStoredProperty_String

  //····················································································································

  final func reset_drillDataFileExtension_toDefaultValue () {
    self.drillDataFileExtension = "DRF"
  }

  //····················································································································

  final var drillDataFileExtension : String {
    get { return self.drillDataFileExtension_property.propval }
    set { self.drillDataFileExtension_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: fileGenerationParameterArray
  //····················································································································

  final let fileGenerationParameterArray_property = StoredArrayOf_ArtworkFileGenerationParameters (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var fileGenerationParameterArray : EBReferenceArray <ArtworkFileGenerationParameters> {
    get { return self.fileGenerationParameterArray_property.propval }
    set { self.fileGenerationParameterArray_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: hasInnerElements
  //····················································································································

  final let hasInnerElements_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasInnerElements : Bool? {
    switch self.hasInnerElements_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasSixLayers
  //····················································································································

  final let hasSixLayers_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasSixLayers : Bool? {
    switch self.hasSixLayers_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasDataWarning
  //····················································································································

  final let hasDataWarning_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasDataWarning : Bool? {
    switch self.hasDataWarning_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtension
  //····················································································································

  final let emptyDrillFileExtension_property = EBTransientProperty_Bool ()

  //····················································································································

  final var emptyDrillFileExtension : Bool? {
    switch self.emptyDrillFileExtension_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································

  final var signatureForERCChecking : UInt32? {
    switch self.signatureForERCChecking_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.layerConfiguration_property = EBStoredProperty_LayerConfiguration (defaultValue: LayerConfiguration.twoLayers, undoManager: ebUndoManager)
    self.selectedTab_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.minPPTPTTTWdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90, undoManager: ebUndoManager)
    self.minPPTPTTTW_property = EBStoredProperty_Int (defaultValue: 18000, undoManager: ebUndoManager)
    self.minValueForOARdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90, undoManager: ebUndoManager)
    self.minValueForOARinEBUnit_property = EBStoredProperty_Int (defaultValue: 18000, undoManager: ebUndoManager)
    self.minValueForPHDdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90, undoManager: ebUndoManager)
    self.minValueForPHDinEBUnit_property = EBStoredProperty_Int (defaultValue: 18000, undoManager: ebUndoManager)
    self.minValueForBoardLimitWidthDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: ebUndoManager)
    self.minValueForBoardLimitWidth_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: ebUndoManager)
    self.title_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.drillDataFileExtension_property = EBStoredProperty_String (defaultValue: "DRF", undoManager: ebUndoManager)
    super.init (ebUndoManager)
    gInitSemaphore.wait ()
  //--- To many property: fileGenerationParameterArray (has opposite relationship)
    self.fileGenerationParameterArray_property.ebUndoManager = self.ebUndoManager
    self.fileGenerationParameterArray_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mArtwork_property.setProp (me) } },
      resetter: { inObject in inObject.mArtwork_property.setProp (nil) }
    )
  //--- Atomic property: hasInnerElements
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.layerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ArtworkRoot_hasInnerElements (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.layerConfiguration_property.addEBObserver (self.hasInnerElements_property)
  //--- Atomic property: hasSixLayers
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.layerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ArtworkRoot_hasSixLayers (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.layerConfiguration_property.addEBObserver (self.hasSixLayers_property)
  //--- Atomic property: hasDataWarning
    self.hasDataWarning_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.fileGenerationParameterArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ArtworkRoot_hasDataWarning (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.fileGenerationParameterArray_property.addEBObserverOf_hasNoData (self.hasDataWarning_property)
  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ArtworkRoot_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.addEBObserver (self.emptyDrillFileExtension_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.minPPTPTTTW_property.selection
        let s1 = unwSelf.minValueForOARinEBUnit_property.selection
        let s2 = unwSelf.minValueForBoardLimitWidth_property.selection
        let s3 = unwSelf.minValueForPHDinEBUnit_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ArtworkRoot_signatureForERCChecking (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.addEBObserver (self.signatureForERCChecking_property)
    self.minValueForOARinEBUnit_property.addEBObserver (self.signatureForERCChecking_property)
    self.minValueForBoardLimitWidth_property.addEBObserver (self.signatureForERCChecking_property)
    self.minValueForPHDinEBUnit_property.addEBObserver (self.signatureForERCChecking_property)
    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.fileGenerationParameterArray_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mArtwork_property.setProp (me) } },
      resetter: { inObject in inObject.mArtwork_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.drillDataFileExtension_property.setSignatureObserver (observer: self)
    self.fileGenerationParameterArray_property.setSignatureObserver (observer: self)
    self.layerConfiguration_property.setSignatureObserver (observer: self)
    self.minPPTPTTTW_property.setSignatureObserver (observer: self)
    self.minValueForBoardLimitWidth_property.setSignatureObserver (observer: self)
    self.minValueForOARinEBUnit_property.setSignatureObserver (observer: self)
    self.minValueForPHDinEBUnit_property.setSignatureObserver (observer: self)
    self.title_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

/*  override func cleanUpToManyRelationships () {
    self.fileGenerationParameterArray.removeAll ()
    super.cleanUpToManyRelationships ()
  } */

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: layerConfiguration
      self.layerConfiguration_property.storeIn (dictionary: ioDictionary, forKey: "layerConfiguration")
    //--- Atomic property: selectedTab
      self.selectedTab_property.storeIn (dictionary: ioDictionary, forKey: "selectedTab")
    //--- Atomic property: comments
      self.comments_property.storeIn (dictionary: ioDictionary, forKey: "comments")
    //--- Atomic property: minPPTPTTTWdisplayUnit
      self.minPPTPTTTWdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minPPTPTTTWdisplayUnit")
    //--- Atomic property: minPPTPTTTW
      self.minPPTPTTTW_property.storeIn (dictionary: ioDictionary, forKey: "minPPTPTTTW")
    //--- Atomic property: minValueForOARdisplayUnit
      self.minValueForOARdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForOARdisplayUnit")
    //--- Atomic property: minValueForOARinEBUnit
      self.minValueForOARinEBUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForOARinEBUnit")
    //--- Atomic property: minValueForPHDdisplayUnit
      self.minValueForPHDdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDdisplayUnit")
    //--- Atomic property: minValueForPHDinEBUnit
      self.minValueForPHDinEBUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDinEBUnit")
    //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
      self.minValueForBoardLimitWidthDisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForBoardLimitWidthDisplayUnit")
    //--- Atomic property: minValueForBoardLimitWidth
      self.minValueForBoardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "minValueForBoardLimitWidth")
    //--- Atomic property: title
      self.title_property.storeIn (dictionary: ioDictionary, forKey: "title")
    //--- Atomic property: drillDataFileExtension
      self.drillDataFileExtension_property.storeIn (dictionary: ioDictionary, forKey: "drillDataFileExtension")
  //--- To many property: fileGenerationParameterArray
    self.store (
      managedObjectArray: self.fileGenerationParameterArray_property.propval.values,
      relationshipName: "fileGenerationParameterArray",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: fileGenerationParameterArray
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "fileGenerationParameterArray",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [ArtworkFileGenerationParameters]
      self.fileGenerationParameterArray_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: layerConfiguration
    self.layerConfiguration_property.readFrom (dictionary: inDictionary, forKey: "layerConfiguration")
  //--- Atomic property: selectedTab
    self.selectedTab_property.readFrom (dictionary: inDictionary, forKey: "selectedTab")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey: "comments")
  //--- Atomic property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.readFrom (dictionary: inDictionary, forKey: "minPPTPTTTWdisplayUnit")
  //--- Atomic property: minPPTPTTTW
    self.minPPTPTTTW_property.readFrom (dictionary: inDictionary, forKey: "minPPTPTTTW")
  //--- Atomic property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.readFrom (dictionary: inDictionary, forKey: "minValueForOARdisplayUnit")
  //--- Atomic property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.readFrom (dictionary: inDictionary, forKey: "minValueForOARinEBUnit")
  //--- Atomic property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.readFrom (dictionary: inDictionary, forKey: "minValueForPHDdisplayUnit")
  //--- Atomic property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.readFrom (dictionary: inDictionary, forKey: "minValueForPHDinEBUnit")
  //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.readFrom (dictionary: inDictionary, forKey: "minValueForBoardLimitWidthDisplayUnit")
  //--- Atomic property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.readFrom (dictionary: inDictionary, forKey: "minValueForBoardLimitWidth")
  //--- Atomic property: title
    self.title_property.readFrom (dictionary: inDictionary, forKey: "title")
  //--- Atomic property: drillDataFileExtension
    self.drillDataFileExtension_property.readFrom (dictionary: inDictionary, forKey: "drillDataFileExtension")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "layerConfiguration\n"
    ioString += "selectedTab\n"
    ioString += "comments\n"
    ioString += "minPPTPTTTWdisplayUnit\n"
    ioString += "minPPTPTTTW\n"
    ioString += "minValueForOARdisplayUnit\n"
    ioString += "minValueForOARinEBUnit\n"
    ioString += "minValueForPHDdisplayUnit\n"
    ioString += "minValueForPHDinEBUnit\n"
    ioString += "minValueForBoardLimitWidthDisplayUnit\n"
    ioString += "minValueForBoardLimitWidth\n"
    ioString += "title\n"
    ioString += "drillDataFileExtension\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "fileGenerationParameterArray\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.layerConfiguration.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.selectedTab.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.comments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minPPTPTTTWdisplayUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minPPTPTTTW.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForOARdisplayUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForOARinEBUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForPHDdisplayUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForPHDinEBUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForBoardLimitWidthDisplayUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.minValueForBoardLimitWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.title.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drillDataFileExtension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.fileGenerationParameterArray.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["layerConfiguration"], let value = LayerConfiguration.unarchiveFromDataRange (inData, range) {
        self.layerConfiguration = value
      }
      if let range = inDictionary ["selectedTab"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.selectedTab = value
      }
      if let range = inDictionary ["comments"], let value = String.unarchiveFromDataRange (inData, range) {
        self.comments = value
      }
      if let range = inDictionary ["minPPTPTTTWdisplayUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minPPTPTTTWdisplayUnit = value
      }
      if let range = inDictionary ["minPPTPTTTW"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minPPTPTTTW = value
      }
      if let range = inDictionary ["minValueForOARdisplayUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForOARdisplayUnit = value
      }
      if let range = inDictionary ["minValueForOARinEBUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForOARinEBUnit = value
      }
      if let range = inDictionary ["minValueForPHDdisplayUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForPHDdisplayUnit = value
      }
      if let range = inDictionary ["minValueForPHDinEBUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForPHDinEBUnit = value
      }
      if let range = inDictionary ["minValueForBoardLimitWidthDisplayUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForBoardLimitWidthDisplayUnit = value
      }
      if let range = inDictionary ["minValueForBoardLimitWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.minValueForBoardLimitWidth = value
      }
      if let range = inDictionary ["title"], let value = String.unarchiveFromDataRange (inData, range) {
        self.title = value
      }
      if let range = inDictionary ["drillDataFileExtension"], let value = String.unarchiveFromDataRange (inData, range) {
        self.drillDataFileExtension = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["fileGenerationParameterArray"], range.length > 0 {
        var relationshipArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! ArtworkFileGenerationParameters)
        }
        self.fileGenerationParameterArray = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

/*  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: fileGenerationParameterArray
    for managedObject in self.fileGenerationParameterArray.values {
      objects.append (managedObject)
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: fileGenerationParameterArray
    for managedObject in self.fileGenerationParameterArray.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.drillDataFileExtension_property.signature ())
    crc.accumulateUInt32 (self.fileGenerationParameterArray_property.signature ())
    crc.accumulateUInt32 (self.layerConfiguration_property.signature ())
    crc.accumulateUInt32 (self.minPPTPTTTW_property.signature ())
    crc.accumulateUInt32 (self.minValueForBoardLimitWidth_property.signature ())
    crc.accumulateUInt32 (self.minValueForOARinEBUnit_property.signature ())
    crc.accumulateUInt32 (self.minValueForPHDinEBUnit_property.signature ())
    crc.accumulateUInt32 (self.title_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

