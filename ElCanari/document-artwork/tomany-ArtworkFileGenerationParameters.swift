//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,                            
                                 addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.drawBoardLimits_property.stopsBeingObserved (by: self.mObserversOf_drawBoardLimits) // Stored property
      managedObject.drawInternalBoardLimits_property.stopsBeingObserved (by: self.mObserversOf_drawInternalBoardLimits) // Stored property
      managedObject.drawComponentNamesTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentNamesTopSide) // Stored property
      managedObject.drawComponentNamesBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentNamesBottomSide) // Stored property
      managedObject.drawComponentValuesTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentValuesTopSide) // Stored property
      managedObject.drawComponentValuesBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentValuesBottomSide) // Stored property
      managedObject.drawPackageLegendTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawPackageLegendTopSide) // Stored property
      managedObject.drawPackageLegendBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawPackageLegendBottomSide) // Stored property
      managedObject.drawPadHolesInPDF_property.stopsBeingObserved (by: self.mObserversOf_drawPadHolesInPDF) // Stored property
      managedObject.drawPadsTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawPadsTopSide) // Stored property
      managedObject.drawPadsBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawPadsBottomSide) // Stored property
      managedObject.drawTextsLayoutTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLayoutTopSide) // Stored property
      managedObject.drawTextsLayoutBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLayoutBottomSide) // Stored property
      managedObject.drawTextsLegendTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLegendTopSide) // Stored property
      managedObject.drawTextsLegendBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLegendBottomSide) // Stored property
      managedObject.drawTracksTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTracksTopSide) // Stored property
      managedObject.drawTracksInner1Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner1Layer) // Stored property
      managedObject.drawTracksInner2Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner2Layer) // Stored property
      managedObject.drawTracksInner3Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner3Layer) // Stored property
      managedObject.drawTracksInner4Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner4Layer) // Stored property
      managedObject.drawTracksBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTracksBottomSide) // Stored property
      managedObject.drawTraversingPads_property.stopsBeingObserved (by: self.mObserversOf_drawTraversingPads) // Stored property
      managedObject.drawVias_property.stopsBeingObserved (by: self.mObserversOf_drawVias) // Stored property
      managedObject.fileExtension_property.stopsBeingObserved (by: self.mObserversOf_fileExtension) // Stored property
      managedObject.horizontalMirror_property.stopsBeingObserved (by: self.mObserversOf_horizontalMirror) // Stored property
      managedObject.name_property.stopsBeingObserved (by: self.mObserversOf_name) // Stored property
      managedObject.measurementUnitForPadHoleInPDF_property.stopsBeingObserved (by: self.mObserversOf_measurementUnitForPadHoleInPDF) // Stored property
      managedObject.padHoleDiameterInPDF_property.stopsBeingObserved (by: self.mObserversOf_padHoleDiameterInPDF) // Stored property
      managedObject.hasNoData_property.stopsBeingObserved (by: self.mObserversOf_hasNoData) // Transient property
      managedObject.parameterStatusImage_property.stopsBeingObserved (by: self.mObserversOf_parameterStatusImage) // Transient property
      managedObject.emptyFileExtensionImage_property.stopsBeingObserved (by: self.mObserversOf_emptyFileExtensionImage) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.drawBoardLimits_property.startsToBeObserved (by: self.mObserversOf_drawBoardLimits) // Stored property
      managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: self.mObserversOf_drawInternalBoardLimits) // Stored property
      managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentNamesTopSide) // Stored property
      managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentNamesBottomSide) // Stored property
      managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentValuesTopSide) // Stored property
      managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentValuesBottomSide) // Stored property
      managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: self.mObserversOf_drawPackageLegendTopSide) // Stored property
      managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawPackageLegendBottomSide) // Stored property
      managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: self.mObserversOf_drawPadHolesInPDF) // Stored property
      managedObject.drawPadsTopSide_property.startsToBeObserved (by: self.mObserversOf_drawPadsTopSide) // Stored property
      managedObject.drawPadsBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawPadsBottomSide) // Stored property
      managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLayoutTopSide) // Stored property
      managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLayoutBottomSide) // Stored property
      managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLegendTopSide) // Stored property
      managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLegendBottomSide) // Stored property
      managedObject.drawTracksTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTracksTopSide) // Stored property
      managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner1Layer) // Stored property
      managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner2Layer) // Stored property
      managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner3Layer) // Stored property
      managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner4Layer) // Stored property
      managedObject.drawTracksBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTracksBottomSide) // Stored property
      managedObject.drawTraversingPads_property.startsToBeObserved (by: self.mObserversOf_drawTraversingPads) // Stored property
      managedObject.drawVias_property.startsToBeObserved (by: self.mObserversOf_drawVias) // Stored property
      managedObject.fileExtension_property.startsToBeObserved (by: self.mObserversOf_fileExtension) // Stored property
      managedObject.horizontalMirror_property.startsToBeObserved (by: self.mObserversOf_horizontalMirror) // Stored property
      managedObject.name_property.startsToBeObserved (by: self.mObserversOf_name) // Stored property
      managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: self.mObserversOf_measurementUnitForPadHoleInPDF) // Stored property
      managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: self.mObserversOf_padHoleDiameterInPDF) // Stored property
      managedObject.hasNoData_property.startsToBeObserved (by: self.mObserversOf_hasNoData) // Transient property
      managedObject.parameterStatusImage_property.startsToBeObserved (by: self.mObserversOf_parameterStatusImage) // Transient property
      managedObject.emptyFileExtensionImage_property.startsToBeObserved (by: self.mObserversOf_emptyFileExtensionImage) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawBoardLimits = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawBoardLimits_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawBoardLimits.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawBoardLimits_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawBoardLimits.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawBoardLimits_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawBoardLimits_property.startsToBeObserved (by: self.mObserversOf_drawBoardLimits)
    }*/
    /* if !self.mObserversOf_drawBoardLimits.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawBoardLimits.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawBoardLimits_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawBoardLimits.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawBoardLimits_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawBoardLimits_property.stopsBeingObserved (by: self.mObserversOf_drawBoardLimits)
    }
    for entry in self.mObserversOf_drawBoardLimits.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawBoardLimits_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawBoardLimits.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawInternalBoardLimits = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawInternalBoardLimits_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawInternalBoardLimits.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawInternalBoardLimits_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawInternalBoardLimits.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: self.mObserversOf_drawInternalBoardLimits)
    }*/
    /* if !self.mObserversOf_drawInternalBoardLimits.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawInternalBoardLimits.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawInternalBoardLimits.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawInternalBoardLimits_property.stopsBeingObserved (by: self.mObserversOf_drawInternalBoardLimits)
    }
    for entry in self.mObserversOf_drawInternalBoardLimits.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawInternalBoardLimits_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawInternalBoardLimits.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawComponentNamesTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawComponentNamesTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentNamesTopSide)
    }*/
    /* if !self.mObserversOf_drawComponentNamesTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawComponentNamesTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawComponentNamesTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawComponentNamesTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentNamesTopSide)
    }
    for entry in self.mObserversOf_drawComponentNamesTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawComponentNamesTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawComponentNamesTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawComponentNamesBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawComponentNamesBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentNamesBottomSide)
    }*/
    /* if !self.mObserversOf_drawComponentNamesBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawComponentNamesBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawComponentNamesBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawComponentNamesBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentNamesBottomSide)
    }
    for entry in self.mObserversOf_drawComponentNamesBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawComponentNamesBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawComponentNamesBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawComponentValuesTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawComponentValuesTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentValuesTopSide)
    }*/
    /* if !self.mObserversOf_drawComponentValuesTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawComponentValuesTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawComponentValuesTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawComponentValuesTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentValuesTopSide)
    }
    for entry in self.mObserversOf_drawComponentValuesTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawComponentValuesTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawComponentValuesTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawComponentValuesBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawComponentValuesBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawComponentValuesBottomSide)
    }*/
    /* if !self.mObserversOf_drawComponentValuesBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawComponentValuesBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawComponentValuesBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawComponentValuesBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawComponentValuesBottomSide)
    }
    for entry in self.mObserversOf_drawComponentValuesBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawComponentValuesBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawComponentValuesBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawPackageLegendTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawPackageLegendTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: self.mObserversOf_drawPackageLegendTopSide)
    }*/
    /* if !self.mObserversOf_drawPackageLegendTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawPackageLegendTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawPackageLegendTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawPackageLegendTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawPackageLegendTopSide)
    }
    for entry in self.mObserversOf_drawPackageLegendTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawPackageLegendTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawPackageLegendTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawPackageLegendBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawPackageLegendBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawPackageLegendBottomSide)
    }*/
    /* if !self.mObserversOf_drawPackageLegendBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawPackageLegendBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawPackageLegendBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawPackageLegendBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawPackageLegendBottomSide)
    }
    for entry in self.mObserversOf_drawPackageLegendBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawPackageLegendBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawPackageLegendBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private final var mObserversOf_drawPadHolesInPDF = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawPadHolesInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawPadHolesInPDF.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawPadHolesInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawPadHolesInPDF.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: self.mObserversOf_drawPadHolesInPDF)
    }*/
    /* if !self.mObserversOf_drawPadHolesInPDF.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawPadHolesInPDF.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawPadHolesInPDF.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawPadHolesInPDF_property.stopsBeingObserved (by: self.mObserversOf_drawPadHolesInPDF)
    }
    for entry in self.mObserversOf_drawPadHolesInPDF.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawPadHolesInPDF_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawPadHolesInPDF.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawPadsTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawPadsTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawPadsTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawPadsTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawPadsTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawPadsTopSide_property.startsToBeObserved (by: self.mObserversOf_drawPadsTopSide)
    }*/
    /* if !self.mObserversOf_drawPadsTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawPadsTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawPadsTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawPadsTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawPadsTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawPadsTopSide)
    }
    for entry in self.mObserversOf_drawPadsTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawPadsTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawPadsTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawPadsBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawPadsBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawPadsBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawPadsBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawPadsBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawPadsBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawPadsBottomSide)
    }*/
    /* if !self.mObserversOf_drawPadsBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawPadsBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawPadsBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawPadsBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawPadsBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawPadsBottomSide)
    }
    for entry in self.mObserversOf_drawPadsBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawPadsBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawPadsBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTextsLayoutTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTextsLayoutTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLayoutTopSide)
    }*/
    /* if !self.mObserversOf_drawTextsLayoutTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTextsLayoutTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTextsLayoutTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTextsLayoutTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLayoutTopSide)
    }
    for entry in self.mObserversOf_drawTextsLayoutTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTextsLayoutTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTextsLayoutTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTextsLayoutBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTextsLayoutBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLayoutBottomSide)
    }*/
    /* if !self.mObserversOf_drawTextsLayoutBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTextsLayoutBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTextsLayoutBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTextsLayoutBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLayoutBottomSide)
    }
    for entry in self.mObserversOf_drawTextsLayoutBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTextsLayoutBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTextsLayoutBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTextsLegendTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTextsLegendTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLegendTopSide)
    }*/
    /* if !self.mObserversOf_drawTextsLegendTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTextsLegendTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTextsLegendTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTextsLegendTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLegendTopSide)
    }
    for entry in self.mObserversOf_drawTextsLegendTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTextsLegendTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTextsLegendTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTextsLegendBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTextsLegendBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTextsLegendBottomSide)
    }*/
    /* if !self.mObserversOf_drawTextsLegendBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTextsLegendBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTextsLegendBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTextsLegendBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTextsLegendBottomSide)
    }
    for entry in self.mObserversOf_drawTextsLegendBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTextsLegendBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTextsLegendBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksTopSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksTopSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksTopSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksTopSide_property.startsToBeObserved (by: self.mObserversOf_drawTracksTopSide)
    }*/
    /* if !self.mObserversOf_drawTracksTopSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksTopSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksTopSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksTopSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksTopSide_property.stopsBeingObserved (by: self.mObserversOf_drawTracksTopSide)
    }
    for entry in self.mObserversOf_drawTracksTopSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksTopSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksTopSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner1Layer = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksInner1Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksInner1Layer.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksInner1Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksInner1Layer.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner1Layer_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksInner1Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner1Layer)
    }*/
    /* if !self.mObserversOf_drawTracksInner1Layer.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksInner1Layer.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksInner1Layer.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksInner1Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksInner1Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner1Layer)
    }
    for entry in self.mObserversOf_drawTracksInner1Layer.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksInner1Layer_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksInner1Layer.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner2Layer = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksInner2Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksInner2Layer.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksInner2Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksInner2Layer.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner2Layer_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksInner2Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner2Layer)
    }*/
    /* if !self.mObserversOf_drawTracksInner2Layer.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksInner2Layer.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksInner2Layer.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksInner2Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksInner2Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner2Layer)
    }
    for entry in self.mObserversOf_drawTracksInner2Layer.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksInner2Layer_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksInner2Layer.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner3Layer = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksInner3Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksInner3Layer.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksInner3Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksInner3Layer.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner3Layer_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksInner3Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner3Layer)
    }*/
    /* if !self.mObserversOf_drawTracksInner3Layer.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksInner3Layer.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksInner3Layer.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksInner3Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksInner3Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner3Layer)
    }
    for entry in self.mObserversOf_drawTracksInner3Layer.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksInner3Layer_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksInner3Layer.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner4Layer = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksInner4Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksInner4Layer.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksInner4Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksInner4Layer.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner4Layer_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksInner4Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: self.mObserversOf_drawTracksInner4Layer)
    }*/
    /* if !self.mObserversOf_drawTracksInner4Layer.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksInner4Layer.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksInner4Layer.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksInner4Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksInner4Layer_property.stopsBeingObserved (by: self.mObserversOf_drawTracksInner4Layer)
    }
    for entry in self.mObserversOf_drawTracksInner4Layer.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksInner4Layer_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksInner4Layer.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksBottomSide = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTracksBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTracksBottomSide.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTracksBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTracksBottomSide.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTracksBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTracksBottomSide_property.startsToBeObserved (by: self.mObserversOf_drawTracksBottomSide)
    }*/
    /* if !self.mObserversOf_drawTracksBottomSide.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTracksBottomSide.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTracksBottomSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTracksBottomSide.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTracksBottomSide_property.stopsBeingObserved (by: self.mObserversOf_drawTracksBottomSide)
    }
    for entry in self.mObserversOf_drawTracksBottomSide.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTracksBottomSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTracksBottomSide.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawTraversingPads' stored property
  //····················································································································

  private final var mObserversOf_drawTraversingPads = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawTraversingPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawTraversingPads.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTraversingPads_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawTraversingPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawTraversingPads.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTraversingPads_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawTraversingPads_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawTraversingPads_property.startsToBeObserved (by: self.mObserversOf_drawTraversingPads)
    }*/
    /* if !self.mObserversOf_drawTraversingPads.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawTraversingPads.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawTraversingPads_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawTraversingPads.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawTraversingPads_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawTraversingPads_property.stopsBeingObserved (by: self.mObserversOf_drawTraversingPads)
    }
    for entry in self.mObserversOf_drawTraversingPads.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawTraversingPads_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawTraversingPads.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private final var mObserversOf_drawVias = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_drawVias_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_drawVias.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_drawVias_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_drawVias.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_drawVias_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.drawVias_property.startsToBeObserved (by: self.mObserversOf_drawVias)
    }*/
    /* if !self.mObserversOf_drawVias.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_drawVias.values () {
          if let observer = entry.possibleObserver {
            managedObject.drawVias_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_drawVias.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_drawVias_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.drawVias_property.stopsBeingObserved (by: self.mObserversOf_drawVias)
    }
    for entry in self.mObserversOf_drawVias.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.drawVias_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_drawVias.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private final var mObserversOf_fileExtension = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_fileExtension_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_fileExtension.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_fileExtension_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_fileExtension.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_fileExtension_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.fileExtension_property.startsToBeObserved (by: self.mObserversOf_fileExtension)
    }*/
    /* if !self.mObserversOf_fileExtension.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_fileExtension.values () {
          if let observer = entry.possibleObserver {
            managedObject.fileExtension_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_fileExtension.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_fileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.fileExtension_property.stopsBeingObserved (by: self.mObserversOf_fileExtension)
    }
    for entry in self.mObserversOf_fileExtension.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.fileExtension_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_fileExtension.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private final var mObserversOf_horizontalMirror = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_horizontalMirror_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_horizontalMirror.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_horizontalMirror_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_horizontalMirror.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_horizontalMirror_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.horizontalMirror_property.startsToBeObserved (by: self.mObserversOf_horizontalMirror)
    }*/
    /* if !self.mObserversOf_horizontalMirror.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_horizontalMirror.values () {
          if let observer = entry.possibleObserver {
            managedObject.horizontalMirror_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_horizontalMirror.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_horizontalMirror_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.horizontalMirror_property.stopsBeingObserved (by: self.mObserversOf_horizontalMirror)
    }
    for entry in self.mObserversOf_horizontalMirror.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.horizontalMirror_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_horizontalMirror.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_name_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_name.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_name_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_name.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_name_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.name_property.startsToBeObserved (by: self.mObserversOf_name)
    }*/
    /* if !self.mObserversOf_name.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_name.values () {
          if let observer = entry.possibleObserver {
            managedObject.name_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_name.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_name_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.name_property.stopsBeingObserved (by: self.mObserversOf_name)
    }
    for entry in self.mObserversOf_name.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.name_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_name.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private final var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_measurementUnitForPadHoleInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_measurementUnitForPadHoleInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: self.mObserversOf_measurementUnitForPadHoleInPDF)
    }*/
    /* if !self.mObserversOf_measurementUnitForPadHoleInPDF.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_measurementUnitForPadHoleInPDF.values () {
          if let observer = entry.possibleObserver {
            managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_measurementUnitForPadHoleInPDF.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.measurementUnitForPadHoleInPDF_property.stopsBeingObserved (by: self.mObserversOf_measurementUnitForPadHoleInPDF)
    }
    for entry in self.mObserversOf_measurementUnitForPadHoleInPDF.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.measurementUnitForPadHoleInPDF_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_measurementUnitForPadHoleInPDF.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private final var mObserversOf_padHoleDiameterInPDF = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padHoleDiameterInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padHoleDiameterInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    /* for managedObject in inSet.values {
      managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: self.mObserversOf_padHoleDiameterInPDF)
    }*/
    /* if !self.mObserversOf_padHoleDiameterInPDF.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_padHoleDiameterInPDF.values () {
          if let observer = entry.possibleObserver {
            managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_padHoleDiameterInPDF.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      managedObject.padHoleDiameterInPDF_property.stopsBeingObserved (by: self.mObserversOf_padHoleDiameterInPDF)
    }
    for entry in self.mObserversOf_padHoleDiameterInPDF.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.padHoleDiameterInPDF_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_padHoleDiameterInPDF.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'hasNoData' transient property
  //····················································································································

  private final var mObserversOf_hasNoData = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_hasNoData_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_hasNoData.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNoData_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_hasNoData_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_hasNoData.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNoData_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_hasNoData_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_hasNoData.values () {
        if let observer = entry.possibleObserver {
          managedObject.hasNoData_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_hasNoData.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_hasNoData_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_hasNoData.values () {
        if let observer = entry.possibleObserver {
          managedObject.hasNoData_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_hasNoData.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'parameterStatusImage' transient property
  //····················································································································

  private final var mObserversOf_parameterStatusImage = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_parameterStatusImage_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_parameterStatusImage.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.parameterStatusImage_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_parameterStatusImage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_parameterStatusImage.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.parameterStatusImage_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_parameterStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_parameterStatusImage.values () {
        if let observer = entry.possibleObserver {
          managedObject.parameterStatusImage_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_parameterStatusImage.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_parameterStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_parameterStatusImage.values () {
        if let observer = entry.possibleObserver {
          managedObject.parameterStatusImage_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_parameterStatusImage.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'emptyFileExtensionImage' transient property
  //····················································································································

  private final var mObserversOf_emptyFileExtensionImage = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_emptyFileExtensionImage_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_emptyFileExtensionImage.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyFileExtensionImage_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_emptyFileExtensionImage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_emptyFileExtensionImage.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyFileExtensionImage_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_emptyFileExtensionImage_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_emptyFileExtensionImage.values () {
        if let observer = entry.possibleObserver {
          managedObject.emptyFileExtensionImage_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_emptyFileExtensionImage.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_emptyFileExtensionImage_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_emptyFileExtensionImage.values () {
        if let observer = entry.possibleObserver {
          managedObject.emptyFileExtensionImage_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_emptyFileExtensionImage.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters,
                        sortCallback inSortCallBack : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ArtworkFileGenerationParameters>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_ArtworkFileGenerationParameters is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ArtworkFileGenerationParameters>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_ArtworkFileGenerationParameters? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ArtworkFileGenerationParameters?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <ArtworkFileGenerationParameters>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <ArtworkFileGenerationParameters> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ArtworkFileGenerationParameters)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! ArtworkFileGenerationParameters)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,
                                 addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ArtworkFileGenerationParameters] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkFileGenerationParameters>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ArtworkFileGenerationParameters> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ArtworkFileGenerationParameters) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ArtworkFileGenerationParameters) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_ArtworkFileGenerationParameters is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

