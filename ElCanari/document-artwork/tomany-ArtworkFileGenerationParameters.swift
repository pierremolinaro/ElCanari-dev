//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,                            
                                 addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_drawBoardLimits { // Stored property
        managedObject.drawBoardLimits_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawInternalBoardLimits { // Stored property
        managedObject.drawInternalBoardLimits_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentNamesTopSide { // Stored property
        managedObject.drawComponentNamesTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentNamesBottomSide { // Stored property
        managedObject.drawComponentNamesBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentValuesTopSide { // Stored property
        managedObject.drawComponentValuesTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentValuesBottomSide { // Stored property
        managedObject.drawComponentValuesBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPackageLegendTopSide { // Stored property
        managedObject.drawPackageLegendTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPackageLegendBottomSide { // Stored property
        managedObject.drawPackageLegendBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadHolesInPDF { // Stored property
        managedObject.drawPadHolesInPDF_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadsTopSide { // Stored property
        managedObject.drawPadsTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadsBottomSide { // Stored property
        managedObject.drawPadsBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLayoutTopSide { // Stored property
        managedObject.drawTextsLayoutTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLayoutBottomSide { // Stored property
        managedObject.drawTextsLayoutBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLegendTopSide { // Stored property
        managedObject.drawTextsLegendTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLegendBottomSide { // Stored property
        managedObject.drawTextsLegendBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksTopSide { // Stored property
        managedObject.drawTracksTopSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner1Layer { // Stored property
        managedObject.drawTracksInner1Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner2Layer { // Stored property
        managedObject.drawTracksInner2Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner3Layer { // Stored property
        managedObject.drawTracksInner3Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner4Layer { // Stored property
        managedObject.drawTracksInner4Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksBottomSide { // Stored property
        managedObject.drawTracksBottomSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTraversingPads { // Stored property
        managedObject.drawTraversingPads_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawVias { // Stored property
        managedObject.drawVias_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_fileExtension { // Stored property
        managedObject.fileExtension_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_horizontalMirror { // Stored property
        managedObject.horizontalMirror_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_measurementUnitForPadHoleInPDF { // Stored property
        managedObject.measurementUnitForPadHoleInPDF_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padHoleDiameterInPDF { // Stored property
        managedObject.padHoleDiameterInPDF_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasNoData { // Transient property
        managedObject.hasNoData_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_parameterStatusImage { // Transient property
        managedObject.parameterStatusImage_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_emptyFileExtensionImage { // Transient property
        managedObject.emptyFileExtensionImage_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_drawBoardLimits { // Stored property
        managedObject.drawBoardLimits_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawInternalBoardLimits { // Stored property
        managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentNamesTopSide { // Stored property
        managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentNamesBottomSide { // Stored property
        managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentValuesTopSide { // Stored property
        managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawComponentValuesBottomSide { // Stored property
        managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPackageLegendTopSide { // Stored property
        managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPackageLegendBottomSide { // Stored property
        managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadHolesInPDF { // Stored property
        managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadsTopSide { // Stored property
        managedObject.drawPadsTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawPadsBottomSide { // Stored property
        managedObject.drawPadsBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLayoutTopSide { // Stored property
        managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLayoutBottomSide { // Stored property
        managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLegendTopSide { // Stored property
        managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTextsLegendBottomSide { // Stored property
        managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksTopSide { // Stored property
        managedObject.drawTracksTopSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner1Layer { // Stored property
        managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner2Layer { // Stored property
        managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner3Layer { // Stored property
        managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksInner4Layer { // Stored property
        managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTracksBottomSide { // Stored property
        managedObject.drawTracksBottomSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawTraversingPads { // Stored property
        managedObject.drawTraversingPads_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drawVias { // Stored property
        managedObject.drawVias_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_fileExtension { // Stored property
        managedObject.fileExtension_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_horizontalMirror { // Stored property
        managedObject.horizontalMirror_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_measurementUnitForPadHoleInPDF { // Stored property
        managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padHoleDiameterInPDF { // Stored property
        managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasNoData { // Transient property
        managedObject.hasNoData_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_parameterStatusImage { // Transient property
        managedObject.parameterStatusImage_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_emptyFileExtensionImage { // Transient property
        managedObject.emptyFileExtensionImage_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawBoardLimits : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawBoardLimits_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawBoardLimits {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawBoardLimits_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawBoardLimits = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawBoardLimits_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawBoardLimits?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawInternalBoardLimits : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawInternalBoardLimits_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawInternalBoardLimits {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawInternalBoardLimits_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawInternalBoardLimits = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawInternalBoardLimits_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawInternalBoardLimits?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawComponentNamesTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawComponentNamesTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawComponentNamesTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawComponentNamesTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawComponentNamesTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawComponentNamesTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawComponentNamesBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawComponentNamesBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawComponentNamesBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawComponentNamesBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawComponentNamesBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawComponentNamesBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawComponentValuesTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawComponentValuesTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawComponentValuesTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawComponentValuesTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawComponentValuesTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawComponentValuesTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawComponentValuesBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawComponentValuesBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawComponentValuesBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawComponentValuesBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawComponentValuesBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawComponentValuesBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawPackageLegendTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawPackageLegendTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawPackageLegendTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawPackageLegendTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawPackageLegendTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawPackageLegendTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawPackageLegendBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawPackageLegendBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawPackageLegendBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawPackageLegendBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawPackageLegendBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawPackageLegendBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private final var mObserversOf_drawPadHolesInPDF : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawPadHolesInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawPadHolesInPDF {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawPadHolesInPDF_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawPadHolesInPDF = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawPadHolesInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawPadHolesInPDF?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawPadsTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawPadsTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawPadsTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawPadsTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawPadsTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawPadsTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawPadsBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawPadsBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawPadsBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawPadsBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawPadsBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawPadsBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTextsLayoutTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTextsLayoutTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTextsLayoutTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTextsLayoutTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTextsLayoutTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTextsLayoutTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTextsLayoutBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTextsLayoutBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTextsLayoutBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTextsLayoutBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTextsLayoutBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTextsLayoutBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTextsLegendTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTextsLegendTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTextsLegendTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTextsLegendTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTextsLegendTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTextsLegendTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTextsLegendBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTextsLegendBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTextsLegendBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTextsLegendBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTextsLegendBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTextsLegendBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksTopSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksTopSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksTopSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksTopSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksTopSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksTopSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksTopSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner1Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksInner1Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksInner1Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksInner1Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksInner1Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksInner1Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksInner1Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner2Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksInner2Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksInner2Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksInner2Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksInner2Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksInner2Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksInner2Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner3Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksInner3Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksInner3Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksInner3Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksInner3Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksInner3Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksInner3Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner4Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksInner4Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksInner4Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksInner4Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksInner4Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksInner4Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksInner4Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksBottomSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTracksBottomSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTracksBottomSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTracksBottomSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTracksBottomSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTracksBottomSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTracksBottomSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawTraversingPads' stored property
  //····················································································································

  private final var mObserversOf_drawTraversingPads : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawTraversingPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawTraversingPads {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawTraversingPads_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawTraversingPads = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawTraversingPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawTraversingPads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private final var mObserversOf_drawVias : EBObservedObject? = nil

  //····················································································································

  final func toMany_drawVias_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drawVias {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drawVias_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_drawVias = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drawVias_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drawVias?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private final var mObserversOf_fileExtension : EBObservedObject? = nil

  //····················································································································

  final func toMany_fileExtension_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_fileExtension {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.fileExtension_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_fileExtension = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_fileExtension_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_fileExtension?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private final var mObserversOf_horizontalMirror : EBObservedObject? = nil

  //····················································································································

  final func toMany_horizontalMirror_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_horizontalMirror {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.horizontalMirror_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_horizontalMirror = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_horizontalMirror_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_horizontalMirror?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name : EBObservedObject? = nil

  //····················································································································

  final func toMany_name_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_name {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.name_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_name = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_name_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_name?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private final var mObserversOf_measurementUnitForPadHoleInPDF : EBObservedObject? = nil

  //····················································································································

  final func toMany_measurementUnitForPadHoleInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_measurementUnitForPadHoleInPDF {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.measurementUnitForPadHoleInPDF_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_measurementUnitForPadHoleInPDF = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_measurementUnitForPadHoleInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_measurementUnitForPadHoleInPDF?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private final var mObserversOf_padHoleDiameterInPDF : EBObservedObject? = nil

  //····················································································································

  final func toMany_padHoleDiameterInPDF_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_padHoleDiameterInPDF {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padHoleDiameterInPDF_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padHoleDiameterInPDF = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_padHoleDiameterInPDF_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padHoleDiameterInPDF?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'hasNoData' transient property
  //····················································································································

  private final var mObserversOf_hasNoData : EBObservedObject? = nil

  //····················································································································

  final func toMany_hasNoData_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_hasNoData {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.hasNoData_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_hasNoData = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_hasNoData_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_hasNoData?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'parameterStatusImage' transient property
  //····················································································································

  private final var mObserversOf_parameterStatusImage : EBObservedObject? = nil

  //····················································································································

  final func toMany_parameterStatusImage_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_parameterStatusImage {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.parameterStatusImage_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_parameterStatusImage = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_parameterStatusImage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_parameterStatusImage?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'emptyFileExtensionImage' transient property
  //····················································································································

  private final var mObserversOf_emptyFileExtensionImage : EBObservedObject? = nil

  //····················································································································

  final func toMany_emptyFileExtensionImage_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_emptyFileExtensionImage {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.emptyFileExtensionImage_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_emptyFileExtensionImage = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_emptyFileExtensionImage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_emptyFileExtensionImage?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters,
                        sortCallback inSortCallBack : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ArtworkFileGenerationParameters>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.propval.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_ArtworkFileGenerationParameters is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ArtworkFileGenerationParameters>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_ArtworkFileGenerationParameters? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ArtworkFileGenerationParameters?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <ArtworkFileGenerationParameters>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <ArtworkFileGenerationParameters> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ArtworkFileGenerationParameters)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! ArtworkFileGenerationParameters)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,
                                 addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ArtworkFileGenerationParameters] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkFileGenerationParameters>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <ArtworkFileGenerationParameters> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ArtworkFileGenerationParameters) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ArtworkFileGenerationParameters) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_ArtworkFileGenerationParameters is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

