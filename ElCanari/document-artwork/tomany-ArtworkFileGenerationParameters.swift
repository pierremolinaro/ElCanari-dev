//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,
                                          addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_drawBoardLimits_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksInner1Layer_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksInner2Layer_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksInner3Layer_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksInner4Layer_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawTraversingPads_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drawVias_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_fileExtension_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_horizontalMirror_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_name_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_hasNoData_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_parameterStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_emptyFileExtensionImage_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_drawBoardLimits_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawPadsTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawPadsBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksTopSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksInner1Layer_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksInner2Layer_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksInner3Layer_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksInner4Layer_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTracksBottomSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawTraversingPads_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drawVias_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_fileExtension_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_horizontalMirror_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_name_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_hasNoData_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_parameterStatusImage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_emptyFileExtensionImage_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawBoardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawBoardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawBoardLimits_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawBoardLimits.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawBoardLimits.apply { (_ observer : EBEvent) in
          managedObject.drawBoardLimits_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawBoardLimits_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawBoardLimits.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  private final var mObserversOf_drawInternalBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawInternalBoardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawInternalBoardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawInternalBoardLimits.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawInternalBoardLimits.apply { (_ observer : EBEvent) in
          managedObject.drawInternalBoardLimits_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawInternalBoardLimits.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawComponentNamesTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawComponentNamesTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawComponentNamesTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentNamesTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentNamesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawComponentNamesBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawComponentNamesBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawComponentNamesBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentNamesBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawComponentValuesTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawComponentValuesTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawComponentValuesTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentValuesTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawComponentValuesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawComponentValuesBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawComponentValuesBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawComponentValuesBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentValuesBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawPackageLegendTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawPackageLegendTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawPackageLegendTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPackageLegendTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPackageLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawPackageLegendBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawPackageLegendBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawPackageLegendBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPackageLegendBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private final var mObserversOf_drawPadHolesInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadHolesInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadHolesInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawPadHolesInPDF.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawPadHolesInPDF.apply { (_ observer : EBEvent) in
          managedObject.drawPadHolesInPDF_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadHolesInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadsTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadsTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawPadsTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawPadsTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawPadsTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadsTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawPadsTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawPadsBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadsBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadsBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawPadsBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawPadsBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawPadsBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadsBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawPadsBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTextsLayoutTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTextsLayoutTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawTextsLayoutTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLayoutTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLayoutBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTextsLayoutBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTextsLayoutBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawTextsLayoutBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLayoutBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTextsLegendTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTextsLegendTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawTextsLegendTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLegendTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTextsLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTextsLegendBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTextsLegendBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawTextsLegendBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLegendBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksTopSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksTopSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksTopSide.apply { (_ observer : EBEvent) in
          managedObject.drawTracksTopSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner1Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksInner1Layer (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksInner1Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner1Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksInner1Layer (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksInner1Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner1Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksInner1Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksInner1Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksInner1Layer.apply { (_ observer : EBEvent) in
          managedObject.drawTracksInner1Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksInner1Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksInner1Layer.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksInner1Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner2Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksInner2Layer (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksInner2Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner2Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksInner2Layer (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksInner2Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner2Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksInner2Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksInner2Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksInner2Layer.apply { (_ observer : EBEvent) in
          managedObject.drawTracksInner2Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksInner2Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksInner2Layer.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksInner2Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner3Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksInner3Layer (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksInner3Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner3Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksInner3Layer (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksInner3Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner3Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksInner3Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksInner3Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksInner3Layer.apply { (_ observer : EBEvent) in
          managedObject.drawTracksInner3Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksInner3Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksInner3Layer.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksInner3Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_drawTracksInner4Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksInner4Layer (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksInner4Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner4Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksInner4Layer (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksInner4Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksInner4Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksInner4Layer_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksInner4Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksInner4Layer.apply { (_ observer : EBEvent) in
          managedObject.drawTracksInner4Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksInner4Layer_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksInner4Layer.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksInner4Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private final var mObserversOf_drawTracksBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksBottomSide_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTracksBottomSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTracksBottomSide.apply { (_ observer : EBEvent) in
          managedObject.drawTracksBottomSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTracksBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTraversingPads' stored property
  //····················································································································

  private final var mObserversOf_drawTraversingPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTraversingPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTraversingPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTraversingPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTraversingPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTraversingPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTraversingPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTraversingPads_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawTraversingPads.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawTraversingPads.apply { (_ observer : EBEvent) in
          managedObject.drawTraversingPads_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTraversingPads_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTraversingPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawTraversingPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private final var mObserversOf_drawVias = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawVias.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawVias.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawVias_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_drawVias.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drawVias.apply { (_ observer : EBEvent) in
          managedObject.drawVias_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawVias_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawVias.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drawVias_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private final var mObserversOf_fileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_fileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_fileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileExtension_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_fileExtension.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_fileExtension.apply { (_ observer : EBEvent) in
          managedObject.fileExtension_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_fileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.fileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private final var mObserversOf_horizontalMirror = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalMirror.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalMirror.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalMirror_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_horizontalMirror.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_horizontalMirror.apply { (_ observer : EBEvent) in
          managedObject.horizontalMirror_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalMirror_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_horizontalMirror.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.horizontalMirror_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_name.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_name.apply { (_ observer : EBEvent) in
          managedObject.name_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_name.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private final var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_measurementUnitForPadHoleInPDF.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_measurementUnitForPadHoleInPDF.apply { (_ observer : EBEvent) in
          managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_measurementUnitForPadHoleInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private final var mObserversOf_padHoleDiameterInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    if !self.mObserversOf_padHoleDiameterInPDF.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_padHoleDiameterInPDF.apply { (_ observer : EBEvent) in
          managedObject.padHoleDiameterInPDF_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    self.mObserversOf_padHoleDiameterInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasNoData' transient property
  //····················································································································

  private final var mObserversOf_hasNoData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasNoData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasNoData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNoData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasNoData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasNoData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNoData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasNoData_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasNoData.apply { (_ observer : EBEvent) in
        managedObject.hasNoData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasNoData_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasNoData.apply { (_ observer : EBEvent) in
        managedObject.hasNoData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'parameterStatusImage' transient property
  //····················································································································

  private final var mObserversOf_parameterStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_parameterStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_parameterStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.parameterStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_parameterStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_parameterStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.parameterStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_parameterStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_parameterStatusImage.apply { (_ observer : EBEvent) in
        managedObject.parameterStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_parameterStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_parameterStatusImage.apply { (_ observer : EBEvent) in
        managedObject.parameterStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'emptyFileExtensionImage' transient property
  //····················································································································

  private final var mObserversOf_emptyFileExtensionImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_emptyFileExtensionImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_emptyFileExtensionImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyFileExtensionImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_emptyFileExtensionImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_emptyFileExtensionImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyFileExtensionImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_emptyFileExtensionImage_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_emptyFileExtensionImage.apply { (_ observer : EBEvent) in
        managedObject.emptyFileExtensionImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_emptyFileExtensionImage_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inSet.values {
      self.mObserversOf_emptyFileExtensionImage.apply { (_ observer : EBEvent) in
        managedObject.emptyFileExtensionImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ArtworkFileGenerationParameters,
                        sortCallback inSortCallBack : Optional < (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ArtworkFileGenerationParameters>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ArtworkFileGenerationParameters <SUPER : EBManagedObject> : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ArtworkFileGenerationParameters {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ArtworkFileGenerationParameters>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ArtworkFileGenerationParameters? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ArtworkFileGenerationParameters?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <ArtworkFileGenerationParameters>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <ArtworkFileGenerationParameters> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  final var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ArtworkFileGenerationParameters>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkFileGenerationParameters>,
                                 addedSet inAddedSet : EBReferenceSet <ArtworkFileGenerationParameters>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ArtworkFileGenerationParameters] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkFileGenerationParameters>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ArtworkFileGenerationParameters> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ArtworkFileGenerationParameters) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ArtworkFileGenerationParameters) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  override var selection : EBSelection < [ArtworkFileGenerationParameters] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkFileGenerationParameters>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkFileGenerationParameters> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : ArtworkFileGenerationParameters) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : ArtworkFileGenerationParameters) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_ArtworkFileGenerationParameters : StoredArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <ArtworkFileGenerationParameters> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ArtworkFileGenerationParameters") as? ArtworkFileGenerationParameters {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_drawBoardLimits (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawInternalBoardLimits (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawComponentNamesTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawComponentNamesBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawComponentValuesTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawComponentValuesBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawPackageLegendTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawPackageLegendBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawPadHolesInPDF (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawPadsTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawPadsBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTextsLayoutTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTextsLayoutBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTextsLegendTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTextsLegendBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksTopSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksInner1Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksInner2Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksInner3Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksInner4Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTracksBottomSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawTraversingPads (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drawVias (self.mObserverForWritingPreferences)
    self.addEBObserverOf_fileExtension (self.mObserverForWritingPreferences)
    self.addEBObserverOf_horizontalMirror (self.mObserverForWritingPreferences)
    self.addEBObserverOf_name (self.mObserverForWritingPreferences)
    self.addEBObserverOf_measurementUnitForPadHoleInPDF (self.mObserverForWritingPreferences)
    self.addEBObserverOf_padHoleDiameterInPDF (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

