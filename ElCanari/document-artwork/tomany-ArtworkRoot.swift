//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkRoot : ReadOnlyAbstractArrayProperty <ArtworkRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkRoot>,
                                          addedSet inAddedSet : EBReferenceSet <ArtworkRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_layerConfiguration_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedTab_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_comments_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_title_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_hasInnerElements_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_hasSixLayers_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_hasDataWarning_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_emptyDrillFileExtension_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_layerConfiguration_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedTab_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_comments_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minPPTPTTTW_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_title_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_drillDataFileExtension_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_hasInnerElements_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_hasSixLayers_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_hasDataWarning_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_emptyDrillFileExtension_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'layerConfiguration' stored property
  //····················································································································

  private final var mObserversOf_layerConfiguration = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_layerConfiguration (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_layerConfiguration.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.layerConfiguration_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_layerConfiguration (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_layerConfiguration.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.layerConfiguration_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_layerConfiguration_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_layerConfiguration.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_layerConfiguration.apply { (_ observer : EBEvent) in
          managedObject.layerConfiguration_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_layerConfiguration_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_layerConfiguration.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.layerConfiguration_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private final var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedTab.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedTab.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_selectedTab.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
          managedObject.selectedTab_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.selectedTab_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_comments.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_comments.apply { (_ observer : EBEvent) in
          managedObject.comments_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minPPTPTTTWdisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' stored property
  //····················································································································

  private final var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minPPTPTTTW.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
          managedObject.minPPTPTTTW_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForOARdisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

  private final var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForOARinEBUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
          managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForPHDdisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

  private final var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForPHDinEBUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
          managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' stored property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_minValueForBoardLimitWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
          managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'title' stored property
  //····················································································································

  private final var mObserversOf_title = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_title (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_title.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.title_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_title (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_title.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.title_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_title_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_title.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_title.apply { (_ observer : EBEvent) in
          managedObject.title_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_title_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_title.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.title_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

  private final var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    if !self.mObserversOf_drillDataFileExtension.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
          managedObject.drillDataFileExtension_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasInnerElements' transient property
  //····················································································································

  private final var mObserversOf_hasInnerElements = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasInnerElements (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasInnerElements.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasInnerElements_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasInnerElements (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasInnerElements.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasInnerElements_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasInnerElements_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasInnerElements.apply { (_ observer : EBEvent) in
        managedObject.hasInnerElements_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasInnerElements_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasInnerElements.apply { (_ observer : EBEvent) in
        managedObject.hasInnerElements_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasSixLayers' transient property
  //····················································································································

  private final var mObserversOf_hasSixLayers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasSixLayers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasSixLayers.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSixLayers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasSixLayers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasSixLayers.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSixLayers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasSixLayers_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasSixLayers.apply { (_ observer : EBEvent) in
        managedObject.hasSixLayers_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasSixLayers_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasSixLayers.apply { (_ observer : EBEvent) in
        managedObject.hasSixLayers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasDataWarning' transient property
  //····················································································································

  private final var mObserversOf_hasDataWarning = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasDataWarning (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasDataWarning.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasDataWarning_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasDataWarning (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasDataWarning.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasDataWarning_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasDataWarning_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasDataWarning.apply { (_ observer : EBEvent) in
        managedObject.hasDataWarning_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasDataWarning_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasDataWarning.apply { (_ observer : EBEvent) in
        managedObject.hasDataWarning_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'emptyDrillFileExtension' transient property
  //····················································································································

  private final var mObserversOf_emptyDrillFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_emptyDrillFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_emptyDrillFileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyDrillFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_emptyDrillFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_emptyDrillFileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.emptyDrillFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_emptyDrillFileExtension_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_emptyDrillFileExtension.apply { (_ observer : EBEvent) in
        managedObject.emptyDrillFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_emptyDrillFileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_emptyDrillFileExtension.apply { (_ observer : EBEvent) in
        managedObject.emptyDrillFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ArtworkRoot : ReadOnlyArrayOf_ArtworkRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ArtworkRoot, _ right : ArtworkRoot) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ArtworkRoot? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ArtworkRoot,
                        sortCallback inSortCallBack : Optional < (_ left : ArtworkRoot, _ right : ArtworkRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ArtworkRoot>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ArtworkRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_ArtworkRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ArtworkRoot> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ArtworkRoot {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkRoot : ReadOnlyArrayOf_ArtworkRoot {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ArtworkRoot>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkRoot : ReadWriteArrayOf_ArtworkRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ArtworkRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ArtworkRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <ArtworkRoot>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <ArtworkRoot> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <ArtworkRoot>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [ArtworkRoot] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkRoot> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ArtworkRoot : ReadWriteArrayOf_ArtworkRoot, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ArtworkRoot>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ArtworkRoot>,
                                 addedSet inAddedSet : EBReferenceSet <ArtworkRoot>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ArtworkRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ArtworkRoot> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ArtworkRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ArtworkRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_ArtworkRoot : ReadWriteArrayOf_ArtworkRoot {

  //····················································································································

  override var selection : EBSelection < [ArtworkRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ArtworkRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <ArtworkRoot> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : ArtworkRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : ArtworkRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_ArtworkRoot : StoredArrayOf_ArtworkRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <ArtworkRoot> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ArtworkRoot") as? ArtworkRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_layerConfiguration (self.mObserverForWritingPreferences)
    self.addEBObserverOf_selectedTab (self.mObserverForWritingPreferences)
    self.addEBObserverOf_comments (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minPPTPTTTWdisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minPPTPTTTW (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForOARdisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForOARinEBUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForPHDdisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForPHDinEBUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_minValueForBoardLimitWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_title (self.mObserverForWritingPreferences)
    self.addEBObserverOf_drillDataFileExtension (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

