//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ArtworkRoot : ReadOnlyAbstractObjectProperty <ArtworkRoot> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.layerConfiguration_property.stopsBeingObserved (by: self.layerConfiguration_property) // Stored property
      oldValue.selectedTab_property.stopsBeingObserved (by: self.selectedTab_property) // Stored property
      oldValue.comments_property.stopsBeingObserved (by: self.comments_property) // Stored property
      oldValue.minPPTPTTTWdisplayUnit_property.stopsBeingObserved (by: self.minPPTPTTTWdisplayUnit_property) // Stored property
      oldValue.minPPTPTTTW_property.stopsBeingObserved (by: self.minPPTPTTTW_property) // Stored property
      oldValue.minValueForOARdisplayUnit_property.stopsBeingObserved (by: self.minValueForOARdisplayUnit_property) // Stored property
      oldValue.minValueForOARinEBUnit_property.stopsBeingObserved (by: self.minValueForOARinEBUnit_property) // Stored property
      oldValue.minValueForPHDdisplayUnit_property.stopsBeingObserved (by: self.minValueForPHDdisplayUnit_property) // Stored property
      oldValue.minValueForPHDinEBUnit_property.stopsBeingObserved (by: self.minValueForPHDinEBUnit_property) // Stored property
      oldValue.minValueForBoardLimitWidthDisplayUnit_property.stopsBeingObserved (by: self.minValueForBoardLimitWidthDisplayUnit_property) // Stored property
      oldValue.minValueForBoardLimitWidth_property.stopsBeingObserved (by: self.minValueForBoardLimitWidth_property) // Stored property
      oldValue.title_property.stopsBeingObserved (by: self.title_property) // Stored property
      oldValue.drillDataFileExtension_property.stopsBeingObserved (by: self.drillDataFileExtension_property) // Stored property
      oldValue.hasInnerElements_property.stopsBeingObserved (by: self.hasInnerElements_property) // Transient property
      oldValue.hasSixLayers_property.stopsBeingObserved (by: self.hasSixLayers_property) // Transient property
      oldValue.hasDataWarning_property.stopsBeingObserved (by: self.hasDataWarning_property) // Transient property
      oldValue.emptyDrillFileExtension_property.stopsBeingObserved (by: self.emptyDrillFileExtension_property) // Transient property
      oldValue.signatureForERCChecking_property.stopsBeingObserved (by: self.signatureForERCChecking_property) // Transient property
      if let relay = self.mObserversOf_fileGenerationParameterArray { // to Many
        oldValue.fileGenerationParameterArray_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.layerConfiguration_property.startsToBeObserved (by: self.layerConfiguration_property) // Stored property
      newValue.selectedTab_property.startsToBeObserved (by: self.selectedTab_property) // Stored property
      newValue.comments_property.startsToBeObserved (by: self.comments_property) // Stored property
      newValue.minPPTPTTTWdisplayUnit_property.startsToBeObserved (by: self.minPPTPTTTWdisplayUnit_property) // Stored property
      newValue.minPPTPTTTW_property.startsToBeObserved (by: self.minPPTPTTTW_property) // Stored property
      newValue.minValueForOARdisplayUnit_property.startsToBeObserved (by: self.minValueForOARdisplayUnit_property) // Stored property
      newValue.minValueForOARinEBUnit_property.startsToBeObserved (by: self.minValueForOARinEBUnit_property) // Stored property
      newValue.minValueForPHDdisplayUnit_property.startsToBeObserved (by: self.minValueForPHDdisplayUnit_property) // Stored property
      newValue.minValueForPHDinEBUnit_property.startsToBeObserved (by: self.minValueForPHDinEBUnit_property) // Stored property
      newValue.minValueForBoardLimitWidthDisplayUnit_property.startsToBeObserved (by: self.minValueForBoardLimitWidthDisplayUnit_property) // Stored property
      newValue.minValueForBoardLimitWidth_property.startsToBeObserved (by: self.minValueForBoardLimitWidth_property) // Stored property
      newValue.title_property.startsToBeObserved (by: self.title_property) // Stored property
      newValue.drillDataFileExtension_property.startsToBeObserved (by: self.drillDataFileExtension_property) // Stored property
      newValue.hasInnerElements_property.startsToBeObserved (by: self.hasInnerElements_property) // Transient property
      newValue.hasSixLayers_property.startsToBeObserved (by: self.hasSixLayers_property) // Transient property
      newValue.hasDataWarning_property.startsToBeObserved (by: self.hasDataWarning_property) // Transient property
      newValue.emptyDrillFileExtension_property.startsToBeObserved (by: self.emptyDrillFileExtension_property) // Transient property
      newValue.signatureForERCChecking_property.startsToBeObserved (by: self.signatureForERCChecking_property) // Transient property
      if let relay = self.mObserversOf_fileGenerationParameterArray { // to Many
        newValue.fileGenerationParameterArray_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'layerConfiguration' stored property
  //····················································································································

  final let layerConfiguration_property = EBGenericTransientProperty <LayerConfiguration?> ()

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  final let selectedTab_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  final let comments_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' stored property
  //····················································································································

  final let minPPTPTTTWdisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minPPTPTTTW' stored property
  //····················································································································

  final let minPPTPTTTW_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

  final let minValueForOARdisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

  final let minValueForOARinEBUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

  final let minValueForPHDdisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

  final let minValueForPHDinEBUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' stored property
  //····················································································································

  final let minValueForBoardLimitWidthDisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' stored property
  //····················································································································

  final let minValueForBoardLimitWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'title' stored property
  //····················································································································

  final let title_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

  final let drillDataFileExtension_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'hasInnerElements' transient property
  //····················································································································

  final let hasInnerElements_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'hasSixLayers' transient property
  //····················································································································

  final let hasSixLayers_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'hasDataWarning' transient property
  //····················································································································

  final let hasDataWarning_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'emptyDrillFileExtension' transient property
  //····················································································································

  final let emptyDrillFileExtension_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observable toMany property: fileGenerationParameterArray
  //····················································································································

  private final var mObserversOf_fileGenerationParameterArray : EBObservedObserver? = nil

  //····················································································································

  final func toMany_fileGenerationParameterArray_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_fileGenerationParameterArray {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.fileGenerationParameterArray_property.startsToBeObserved (by: relay)
      self.mObserversOf_fileGenerationParameterArray = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_fileGenerationParameterArray_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_fileGenerationParameterArray?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure layerConfiguration simple stored property
    self.layerConfiguration_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layerConfiguration_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.layerConfiguration_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure selectedTab simple stored property
    self.selectedTab_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedTab_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectedTab_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure comments simple stored property
    self.comments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.comments_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minPPTPTTTWdisplayUnit simple stored property
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minPPTPTTTWdisplayUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minPPTPTTTWdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minPPTPTTTW simple stored property
    self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minPPTPTTTW_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minPPTPTTTW_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForOARdisplayUnit simple stored property
    self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForOARdisplayUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForOARdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForOARinEBUnit simple stored property
    self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForOARinEBUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForOARinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForPHDdisplayUnit simple stored property
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForPHDdisplayUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForPHDdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForPHDinEBUnit simple stored property
    self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForPHDinEBUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForPHDinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForBoardLimitWidthDisplayUnit simple stored property
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForBoardLimitWidthDisplayUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForBoardLimitWidthDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure minValueForBoardLimitWidth simple stored property
    self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.minValueForBoardLimitWidth_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.minValueForBoardLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure title simple stored property
    self.title_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.title_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.title_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure drillDataFileExtension simple stored property
    self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.drillDataFileExtension_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.drillDataFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasInnerElements transient property
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasInnerElements_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasInnerElements_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasSixLayers transient property
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSixLayers_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasSixLayers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasDataWarning transient property
    self.hasDataWarning_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasDataWarning_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasDataWarning_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure emptyDrillFileExtension transient property
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.emptyDrillFileExtension_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.emptyDrillFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.signatureForERCChecking_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ArtworkRoot : ReadOnlyObject_ArtworkRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! ArtworkRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! ArtworkRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkRoot?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ArtworkRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ArtworkRoot? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : ArtworkRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

