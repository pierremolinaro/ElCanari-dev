//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_AutoLayoutArtworkDocument_statusImage (
       _ root_fileGenerationParameterArray_fileExtension : [ArtworkFileGenerationParameters_fileExtension],
       _ root_fileGenerationParameterArray_name : [ArtworkFileGenerationParameters_name],
       _ root_fileGenerationParameterArray_hasNoData : [ArtworkFileGenerationParameters_hasNoData],
       _ root_emptyDrillFileExtension : Bool,         
       _ self_documentFileName : String
) -> NSImage {
//--- START OF USER ZONE 2
        let n = root_fileGenerationParameterArray_fileExtension.count
        var error = false
        var warning = (n == 0)
        var fileExtensionSet = Set <String> ()
        var nameSet = Set <String> ()
        for i in 0 ..< n {
          let fileExtension = root_fileGenerationParameterArray_fileExtension [i].fileExtension
          let name = root_fileGenerationParameterArray_name [i].name
          if fileExtension.isEmpty {
            error = true
          }else if fileExtensionSet.contains (fileExtension) {
            error = true
          }else{
            fileExtensionSet.insert (fileExtension)
          }
          if name.isEmpty {
            error = true
          }else if nameSet.contains (name) {
            error = true
          }else{
            nameSet.insert (name)
          }
        }
        if let issue = libraryDocumentFileNameIssue (self_documentFileName) {
          switch issue.kind {
          case .error :
            error = true
          case .warning :
            warning = true
          }
        }
        for parameter in root_fileGenerationParameterArray_hasNoData {
          if let hasNoData = parameter.hasNoData, hasNoData {
            warning = true
          }
        }
        if root_emptyDrillFileExtension {
          error = true
        }
     //---
        var result = NSImage (named: okStatusImageName)!
        if error {
          result = NSImage (named: errorStatusImageName)!
        }else if warning {
          result = NSImage (named: warningStatusImageName)!
        }
        return result
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
