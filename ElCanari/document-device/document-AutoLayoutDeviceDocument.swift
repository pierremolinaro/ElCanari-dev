//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutDeviceDocument) class AutoLayoutDeviceDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: packageController
  //····················································································································

  final var packageController = Controller_AutoLayoutDeviceDocument_packageController ()

  //····················································································································
  //   Array controller: documentationController
  //····················································································································

  final var documentationController = Controller_AutoLayoutDeviceDocument_documentationController ()

  //····················································································································
  //   Array controller: symbolDisplayController
  //····················································································································

  final var symbolDisplayController = Controller_AutoLayoutDeviceDocument_symbolDisplayController ()

  //····················································································································
  //   Selection controller: symbolInstanceSelection
  //····················································································································

  final var symbolInstanceSelection = SelectionController_AutoLayoutDeviceDocument_symbolInstanceSelection ()

  //····················································································································
  //   Array controller: packageDisplayController
  //····················································································································

  final var packageDisplayController = Controller_AutoLayoutDeviceDocument_packageDisplayController ()

  //····················································································································
  //   Array controller: symbolTypeController
  //····················································································································

  final var symbolTypeController = Controller_AutoLayoutDeviceDocument_symbolTypeController ()

  //····················································································································
  //   Selection controller: symbolTypeSelection
  //····················································································································

  final var symbolTypeSelection = SelectionController_AutoLayoutDeviceDocument_symbolTypeSelection ()

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPin
  //····················································································································

  final let hasUnconnectedPin_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPin : Bool? {
    switch self.hasUnconnectedPin_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignmentInhibitionMessage
  //····················································································································

  final let assignmentInhibitionMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var assignmentInhibitionMessage : String? {
    switch self.assignmentInhibitionMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPad
  //····················································································································

  final let hasUnconnectedPad_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPad : Bool? {
    switch self.hasUnconnectedPad_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasAssignedPadProxies
  //····················································································································

  final let hasAssignedPadProxies_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasAssignedPadProxies : Bool? {
    switch self.hasAssignedPadProxies_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  final let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var mStatusMessage : String? {
    switch self.mStatusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  final let mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mAssignedPadProxyTableView : AutoLayoutCanariAssignedPadProxysInDeviceTableView? = nil
  weak final var mUnconnectedPadsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView? = nil
  weak final var mUnconnectedSymbolPinsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : DeviceRoot { return self.mRootObject as! DeviceRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy final var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy final var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Description", tooltip: "Device Description", pageView: self.mDescriptionPage)
          .addPage (title: "Symbols", tooltip: "Device Symbols", pageView: self.mSymbolsPage)
          .addPage (title: "Packages", tooltip: "Device Available Packages", pageView: self.mPackagesPage)
          .addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: self.mAssignmentsPage)
          .addPage (title: "Library", tooltip: "Device Embedded Library", pageView: self.mLibraryPage)
          .addPage (title: "Infos", tooltip: "Device Informations", pageView: self.mInfosPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (size: .regular)
          .bind_signature (self.signatureObserver_property)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .small, alignment: .center)
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (size: .regular)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small, alignment: .center)
        _ = view_0_2.appendView (view_0_2_1)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.mStatusImage_property)
            .bind_tooltip (self.mStatusMessage_property)
          _ = view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_2)
        }
        _ = view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
        _ = view_0_4.appendView (view_0_4_1)
      }
      _ = view_0.appendView (view_0_4)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDescriptionPage
  //····················································································································

  lazy final var mDescriptionPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 16)
      .set (spacing: 12)
    let view_0 = AutoLayoutTextField (minWidth: 70, size: .regular)
      .expandableWidth ()
      .set (alignment: .left)
      .bind_value (self.rootObject.mTitle_property, sendContinously:true)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutCanariDeviceDroppableImageView (width: 240)
        .bind_imageData (self.rootObject.mImageData_property)
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "PDF Documentation", bold: false, size: .regular, alignment: .center)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        self.documentationController.bind_tableView (view_1_1_1)
        self.configure_documentationTableView (view_1_1_1) // Configurator
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_2_0 = AutoLayoutButton (title: "-", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.removeDocumentationAction (_:))
            )
          _ = view_1_1_2.appendView (view_1_1_2_0)
          let view_1_1_2_1 = AutoLayoutButton (title: "Show Documentation", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.showDocAction (_:))
            )
          _ = view_1_1_2.appendView (view_1_1_2_1)
          let view_1_1_2_2 = AutoLayoutButton (title: "Save as…", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.saveDocAction (_:))
            )
          _ = view_1_1_2.appendView (view_1_1_2_2)
          let view_1_1_2_3 = AutoLayoutFlexibleSpace ()
          _ = view_1_1_2.appendView (view_1_1_2_3)
        }
        _ = view_1_1.appendView (view_1_1_2)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolsPage
  //····················································································································

  lazy final var mSymbolsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mSymbolPageInspectorView, equalWidth: true, size: .small)
        .expandableWidth ()
        .addPage (title: "", tooltip: "", pageView: self.mSymbolPageOperationView)
        .addPage (title: "", tooltip: "Grid, Zoom and Display Inspector", pageView: self.mSymbolGridZoomInspectorView)
        .bind_selectedPage (self.rootObject.mSelectedSymbolInspectorIndex_property)
      self.configure_symbolInspectorSegmentedControl (view_0_0) // Configurator
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (bottomMargin: 20)
        .set (spacing: 12)
      do{
        let view_0_1_0 = mSymbolPageInspectorView
        _ = view_0_1.appendView (view_0_1_0)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
      .bind_verticalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
      .bind_zoom (self.rootObject.mSymbolDisplayZoom_property)
      .bind_backColor (preferences_mSymbolBackColorForDevice_property)
      .bind_graphic_controller (self.symbolDisplayController)
    _ = hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mSymbolPageInspectorView
  //····················································································································

  lazy final var mSymbolPageInspectorView : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  } ()

  //····················································································································
  //    VIEW mSymbolPageOperationView
  //····················································································································

  lazy final var mSymbolPageOperationView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 0)
    let view_0 = AutoLayoutStaticLabel (title: "Add Symbol From", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutButton (title: "File Library…", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutDeviceDocument.addSymbolFromLibraryAction (_:))
      )
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutCanariAddSymbolInstancePullDownButton ()
      .expandableWidth ()
      .bind_symbolTypeNames (self.rootObject.symbolTypeNames_property)
      .bind_enabled (.intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0)))
    self.configure_addSymbolInstancePullDownButton (view_2) // Configurator
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutStaticLabel (title: "Symbol Type", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .center)
      .expandableWidth ()
      .bind_title (self.symbolInstanceSelection.symbolTypeName_property)
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutStaticLabel (title: "Symbol Name", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutTextField (minWidth: 70, size: .small)
      .expandableWidth ()
      .bind_value (self.symbolInstanceSelection.mInstanceName_property, sendContinously:true)
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutStaticLabel (title: "Symbol Errors", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutTextObserverView ()
      .expandableWidth ()
      .setRedTextColor ()
      .bind_observedValue (self.rootObject.inconsistentSymbolNameSetMessage_property)
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_9)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolGridZoomInspectorView
  //····················································································································

  lazy final var mSymbolGridZoomInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 0)
    let view_0 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addCenterYAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .addCenterYAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .add (single: self.computeImplicitView_8 ())
      .add (single: self.computeImplicitView_9 ())
      .add (single: self.computeImplicitView_10 ())
      .add (single: self.computeImplicitView_11 ())
      .add (single: self.computeImplicitView_12 ())
      .add (single: self.computeImplicitView_13 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mPackagesPage
  //····················································································································

  lazy final var mPackagesPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPackagePageInspectorView, equalWidth: true, size: .small)
        .expandableWidth ()
        .addPage (title: "", tooltip: "", pageView: self.mPackagePageOperationView)
        .addPage (title: "", tooltip: "Grid, Zoom and Display Inspector", pageView: self.mPackageGridZoomInspectorView)
        .bind_selectedPage (self.rootObject.mSelectedPackageInspectorIndex_property)
      self.configure_packageInspectorSegmentedControl (view_0_0) // Configurator
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (bottomMargin: 20)
        .set (spacing: 12)
      do{
        let view_0_1_0 = mPackagePageInspectorView
        _ = view_0_1.appendView (view_0_1_0)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property)
      .bind_zoom (self.rootObject.mPackageDisplayZoom_property)
      .bind_backColor (preferences_mPackageBackColorForDevice_property)
      .bind_graphic_controller (self.packageDisplayController)
    _ = hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mPackagePageInspectorView
  //····················································································································

  lazy final var mPackagePageInspectorView : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  } ()

  //····················································································································
  //    VIEW mPackageGridZoomInspectorView
  //····················································································································

  lazy final var mPackageGridZoomInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addCenterYAligned (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
      .addCenterYAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .addCenterYAligned (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
      .addCenterYAligned (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
      .addCenterYAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .addCenterYAligned (left: self.computeImplicitView_28 (), right: self.computeImplicitView_29 ())
      .add (single: self.computeImplicitView_30 ())
      .add (single: self.computeImplicitView_31 ())
      .add (single: self.computeImplicitView_32 ())
      .add (single: self.computeImplicitView_33 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mPackagePageOperationView
  //····················································································································

  lazy final var mPackagePageOperationView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 0)
    let view_0 = AutoLayoutButton (title: "Add Package From File Library…", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutDeviceDocument.addPackageFromLibraryAction (_:))
      )
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutGridView2 ()
      .addCenterYAligned (left: self.computeImplicitView_34 (), right: self.computeImplicitView_35 ())
      .addCenterYAligned (left: self.computeImplicitView_36 (), right: self.computeImplicitView_37 ())
      .addCenterYAligned (left: self.computeImplicitView_38 (), right: self.computeImplicitView_39 ())
      .addCenterYAligned (left: self.computeImplicitView_40 (), right: self.computeImplicitView_41 ())
    _ = vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mLibraryPage
  //····················································································································

  lazy final var mLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Symbols and Packages Version and Signature", size: .small)
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.resetSymbolsAndPackagesVersion (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Update Symbols and Packages", size: .small)
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.updateSymbolsAndPackagesAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
      .equalHeight ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Embedded Symbols", bold: true, size: .small, alignment: .center)
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_0_1_0 = AutoLayoutTableView (size: .small, addControlButtons: false)
          self.symbolTypeController.bind_tableView (view_1_0_1_0)
          _ = view_1_0_1.appendView (view_1_0_1_0)
          let view_1_0_1_1 = AutoLayoutVerticalStackView ()
          do{
            let view_1_0_1_1_0 = AutoLayoutButton (title: "Reset Version", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.resetSelectedSymbolVersion (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_0)
            let view_1_0_1_1_1 = AutoLayoutButton (title: "Update", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.updateSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_1)
            let view_1_0_1_1_2 = AutoLayoutButton (title: "Export…", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.exportSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_2)
            let view_1_0_1_1_3 = AutoLayoutButton (title: "Edit", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.editSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_3)
            let view_1_0_1_1_4 = AutoLayoutButton (title: "Remove", size: .small)
              .expandableWidth ()
              .bind_enabled (.boolcmp (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .intcmp (.prop (self.symbolTypeSelection.instanceCount_property), .eq, .literalInt (0))))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.removeUselessSymbolTypeAction (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_4)
            let view_1_0_1_1_5 = AutoLayoutFlexibleSpace ()
            _ = view_1_0_1_1.appendView (view_1_0_1_1_5)
          }
          _ = view_1_0_1.appendView (view_1_0_1_1)
        }
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Embedded Packages", bold: true, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_1_0 = AutoLayoutTableView (size: .small, addControlButtons: false)
          self.packageController.bind_tableView (view_1_1_1_0)
          _ = view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalStackView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutButton (title: "Reset Version", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.resetSelectedPackageVersion (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutButton (title: "Update", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.updateSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_1)
            let view_1_1_1_1_2 = AutoLayoutButton (title: "Export…", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.exportSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_2)
            let view_1_1_1_1_3 = AutoLayoutButton (title: "Edit", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.editSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_3)
            let view_1_1_1_1_4 = AutoLayoutFlexibleSpace ()
            _ = view_1_1_1_1.appendView (view_1_1_1_1_4)
          }
          _ = view_1_1_1.appendView (view_1_1_1_1)
        }
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mAssignmentsPage
  //····················································································································

  lazy final var mAssignmentsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalSplitView ()
      .bind_hidden (.boolcmp (.not (.prop (self.rootObject.packagePadNameSetsAreConsistent_property)), .or, .not (.prop (self.rootObject.symbolNameAreConsistent_property))))
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (minWidth: 100)
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Unassigned Pads", bold: true, size: .regular, alignment: .center)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView ()
          .expandableWidth ()
          .bind_unconnectedPads (self.rootObject.unconnectedPads_property)
        self.mUnconnectedPadsInDeviceTableView = view_0_0_1 // Outlet
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
        .set (minWidth: 200)
      do{
        let view_0_1_0 = AutoLayoutStaticLabel (title: "Unassigned Pins", bold: true, size: .regular, alignment: .center)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView ()
          .expandableWidth ()
          .bind_unconnectedPins (self.rootObject.unconnectedPins_property)
        self.mUnconnectedSymbolPinsInDeviceTableView = view_0_1_1 // Outlet
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutStaticLabel (title: " ", bold: true, size: .regular, alignment: .center)
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutFlexibleSpace ()
        _ = view_0_2.appendView (view_0_2_1)
        let view_0_2_2 = AutoLayoutButton (title: "- Bind →", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.prop (self.hasUnconnectedPad_property), .and, .prop (self.hasUnconnectedPin_property)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performBindAction (_:))
          )
        _ = view_0_2.appendView (view_0_2_2)
        let view_0_2_3 = AutoLayoutButton (title: "- NC →", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasUnconnectedPad_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performNCAction (_:))
          )
        _ = view_0_2.appendView (view_0_2_3)
        let view_0_2_4 = AutoLayoutFlexibleSpace ()
        _ = view_0_2.appendView (view_0_2_4)
        let view_0_2_5 = AutoLayoutButton (title: "← Unbind -", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasAssignedPadProxies_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performUnbindAction (_:))
          )
        _ = view_0_2.appendView (view_0_2_5)
        let view_0_2_6 = AutoLayoutButton (title: "← Unbind All -", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasAssignedPadProxies_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performUnbindAllAction (_:))
          )
        _ = view_0_2.appendView (view_0_2_6)
        let view_0_2_7 = AutoLayoutFlexibleSpace ()
        _ = view_0_2.appendView (view_0_2_7)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
        .set (minWidth: 300)
      do{
        let view_0_3_0 = AutoLayoutStaticLabel (title: "Assignments", bold: true, size: .regular, alignment: .center)
        _ = view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutCanariAssignedPadProxysInDeviceTableView ()
          .expandableWidth ()
          .bind_assignedPadProxies (self.rootObject.assignedPadProxies_property)
        self.mAssignedPadProxyTableView = view_0_3_1 // Outlet
        _ = view_0_3.appendView (view_0_3_1)
      }
      _ = view_0.appendView (view_0_3)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.boolcmp (.prop (self.rootObject.packagePadNameSetsAreConsistent_property), .and, .prop (self.rootObject.symbolNameAreConsistent_property)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutLabel (bold: true, size: .regular)
          .setRedTextColor ()
          .bind_title (self.assignmentInhibitionMessage_property)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_2)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy final var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: 20)
      .set (rightMargin: 20)
      .set (bottomMargin: 20)
      .set (topMargin: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Device Prefix", bold: false, size: .small, alignment: .center)
        .set (minWidth: 84)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
        .bind_value (self.rootObject.mPrefix_property, sendContinously:true)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: false, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.resetVersionAction (_:))
        )
      _ = view_0.appendView (view_0_4)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
      .equalHeight ()
    do{
      let view_1_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_0_0_0 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
          _ = view_1_0_0.appendView (view_1_0_0_0)
          let view_1_0_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_0_0.appendView (view_1_0_0_1)
        }
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTextObserverView ()
          .bind_observedValue (self.mStatusMessage_property)
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_1_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .small, alignment: .center)
          _ = view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_1_0.appendView (view_1_1_0_1)
        }
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTextView ()
          .bind_value (self.rootObject.mComments_property)
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mSymbolBackColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (preferences_mSymbolHorizontalFlipForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (preferences_mSymbolVerticalFlipForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbol Color", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mSymbolColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbol Width", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .expandableWidth ()
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Points", withTag: 20)
      .add (title: "2.5 Points", withTag: 25)
      .bind_selectedTag (preferences_symbolDrawingWidthForDeviceMultipliedByTen_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbol Name Font", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_mSymbolNameFontForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pin Name Font", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_mPinNameFontForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mPackageBackColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (preferences_mPackageHorizontalFlipForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (preferences_mPackageVerticalFlipForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mPackageColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package Width", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Points", withTag: 20)
      .add (title: "2.5 Points", withTag: 25)
      .bind_selectedTag (preferences_packageDrawingWidthForDeviceMultipliedByTen_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Front Side Pad", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mFrontSidePadColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Back Side Pad", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mBottomSidePadColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  fileprivate final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Number", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  fileprivate final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mPadNumberColorForDevice_property, sendContinously:false)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  fileprivate final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Number Font", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  fileprivate final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_mPadNumberFontForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  fileprivate final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package Name Font", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  fileprivate final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_mPackageNameFontForDevice_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  fileprivate final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutColorWell ()
      .expandableHeight ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_packageColor_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  fileprivate final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Packages", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mShowPackages_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  fileprivate final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutColorWell ()
      .expandableHeight ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_padNumberColor_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  fileprivate final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Pad Numbers", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mShowPackagePadNumbers_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  fileprivate final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutColorWell ()
      .expandableHeight ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_frontSidePadColor_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  fileprivate final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Front Side Pads", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mShowPackageFrontPads_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  fileprivate final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutColorWell ()
      .expandableHeight ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_backSidePadColor_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  fileprivate final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Back Side Pads", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mShowPackageBackPads_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
  //--- Array controller property: packageController
    self.packageController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)

  //--- Array controller property: documentationController
    self.documentationController.bind_model (self.rootObject.mDocs_property, self.ebUndoManager)

  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property, self.ebUndoManager)

  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.bind_selection (model: self.symbolDisplayController.selectedArray_property)

  //--- Array controller property: packageDisplayController
    self.packageDisplayController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)

  //--- Array controller property: symbolTypeController
    self.symbolTypeController.bind_model (self.rootObject.mSymbolTypes_property, self.ebUndoManager)

  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.bind_selection (model: self.symbolTypeController.selectedArray_property)


  //--- Atomic property: hasUnconnectedPin
    self.hasUnconnectedPin_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPins_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPin (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPins_property.addEBObserver (self.hasUnconnectedPin_property)

  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property.selection
        let s1 = unwSelf.rootObject.inconsistentSymbolNameSetMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_assignmentInhibitionMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)

  //--- Atomic property: hasUnconnectedPad
    self.hasUnconnectedPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPads_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPads_property.addEBObserver (self.hasUnconnectedPad_property)

  //--- Atomic property: hasAssignedPadProxies
    self.hasAssignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.assignedPadProxies_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasAssignedPadProxies (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.assignedPadProxies_property.addEBObserver (self.hasAssignedPadProxies_property)

  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        let s1 = unwSelf.documentFileName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_issues (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.issues_property)
    self.documentFileName_property.addEBObserver (self.issues_property)

  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusImage_property)

  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mStatusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusMessage_property)

  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mMetadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mMetadataStatus_property)

  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

/*  override func removeUserInterface () { //a
    super.removeUserInterface ()
  }
*/
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

