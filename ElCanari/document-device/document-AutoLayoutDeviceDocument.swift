//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutDeviceDocument) class AutoLayoutDeviceDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: packageController
  //································································································

  final var packageController = Controller_AutoLayoutDeviceDocument_packageController ()

  //································································································
  //   Array controller: documentationController
  //································································································

  final var documentationController = Controller_AutoLayoutDeviceDocument_documentationController ()

  //································································································
  //   Array controller: symbolDisplayController
  //································································································

  final var symbolDisplayController = Controller_AutoLayoutDeviceDocument_symbolDisplayController ()

  //································································································
  //   Selection controller: symbolInstanceSelection
  //································································································

  final var symbolInstanceSelection = SelectionController_AutoLayoutDeviceDocument_symbolInstanceSelection ()

  //································································································
  //   Array controller: packageDisplayController
  //································································································

  final var packageDisplayController = Controller_AutoLayoutDeviceDocument_packageDisplayController ()

  //································································································
  //   Array controller: symbolTypeController
  //································································································

  final var symbolTypeController = Controller_AutoLayoutDeviceDocument_symbolTypeController ()

  //································································································
  //   Selection controller: symbolTypeSelection
  //································································································

  final var symbolTypeSelection = SelectionController_AutoLayoutDeviceDocument_symbolTypeSelection ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: hasUnconnectedPin
  //································································································

  final let hasUnconnectedPin_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasUnconnectedPin : Bool? {
    return self.hasUnconnectedPin_property.optionalValue
  }

  //································································································
  //   Transient property: assignmentInhibitionMessage
  //································································································

  final let assignmentInhibitionMessage_property = EBTransientProperty <String> ()

  //································································································

  final var assignmentInhibitionMessage : String? {
    return self.assignmentInhibitionMessage_property.optionalValue
  }

  //································································································
  //   Transient property: hasUnconnectedPad
  //································································································

  final let hasUnconnectedPad_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasUnconnectedPad : Bool? {
    return self.hasUnconnectedPad_property.optionalValue
  }

  //································································································
  //   Transient property: hasAssignedPadProxies
  //································································································

  final let hasAssignedPadProxies_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasAssignedPadProxies : Bool? {
    return self.hasAssignedPadProxies_property.optionalValue
  }

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: metadataStatus
  //································································································

  final let metadataStatus_property = EBTransientProperty <MetadataStatus> ()

  //································································································

  final var metadataStatus : MetadataStatus? {
    return self.metadataStatus_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mAssignedPadProxyTableView : AutoLayoutCanariAssignedPadProxysInDeviceTableView? = nil
  weak final var mUnconnectedPadsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView? = nil
  weak final var mUnconnectedSymbolPinsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : DeviceRoot { return self.mRootObject as! DeviceRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.PageMasterView ()
    let descriptionPage = self.DescriptionPage ()
    let symbolsPage = self.SymbolsPage ()
    let packagesPage = self.PackagesPage ()
    let assignmentsPage = self.AssignmentsPage ()
    let libraryPage = self.LibraryPage ()
    let infosPage = self.InfosPage ()
    let view_0 = AutoLayoutToolBar ()
      .add (title: "Page", item: { () -> NSView in let item = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
  .addPage (title: "Description", tooltip: "Device Description", pageView: descriptionPage)
  .addPage (title: "Symbols", tooltip: "Device Symbols", pageView: symbolsPage)
  .addPage (title: "Packages", tooltip: "Device Available Packages", pageView: packagesPage)
  .addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: assignmentsPage)
  .addPage (title: "Library", tooltip: "Device Embedded Library", pageView: libraryPage)
  .addPage (title: "Infos", tooltip: "Device Informations", pageView: infosPage)
  .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
 ; return item } ())
      .add (title: "Signature", item: { () -> NSView in let item = AutoLayoutSignatureField (size: .regular)
  .bind_signature (self.signatureObserver_property)
 ; return item } ())
      .add (title: "Version", item: { () -> NSView in let item = AutoLayoutVersionField (size: .regular)
  .bind_version (self.versionObserver_property)
  .bind_versionShouldChange (self.versionShouldChangeObserver_property)
 ; return item } ())
      .addFlexibleSpace ()
      .add (title: "Status", item: { () -> NSView in let item = AutoLayoutStatusBadgeView ()
  .bind_tooltip (self.statusMessage_property)
  .bind_errorCount (self.statusErrorCount_property)
  .bind_warningCount (self.statusWarningCount_property)
 ; return item } ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
      .set (spacing: .large)
    let view_0 = AutoLayoutTextField (minWidth: 70, size: .regular)
      .expandableWidth ()
      .set (alignment: .left)
      .bind_value (self.rootObject.mTitle_property, sendContinously:true)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutDroppableImageView (removeButton: true)
        .bind_imageData (self.rootObject.mImageData_property)
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView.VerticalDivider ()
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutVerticalStackView ()
      do{
        let view_1_2_0 = AutoLayoutStaticLabel (title: "PDF Documentation", bold: false, size: .regular, alignment: .center)
        _ = view_1_2.appendView (view_1_2_0)
        let view_1_2_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
          .expandableWidth ()
        self.documentationController.bind_tableView (view_1_2_1)
        self.configure_documentationTableView (view_1_2_1) // Configurator
        _ = view_1_2.appendView (view_1_2_1)
        let view_1_2_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_2_0 = AutoLayoutButton (title: "-", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.removeDocumentationAction (_:))
            )
          _ = view_1_2_2.appendView (view_1_2_2_0)
          let view_1_2_2_1 = AutoLayoutButton (title: "Show Documentation", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.showDocAction (_:))
            )
          _ = view_1_2_2.appendView (view_1_2_2_1)
          let view_1_2_2_2 = AutoLayoutButton (title: "Save as…", size: .small)
            .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.saveDocAction (_:))
            )
          _ = view_1_2_2.appendView (view_1_2_2_2)
          let view_1_2_2_3 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_2.appendView (view_1_2_2_3)
        }
        _ = view_1_2.appendView (view_1_2_2)
      }
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let symbolPageInspectorView = self.SymbolPageInspectorView ()
    let symbolPageOperationView = self.SymbolPageOperationView ()
    let symbolGridZoomInspectorView = self.SymbolGridZoomInspectorView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: .regular)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: symbolPageInspectorView, equalWidth: true, size: .small)
        .expandableWidth ()
        .addPage (title: "🛠", tooltip: "", pageView: symbolPageOperationView)
        .addPage (title: "🔍", tooltip: "Grid, Zoom and Display Inspector", pageView: symbolGridZoomInspectorView)
        .bind_selectedPage (self.rootObject.mSelectedSymbolInspectorIndex_property)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (bottomMargin: .large)
        .set (spacing: .large)
      do{
        let view_0_1_0 = symbolPageInspectorView
        _ = view_0_1.appendView (view_0_1_0)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
      .bind_verticalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
      .bind_zoom (self.rootObject.mSymbolDisplayZoom_property)
      .bind_backColor (preferences_mSymbolBackColorForDevice_property)
      .bind_graphic_controller (self.symbolDisplayController)
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPageInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPageInspectorView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPageOperationView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPageOperationView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Add Symbol From", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutButton (title: "File Library…", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutDeviceDocument.addSymbolFromLibraryAction (_:))
      )
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutCanariAddSymbolInstancePullDownButton ()
      .expandableWidth ()
      .bind_symbolTypeNames (self.rootObject.symbolTypeNames_property)
      .bind_enabled (.intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0)))
    self.configure_addSymbolInstancePullDownButton (view_2) // Configurator
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutStaticLabel (title: "Symbol Type", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .center)
      .expandableWidth ()
      .bind_title (self.symbolInstanceSelection.symbolTypeName_property)
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutStaticLabel (title: "Symbol Name", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutTextField (minWidth: 70, size: .small)
      .expandableWidth ()
      .bind_value (self.symbolInstanceSelection.mInstanceName_property, sendContinously:true)
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutStaticLabel (title: "Symbol Errors", bold: true, size: .small, alignment: .left)
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutTextObserverView (size: .small)
      .expandableWidth ()
      .setRedTextColor ()
      .bind_observedValue (self.rootObject.inconsistentSymbolNameSetMessage_property)
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_9)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolGridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolGridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mSymbolBackColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Horizontal", size: .small)
  .bind_value (preferences_mSymbolHorizontalFlipForDevice_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Vertical", size: .small)
  .bind_value (preferences_mSymbolVerticalFlipForDevice_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Symbol Color", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mSymbolColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Symbol Width", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutTaggedPopUpButton (size: .small)
  .expandableWidth ()
  .add (title: "0.5 Point", withTag: 5)
  .add (title: "1.0 Point", withTag: 10)
  .add (title: "1.5 Point", withTag: 15)
  .add (title: "2.0 Points", withTag: 20)
  .add (title: "2.5 Points", withTag: 25)
  .bind_selectedTag (preferences_symbolDrawingWidthForDeviceMultipliedByTen_property)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Symbol Name Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_mSymbolNameFontForDevice_property)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Pin Name Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_mPinNameFontForDevice_property)
 ; return single } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagesPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagesPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let packagePageInspectorView = self.PackagePageInspectorView ()
    let packagePageOperationView = self.PackagePageOperationView ()
    let packageGridZoomInspectorView = self.PackageGridZoomInspectorView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: .regular)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: packagePageInspectorView, equalWidth: true, size: .small)
        .expandableWidth ()
        .addPage (title: "🛠", tooltip: "", pageView: packagePageOperationView)
        .addPage (title: "🔍", tooltip: "Grid, Zoom and Display Inspector", pageView: packageGridZoomInspectorView)
        .bind_selectedPage (self.rootObject.mSelectedPackageInspectorIndex_property)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (bottomMargin: .large)
        .set (spacing: .large)
      do{
        let view_0_1_0 = packagePageInspectorView
        _ = view_0_1.appendView (view_0_1_0)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property)
      .bind_zoom (self.rootObject.mPackageDisplayZoom_property)
      .bind_backColor (preferences_mPackageBackColorForDevice_property)
      .bind_graphic_controller (self.packageDisplayController)
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePageInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePageInspectorView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackageGridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackageGridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mPackageBackColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Horizontal", size: .small)
  .bind_value (preferences_mPackageHorizontalFlipForDevice_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Vertical", size: .small)
  .bind_value (preferences_mPackageVerticalFlipForDevice_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Package", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mPackageColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Package Width", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "0.5 Point", withTag: 5)
  .add (title: "1.0 Point", withTag: 10)
  .add (title: "1.5 Point", withTag: 15)
  .add (title: "2.0 Points", withTag: 20)
  .add (title: "2.5 Points", withTag: 25)
  .bind_selectedTag (preferences_packageDrawingWidthForDeviceMultipliedByTen_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Front Side Pad", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mFrontSidePadColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Back Side Pad", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mBottomSidePadColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Pad Number", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_mPadNumberColorForDevice_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Pad Number Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_mPadNumberFontForDevice_property)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Package Name Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_mPackageNameFontForDevice_property)
 ; return single } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePageOperationView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePageOperationView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutButton (title: "Add Package From File Library…", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutDeviceDocument.addPackageFromLibraryAction (_:))
      )
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutColorWell ()
  .expandableHeight ()
  .set (toolTip: "Stored in Preferences")
  .bind_color (preferences_packageColor_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Display Packages", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mShowPackages_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutColorWell ()
  .expandableHeight ()
  .set (toolTip: "Stored in Preferences")
  .bind_color (preferences_padNumberColor_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Display Pad Numbers", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mShowPackagePadNumbers_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutColorWell ()
  .expandableHeight ()
  .set (toolTip: "Stored in Preferences")
  .bind_color (preferences_frontSidePadColor_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Display Front Side Pads", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mShowPackageFrontPads_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutColorWell ()
  .expandableHeight ()
  .set (toolTip: "Stored in Preferences")
  .bind_color (preferences_backSidePadColor_property)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Display Back Side Pads", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mShowPackageBackPads_property)
 ; return right } ())
    _ = vStackView.appendView (view_3)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW LibraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func LibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Symbols and Packages Version and Signature", size: .small)
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.resetSymbolsAndPackagesVersion (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Update Symbols and Packages", size: .small)
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.updateSymbolsAndPackagesAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Embedded Symbols", bold: true, size: .small, alignment: .center)
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_0_1_0 = AutoLayoutTableView (size: .small, addControlButtons: false)
          self.symbolTypeController.bind_tableView (view_1_0_1_0)
          _ = view_1_0_1.appendView (view_1_0_1_0)
          let view_1_0_1_1 = AutoLayoutVerticalStackView ()
          do{
            let view_1_0_1_1_0 = AutoLayoutButton (title: "Reset Version", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.resetSelectedSymbolVersion (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_0)
            let view_1_0_1_1_1 = AutoLayoutButton (title: "Update", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.updateSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_1)
            let view_1_0_1_1_2 = AutoLayoutButton (title: "Export…", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.exportSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_2)
            let view_1_0_1_1_3 = AutoLayoutButton (title: "Edit", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.editSelectedSymbols (_:))
              )
            _ = view_1_0_1_1.appendView (view_1_0_1_1_3)
            let view_1_0_1_1_4 = AutoLayoutFlexibleSpace ()
            _ = view_1_0_1_1.appendView (view_1_0_1_1_4)
          }
          _ = view_1_0_1.appendView (view_1_0_1_1)
        }
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Embedded Packages", bold: true, size: .small, alignment: .center)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_1_0 = AutoLayoutTableView (size: .small, addControlButtons: false)
          self.packageController.bind_tableView (view_1_1_1_0)
          _ = view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalStackView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutButton (title: "Reset Version", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.resetSelectedPackageVersion (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutButton (title: "Update", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.updateSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_1)
            let view_1_1_1_1_2 = AutoLayoutButton (title: "Export…", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.exportSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_2)
            let view_1_1_1_1_3 = AutoLayoutButton (title: "Edit", size: .small)
              .expandableWidth ()
              .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.editSelectedPackages (_:))
              )
            _ = view_1_1_1_1.appendView (view_1_1_1_1_3)
            let view_1_1_1_1_4 = AutoLayoutFlexibleSpace ()
            _ = view_1_1_1_1.appendView (view_1_1_1_1_4)
          }
          _ = view_1_1_1.appendView (view_1_1_1_1)
        }
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW AssignmentsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func AssignmentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.boolcmp (.not (.prop (self.rootObject.packagePadNameSetsAreConsistent_property)), .or, .not (.prop (self.rootObject.symbolNameAreConsistent_property))))
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (minWidth: 100)
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Unassigned Pads", bold: true, size: .regular, alignment: .center)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView ()
          .expandableWidth ()
          .bind_unconnectedPads (self.rootObject.unconnectedPads_property)
        self.mUnconnectedPadsInDeviceTableView = view_0_0_1 // Outlet
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutHorizontalStackView.VerticalDivider ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
        .set (minWidth: 200)
      do{
        let view_0_2_0 = AutoLayoutStaticLabel (title: "Unassigned Pins", bold: true, size: .regular, alignment: .center)
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView ()
          .expandableWidth ()
          .bind_unconnectedPins (self.rootObject.unconnectedPins_property)
        self.mUnconnectedSymbolPinsInDeviceTableView = view_0_2_1 // Outlet
        _ = view_0_2.appendView (view_0_2_1)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutHorizontalStackView.VerticalDivider ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutStaticLabel (title: " ", bold: true, size: .regular, alignment: .center)
        _ = view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutFlexibleSpace ()
        _ = view_0_4.appendView (view_0_4_1)
        let view_0_4_2 = AutoLayoutButton (title: "- Bind →", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.prop (self.hasUnconnectedPad_property), .and, .prop (self.hasUnconnectedPin_property)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performBindAction (_:))
          )
        _ = view_0_4.appendView (view_0_4_2)
        let view_0_4_3 = AutoLayoutButton (title: "- NC →", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasUnconnectedPad_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performNCAction (_:))
          )
        _ = view_0_4.appendView (view_0_4_3)
        let view_0_4_4 = AutoLayoutFlexibleSpace ()
        _ = view_0_4.appendView (view_0_4_4)
        let view_0_4_5 = AutoLayoutButton (title: "← Unbind -", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasAssignedPadProxies_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performUnbindAction (_:))
          )
        _ = view_0_4.appendView (view_0_4_5)
        let view_0_4_6 = AutoLayoutButton (title: "← Unbind All -", size: .regular)
          .expandableWidth ()
          .bind_enabled (.prop (self.hasAssignedPadProxies_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.performUnbindAllAction (_:))
          )
        _ = view_0_4.appendView (view_0_4_6)
        let view_0_4_7 = AutoLayoutFlexibleSpace ()
        _ = view_0_4.appendView (view_0_4_7)
      }
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutHorizontalStackView.VerticalDivider ()
      _ = view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutVerticalStackView ()
        .set (minWidth: 300)
      do{
        let view_0_6_0 = AutoLayoutStaticLabel (title: "Assignments", bold: true, size: .regular, alignment: .center)
        _ = view_0_6.appendView (view_0_6_0)
        let view_0_6_1 = AutoLayoutCanariAssignedPadProxysInDeviceTableView ()
          .expandableWidth ()
          .bind_assignedPadProxies (self.rootObject.assignedPadProxies_property)
        self.mAssignedPadProxyTableView = view_0_6_1 // Outlet
        _ = view_0_6.appendView (view_0_6_1)
      }
      _ = view_0.appendView (view_0_6)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.boolcmp (.prop (self.rootObject.packagePadNameSetsAreConsistent_property), .and, .prop (self.rootObject.symbolNameAreConsistent_property)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutLabel (bold: true, size: .regular)
          .setRedTextColor ()
          .bind_title (self.assignmentInhibitionMessage_property)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_2)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = hStackView.appendView (view_1)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW InfosPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func InfosPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: .large)
      .set (rightMargin: .large)
      .set (bottomMargin: .large)
      .set (topMargin: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Device Prefix", bold: false, size: .small, alignment: .center)
        .set (minWidth: 84)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
        .bind_value (self.rootObject.mPrefix_property, sendContinously:true)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: false, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.resetVersionAction (_:))
        )
      _ = view_0.appendView (view_0_4)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
    do{
      let view_1_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_0_0_0 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
          _ = view_1_0_0.appendView (view_1_0_0_0)
          let view_1_0_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_0_0.appendView (view_1_0_0_1)
        }
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTextObserverView (size: .small)
          .bind_observedValue (self.statusMessage_property)
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_1_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .small, alignment: .center)
          _ = view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_1_0.appendView (view_1_1_0_1)
        }
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTextView ()
          .bind_value (self.rootObject.mComments_property)
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.setContentView (mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: packageController
    self.packageController.bind_model (self.rootObject.mPackages_property, self.undoManager)

  //--- Array controller property: documentationController
    self.documentationController.bind_model (self.rootObject.mDocs_property, self.undoManager)

  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property, self.undoManager)

  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.bind_selection (model: self.symbolDisplayController.selectedArray_property)

  //--- Array controller property: packageDisplayController
    self.packageDisplayController.bind_model (self.rootObject.mPackages_property, self.undoManager)

  //--- Array controller property: symbolTypeController
    self.symbolTypeController.bind_model (self.rootObject.mSymbolTypes_property, self.undoManager)

  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.bind_selection (model: self.symbolTypeController.selectedArray_property)


  //--- Atomic property: hasUnconnectedPin
    self.hasUnconnectedPin_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPins_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPin (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPins_property.startsBeingObserved (by: self.hasUnconnectedPin_property)

  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property.selection
        let s1 = unwSelf.rootObject.inconsistentSymbolNameSetMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_assignmentInhibitionMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.startsBeingObserved (by: self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.startsBeingObserved (by: self.assignmentInhibitionMessage_property)

  //--- Atomic property: hasUnconnectedPad
    self.hasUnconnectedPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPads_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPads_property.startsBeingObserved (by: self.hasUnconnectedPad_property)

  //--- Atomic property: hasAssignedPadProxies
    self.hasAssignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.assignedPadProxies_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasAssignedPadProxies (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.assignedPadProxies_property.startsBeingObserved (by: self.hasAssignedPadProxies_property)

  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        let s1 = unwSelf.documentFileName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_issues (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.issues_property)
    self.documentFileName_property.startsBeingObserved (by: self.issues_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.metadataStatus_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

