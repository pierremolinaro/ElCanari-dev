//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutDeviceDocument) class AutoLayoutDeviceDocument : AutoLayoutDeviceDocumentSuperClass {
  
  //································································································
  //   Array controller: packageController
  //································································································

  final var packageController = Controller_AutoLayoutDeviceDocument_packageController ()

  //································································································
  //   Array controller: documentationController
  //································································································

  final var documentationController = Controller_AutoLayoutDeviceDocument_documentationController ()

  //································································································
  //   Array controller: symbolDisplayController
  //································································································

  final var symbolDisplayController = Controller_AutoLayoutDeviceDocument_symbolDisplayController ()

  //································································································
  //   Selection controller: symbolInstanceSelection
  //································································································

  final var symbolInstanceSelection = SelectionController_AutoLayoutDeviceDocument_symbolInstanceSelection ()

  //································································································
  //   Array controller: packageDisplayController
  //································································································

  final var packageDisplayController = Controller_AutoLayoutDeviceDocument_packageDisplayController ()

  //································································································
  //   Array controller: symbolTypeController
  //································································································

  final var symbolTypeController = Controller_AutoLayoutDeviceDocument_symbolTypeController ()

  //································································································
  //   Selection controller: symbolTypeSelection
  //································································································

  final var symbolTypeSelection = SelectionController_AutoLayoutDeviceDocument_symbolTypeSelection ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: hasUnconnectedPin
  //································································································

  final let hasUnconnectedPin_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasUnconnectedPin : Bool? {
    return self.hasUnconnectedPin_property.optionalValue
  }

  //································································································
  //   Transient property: assignmentInhibitionMessage
  //································································································

  final let assignmentInhibitionMessage_property = EBTransientProperty <String> ()

  //································································································

  final var assignmentInhibitionMessage : String? {
    return self.assignmentInhibitionMessage_property.optionalValue
  }

  //································································································
  //   Transient property: hasUnconnectedPad
  //································································································

  final let hasUnconnectedPad_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasUnconnectedPad : Bool? {
    return self.hasUnconnectedPad_property.optionalValue
  }

  //································································································
  //   Transient property: hasAssignedPadProxies
  //································································································

  final let hasAssignedPadProxies_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasAssignedPadProxies : Bool? {
    return self.hasAssignedPadProxies_property.optionalValue
  }

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: metadataStatus
  //································································································

  final let metadataStatus_property = EBTransientProperty <MetadataStatus> ()

  //································································································

  final var metadataStatus : MetadataStatus? {
    return self.metadataStatus_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mAssignedPadProxyTableView : AutoLayoutCanariAssignedPadProxysInDeviceTableView? = nil
  weak final var mUnconnectedPadsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView? = nil
  weak final var mUnconnectedSymbolPinsInDeviceTableView : AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : DeviceRoot { return self.mRootObject as! DeviceRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.PageMasterView ()
    let descriptionPage = self.DescriptionPage ()
    let symbolsPage = self.SymbolsPage ()
    let packagesPage = self.PackagesPage ()
    let assignmentsPage = self.AssignmentsPage ()
    let libraryPage = self.LibraryPage ()
    let infosPage = self.InfosPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
            .addPage (title: "Description", tooltip: "Device Description", pageView: descriptionPage)
            .addPage (title: "Symbols", tooltip: "Device Symbols", pageView: symbolsPage)
            .addPage (title: "Packages", tooltip: "Device Available Packages", pageView: packagesPage)
            .addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: assignmentsPage)
            .addPage (title: "Library", tooltip: "Device Embedded Library", pageView: libraryPage)
            .addPage (title: "Infos", tooltip: "Device Informations", pageView: infosPage)
            .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
            .bind_segmentImage (self.rootObject.embeddedLibraryAttentionImage_property, segmentIndex:4)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Page", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSignatureField (size: .regular)
            .bind_signature (self.signatureObserver_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutVersionField (size: .regular)
            .bind_version (self.versionObserver_property)
            .bind_versionShouldChange (self.versionShouldChangeObserver_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Version", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
          .bind_hidden (.prop (preferences_fileSystemLibraryIsOk_property))
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Show Consistency Window", size: .regular)
            .bind_image (preferences_fileSystemLibraryStatusImage_property)
            .bind_run (
              target: gPreferences!,
              selector: #selector (Preferences.showLibraryConsistencyLogWindowAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "File System Library requires attention", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.statusMessage_property)
            .bind_errorCount (self.statusErrorCount_property)
            .bind_warningCount (self.statusWarningCount_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Status", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    _ = vStackView.appendView (pageMasterView)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
      .set (spacing: .large)
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 70, size: .regular)
        .expandableWidth ()
        .set (alignment: .left)
        .bind_value (self.rootObject.mTitle_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutDroppableImageView (removeButton: true)
          .bind_imageData (self.rootObject.mImageData_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendDivider ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Category", bold: false, size: .regular, alignment: .center)
              .notExpandableWidth ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutTextField (minWidth: 200, size: .regular)
              .expandableWidth ()
              .bind_value (self.rootObject.mCategory_property, sendContinously:true)
            self.configure_categoryTextField (vStackView_view_view_view_view) // Configurator
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutPullDownButton (title: "", size: .regular)
            self.configure_categoryPullDownButton (vStackView_view_view_view_view) // Configurator
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PDF Documentation", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
            .expandableWidth ()
          self.documentationController.bind_tableView (vStackView_view_view_view)
          self.configure_documentationTableView (vStackView_view_view_view) // Configurator
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "-", size: .small)
              .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.removeDocumentationAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Show Documentation", size: .small)
              .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.showDocAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Save as…", size: .small)
              .bind_enabled (.intcmp (.prop (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutDeviceDocument.saveDocAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let symbolPageInspectorView = self.SymbolPageInspectorView ()
    let symbolPageOperationView = self.SymbolPageOperationView ()
    let symbolGridZoomInspectorView = self.SymbolGridZoomInspectorView ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (width: 250)
        .set (margins: .regular)
      do{
        let hStackView_view_view = AutoLayoutSegmentedControlWithPages (documentView: symbolPageInspectorView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "🛠", tooltip: "", pageView: symbolPageOperationView)
          .addPage (title: "🔍", tooltip: "Grid, Zoom and Display Inspector", pageView: symbolGridZoomInspectorView)
          .bind_selectedPage (self.rootObject.mSelectedSymbolInspectorIndex_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (bottomMargin: .large)
          .set (spacing: .large)
        _ = hStackView_view_view.appendView (symbolPageInspectorView)
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
        .bind_horizontalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
        .bind_verticalFlip (preferences_mSymbolHorizontalFlipForDevice_property)
        .bind_zoom (self.rootObject.mSymbolDisplayZoom_property)
        .bind_backColor (preferences_mSymbolBackColorForDevice_property)
        .bind_graphic_controller (self.symbolDisplayController)
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPageInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPageInspectorView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPageOperationView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPageOperationView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Add Symbol From", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.addSymbolFromLibraryAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariAddSymbolInstancePullDownButton ()
        .expandableWidth ()
        .bind_symbolTypeNames (self.rootObject.symbolTypeNames_property)
        .bind_enabled (.intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0)))
      self.configure_addSymbolInstancePullDownButton (vStackView_view) // Configurator
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Type", bold: true, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .set (alignment: .center)
        .expandableWidth ()
        .bind_title (self.symbolInstanceSelection.symbolTypeName_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Name", bold: true, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 70, size: .small)
        .expandableWidth ()
        .bind_value (self.symbolInstanceSelection.mInstanceName_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Errors", bold: true, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextObserverView (size: .small)
        .expandableWidth ()
        .setRedTextColor ()
        .bind_observedValue (self.rootObject.inconsistentSymbolNameSetMessage_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolGridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolGridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mSymbolBackColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
          .bind_value (preferences_mSymbolHorizontalFlipForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
          .bind_value (preferences_mSymbolVerticalFlipForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Symbol Color", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mSymbolColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Width", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTaggedPopUpButton (size: .small)
        .expandableWidth ()
        .add (title: "0.5 Point", withTag: 5)
        .add (title: "1.0 Point", withTag: 10)
        .add (title: "1.5 Point", withTag: 15)
        .add (title: "2.0 Points", withTag: 20)
        .add (title: "2.5 Points", withTag: 25)
        .bind_selectedTag (preferences_symbolDrawingWidthForDeviceMultipliedByTen_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Name Font", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutFontButton (width: 125, size: .small)
        .bind_fontValue (preferences_mSymbolNameFontForDevice_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Pin Name Font", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutFontButton (width: 125, size: .small)
        .bind_fontValue (preferences_mPinNameFontForDevice_property)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagesPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagesPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let packagePageInspectorView = self.PackagePageInspectorView ()
    let packagePageOperationView = self.PackagePageOperationView ()
    let packageGridZoomInspectorView = self.PackageGridZoomInspectorView ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (width: 250)
        .set (margins: .regular)
      do{
        let hStackView_view_view = AutoLayoutSegmentedControlWithPages (documentView: packagePageInspectorView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "🛠", tooltip: "", pageView: packagePageOperationView)
          .addPage (title: "🔍", tooltip: "Grid, Zoom and Display Inspector", pageView: packageGridZoomInspectorView)
          .bind_selectedPage (self.rootObject.mSelectedPackageInspectorIndex_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (bottomMargin: .large)
          .set (spacing: .large)
        _ = hStackView_view_view.appendView (packagePageInspectorView)
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
        .bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property)
        .bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property)
        .bind_zoom (self.rootObject.mPackageDisplayZoom_property)
        .bind_backColor (preferences_mPackageBackColorForDevice_property)
        .bind_graphic_controller (self.packageDisplayController)
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePageInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePageInspectorView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackageGridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackageGridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mPackageBackColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
          .bind_value (preferences_mPackageHorizontalFlipForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
          .bind_value (preferences_mPackageVerticalFlipForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Package", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mPackageColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Package Width", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutTaggedPopUpButton (size: .small)
          .add (title: "0.5 Point", withTag: 5)
          .add (title: "0.6 Point", withTag: 6)
          .add (title: "0.7 Point", withTag: 7)
          .add (title: "0.8 Point", withTag: 8)
          .add (title: "0.9 Point", withTag: 9)
          .add (title: "1.0 Point", withTag: 10)
          .add (title: "1.2 Point", withTag: 12)
          .add (title: "1.5 Point", withTag: 15)
          .add (title: "1.7 Point", withTag: 17)
          .add (title: "2.0 Point", withTag: 20)
          .add (title: "2.5 Point", withTag: 25)
          .bind_selectedTag (preferences_packageDrawingWidthForDeviceMultipliedByTen_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Front Side Pad", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mFrontSidePadColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Back Side Pad", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mBottomSidePadColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Pad Number", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_mPadNumberColorForDevice_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Pad Number Font", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutFontButton (width: 125, size: .small)
        .bind_fontValue (preferences_mPadNumberFontForDevice_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Package Name Font", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutFontButton (width: 125, size: .small)
        .bind_fontValue (preferences_mPackageNameFontForDevice_property)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePageOperationView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePageOperationView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutButton (title: "Add Package From File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.addPackageFromLibraryAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
        .expandableWidth ()
        .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Horizontal Flip", size: .small)
        .expandableWidth ()
        .bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .expandableHeight ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_packageColor_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Display Packages", size: .small)
          .expandableWidth ()
          .bind_value (self.rootObject.mShowPackages_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .expandableHeight ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_padNumberColor_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Display Pad Numbers", size: .small)
          .expandableWidth ()
          .bind_value (self.rootObject.mShowPackagePadNumbers_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .expandableHeight ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_frontSidePadColor_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Display Front Side Pads", size: .small)
          .expandableWidth ()
          .bind_value (self.rootObject.mShowPackageFrontPads_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .expandableHeight ()
          .set (toolTip: "Stored in Preferences")
          .bind_color (preferences_backSidePadColor_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Display Back Side Pads", size: .small)
          .expandableWidth ()
          .bind_value (self.rootObject.mShowPackageBackPads_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW LibraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func LibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Symbols and Packages Version and Signature", size: .regular)
          .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.resetSymbolsAndPackagesVersion (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Update Symbols and Packages", size: .regular)
          .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.updateSymbolsAndPackagesAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Embedded Symbols", bold: true, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutTableView (size: .small, addControlButtons: false)
            self.symbolTypeController.bind_tableView (vStackView_view_view_view_view)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Reset Version", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.resetSelectedSymbolVersion (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Update", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.updateSelectedSymbols (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Export…", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.exportSelectedSymbols (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Edit", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.editSelectedSymbols (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Embedded Packages", bold: true, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutTableView (size: .small, addControlButtons: false)
            self.packageController.bind_tableView (vStackView_view_view_view_view)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Reset Version", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.resetSelectedPackageVersion (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Update", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.updateSelectedPackages (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Export…", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.exportSelectedPackages (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Edit", size: .small)
                .expandableWidth ()
                .bind_enabled (.intcmp (.prop (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutDeviceDocument.editSelectedPackages (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW AssignmentsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func AssignmentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .regular)
    do{
      let hStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.not (.prop (self.rootObject.packagePadNameSetsAreConsistent_property)), .or, .not (.prop (self.rootObject.symbolNameAreConsistent_property))))
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (minWidth: 100)
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Unassigned Pads", bold: true, size: .regular, alignment: .center)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutCanariUnconnectedSymbolPadsInDeviceTableView ()
            .expandableWidth ()
            .bind_unconnectedPads (self.rootObject.unconnectedPads_property)
          self.mUnconnectedPadsInDeviceTableView = hStackView_view_view_view // Outlet
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendDivider ()
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (minWidth: 200)
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Unassigned Pins", bold: true, size: .regular, alignment: .center)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutCanariUnconnectedSymbolPinsInDeviceTableView ()
            .expandableWidth ()
            .bind_unconnectedPins (self.rootObject.unconnectedPins_property)
          self.mUnconnectedSymbolPinsInDeviceTableView = hStackView_view_view_view // Outlet
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendDivider ()
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "- Bind →", size: .regular)
            .expandableWidth ()
            .bind_enabled (.boolcmp (.prop (self.hasUnconnectedPad_property), .and, .prop (self.hasUnconnectedPin_property)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.performBindAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "- NC →", size: .regular)
            .expandableWidth ()
            .bind_enabled (.prop (self.hasUnconnectedPad_property))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.performNCAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "← Unbind -", size: .regular)
            .expandableWidth ()
            .bind_enabled (.prop (self.hasAssignedPadProxies_property))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.performUnbindAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "← Unbind All -", size: .regular)
            .expandableWidth ()
            .bind_enabled (.prop (self.hasAssignedPadProxies_property))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutDeviceDocument.performUnbindAllAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendDivider ()
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (minWidth: 300)
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Assignments", bold: true, size: .regular, alignment: .center)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutCanariAssignedPadProxysInDeviceTableView ()
            .expandableWidth ()
            .bind_assignedPadProxies (self.rootObject.assignedPadProxies_property)
          self.mAssignedPadProxyTableView = hStackView_view_view_view // Outlet
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView .appendView (hStackView_view)
    }
    do{
      let hStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.prop (self.rootObject.packagePadNameSetsAreConsistent_property), .and, .prop (self.rootObject.symbolNameAreConsistent_property)))
      _ = hStackView_view.appendFlexibleSpace ()
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
            .setRedTextColor ()
            .bind_title (self.assignmentInhibitionMessage_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW InfosPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func InfosPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: .large)
      .set (rightMargin: .large)
      .set (bottomMargin: .large)
      .set (topMargin: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Device Prefix", bold: false, size: .small, alignment: .center)
          .set (minWidth: 84)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutTextField (minWidth: 56, size: .small)
          .bind_value (self.rootObject.mPrefix_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "This field only accepts lowercase and uppercase ASCII letters.", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutDeviceDocument.resetVersionAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
            .set (width: 84)
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTextObserverView (size: .small)
            .bind_observedValue (self.statusMessage_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
            .set (width: 84)
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .small, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTextView ()
            .bind_value (self.rootObject.mComments_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.setContentView (mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: packageController
    self.packageController.bind_model (self.rootObject.mPackages_property, self.undoManager)

  //--- Array controller property: documentationController
    self.documentationController.bind_model (self.rootObject.mDocs_property, self.undoManager)

  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property, self.undoManager)

  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.bind_selection (model: self.symbolDisplayController.selectedArray_property)

  //--- Array controller property: packageDisplayController
    self.packageDisplayController.bind_model (self.rootObject.mPackages_property, self.undoManager)

  //--- Array controller property: symbolTypeController
    self.symbolTypeController.bind_model (self.rootObject.mSymbolTypes_property, self.undoManager)

  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.bind_selection (model: self.symbolTypeController.selectedArray_property)


  //--- Atomic property: hasUnconnectedPin
    self.hasUnconnectedPin_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPins_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPin (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPins_property.startsBeingObserved (by: self.hasUnconnectedPin_property)

  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property.selection
        let s1 = unwSelf.rootObject.inconsistentSymbolNameSetMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_assignmentInhibitionMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.startsBeingObserved (by: self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.startsBeingObserved (by: self.assignmentInhibitionMessage_property)

  //--- Atomic property: hasUnconnectedPad
    self.hasUnconnectedPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unconnectedPads_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPads_property.startsBeingObserved (by: self.hasUnconnectedPad_property)

  //--- Atomic property: hasAssignedPadProxies
    self.hasAssignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.assignedPadProxies_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasAssignedPadProxies (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.assignedPadProxies_property.startsBeingObserved (by: self.hasAssignedPadProxies_property)

  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        let s1 = unwSelf.documentFileName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_issues (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.issues_property)
    self.documentFileName_property.startsBeingObserved (by: self.issues_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.metadataStatus_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

