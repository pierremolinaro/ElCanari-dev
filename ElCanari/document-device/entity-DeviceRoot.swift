//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSelectedPageIndex : AnyObject {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mTitle : AnyObject {
  var mTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mImageData : AnyObject {
  var mImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPrefix : AnyObject {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mComments : AnyObject {
  var mComments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayZoom : AnyObject {
  var mPackageDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayHorizontalFlip : AnyObject {
  var mPackageDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayVerticalFlip : AnyObject {
  var mPackageDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackages : AnyObject {
  var mShowPackages : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackagePadNumbers : AnyObject {
  var mShowPackagePadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageFrontPads : AnyObject {
  var mShowPackageFrontPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageBackPads : AnyObject {
  var mShowPackageBackPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayZoom : AnyObject {
  var mSymbolDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayHorizontalFlip : AnyObject {
  var mSymbolDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayVerticalFlip : AnyObject {
  var mSymbolDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_imageIsValid : AnyObject {
  var imageIsValid : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPins : AnyObject {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentPackagePadNameSetsMessage : AnyObject {
  var inconsistentPackagePadNameSetsMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentSymbolNameSetMessage : AnyObject {
  var inconsistentSymbolNameSetMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_packagePadNameSetsAreConsistent : AnyObject {
  var packagePadNameSetsAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolNameAreConsistent : AnyObject {
  var symbolNameAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolTypeNames : AnyObject {
  var symbolTypeNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPads : AnyObject {
  var unconnectedPads : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_assignedPadProxies : AnyObject {
  var assignedPadProxies : AssignedPadProxiesInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceRoot : EBManagedObject,
         DeviceRoot_mSelectedPageIndex,
         DeviceRoot_mTitle,
         DeviceRoot_mImageData,
         DeviceRoot_mPrefix,
         DeviceRoot_mComments,
         DeviceRoot_mPackageDisplayZoom,
         DeviceRoot_mPackageDisplayHorizontalFlip,
         DeviceRoot_mPackageDisplayVerticalFlip,
         DeviceRoot_mShowPackages,
         DeviceRoot_mShowPackagePadNumbers,
         DeviceRoot_mShowPackageFrontPads,
         DeviceRoot_mShowPackageBackPads,
         DeviceRoot_mSymbolDisplayZoom,
         DeviceRoot_mSymbolDisplayHorizontalFlip,
         DeviceRoot_mSymbolDisplayVerticalFlip,
         DeviceRoot_imageIsValid,
         DeviceRoot_unconnectedPins,
         DeviceRoot_inconsistentPackagePadNameSetsMessage,
         DeviceRoot_inconsistentSymbolNameSetMessage,
         DeviceRoot_packagePadNameSetsAreConsistent,
         DeviceRoot_symbolNameAreConsistent,
         DeviceRoot_symbolTypeNames,
         DeviceRoot_unconnectedPads,
         DeviceRoot_assignedPadProxies,
         DeviceRoot_issues {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  final let mSelectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedPageIndex_toDefaultValue () {
    self.mSelectedPageIndex = 0
  }

  //····················································································································

  final var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTitle
  //····················································································································

  final let mTitle_property : EBStoredProperty_String

  //····················································································································

  final func reset_mTitle_toDefaultValue () {
    self.mTitle = ""
  }

  //····················································································································

  final var mTitle : String {
    get { return self.mTitle_property.propval }
    set { self.mTitle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mImageData
  //····················································································································

  final let mImageData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mImageData_toDefaultValue () {
    self.mImageData = Data ()
  }

  //····················································································································

  final var mImageData : Data {
    get { return self.mImageData_property.propval }
    set { self.mImageData_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  final let mPrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPrefix_toDefaultValue () {
    self.mPrefix = ""
  }

  //····················································································································

  final var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mComments
  //····················································································································

  final let mComments_property : EBStoredProperty_String

  //····················································································································

  final func reset_mComments_toDefaultValue () {
    self.mComments = ""
  }

  //····················································································································

  final var mComments : String {
    get { return self.mComments_property.propval }
    set { self.mComments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayZoom
  //····················································································································

  final let mPackageDisplayZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPackageDisplayZoom_toDefaultValue () {
    self.mPackageDisplayZoom = 400
  }

  //····················································································································

  final var mPackageDisplayZoom : Int {
    get { return self.mPackageDisplayZoom_property.propval }
    set { self.mPackageDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  final let mPackageDisplayHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPackageDisplayHorizontalFlip_toDefaultValue () {
    self.mPackageDisplayHorizontalFlip = false
  }

  //····················································································································

  final var mPackageDisplayHorizontalFlip : Bool {
    get { return self.mPackageDisplayHorizontalFlip_property.propval }
    set { self.mPackageDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  final let mPackageDisplayVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPackageDisplayVerticalFlip_toDefaultValue () {
    self.mPackageDisplayVerticalFlip = false
  }

  //····················································································································

  final var mPackageDisplayVerticalFlip : Bool {
    get { return self.mPackageDisplayVerticalFlip_property.propval }
    set { self.mPackageDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackages
  //····················································································································

  final let mShowPackages_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackages_toDefaultValue () {
    self.mShowPackages = true
  }

  //····················································································································

  final var mShowPackages : Bool {
    get { return self.mShowPackages_property.propval }
    set { self.mShowPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackagePadNumbers
  //····················································································································

  final let mShowPackagePadNumbers_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackagePadNumbers_toDefaultValue () {
    self.mShowPackagePadNumbers = true
  }

  //····················································································································

  final var mShowPackagePadNumbers : Bool {
    get { return self.mShowPackagePadNumbers_property.propval }
    set { self.mShowPackagePadNumbers_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackageFrontPads
  //····················································································································

  final let mShowPackageFrontPads_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackageFrontPads_toDefaultValue () {
    self.mShowPackageFrontPads = true
  }

  //····················································································································

  final var mShowPackageFrontPads : Bool {
    get { return self.mShowPackageFrontPads_property.propval }
    set { self.mShowPackageFrontPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackageBackPads
  //····················································································································

  final let mShowPackageBackPads_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackageBackPads_toDefaultValue () {
    self.mShowPackageBackPads = true
  }

  //····················································································································

  final var mShowPackageBackPads : Bool {
    get { return self.mShowPackageBackPads_property.propval }
    set { self.mShowPackageBackPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolDisplayZoom
  //····················································································································

  final let mSymbolDisplayZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSymbolDisplayZoom_toDefaultValue () {
    self.mSymbolDisplayZoom = 400
  }

  //····················································································································

  final var mSymbolDisplayZoom : Int {
    get { return self.mSymbolDisplayZoom_property.propval }
    set { self.mSymbolDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolDisplayHorizontalFlip
  //····················································································································

  final let mSymbolDisplayHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSymbolDisplayHorizontalFlip_toDefaultValue () {
    self.mSymbolDisplayHorizontalFlip = false
  }

  //····················································································································

  final var mSymbolDisplayHorizontalFlip : Bool {
    get { return self.mSymbolDisplayHorizontalFlip_property.propval }
    set { self.mSymbolDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolDisplayVerticalFlip
  //····················································································································

  final let mSymbolDisplayVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSymbolDisplayVerticalFlip_toDefaultValue () {
    self.mSymbolDisplayVerticalFlip = false
  }

  //····················································································································

  final var mSymbolDisplayVerticalFlip : Bool {
    get { return self.mSymbolDisplayVerticalFlip_property.propval }
    set { self.mSymbolDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDocs
  //····················································································································

  final let mDocs_property = StoredArrayOf_DeviceDocumentation (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mDocs : EBReferenceArray <DeviceDocumentation> {
    get { return self.mDocs_property.propval }
    set { self.mDocs_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolInstances
  //····················································································································

  final let mSymbolInstances_property = StoredArrayOf_SymbolInstanceInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mSymbolInstances : EBReferenceArray <SymbolInstanceInDevice> {
    get { return self.mSymbolInstances_property.propval }
    set { self.mSymbolInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  final let mPackages_property = StoredArrayOf_PackageInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mPackages : EBReferenceArray <PackageInDevice> {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolTypes
  //····················································································································

  final let mSymbolTypes_property = StoredArrayOf_SymbolTypeInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mSymbolTypes : EBReferenceArray <SymbolTypeInDevice> {
    get { return self.mSymbolTypes_property.propval }
    set { self.mSymbolTypes_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPadProxies
  //····················································································································

  final let mPadProxies_property = StoredArrayOf_PadProxyInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mPadProxies : EBReferenceArray <PadProxyInDevice> {
    get { return self.mPadProxies_property.propval }
    set { self.mPadProxies_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: imageIsValid
  //····················································································································

  final let imageIsValid_property = EBTransientProperty_Bool ()

  //····················································································································

  final var imageIsValid : Bool? {
    switch self.imageIsValid_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  final let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  final var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  final let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var inconsistentPackagePadNameSetsMessage : String? {
    switch self.inconsistentPackagePadNameSetsMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentSymbolNameSetMessage
  //····················································································································

  final let inconsistentSymbolNameSetMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var inconsistentSymbolNameSetMessage : String? {
    switch self.inconsistentSymbolNameSetMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packagePadNameSetsAreConsistent
  //····················································································································

  final let packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  final var packagePadNameSetsAreConsistent : Bool? {
    switch self.packagePadNameSetsAreConsistent_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolNameAreConsistent
  //····················································································································

  final let symbolNameAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  final var symbolNameAreConsistent : Bool? {
    switch self.symbolNameAreConsistent_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeNames
  //····················································································································

  final let symbolTypeNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var symbolTypeNames : StringArray? {
    switch self.symbolTypeNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPads
  //····················································································································

  final let unconnectedPads_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var unconnectedPads : StringArray? {
    switch self.unconnectedPads_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignedPadProxies
  //····················································································································

  final let assignedPadProxies_property = EBTransientProperty_AssignedPadProxiesInDevice ()

  //····················································································································

  final var assignedPadProxies : AssignedPadProxiesInDevice? {
    switch self.assignedPadProxies_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mImageData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: ebUndoManager)
    self.mPrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mComments_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mPackageDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400, undoManager: ebUndoManager)
    self.mPackageDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mPackageDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mShowPackages_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mShowPackagePadNumbers_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mShowPackageFrontPads_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mShowPackageBackPads_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mSymbolDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400, undoManager: ebUndoManager)
    self.mSymbolDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mSymbolDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mDocs (no option)
    self.mDocs_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbolInstances (no option)
    self.mSymbolInstances_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPackages (has opposite relationship)
    self.mPackages_property.ebUndoManager = self.ebUndoManager
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mSymbolTypes (no option)
    self.mSymbolTypes_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPadProxies (no option)
    self.mPadProxies_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: imageIsValid
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mImageData_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_imageIsValid (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.addEBObserver (self.imageIsValid_property)
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mSymbolInstances_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_unconnectedPins (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_unconnectedPins (self.unconnectedPins_property)
  //--- Atomic property: inconsistentPackagePadNameSetsMessage
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPackages_property.selection, unwSelf.mPackages_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_DeviceRoot_inconsistentPackagePadNameSetsMessage (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.mPackages_property.addEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
  //--- Atomic property: inconsistentSymbolNameSetMessage
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mSymbolInstances_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_inconsistentSymbolNameSetMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
  //--- Atomic property: packagePadNameSetsAreConsistent
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPackages_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_packagePadNameSetsAreConsistent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
  //--- Atomic property: symbolNameAreConsistent
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.inconsistentSymbolNameSetMessage_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_symbolNameAreConsistent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.symbolNameAreConsistent_property)
  //--- Atomic property: symbolTypeNames
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mSymbolTypes_property.selection) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_symbolTypeNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.symbolTypeNames_property)
  //--- Atomic property: unconnectedPads
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPadProxies_property.selection, unwSelf.mPadProxies_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_DeviceRoot_unconnectedPads (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.unconnectedPads_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.unconnectedPads_property)
  //--- Atomic property: assignedPadProxies
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPadProxies_property.selection, unwSelf.mPadProxies_property.selection, unwSelf.mPadProxies_property.selection, unwSelf.mPadProxies_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_DeviceRoot_assignedPadProxies (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_symbolName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_mPinInstanceName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.assignedPadProxies_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mTitle_property.selection, unwSelf.mPrefix_property.selection, unwSelf.inconsistentPackagePadNameSetsMessage_property.selection, unwSelf.inconsistentSymbolNameSetMessage_property.selection, unwSelf.unconnectedPins_property.selection, unwSelf.unconnectedPads_property.selection, unwSelf.mPackages_property.selection, unwSelf.mPackages_property.selection, unwSelf.mSymbolTypes_property.selection, unwSelf.mSymbolTypes_property.selection, unwSelf.mSymbolTypes_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
          return .single (transient_DeviceRoot_issues (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTitle_property.addEBObserver (self.issues_property)
    self.mPrefix_property.addEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.issues_property)
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.issues_property)
    self.unconnectedPins_property.addEBObserver (self.issues_property)
    self.unconnectedPads_property.addEBObserver (self.issues_property)
    self.mPackages_property.addEBObserverOf_mVersion (self.issues_property)
    self.mPackages_property.addEBObserverOf_mName (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mVersion (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_instanceCount (self.issues_property)
  //--- Install undoers and opposite setter for relationships
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mComments_property.setSignatureObserver (observer: self)
    self.mDocs_property.setSignatureObserver (observer: self)
    self.mImageData_property.setSignatureObserver (observer: self)
    self.mPackages_property.setSignatureObserver (observer: self)
    self.mPadProxies_property.setSignatureObserver (observer: self)
    self.mPrefix_property.setSignatureObserver (observer: self)
    self.mSymbolInstances_property.setSignatureObserver (observer: self)
    self.mSymbolTypes_property.setSignatureObserver (observer: self)
    self.mTitle_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mImageData_property.removeEBObserver (self.imageIsValid_property)
    // self.mSymbolInstances_property.removeEBObserverOf_unconnectedPins (self.unconnectedPins_property)
    // self.mPackages_property.removeEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    // self.mPackages_property.removeEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
    // self.mSymbolInstances_property.removeEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
    // self.mPackages_property.removeEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
    // self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.symbolNameAreConsistent_property)
    // self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.symbolTypeNames_property)
    // self.mPadProxies_property.removeEBObserverOf_mPadName (self.unconnectedPads_property)
    // self.mPadProxies_property.removeEBObserverOf_isConnected (self.unconnectedPads_property)
    // self.mPadProxies_property.removeEBObserverOf_mPadName (self.assignedPadProxies_property)
    // self.mPadProxies_property.removeEBObserverOf_symbolName (self.assignedPadProxies_property)
    // self.mPadProxies_property.removeEBObserverOf_mPinInstanceName (self.assignedPadProxies_property)
    // self.mPadProxies_property.removeEBObserverOf_isConnected (self.assignedPadProxies_property)
    // self.mTitle_property.removeEBObserver (self.issues_property)
    // self.mPrefix_property.removeEBObserver (self.issues_property)
    // self.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.issues_property)
    // self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.issues_property)
    // self.unconnectedPins_property.removeEBObserver (self.issues_property)
    // self.unconnectedPads_property.removeEBObserver (self.issues_property)
    // self.mPackages_property.removeEBObserverOf_mVersion (self.issues_property)
    // self.mPackages_property.removeEBObserverOf_mName (self.issues_property)
    // self.mSymbolTypes_property.removeEBObserverOf_mVersion (self.issues_property)
    // self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.issues_property)
    // self.mSymbolTypes_property.removeEBObserverOf_instanceCount (self.issues_property)
  //--- Unregister properties for handling signature
    self.mComments_property.setSignatureObserver (observer: nil)
    self.mDocs_property.setSignatureObserver (observer: nil)
    self.mImageData_property.setSignatureObserver (observer: nil)
    self.mPackages_property.setSignatureObserver (observer: nil)
    self.mPadProxies_property.setSignatureObserver (observer: nil)
    self.mPrefix_property.setSignatureObserver (observer: nil)
    self.mSymbolInstances_property.setSignatureObserver (observer: nil)
    self.mSymbolTypes_property.setSignatureObserver (observer: nil)
    self.mTitle_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mSelectedPageIndex",
        object: self.mSelectedPageIndex_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSelectedPageIndex_property.mObserverExplorer,
        valueExplorer: &self.mSelectedPageIndex_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mTitle",
        object: self.mTitle_property,
        y: &y,
        view: view,
        observerExplorer: &self.mTitle_property.mObserverExplorer,
        valueExplorer: &self.mTitle_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mImageData",
        object: self.mImageData_property,
        y: &y,
        view: view,
        observerExplorer: &self.mImageData_property.mObserverExplorer,
        valueExplorer: &self.mImageData_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPrefix",
        object: self.mPrefix_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPrefix_property.mObserverExplorer,
        valueExplorer: &self.mPrefix_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mComments",
        object: self.mComments_property,
        y: &y,
        view: view,
        observerExplorer: &self.mComments_property.mObserverExplorer,
        valueExplorer: &self.mComments_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPackageDisplayZoom",
        object: self.mPackageDisplayZoom_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPackageDisplayZoom_property.mObserverExplorer,
        valueExplorer: &self.mPackageDisplayZoom_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPackageDisplayHorizontalFlip",
        object: self.mPackageDisplayHorizontalFlip_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPackageDisplayHorizontalFlip_property.mObserverExplorer,
        valueExplorer: &self.mPackageDisplayHorizontalFlip_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPackageDisplayVerticalFlip",
        object: self.mPackageDisplayVerticalFlip_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPackageDisplayVerticalFlip_property.mObserverExplorer,
        valueExplorer: &self.mPackageDisplayVerticalFlip_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShowPackages",
        object: self.mShowPackages_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShowPackages_property.mObserverExplorer,
        valueExplorer: &self.mShowPackages_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShowPackagePadNumbers",
        object: self.mShowPackagePadNumbers_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShowPackagePadNumbers_property.mObserverExplorer,
        valueExplorer: &self.mShowPackagePadNumbers_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShowPackageFrontPads",
        object: self.mShowPackageFrontPads_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShowPackageFrontPads_property.mObserverExplorer,
        valueExplorer: &self.mShowPackageFrontPads_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShowPackageBackPads",
        object: self.mShowPackageBackPads_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShowPackageBackPads_property.mObserverExplorer,
        valueExplorer: &self.mShowPackageBackPads_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mSymbolDisplayZoom",
        object: self.mSymbolDisplayZoom_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSymbolDisplayZoom_property.mObserverExplorer,
        valueExplorer: &self.mSymbolDisplayZoom_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mSymbolDisplayHorizontalFlip",
        object: self.mSymbolDisplayHorizontalFlip_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer,
        valueExplorer: &self.mSymbolDisplayHorizontalFlip_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mSymbolDisplayVerticalFlip",
        object: self.mSymbolDisplayVerticalFlip_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSymbolDisplayVerticalFlip_property.mObserverExplorer,
        valueExplorer: &self.mSymbolDisplayVerticalFlip_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "imageIsValid",
        object: self.imageIsValid_property,
        y: &y,
        view: view,
        observerExplorer: &self.imageIsValid_property.mObserverExplorer,
        valueExplorer: &self.imageIsValid_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "unconnectedPins",
        object: self.unconnectedPins_property,
        y: &y,
        view: view,
        observerExplorer: &self.unconnectedPins_property.mObserverExplorer,
        valueExplorer: &self.unconnectedPins_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "inconsistentPackagePadNameSetsMessage",
        object: self.inconsistentPackagePadNameSetsMessage_property,
        y: &y,
        view: view,
        observerExplorer: &self.inconsistentPackagePadNameSetsMessage_property.mObserverExplorer,
        valueExplorer: &self.inconsistentPackagePadNameSetsMessage_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "inconsistentSymbolNameSetMessage",
        object: self.inconsistentSymbolNameSetMessage_property,
        y: &y,
        view: view,
        observerExplorer: &self.inconsistentSymbolNameSetMessage_property.mObserverExplorer,
        valueExplorer: &self.inconsistentSymbolNameSetMessage_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "packagePadNameSetsAreConsistent",
        object: self.packagePadNameSetsAreConsistent_property,
        y: &y,
        view: view,
        observerExplorer: &self.packagePadNameSetsAreConsistent_property.mObserverExplorer,
        valueExplorer: &self.packagePadNameSetsAreConsistent_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "symbolNameAreConsistent",
        object: self.symbolNameAreConsistent_property,
        y: &y,
        view: view,
        observerExplorer: &self.symbolNameAreConsistent_property.mObserverExplorer,
        valueExplorer: &self.symbolNameAreConsistent_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "symbolTypeNames",
        object: self.symbolTypeNames_property,
        y: &y,
        view: view,
        observerExplorer: &self.symbolTypeNames_property.mObserverExplorer,
        valueExplorer: &self.symbolTypeNames_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "unconnectedPads",
        object: self.unconnectedPads_property,
        y: &y,
        view: view,
        observerExplorer: &self.unconnectedPads_property.mObserverExplorer,
        valueExplorer: &self.unconnectedPads_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "assignedPadProxies",
        object: self.assignedPadProxies_property,
        y: &y,
        view: view,
        observerExplorer: &self.assignedPadProxies_property.mObserverExplorer,
        valueExplorer: &self.assignedPadProxies_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        object: self.issues_property,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForToManyRelationshipNamed (
        "mDocs",
        object: mDocs_property,
        y: &y,
        view: view,
        valueExplorer:&mDocs_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mSymbolInstances",
        object: mSymbolInstances_property,
        y: &y,
        view: view,
        valueExplorer:&mSymbolInstances_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mPackages",
        object: mPackages_property,
        y: &y,
        view: view,
        valueExplorer:&mPackages_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mSymbolTypes",
        object: mSymbolTypes_property,
        y: &y,
        view: view,
        valueExplorer:&mSymbolTypes_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mPadProxies",
        object: mPadProxies_property,
        y: &y,
        view: view,
        valueExplorer:&mPadProxies_property.mValueExplorer
      )
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mTitle
    self.mTitle_property.mObserverExplorer = nil
    self.mTitle_property.mValueExplorer = nil
  //--- Atomic property: mImageData
    self.mImageData_property.mObserverExplorer = nil
    self.mImageData_property.mValueExplorer = nil
  //--- Atomic property: mPrefix
    self.mPrefix_property.mObserverExplorer = nil
    self.mPrefix_property.mValueExplorer = nil
  //--- Atomic property: mComments
    self.mComments_property.mObserverExplorer = nil
    self.mComments_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.mObserverExplorer = nil
    self.mPackageDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.mObserverExplorer = nil
    self.mShowPackages_property.mValueExplorer = nil
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.mObserverExplorer = nil
    self.mShowPackagePadNumbers_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.mObserverExplorer = nil
    self.mShowPackageFrontPads_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.mObserverExplorer = nil
    self.mShowPackageBackPads_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.mObserverExplorer = nil
    self.mSymbolDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayVerticalFlip_property.mValueExplorer = nil
    //--- To many property: mDocs
      self.mDocs_property.mValueExplorer = nil
    //--- To many property: mSymbolInstances
      self.mSymbolInstances_property.mValueExplorer = nil
    //--- To many property: mPackages
      self.mPackages_property.mValueExplorer = nil
    //--- To many property: mSymbolTypes
      self.mSymbolTypes_property.mValueExplorer = nil
    //--- To many property: mPadProxies
      self.mPadProxies_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mDocs.removeAll ()
    self.mSymbolInstances.removeAll ()
    self.mPackages.removeAll ()
    self.mSymbolTypes.removeAll ()
    self.mPadProxies.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mSelectedPageIndex
      self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "mSelectedPageIndex")
    //--- Atomic property: mTitle
      self.mTitle_property.storeIn (dictionary: ioDictionary, forKey: "mTitle")
    //--- Atomic property: mImageData
      self.mImageData_property.storeIn (dictionary: ioDictionary, forKey: "mImageData")
    //--- Atomic property: mPrefix
      self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey: "mPrefix")
    //--- Atomic property: mComments
      self.mComments_property.storeIn (dictionary: ioDictionary, forKey: "mComments")
    //--- Atomic property: mPackageDisplayZoom
      self.mPackageDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayZoom")
    //--- Atomic property: mPackageDisplayHorizontalFlip
      self.mPackageDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayHorizontalFlip")
    //--- Atomic property: mPackageDisplayVerticalFlip
      self.mPackageDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayVerticalFlip")
    //--- Atomic property: mShowPackages
      self.mShowPackages_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackages")
    //--- Atomic property: mShowPackagePadNumbers
      self.mShowPackagePadNumbers_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackagePadNumbers")
    //--- Atomic property: mShowPackageFrontPads
      self.mShowPackageFrontPads_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackageFrontPads")
    //--- Atomic property: mShowPackageBackPads
      self.mShowPackageBackPads_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackageBackPads")
    //--- Atomic property: mSymbolDisplayZoom
      self.mSymbolDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolDisplayZoom")
    //--- Atomic property: mSymbolDisplayHorizontalFlip
      self.mSymbolDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolDisplayHorizontalFlip")
    //--- Atomic property: mSymbolDisplayVerticalFlip
      self.mSymbolDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolDisplayVerticalFlip")
  //--- To many property: mDocs
    self.store (
      managedObjectArray: self.mDocs_property.propval.values,
      relationshipName: "mDocs",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolInstances
    self.store (
      managedObjectArray: self.mSymbolInstances_property.propval.values,
      relationshipName: "mSymbolInstances",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval.values,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolTypes
    self.store (
      managedObjectArray: self.mSymbolTypes_property.propval.values,
      relationshipName: "mSymbolTypes",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPadProxies
    self.store (
      managedObjectArray: self.mPadProxies_property.propval.values,
      relationshipName: "mPadProxies",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mDocs
/*    self.mDocs_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDocs",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceDocumentation]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mDocs",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [DeviceDocumentation]
      self.mDocs_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbolInstances
/*    self.mSymbolInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolInstanceInDevice]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbolInstances",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [SymbolInstanceInDevice]
      self.mSymbolInstances_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPackages
/*    self.mPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageInDevice]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPackages",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [PackageInDevice]
      self.mPackages_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbolTypes
/*    self.mSymbolTypes_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolTypes",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolTypeInDevice]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbolTypes",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [SymbolTypeInDevice]
      self.mSymbolTypes_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPadProxies
/*    self.mPadProxies_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPadProxies",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PadProxyInDevice]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPadProxies",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [PadProxyInDevice]
      self.mPadProxies_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey: "mSelectedPageIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.readFrom (dictionary: inDictionary, forKey: "mTitle")
  //--- Atomic property: mImageData
    self.mImageData_property.readFrom (dictionary: inDictionary, forKey: "mImageData")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey: "mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.readFrom (dictionary: inDictionary, forKey: "mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.readFrom (dictionary: inDictionary, forKey: "mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.readFrom (dictionary: inDictionary, forKey: "mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.readFrom (dictionary: inDictionary, forKey: "mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.readFrom (dictionary: inDictionary, forKey: "mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.readFrom (dictionary: inDictionary, forKey: "mSymbolDisplayZoom")
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "mSymbolDisplayHorizontalFlip")
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey: "mSymbolDisplayVerticalFlip")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSelectedPageIndex\n"
    ioString += "mTitle\n"
    ioString += "mImageData\n"
    ioString += "mPrefix\n"
    ioString += "mComments\n"
    ioString += "mPackageDisplayZoom\n"
    ioString += "mPackageDisplayHorizontalFlip\n"
    ioString += "mPackageDisplayVerticalFlip\n"
    ioString += "mShowPackages\n"
    ioString += "mShowPackagePadNumbers\n"
    ioString += "mShowPackageFrontPads\n"
    ioString += "mShowPackageBackPads\n"
    ioString += "mSymbolDisplayZoom\n"
    ioString += "mSymbolDisplayHorizontalFlip\n"
    ioString += "mSymbolDisplayVerticalFlip\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mDocs\n"
    ioString += "mSymbolInstances\n"
    ioString += "mPackages\n"
    ioString += "mSymbolTypes\n"
    ioString += "mPadProxies\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSelectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTitle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mImageData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mComments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackages.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackagePadNumbers.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackageFrontPads.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackageBackPads.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolDisplayZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolDisplayHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolDisplayVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mDocs.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSymbolInstances.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPackages.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSymbolTypes.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPadProxies.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mSelectedPageIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mSelectedPageIndex = value
      }
      if let range = inDictionary ["mTitle"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mTitle = value
      }
      if let range = inDictionary ["mImageData"], let value = Data.unarchiveFromDataRange (inData, range) {
        self.mImageData = value
      }
      if let range = inDictionary ["mPrefix"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mPrefix = value
      }
      if let range = inDictionary ["mComments"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mComments = value
      }
      if let range = inDictionary ["mPackageDisplayZoom"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mPackageDisplayZoom = value
      }
      if let range = inDictionary ["mPackageDisplayHorizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mPackageDisplayHorizontalFlip = value
      }
      if let range = inDictionary ["mPackageDisplayVerticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mPackageDisplayVerticalFlip = value
      }
      if let range = inDictionary ["mShowPackages"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mShowPackages = value
      }
      if let range = inDictionary ["mShowPackagePadNumbers"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mShowPackagePadNumbers = value
      }
      if let range = inDictionary ["mShowPackageFrontPads"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mShowPackageFrontPads = value
      }
      if let range = inDictionary ["mShowPackageBackPads"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mShowPackageBackPads = value
      }
      if let range = inDictionary ["mSymbolDisplayZoom"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mSymbolDisplayZoom = value
      }
      if let range = inDictionary ["mSymbolDisplayHorizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mSymbolDisplayHorizontalFlip = value
      }
      if let range = inDictionary ["mSymbolDisplayVerticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mSymbolDisplayVerticalFlip = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mDocs"], range.length > 0 {
        var relationshipArray = EBReferenceArray <DeviceDocumentation> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! DeviceDocumentation)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mDocs = relationshipArray }
      }
      if let range = inDictionary ["mSymbolInstances"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SymbolInstanceInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SymbolInstanceInDevice)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mSymbolInstances = relationshipArray }
      }
      if let range = inDictionary ["mPackages"], range.length > 0 {
        var relationshipArray = EBReferenceArray <PackageInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! PackageInDevice)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mPackages = relationshipArray }
      }
      if let range = inDictionary ["mSymbolTypes"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SymbolTypeInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SymbolTypeInDevice)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mSymbolTypes = relationshipArray }
      }
      if let range = inDictionary ["mPadProxies"], range.length > 0 {
        var relationshipArray = EBReferenceArray <PadProxyInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! PadProxyInDevice)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mPadProxies = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs.values {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances.values {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages.values {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes.values {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs.values {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances.values {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages.values {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes.values {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mComments_property.signature ())
    crc.accumulateUInt32 (self.mDocs_property.signature ())
    crc.accumulateUInt32 (self.mImageData_property.signature ())
    crc.accumulateUInt32 (self.mPackages_property.signature ())
    crc.accumulateUInt32 (self.mPadProxies_property.signature ())
    crc.accumulateUInt32 (self.mPrefix_property.signature ())
    crc.accumulateUInt32 (self.mSymbolInstances_property.signature ())
    crc.accumulateUInt32 (self.mSymbolTypes_property.signature ())
    crc.accumulateUInt32 (self.mTitle_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

