//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mSelectedPageIndex : AnyObject {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mSelectedSymbolInspectorIndex : AnyObject {
  var mSelectedSymbolInspectorIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mSelectedPackageInspectorIndex : AnyObject {
  var mSelectedPackageInspectorIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mTitle : AnyObject {
  var mTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mImageData : AnyObject {
  var mImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mPrefix : AnyObject {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mComments : AnyObject {
  var mComments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mPackageDisplayZoom : AnyObject {
  var mPackageDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mPackageDisplayHorizontalFlip : AnyObject {
  var mPackageDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mPackageDisplayVerticalFlip : AnyObject {
  var mPackageDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mShowPackages : AnyObject {
  var mShowPackages : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mShowPackagePadNumbers : AnyObject {
  var mShowPackagePadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mShowPackageFrontPads : AnyObject {
  var mShowPackageFrontPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mShowPackageBackPads : AnyObject {
  var mShowPackageBackPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_mSymbolDisplayZoom : AnyObject {
  var mSymbolDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_imageIsValid : AnyObject {
  var imageIsValid : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_unconnectedPins : AnyObject {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_inconsistentPackagePadNameSetsMessage : AnyObject {
  var inconsistentPackagePadNameSetsMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_inconsistentSymbolNameSetMessage : AnyObject {
  var inconsistentSymbolNameSetMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_packagePadNameSetsAreConsistent : AnyObject {
  var packagePadNameSetsAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_symbolNameAreConsistent : AnyObject {
  var symbolNameAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_symbolTypeNames : AnyObject {
  var symbolTypeNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_unconnectedPads : AnyObject {
  var unconnectedPads : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_assignedPadProxies : AnyObject {
  var assignedPadProxies : AssignedPadProxiesInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceRoot : EBManagedObject,
         DeviceRoot_mSelectedPageIndex,
         DeviceRoot_mSelectedSymbolInspectorIndex,
         DeviceRoot_mSelectedPackageInspectorIndex,
         DeviceRoot_mTitle,
         DeviceRoot_mImageData,
         DeviceRoot_mPrefix,
         DeviceRoot_mComments,
         DeviceRoot_mPackageDisplayZoom,
         DeviceRoot_mPackageDisplayHorizontalFlip,
         DeviceRoot_mPackageDisplayVerticalFlip,
         DeviceRoot_mShowPackages,
         DeviceRoot_mShowPackagePadNumbers,
         DeviceRoot_mShowPackageFrontPads,
         DeviceRoot_mShowPackageBackPads,
         DeviceRoot_mSymbolDisplayZoom,
         DeviceRoot_imageIsValid,
         DeviceRoot_unconnectedPins,
         DeviceRoot_inconsistentPackagePadNameSetsMessage,
         DeviceRoot_inconsistentSymbolNameSetMessage,
         DeviceRoot_packagePadNameSetsAreConsistent,
         DeviceRoot_symbolNameAreConsistent,
         DeviceRoot_symbolTypeNames,
         DeviceRoot_unconnectedPads,
         DeviceRoot_assignedPadProxies,
         DeviceRoot_issues {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  final let mSelectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedPageIndex_toDefaultValue () {
    self.mSelectedPageIndex = 0
  }

  //····················································································································

  final var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSelectedSymbolInspectorIndex
  //····················································································································

  final let mSelectedSymbolInspectorIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedSymbolInspectorIndex_toDefaultValue () {
    self.mSelectedSymbolInspectorIndex = 0
  }

  //····················································································································

  final var mSelectedSymbolInspectorIndex : Int {
    get { return self.mSelectedSymbolInspectorIndex_property.propval }
    set { self.mSelectedSymbolInspectorIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSelectedPackageInspectorIndex
  //····················································································································

  final let mSelectedPackageInspectorIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedPackageInspectorIndex_toDefaultValue () {
    self.mSelectedPackageInspectorIndex = 0
  }

  //····················································································································

  final var mSelectedPackageInspectorIndex : Int {
    get { return self.mSelectedPackageInspectorIndex_property.propval }
    set { self.mSelectedPackageInspectorIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTitle
  //····················································································································

  final let mTitle_property : EBStoredProperty_String

  //····················································································································

  final func reset_mTitle_toDefaultValue () {
    self.mTitle = ""
  }

  //····················································································································

  final var mTitle : String {
    get { return self.mTitle_property.propval }
    set { self.mTitle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mImageData
  //····················································································································

  final let mImageData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mImageData_toDefaultValue () {
    self.mImageData = Data ()
  }

  //····················································································································

  final var mImageData : Data {
    get { return self.mImageData_property.propval }
    set { self.mImageData_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  final let mPrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPrefix_toDefaultValue () {
    self.mPrefix = ""
  }

  //····················································································································

  final var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mComments
  //····················································································································

  final let mComments_property : EBStoredProperty_String

  //····················································································································

  final func reset_mComments_toDefaultValue () {
    self.mComments = ""
  }

  //····················································································································

  final var mComments : String {
    get { return self.mComments_property.propval }
    set { self.mComments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayZoom
  //····················································································································

  final let mPackageDisplayZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPackageDisplayZoom_toDefaultValue () {
    self.mPackageDisplayZoom = 400
  }

  //····················································································································

  final var mPackageDisplayZoom : Int {
    get { return self.mPackageDisplayZoom_property.propval }
    set { self.mPackageDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  final let mPackageDisplayHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPackageDisplayHorizontalFlip_toDefaultValue () {
    self.mPackageDisplayHorizontalFlip = false
  }

  //····················································································································

  final var mPackageDisplayHorizontalFlip : Bool {
    get { return self.mPackageDisplayHorizontalFlip_property.propval }
    set { self.mPackageDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  final let mPackageDisplayVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPackageDisplayVerticalFlip_toDefaultValue () {
    self.mPackageDisplayVerticalFlip = false
  }

  //····················································································································

  final var mPackageDisplayVerticalFlip : Bool {
    get { return self.mPackageDisplayVerticalFlip_property.propval }
    set { self.mPackageDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackages
  //····················································································································

  final let mShowPackages_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackages_toDefaultValue () {
    self.mShowPackages = true
  }

  //····················································································································

  final var mShowPackages : Bool {
    get { return self.mShowPackages_property.propval }
    set { self.mShowPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackagePadNumbers
  //····················································································································

  final let mShowPackagePadNumbers_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackagePadNumbers_toDefaultValue () {
    self.mShowPackagePadNumbers = true
  }

  //····················································································································

  final var mShowPackagePadNumbers : Bool {
    get { return self.mShowPackagePadNumbers_property.propval }
    set { self.mShowPackagePadNumbers_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackageFrontPads
  //····················································································································

  final let mShowPackageFrontPads_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackageFrontPads_toDefaultValue () {
    self.mShowPackageFrontPads = true
  }

  //····················································································································

  final var mShowPackageFrontPads : Bool {
    get { return self.mShowPackageFrontPads_property.propval }
    set { self.mShowPackageFrontPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShowPackageBackPads
  //····················································································································

  final let mShowPackageBackPads_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mShowPackageBackPads_toDefaultValue () {
    self.mShowPackageBackPads = true
  }

  //····················································································································

  final var mShowPackageBackPads : Bool {
    get { return self.mShowPackageBackPads_property.propval }
    set { self.mShowPackageBackPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolDisplayZoom
  //····················································································································

  final let mSymbolDisplayZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSymbolDisplayZoom_toDefaultValue () {
    self.mSymbolDisplayZoom = 400
  }

  //····················································································································

  final var mSymbolDisplayZoom : Int {
    get { return self.mSymbolDisplayZoom_property.propval }
    set { self.mSymbolDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDocs
  //····················································································································

  final let mDocs_property = StoredArrayOf_DeviceDocumentation (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mDocs : EBReferenceArray <DeviceDocumentation> {
    get { return self.mDocs_property.propval }
    set { self.mDocs_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolInstances
  //····················································································································

  final let mSymbolInstances_property = StoredArrayOf_SymbolInstanceInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mSymbolInstances : EBReferenceArray <SymbolInstanceInDevice> {
    get { return self.mSymbolInstances_property.propval }
    set { self.mSymbolInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  final let mPackages_property = StoredArrayOf_PackageInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mPackages : EBReferenceArray <PackageInDevice> {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolTypes
  //····················································································································

  final let mSymbolTypes_property = StoredArrayOf_SymbolTypeInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mSymbolTypes : EBReferenceArray <SymbolTypeInDevice> {
    get { return self.mSymbolTypes_property.propval }
    set { self.mSymbolTypes_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPadProxies
  //····················································································································

  final let mPadProxies_property = StoredArrayOf_PadProxyInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mPadProxies : EBReferenceArray <PadProxyInDevice> {
    get { return self.mPadProxies_property.propval }
    set { self.mPadProxies_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: imageIsValid
  //····················································································································

  final let imageIsValid_property = EBTransientProperty_Bool ()

  //····················································································································

  final var imageIsValid : Bool? {
    switch self.imageIsValid_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  final let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  final var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  final let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var inconsistentPackagePadNameSetsMessage : String? {
    switch self.inconsistentPackagePadNameSetsMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentSymbolNameSetMessage
  //····················································································································

  final let inconsistentSymbolNameSetMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var inconsistentSymbolNameSetMessage : String? {
    switch self.inconsistentSymbolNameSetMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packagePadNameSetsAreConsistent
  //····················································································································

  final let packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  final var packagePadNameSetsAreConsistent : Bool? {
    switch self.packagePadNameSetsAreConsistent_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolNameAreConsistent
  //····················································································································

  final let symbolNameAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  final var symbolNameAreConsistent : Bool? {
    switch self.symbolNameAreConsistent_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeNames
  //····················································································································

  final let symbolTypeNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var symbolTypeNames : StringArray? {
    switch self.symbolTypeNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPads
  //····················································································································

  final let unconnectedPads_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var unconnectedPads : StringArray? {
    switch self.unconnectedPads_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignedPadProxies
  //····················································································································

  final let assignedPadProxies_property = EBTransientProperty_AssignedPadProxiesInDevice ()

  //····················································································································

  final var assignedPadProxies : AssignedPadProxiesInDevice? {
    switch self.assignedPadProxies_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mSelectedSymbolInspectorIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mSelectedPackageInspectorIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mImageData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: inUndoManager)
    self.mPrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mComments_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mPackageDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400, undoManager: inUndoManager)
    self.mPackageDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager)
    self.mPackageDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager)
    self.mShowPackages_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mShowPackagePadNumbers_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mShowPackageFrontPads_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mShowPackageBackPads_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mSymbolDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400, undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: mDocs (no option)
    self.mDocs_property.undoManager = inUndoManager
  //--- To many property: mSymbolInstances (has opposite relationship)
    self.mSymbolInstances_property.undoManager = inUndoManager
    self.mSymbolInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDeviceRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mDeviceRoot_property.setProp (nil) }
    )
  //--- To many property: mPackages (has opposite relationship)
    self.mPackages_property.undoManager = inUndoManager
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mSymbolTypes (no option)
    self.mSymbolTypes_property.undoManager = inUndoManager
  //--- To many property: mPadProxies (no option)
    self.mPadProxies_property.undoManager = inUndoManager
  //--- Atomic property: imageIsValid
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mImageData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_imageIsValid (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.addEBObserver (self.imageIsValid_property)
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstances_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_unconnectedPins (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_unconnectedPins (self.unconnectedPins_property)
  //--- Atomic property: inconsistentPackagePadNameSetsMessage
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPackages_property.selection
        let s1 = unwSelf.mPackages_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DeviceRoot_inconsistentPackagePadNameSetsMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.mPackages_property.addEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
  //--- Atomic property: inconsistentSymbolNameSetMessage
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstances_property.selection
        let s1 = unwSelf.mSymbolInstances_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DeviceRoot_inconsistentSymbolNameSetMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
    self.mSymbolInstances_property.addEBObserverOf_pinSymbolQualifiedNames (self.inconsistentSymbolNameSetMessage_property)
  //--- Atomic property: packagePadNameSetsAreConsistent
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPackages_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_packagePadNameSetsAreConsistent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
  //--- Atomic property: symbolNameAreConsistent
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inconsistentSymbolNameSetMessage_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_symbolNameAreConsistent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.symbolNameAreConsistent_property)
  //--- Atomic property: symbolTypeNames
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolTypes_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceRoot_symbolTypeNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.symbolTypeNames_property)
  //--- Atomic property: unconnectedPads
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadProxies_property.selection
        let s1 = unwSelf.mPadProxies_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DeviceRoot_unconnectedPads (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.unconnectedPads_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.unconnectedPads_property)
  //--- Atomic property: assignedPadProxies
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadProxies_property.selection
        let s1 = unwSelf.mPadProxies_property.selection
        let s2 = unwSelf.mPadProxies_property.selection
        let s3 = unwSelf.mPadProxies_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_DeviceRoot_assignedPadProxies (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_symbolName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_mPinInstanceName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.assignedPadProxies_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTitle_property.selection
        let s1 = unwSelf.mPrefix_property.selection
        let s2 = unwSelf.inconsistentPackagePadNameSetsMessage_property.selection
        let s3 = unwSelf.inconsistentSymbolNameSetMessage_property.selection
        let s4 = unwSelf.unconnectedPins_property.selection
        let s5 = unwSelf.unconnectedPads_property.selection
        let s6 = unwSelf.mPackages_property.selection
        let s7 = unwSelf.mPackages_property.selection
        let s8 = unwSelf.mSymbolTypes_property.selection
        let s9 = unwSelf.mSymbolTypes_property.selection
        let s10 = unwSelf.mSymbolTypes_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10)) :
          return .single (transient_DeviceRoot_issues (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTitle_property.addEBObserver (self.issues_property)
    self.mPrefix_property.addEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.issues_property)
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.issues_property)
    self.unconnectedPins_property.addEBObserver (self.issues_property)
    self.unconnectedPads_property.addEBObserver (self.issues_property)
    self.mPackages_property.addEBObserverOf_mVersion (self.issues_property)
    self.mPackages_property.addEBObserverOf_mName (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mVersion (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_instanceCount (self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mSymbolInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDeviceRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mDeviceRoot_property.setProp (nil) }
    )
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mComments_property.setSignatureObserver (observer: self)
    self.mDocs_property.setSignatureObserver (observer: self)
    self.mImageData_property.setSignatureObserver (observer: self)
    self.mPackages_property.setSignatureObserver (observer: self)
    self.mPadProxies_property.setSignatureObserver (observer: self)
    self.mPrefix_property.setSignatureObserver (observer: self)
    self.mSymbolInstances_property.setSignatureObserver (observer: self)
    self.mSymbolTypes_property.setSignatureObserver (observer: self)
    self.mTitle_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mSelectedPageIndex
      self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "mSelectedPageIndex")
    //--- Atomic property: mSelectedSymbolInspectorIndex
      self.mSelectedSymbolInspectorIndex_property.storeIn (dictionary: ioDictionary, forKey: "mSelectedSymbolInspectorIndex")
    //--- Atomic property: mSelectedPackageInspectorIndex
      self.mSelectedPackageInspectorIndex_property.storeIn (dictionary: ioDictionary, forKey: "mSelectedPackageInspectorIndex")
    //--- Atomic property: mTitle
      self.mTitle_property.storeIn (dictionary: ioDictionary, forKey: "mTitle")
    //--- Atomic property: mImageData
      self.mImageData_property.storeIn (dictionary: ioDictionary, forKey: "mImageData")
    //--- Atomic property: mPrefix
      self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey: "mPrefix")
    //--- Atomic property: mComments
      self.mComments_property.storeIn (dictionary: ioDictionary, forKey: "mComments")
    //--- Atomic property: mPackageDisplayZoom
      self.mPackageDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayZoom")
    //--- Atomic property: mPackageDisplayHorizontalFlip
      self.mPackageDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayHorizontalFlip")
    //--- Atomic property: mPackageDisplayVerticalFlip
      self.mPackageDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mPackageDisplayVerticalFlip")
    //--- Atomic property: mShowPackages
      self.mShowPackages_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackages")
    //--- Atomic property: mShowPackagePadNumbers
      self.mShowPackagePadNumbers_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackagePadNumbers")
    //--- Atomic property: mShowPackageFrontPads
      self.mShowPackageFrontPads_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackageFrontPads")
    //--- Atomic property: mShowPackageBackPads
      self.mShowPackageBackPads_property.storeIn (dictionary: ioDictionary, forKey: "mShowPackageBackPads")
    //--- Atomic property: mSymbolDisplayZoom
      self.mSymbolDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolDisplayZoom")
  //--- To many property: mDocs
    self.store (
      managedObjectArray: self.mDocs_property.propval.values,
      relationshipName: "mDocs",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolInstances
    self.store (
      managedObjectArray: self.mSymbolInstances_property.propval.values,
      relationshipName: "mSymbolInstances",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval.values,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolTypes
    self.store (
      managedObjectArray: self.mSymbolTypes_property.propval.values,
      relationshipName: "mSymbolTypes",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPadProxies
    self.store (
      managedObjectArray: self.mPadProxies_property.propval.values,
      relationshipName: "mPadProxies",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mDocs
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mDocs",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [DeviceDocumentation]
      self.mDocs_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbolInstances
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbolInstances",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SymbolInstanceInDevice]
      self.mSymbolInstances_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPackages
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPackages",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [PackageInDevice]
      self.mPackages_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbolTypes
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbolTypes",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SymbolTypeInDevice]
      self.mSymbolTypes_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPadProxies
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPadProxies",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [PadProxyInDevice]
      self.mPadProxies_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey: "mSelectedPageIndex")
  //--- Atomic property: mSelectedSymbolInspectorIndex
    self.mSelectedSymbolInspectorIndex_property.readFrom (dictionary: inDictionary, forKey: "mSelectedSymbolInspectorIndex")
  //--- Atomic property: mSelectedPackageInspectorIndex
    self.mSelectedPackageInspectorIndex_property.readFrom (dictionary: inDictionary, forKey: "mSelectedPackageInspectorIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.readFrom (dictionary: inDictionary, forKey: "mTitle")
  //--- Atomic property: mImageData
    self.mImageData_property.readFrom (dictionary: inDictionary, forKey: "mImageData")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey: "mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.readFrom (dictionary: inDictionary, forKey: "mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey: "mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.readFrom (dictionary: inDictionary, forKey: "mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.readFrom (dictionary: inDictionary, forKey: "mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.readFrom (dictionary: inDictionary, forKey: "mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.readFrom (dictionary: inDictionary, forKey: "mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.readFrom (dictionary: inDictionary, forKey: "mSymbolDisplayZoom")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSelectedPageIndex\n"
    ioString += "mSelectedSymbolInspectorIndex\n"
    ioString += "mSelectedPackageInspectorIndex\n"
    ioString += "mTitle\n"
    ioString += "mImageData\n"
    ioString += "mPrefix\n"
    ioString += "mComments\n"
    ioString += "mPackageDisplayZoom\n"
    ioString += "mPackageDisplayHorizontalFlip\n"
    ioString += "mPackageDisplayVerticalFlip\n"
    ioString += "mShowPackages\n"
    ioString += "mShowPackagePadNumbers\n"
    ioString += "mShowPackageFrontPads\n"
    ioString += "mShowPackageBackPads\n"
    ioString += "mSymbolDisplayZoom\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mDocs\n"
    ioString += "mSymbolInstances\n"
    ioString += "mPackages\n"
    ioString += "mSymbolTypes\n"
    ioString += "mPadProxies\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSelectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSelectedSymbolInspectorIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSelectedPackageInspectorIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTitle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mImageData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mComments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPackageDisplayVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackages.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackagePadNumbers.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackageFrontPads.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShowPackageBackPads.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolDisplayZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mDocs.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mSymbolInstances.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mPackages.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mSymbolTypes.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mPadProxies.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mSelectedPageIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSelectedPageIndex = value
    }
    if let range = inDictionary ["mSelectedSymbolInspectorIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSelectedSymbolInspectorIndex = value
    }
    if let range = inDictionary ["mSelectedPackageInspectorIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSelectedPackageInspectorIndex = value
    }
    if let range = inDictionary ["mTitle"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mTitle = value
    }
    if let range = inDictionary ["mImageData"], let value = Data.unarchiveFromDataRange (inData, range) {
      self.mImageData = value
    }
    if let range = inDictionary ["mPrefix"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mPrefix = value
    }
    if let range = inDictionary ["mComments"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mComments = value
    }
    if let range = inDictionary ["mPackageDisplayZoom"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mPackageDisplayZoom = value
    }
    if let range = inDictionary ["mPackageDisplayHorizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mPackageDisplayHorizontalFlip = value
    }
    if let range = inDictionary ["mPackageDisplayVerticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mPackageDisplayVerticalFlip = value
    }
    if let range = inDictionary ["mShowPackages"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mShowPackages = value
    }
    if let range = inDictionary ["mShowPackagePadNumbers"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mShowPackagePadNumbers = value
    }
    if let range = inDictionary ["mShowPackageFrontPads"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mShowPackageFrontPads = value
    }
    if let range = inDictionary ["mShowPackageBackPads"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mShowPackageBackPads = value
    }
    if let range = inDictionary ["mSymbolDisplayZoom"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSymbolDisplayZoom = value
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many mDocs
    if let range = inDictionary ["mDocs"], range.length > 0 {
      var relationshipArray = EBReferenceArray <DeviceDocumentation> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! DeviceDocumentation)
      }
      self.mDocs = relationshipArray
    }
  //--- To many mSymbolInstances
    if let range = inDictionary ["mSymbolInstances"], range.length > 0 {
      var relationshipArray = EBReferenceArray <SymbolInstanceInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! SymbolInstanceInDevice)
      }
      self.mSymbolInstances = relationshipArray
    }
  //--- To many mPackages
    if let range = inDictionary ["mPackages"], range.length > 0 {
      var relationshipArray = EBReferenceArray <PackageInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! PackageInDevice)
      }
      self.mPackages = relationshipArray
    }
  //--- To many mSymbolTypes
    if let range = inDictionary ["mSymbolTypes"], range.length > 0 {
      var relationshipArray = EBReferenceArray <SymbolTypeInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! SymbolTypeInDevice)
      }
      self.mSymbolTypes = relationshipArray
    }
  //--- To many mPadProxies
    if let range = inDictionary ["mPadProxies"], range.length > 0 {
      var relationshipArray = EBReferenceArray <PadProxyInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! PadProxyInDevice)
      }
      self.mPadProxies = relationshipArray
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mDocs
    for managedObject in self.mDocs.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies.values {
      ioObjectArray.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mComments_property.signature ())
    crc.accumulate (u32: self.mDocs_property.signature ())
    crc.accumulate (u32: self.mImageData_property.signature ())
    crc.accumulate (u32: self.mPackages_property.signature ())
    crc.accumulate (u32: self.mPadProxies_property.signature ())
    crc.accumulate (u32: self.mPrefix_property.signature ())
    crc.accumulate (u32: self.mSymbolInstances_property.signature ())
    crc.accumulate (u32: self.mSymbolTypes_property.signature ())
    crc.accumulate (u32: self.mTitle_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

