//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mShape : AnyObject {
  var mShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mStyle : AnyObject {
  var mStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_mName : AnyObject {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_frontSideFilledBezierPathArray : AnyObject {
  var frontSideFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MasterPadInDevice_backSideFilledBezierPathArray : AnyObject {
  var backSideFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class MasterPadInDevice : EBManagedObject,
         MasterPadInDevice_mCenterX,
         MasterPadInDevice_mCenterY,
         MasterPadInDevice_mWidth,
         MasterPadInDevice_mHeight,
         MasterPadInDevice_mHoleWidth,
         MasterPadInDevice_mHoleHeight,
         MasterPadInDevice_mShape,
         MasterPadInDevice_mStyle,
         MasterPadInDevice_mName,
         MasterPadInDevice_padNumberDisplay,
         MasterPadInDevice_frontSideFilledBezierPathArray,
         MasterPadInDevice_backSideFilledBezierPathArray {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 114300
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHeight
  //····················································································································

  final let mHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHeight_toDefaultValue () {
    self.mHeight = 228600
  }

  //····················································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleWidth
  //····················································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleWidth_toDefaultValue () {
    self.mHoleWidth = 57150
  }

  //····················································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleHeight
  //····················································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleHeight_toDefaultValue () {
    self.mHoleHeight = 57150
  }

  //····················································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = PadShape.octo
  }

  //····················································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStyle
  //····················································································································

  final let mStyle_property : EBStoredProperty_PadStyle

  //····················································································································

  final func reset_mStyle_toDefaultValue () {
    self.mStyle = PadStyle.traversing
  }

  //····················································································································

  final var mStyle : PadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  final let mName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mName_toDefaultValue () {
    self.mName = ""
  }

  //····················································································································

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSlavePads
  //····················································································································

  final let mSlavePads_property = StoredArrayOf_SlavePadInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mSlavePads : EBReferenceArray <SlavePadInDevice> {
    get { return self.mSlavePads_property.propval }
    set { self.mSlavePads_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontSideFilledBezierPathArray
  //····················································································································

  final let frontSideFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontSideFilledBezierPathArray : BezierPathArray? {
    switch self.frontSideFilledBezierPathArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSideFilledBezierPathArray
  //····················································································································

  final let backSideFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backSideFilledBezierPathArray : BezierPathArray? {
    switch self.backSideFilledBezierPathArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: ebUndoManager)
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: ebUndoManager)
    self.mStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing, undoManager: ebUndoManager)
    self.mName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    super.init (ebUndoManager)
    // gInitSemaphore.wait ()
  //--- To many property: mSlavePads (has opposite relationship)
    self.mSlavePads_property.ebUndoManager = self.ebUndoManager
    self.mSlavePads_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mMasterPad_property.setProp (me) } },
      resetter: { inObject in inObject.mMasterPad_property.setProp (nil) }
    )
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = preferences_padNumberColor_property.selection
        let s3 = unwSelf.mName_property.selection
        let s4 = preferences_padNumberFont_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_MasterPadInDevice_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.padNumberDisplay_property)
    self.mCenterY_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.mName_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
  //--- Atomic property: frontSideFilledBezierPathArray
    self.frontSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        let s8 = unwSelf.mSlavePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_MasterPadInDevice_frontSideFilledBezierPathArray (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mCenterY_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mWidth_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mHeight_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mHoleWidth_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mHoleHeight_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mShape_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mStyle_property.addEBObserver (self.frontSideFilledBezierPathArray_property)
    self.mSlavePads_property.addEBObserverOf_frontSideFilledBezierPath (self.frontSideFilledBezierPathArray_property)
  //--- Atomic property: backSideFilledBezierPathArray
    self.backSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        let s8 = unwSelf.mSlavePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_MasterPadInDevice_backSideFilledBezierPathArray (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mCenterY_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mWidth_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mHeight_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mHoleWidth_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mHoleHeight_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mShape_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mStyle_property.addEBObserver (self.backSideFilledBezierPathArray_property)
    self.mSlavePads_property.addEBObserverOf_backSideFilledBezierPath (self.backSideFilledBezierPathArray_property)
    // gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mSlavePads_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mMasterPad_property.setProp (me) } },
      resetter: { inObject in inObject.mMasterPad_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mCenterX_property.setSignatureObserver (observer: self)
    self.mCenterY_property.setSignatureObserver (observer: self)
    self.mHeight_property.setSignatureObserver (observer: self)
    self.mHoleHeight_property.setSignatureObserver (observer: self)
    self.mHoleWidth_property.setSignatureObserver (observer: self)
    self.mName_property.setSignatureObserver (observer: self)
    self.mShape_property.setSignatureObserver (observer: self)
    self.mSlavePads_property.setSignatureObserver (observer: self)
    self.mStyle_property.setSignatureObserver (observer: self)
    self.mWidth_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

/*  override func cleanUpToManyRelationships () {
    self.mSlavePads.removeAll ()
    super.cleanUpToManyRelationships ()
  } */

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mCenterX
      self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey: "mCenterX")
    //--- Atomic property: mCenterY
      self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey: "mCenterY")
    //--- Atomic property: mWidth
      self.mWidth_property.storeIn (dictionary: ioDictionary, forKey: "mWidth")
    //--- Atomic property: mHeight
      self.mHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHeight")
    //--- Atomic property: mHoleWidth
      self.mHoleWidth_property.storeIn (dictionary: ioDictionary, forKey: "mHoleWidth")
    //--- Atomic property: mHoleHeight
      self.mHoleHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHoleHeight")
    //--- Atomic property: mShape
      self.mShape_property.storeIn (dictionary: ioDictionary, forKey: "mShape")
    //--- Atomic property: mStyle
      self.mStyle_property.storeIn (dictionary: ioDictionary, forKey: "mStyle")
    //--- Atomic property: mName
      self.mName_property.storeIn (dictionary: ioDictionary, forKey: "mName")
  //--- To many property: mSlavePads
    self.store (
      managedObjectArray: self.mSlavePads_property.propval.values,
      relationshipName: "mSlavePads",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mSlavePads
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSlavePads",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [SlavePadInDevice]
      self.mSlavePads_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey: "mCenterY")
  //--- Atomic property: mWidth
    self.mWidth_property.readFrom (dictionary: inDictionary, forKey: "mWidth")
  //--- Atomic property: mHeight
    self.mHeight_property.readFrom (dictionary: inDictionary, forKey: "mHeight")
  //--- Atomic property: mHoleWidth
    self.mHoleWidth_property.readFrom (dictionary: inDictionary, forKey: "mHoleWidth")
  //--- Atomic property: mHoleHeight
    self.mHoleHeight_property.readFrom (dictionary: inDictionary, forKey: "mHoleHeight")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey: "mShape")
  //--- Atomic property: mStyle
    self.mStyle_property.readFrom (dictionary: inDictionary, forKey: "mStyle")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey: "mName")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mCenterX\n"
    ioString += "mCenterY\n"
    ioString += "mWidth\n"
    ioString += "mHeight\n"
    ioString += "mHoleWidth\n"
    ioString += "mHoleHeight\n"
    ioString += "mShape\n"
    ioString += "mStyle\n"
    ioString += "mName\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mSlavePads\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mCenterX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCenterY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSlavePads.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mCenterX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterX = value
      }
      if let range = inDictionary ["mCenterY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterY = value
      }
      if let range = inDictionary ["mWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidth = value
      }
      if let range = inDictionary ["mHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHeight = value
      }
      if let range = inDictionary ["mHoleWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleWidth = value
      }
      if let range = inDictionary ["mHoleHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleHeight = value
      }
      if let range = inDictionary ["mShape"], let value = PadShape.unarchiveFromDataRange (inData, range) {
        self.mShape = value
      }
      if let range = inDictionary ["mStyle"], let value = PadStyle.unarchiveFromDataRange (inData, range) {
        self.mStyle = value
      }
      if let range = inDictionary ["mName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mName = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["mSlavePads"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SlavePadInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! SlavePadInDevice)
        }
        self.mSlavePads = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

/*  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSlavePads
    for managedObject in self.mSlavePads.values {
      objects.append (managedObject)
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSlavePads
    for managedObject in self.mSlavePads.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mCenterX_property.signature ())
    crc.accumulateUInt32 (self.mCenterY_property.signature ())
    crc.accumulateUInt32 (self.mHeight_property.signature ())
    crc.accumulateUInt32 (self.mHoleHeight_property.signature ())
    crc.accumulateUInt32 (self.mHoleWidth_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mShape_property.signature ())
    crc.accumulateUInt32 (self.mSlavePads_property.signature ())
    crc.accumulateUInt32 (self.mStyle_property.signature ())
    crc.accumulateUInt32 (self.mWidth_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

