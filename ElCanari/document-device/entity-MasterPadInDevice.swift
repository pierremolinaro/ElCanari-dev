//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mWidth : AnyObject {
  var mWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mHeight : AnyObject {
  var mHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mShape : AnyObject {
  var mShape : PadShape { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mStyle : AnyObject {
  var mStyle : PadStyle { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_mName : AnyObject {
  var mName : String { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_frontSideFilledBezierPathArray : AnyObject {
  var frontSideFilledBezierPathArray : BezierPathArray? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol MasterPadInDevice_backSideFilledBezierPathArray : AnyObject {
  var backSideFilledBezierPathArray : BezierPathArray? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: MasterPadInDevice
//--------------------------------------------------------------------------------------------------

final class MasterPadInDevice : EBManagedObject,
         MasterPadInDevice_mCenterX,
         MasterPadInDevice_mCenterY,
         MasterPadInDevice_mWidth,
         MasterPadInDevice_mHeight,
         MasterPadInDevice_mHoleWidth,
         MasterPadInDevice_mHoleHeight,
         MasterPadInDevice_mShape,
         MasterPadInDevice_mStyle,
         MasterPadInDevice_mName,
         MasterPadInDevice_padNumberDisplay,
         MasterPadInDevice_frontSideFilledBezierPathArray,
         MasterPadInDevice_backSideFilledBezierPathArray {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mCenterX
  //------------------------------------------------------------------------------------------------

  final let mCenterX_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mCenterY
  //------------------------------------------------------------------------------------------------

  final let mCenterY_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mWidth
  //------------------------------------------------------------------------------------------------

  final let mWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHeight
  //------------------------------------------------------------------------------------------------

  final let mHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHoleWidth
  //------------------------------------------------------------------------------------------------

  final let mHoleWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHoleHeight
  //------------------------------------------------------------------------------------------------

  final let mHoleHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mShape
  //------------------------------------------------------------------------------------------------

  final let mShape_property : EBStoredProperty_PadShape

  //------------------------------------------------------------------------------------------------

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mStyle
  //------------------------------------------------------------------------------------------------

  final let mStyle_property : EBStoredProperty_PadStyle

  //------------------------------------------------------------------------------------------------

  final var mStyle : PadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mName
  //------------------------------------------------------------------------------------------------

  final let mName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mSlavePads
  //------------------------------------------------------------------------------------------------

  final let mSlavePads_property = StoredArrayOf_SlavePadInDevice (usedForSignature: true, key: "mSlavePads")

  //------------------------------------------------------------------------------------------------

  final var mSlavePads : EBReferenceArray <SlavePadInDevice> {
    get { return self.mSlavePads_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: padNumberDisplay
  //------------------------------------------------------------------------------------------------

  final let padNumberDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var padNumberDisplay : EBShape? {
    return self.padNumberDisplay_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: frontSideFilledBezierPathArray
  //------------------------------------------------------------------------------------------------

  final let frontSideFilledBezierPathArray_property = EBTransientProperty <BezierPathArray> ()

  //------------------------------------------------------------------------------------------------

  final var frontSideFilledBezierPathArray : BezierPathArray? {
    return self.frontSideFilledBezierPathArray_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: backSideFilledBezierPathArray
  //------------------------------------------------------------------------------------------------

  final let backSideFilledBezierPathArray_property = EBTransientProperty <BezierPathArray> ()

  //------------------------------------------------------------------------------------------------

  final var backSideFilledBezierPathArray : BezierPathArray? {
    return self.backSideFilledBezierPathArray_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "mWidth")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "mHeight")
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleWidth")
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleHeight")
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "mShape")
    self.mStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing, undoManager: inUndoManager, key: "mStyle")
    self.mName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mName")
    super.init (inUndoManager)
  //--- To many property: mSlavePads (has opposite relationship)
    self.mSlavePads_property.undoManager = inUndoManager
    self.mSlavePads_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mMasterPad_property.setProp (me) } },
      resetter: { inObject in inObject.mMasterPad_property.setProp (nil) }
    )
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = preferences_padNumberColor_property.selection
        let s3 = unwSelf.mName_property.selection
        let s4 = preferences_padNumberFont_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_MasterPadInDevice_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.mCenterY_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberColor_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.mName_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberFont_property.startsBeingObserved (by: self.padNumberDisplay_property)
  //--- Atomic property: frontSideFilledBezierPathArray
    self.frontSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        let s8 = unwSelf.mSlavePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_MasterPadInDevice_frontSideFilledBezierPathArray (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mCenterY_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mWidth_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mHeight_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mHoleWidth_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mHoleHeight_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mShape_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mStyle_property.startsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
    self.mSlavePads_property.toMany_frontSideFilledBezierPath_StartsBeingObserved (by: self.frontSideFilledBezierPathArray_property)
  //--- Atomic property: backSideFilledBezierPathArray
    self.backSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        let s8 = unwSelf.mSlavePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_MasterPadInDevice_backSideFilledBezierPathArray (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mCenterY_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mWidth_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mHeight_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mHoleWidth_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mHoleHeight_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mShape_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mStyle_property.startsBeingObserved (by: self.backSideFilledBezierPathArray_property)
    self.mSlavePads_property.toMany_backSideFilledBezierPath_StartsBeingObserved (by: self.backSideFilledBezierPathArray_property)
  //--- Install undoers and opposite setter for relationships
    self.mSlavePads_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mMasterPad_property.setProp (me) } },
      resetter: { inObject in inObject.mMasterPad_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mCenterX_property.setSignatureObserver (observer: self)
    self.mCenterY_property.setSignatureObserver (observer: self)
    self.mHeight_property.setSignatureObserver (observer: self)
    self.mHoleHeight_property.setSignatureObserver (observer: self)
    self.mHoleWidth_property.setSignatureObserver (observer: self)
    self.mName_property.setSignatureObserver (observer: self)
    self.mShape_property.setSignatureObserver (observer: self)
    self.mSlavePads_property.setSignatureObserver (observer: self)
    self.mStyle_property.setSignatureObserver (observer: self)
    self.mWidth_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   accumulateProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func accumulateProperties (into ioArray : inout [AnyObject]) {
    super.accumulateProperties (into: &ioArray)
    ioArray.append (self.mCenterX_property)
    ioArray.append (self.mCenterY_property)
    ioArray.append (self.mWidth_property)
    ioArray.append (self.mHeight_property)
    ioArray.append (self.mHoleWidth_property)
    ioArray.append (self.mHoleHeight_property)
    ioArray.append (self.mShape_property)
    ioArray.append (self.mStyle_property)
    ioArray.append (self.mName_property)
    ioArray.append (self.mSlavePads_property)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mCenterX_property.signature ())
    crc.accumulate (u32: self.mCenterY_property.signature ())
    crc.accumulate (u32: self.mHeight_property.signature ())
    crc.accumulate (u32: self.mHoleHeight_property.signature ())
    crc.accumulate (u32: self.mHoleWidth_property.signature ())
    crc.accumulate (u32: self.mName_property.signature ())
    crc.accumulate (u32: self.mShape_property.signature ())
    crc.accumulate (u32: self.mSlavePads_property.signature ())
    crc.accumulate (u32: self.mStyle_property.signature ())
    crc.accumulate (u32: self.mWidth_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

