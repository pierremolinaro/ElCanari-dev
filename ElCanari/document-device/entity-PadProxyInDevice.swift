//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PadProxyInDevice_mPinInstanceName : AnyObject {
  var mPinInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PadProxyInDevice_mPadName : AnyObject {
  var mPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PadProxyInDevice_mIsNC : AnyObject {
  var mIsNC : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PadProxyInDevice_isConnected : AnyObject {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PadProxyInDevice_symbolName : AnyObject {
  var symbolName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class PadProxyInDevice : EBManagedObject,
         PadProxyInDevice_mPinInstanceName,
         PadProxyInDevice_mPadName,
         PadProxyInDevice_mIsNC,
         PadProxyInDevice_isConnected,
         PadProxyInDevice_symbolName {

  //································································································
  //   Atomic property: mPinInstanceName
  //································································································

  final let mPinInstanceName_property : EBStoredProperty_String

  //································································································

  final var mPinInstanceName : String {
    get { return self.mPinInstanceName_property.propval }
    set { self.mPinInstanceName_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mPadName
  //································································································

  final let mPadName_property : EBStoredProperty_String

  //································································································

  final var mPadName : String {
    get { return self.mPadName_property.propval }
    set { self.mPadName_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsNC
  //································································································

  final let mIsNC_property : EBStoredProperty_Bool

  //································································································

  final var mIsNC : Bool {
    get { return self.mIsNC_property.propval }
    set { self.mIsNC_property.setProp (newValue) }
  }

  //································································································
  //   To one property: mPinInstance
  //································································································

  final let mPinInstance_property = StoredObject_SymbolPinInstanceInDevice (usedForSignature: false, strongRef: true, key: "mPinInstance")

  //································································································

  final var mPinInstance : SymbolPinInstanceInDevice? {
    get {
      return self.mPinInstance_property.propval
    }
    set {
      if self.mPinInstance_property.propval !== newValue {
        if self.mPinInstance_property.propval != nil {
          self.mPinInstance_property.setProp (nil)
        }
        if newValue != nil {
          self.mPinInstance_property.setProp (newValue)
        }
      }
    }
  }

  //································································································

  final let mPinInstance_none = EBTransientProperty <Bool> ()

  //································································································
  //   Transient property: isConnected
  //································································································

  final let isConnected_property = EBTransientProperty <Bool> ()

  //································································································

  final var isConnected : Bool? {
    return self.isConnected_property.optionalValue
  }

  //································································································
  //   Transient property: symbolName
  //································································································

  final let symbolName_property = EBTransientProperty <String> ()

  //································································································

  final var symbolName : String? {
    return self.symbolName_property.optionalValue
  }

  //································································································
  //    init
  //································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mPinInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mPinInstanceName")
    self.mPadName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mPadName")
    self.mIsNC_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsNC")
    super.init (inUndoManager)
    self.mPinInstance_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mPinInstance_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPinInstance_property.startsBeingObserved (by: self.mPinInstance_none)
  //--- To one property: mPinInstance (has opposite to one relationship: mPadProxy)
    self.mPinInstance_property.undoManager = inUndoManager
    self.mPinInstance_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPadProxy_property.setProp (me) } },
      resetter: { inObject in inObject.mPadProxy_property.setProp (nil) }
    )
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mIsNC_property.selection
        let s1 = unwSelf.mPinInstance_none.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PadProxyInDevice_isConnected (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mIsNC_property.startsBeingObserved (by: self.isConnected_property)
    self.mPinInstance_property.startsBeingObserved (by: self.isConnected_property)
  //--- Atomic property: symbolName
    self.symbolName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPinInstance_property.symbolName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PadProxyInDevice_symbolName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPinInstance_property.symbolName_property.startsBeingObserved (by: self.symbolName_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mIsNC_property.setSignatureObserver (observer: self)
    self.mPadName_property.setSignatureObserver (observer: self)
    self.mPinInstanceName_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //································································································
  //    Extern delegates
  //································································································


  //································································································
  //   computeSignature
  //································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mIsNC_property.signature ())
    crc.accumulate (u32: self.mPadName_property.signature ())
    crc.accumulate (u32: self.mPinInstanceName_property.signature ())
    return crc
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

