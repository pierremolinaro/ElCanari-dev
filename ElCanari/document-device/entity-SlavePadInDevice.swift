//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mShape : AnyObject {
  var mShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_mStyle : AnyObject {
  var mStyle : SlavePadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_frontSideFilledBezierPath : AnyObject {
  var frontSideFilledBezierPath : EBBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_backSideFilledBezierPath : AnyObject {
  var backSideFilledBezierPath : EBBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SlavePadInDevice_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SlavePadInDevice : EBManagedObject,
         SlavePadInDevice_mCenterX,
         SlavePadInDevice_mCenterY,
         SlavePadInDevice_mWidth,
         SlavePadInDevice_mHeight,
         SlavePadInDevice_mHoleWidth,
         SlavePadInDevice_mHoleHeight,
         SlavePadInDevice_mShape,
         SlavePadInDevice_mStyle,
         SlavePadInDevice_frontSideFilledBezierPath,
         SlavePadInDevice_backSideFilledBezierPath,
         SlavePadInDevice_padNumberDisplay {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 114300
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHeight
  //····················································································································

  final let mHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHeight_toDefaultValue () {
    self.mHeight = 228600
  }

  //····················································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleWidth
  //····················································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleWidth_toDefaultValue () {
    self.mHoleWidth = 57150
  }

  //····················································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleHeight
  //····················································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleHeight_toDefaultValue () {
    self.mHoleHeight = 57150
  }

  //····················································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = PadShape.octo
  }

  //····················································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStyle
  //····················································································································

  final let mStyle_property : EBStoredProperty_SlavePadStyle

  //····················································································································

  final func reset_mStyle_toDefaultValue () {
    self.mStyle = SlavePadStyle.traversing
  }

  //····················································································································

  final var mStyle : SlavePadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mMasterPad
  //····················································································································

  final let mMasterPad_property = StoredObject_MasterPadInDevice (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mMasterPad : MasterPadInDevice? {
    get {
      return self.mMasterPad_property.propval
    }
    set {
      if self.mMasterPad_property.propval !== newValue {
        if self.mMasterPad_property.propval != nil {
          self.mMasterPad_property.setProp (nil)
        }
        if newValue != nil {
          self.mMasterPad_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mMasterPad_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: frontSideFilledBezierPath
  //····················································································································

  final let frontSideFilledBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var frontSideFilledBezierPath : EBBezierPath? {
    switch self.frontSideFilledBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSideFilledBezierPath
  //····················································································································

  final let backSideFilledBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var backSideFilledBezierPath : EBBezierPath? {
    switch self.backSideFilledBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager)
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager)
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager)
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager)
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager)
    self.mStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: inUndoManager)
    super.init (inUndoManager)
    self.mMasterPad_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mMasterPad_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mMasterPad_property.addEBObserver (self.mMasterPad_none)
    gInitSemaphore.wait ()
  //--- To one property: mMasterPad (has opposite to many relationship: mSlavePads)
    self.mMasterPad_property.undoManager = inUndoManager
    self.mMasterPad_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSlavePads_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSlavePads_property.remove (me) } }
    )
  //--- Atomic property: frontSideFilledBezierPath
    self.frontSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SlavePadInDevice_frontSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mCenterY_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mWidth_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mHeight_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mHoleWidth_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mHoleHeight_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mShape_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.mStyle_property.addEBObserver (self.frontSideFilledBezierPath_property)
  //--- Atomic property: backSideFilledBezierPath
    self.backSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SlavePadInDevice_backSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mCenterY_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mWidth_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mHeight_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mHoleWidth_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mHoleHeight_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mShape_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.mStyle_property.addEBObserver (self.backSideFilledBezierPath_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = preferences_padNumberFont_property.selection
        let s3 = preferences_padNumberColor_property.selection
        let s4 = unwSelf.mMasterPad_property.mName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SlavePadInDevice_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.addEBObserver (self.padNumberDisplay_property)
    self.mCenterY_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.mMasterPad_property.mName_property.addEBObserver (self.padNumberDisplay_property)
    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mCenterX_property.setSignatureObserver (observer: self)
    self.mCenterY_property.setSignatureObserver (observer: self)
    self.mHeight_property.setSignatureObserver (observer: self)
    self.mHoleHeight_property.setSignatureObserver (observer: self)
    self.mHoleWidth_property.setSignatureObserver (observer: self)
    self.mShape_property.setSignatureObserver (observer: self)
    self.mStyle_property.setSignatureObserver (observer: self)
    self.mWidth_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mCenterX
      self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey: "mCenterX")
    //--- Atomic property: mCenterY
      self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey: "mCenterY")
    //--- Atomic property: mWidth
      self.mWidth_property.storeIn (dictionary: ioDictionary, forKey: "mWidth")
    //--- Atomic property: mHeight
      self.mHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHeight")
    //--- Atomic property: mHoleWidth
      self.mHoleWidth_property.storeIn (dictionary: ioDictionary, forKey: "mHoleWidth")
    //--- Atomic property: mHoleHeight
      self.mHoleHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHoleHeight")
    //--- Atomic property: mShape
      self.mShape_property.storeIn (dictionary: ioDictionary, forKey: "mShape")
    //--- Atomic property: mStyle
      self.mStyle_property.storeIn (dictionary: ioDictionary, forKey: "mStyle")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mMasterPad
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mMasterPad",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? MasterPadInDevice {
        self.mMasterPad_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey: "mCenterY")
  //--- Atomic property: mWidth
    self.mWidth_property.readFrom (dictionary: inDictionary, forKey: "mWidth")
  //--- Atomic property: mHeight
    self.mHeight_property.readFrom (dictionary: inDictionary, forKey: "mHeight")
  //--- Atomic property: mHoleWidth
    self.mHoleWidth_property.readFrom (dictionary: inDictionary, forKey: "mHoleWidth")
  //--- Atomic property: mHoleHeight
    self.mHoleHeight_property.readFrom (dictionary: inDictionary, forKey: "mHoleHeight")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey: "mShape")
  //--- Atomic property: mStyle
    self.mStyle_property.readFrom (dictionary: inDictionary, forKey: "mStyle")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mCenterX\n"
    ioString += "mCenterY\n"
    ioString += "mWidth\n"
    ioString += "mHeight\n"
    ioString += "mHoleWidth\n"
    ioString += "mHoleHeight\n"
    ioString += "mShape\n"
    ioString += "mStyle\n"
  //--- To one relationships
    ioString += "mMasterPad\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mCenterX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCenterY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mMasterPad {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mCenterX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterX = value
      }
      if let range = inDictionary ["mCenterY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterY = value
      }
      if let range = inDictionary ["mWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidth = value
      }
      if let range = inDictionary ["mHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHeight = value
      }
      if let range = inDictionary ["mHoleWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleWidth = value
      }
      if let range = inDictionary ["mHoleHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleHeight = value
      }
      if let range = inDictionary ["mShape"], let value = PadShape.unarchiveFromDataRange (inData, range) {
        self.mShape = value
      }
      if let range = inDictionary ["mStyle"], let value = SlavePadStyle.unarchiveFromDataRange (inData, range) {
        self.mStyle = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mMasterPad"], let objectIndex = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [objectIndex].object as! MasterPadInDevice
      self.mMasterPad = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mMasterPad
    if let object = self.mMasterPad {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mCenterX_property.signature ())
    crc.accumulateUInt32 (self.mCenterY_property.signature ())
    crc.accumulateUInt32 (self.mHeight_property.signature ())
    crc.accumulateUInt32 (self.mHoleHeight_property.signature ())
    crc.accumulateUInt32 (self.mHoleWidth_property.signature ())
    crc.accumulateUInt32 (self.mShape_property.signature ())
    crc.accumulateUInt32 (self.mStyle_property.signature ())
    crc.accumulateUInt32 (self.mWidth_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

