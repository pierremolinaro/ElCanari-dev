//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mWidth : AnyObject {
  var mWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mHeight : AnyObject {
  var mHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mShape : AnyObject {
  var mShape : PadShape { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_mStyle : AnyObject {
  var mStyle : SlavePadStyle { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_frontSideFilledBezierPath : AnyObject {
  var frontSideFilledBezierPath : BézierPath? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_backSideFilledBezierPath : AnyObject {
  var backSideFilledBezierPath : BézierPath? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SlavePadInDevice_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: SlavePadInDevice
//--------------------------------------------------------------------------------------------------

final class SlavePadInDevice : EBManagedObject,
         SlavePadInDevice_mCenterX,
         SlavePadInDevice_mCenterY,
         SlavePadInDevice_mWidth,
         SlavePadInDevice_mHeight,
         SlavePadInDevice_mHoleWidth,
         SlavePadInDevice_mHoleHeight,
         SlavePadInDevice_mShape,
         SlavePadInDevice_mStyle,
         SlavePadInDevice_frontSideFilledBezierPath,
         SlavePadInDevice_backSideFilledBezierPath,
         SlavePadInDevice_padNumberDisplay {

  //································································································
  //   Atomic property: mCenterX
  //································································································

  final let mCenterX_property : EBStoredProperty_Int

  //································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mCenterY
  //································································································

  final let mCenterY_property : EBStoredProperty_Int

  //································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mWidth
  //································································································

  final let mWidth_property : EBStoredProperty_Int

  //································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHeight
  //································································································

  final let mHeight_property : EBStoredProperty_Int

  //································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHoleWidth
  //································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHoleHeight
  //································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mShape
  //································································································

  final let mShape_property : EBStoredProperty_PadShape

  //································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mStyle
  //································································································

  final let mStyle_property : EBStoredProperty_SlavePadStyle

  //································································································

  final var mStyle : SlavePadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //································································································
  //   To one property: mMasterPad
  //································································································

  final let mMasterPad_property = StoredObject_MasterPadInDevice (usedForSignature: false, strongRef: false, key: "mMasterPad")

  //································································································

  final var mMasterPad : MasterPadInDevice? {
    get {
      return self.mMasterPad_property.propval
    }
    set {
      // self.mMasterPad_property.setProp (newValue)
      if self.mMasterPad_property.propval !== newValue {
        if self.mMasterPad_property.propval != nil {
          self.mMasterPad_property.setProp (nil)
        }
        if newValue != nil {
          self.mMasterPad_property.setProp (newValue)
        }
      }
    }
  }

  //································································································

  final let mMasterPad_none = EBTransientProperty <Bool> ()

  //································································································
  //   Transient property: frontSideFilledBezierPath
  //································································································

  final let frontSideFilledBezierPath_property = EBTransientProperty <BézierPath> ()

  //································································································

  final var frontSideFilledBezierPath : BézierPath? {
    return self.frontSideFilledBezierPath_property.optionalValue
  }

  //································································································
  //   Transient property: backSideFilledBezierPath
  //································································································

  final let backSideFilledBezierPath_property = EBTransientProperty <BézierPath> ()

  //································································································

  final var backSideFilledBezierPath : BézierPath? {
    return self.backSideFilledBezierPath_property.optionalValue
  }

  //································································································
  //   Transient property: padNumberDisplay
  //································································································

  final let padNumberDisplay_property = EBTransientProperty <EBShape> ()

  //································································································

  final var padNumberDisplay : EBShape? {
    return self.padNumberDisplay_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "mWidth")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "mHeight")
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleWidth")
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleHeight")
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "mShape")
    self.mStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: inUndoManager, key: "mStyle")
    super.init (inUndoManager)
    self.mMasterPad_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mMasterPad_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mMasterPad_property.startsBeingObserved (by: self.mMasterPad_none)
  //--- To one property: mMasterPad (has opposite to many relationship: mSlavePads)
    self.mMasterPad_property.undoManager = inUndoManager
    self.mMasterPad_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSlavePads_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSlavePads_property.remove (me) } }
    )
  //--- Atomic property: frontSideFilledBezierPath
    self.frontSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SlavePadInDevice_frontSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mCenterY_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mWidth_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mHeight_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mHoleWidth_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mHoleHeight_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mShape_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
    self.mStyle_property.startsBeingObserved (by: self.frontSideFilledBezierPath_property)
  //--- Atomic property: backSideFilledBezierPath
    self.backSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SlavePadInDevice_backSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mCenterY_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mWidth_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mHeight_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mHoleWidth_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mHoleHeight_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mShape_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
    self.mStyle_property.startsBeingObserved (by: self.backSideFilledBezierPath_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = preferences_padNumberFont_property.selection
        let s3 = preferences_padNumberColor_property.selection
        let s4 = unwSelf.mMasterPad_property.mName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SlavePadInDevice_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.mCenterY_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberFont_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberColor_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.mMasterPad_property.mName_property.startsBeingObserved (by: self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mCenterX_property.setSignatureObserver (observer: self)
    self.mCenterY_property.setSignatureObserver (observer: self)
    self.mHeight_property.setSignatureObserver (observer: self)
    self.mHoleHeight_property.setSignatureObserver (observer: self)
    self.mHoleWidth_property.setSignatureObserver (observer: self)
    self.mShape_property.setSignatureObserver (observer: self)
    self.mStyle_property.setSignatureObserver (observer: self)
    self.mWidth_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mCenterX_property.signature ())
    crc.accumulate (u32: self.mCenterY_property.signature ())
    crc.accumulate (u32: self.mHeight_property.signature ())
    crc.accumulate (u32: self.mHoleHeight_property.signature ())
    crc.accumulate (u32: self.mHoleWidth_property.signature ())
    crc.accumulate (u32: self.mShape_property.signature ())
    crc.accumulate (u32: self.mStyle_property.signature ())
    crc.accumulate (u32: self.mWidth_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

