//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_mInstanceName : AnyObject {
  var mInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_symbolQualifiedName : AnyObject {
  var symbolQualifiedName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_symbolTypeName : AnyObject {
  var symbolTypeName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_pinSymbolQualifiedNames : AnyObject {
  var pinSymbolQualifiedNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_unconnectedPins : AnyObject {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolInstanceInDevice_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolInstanceInDevice : EBGraphicManagedObject,
         SymbolInstanceInDevice_mInstanceName,
         SymbolInstanceInDevice_mX,
         SymbolInstanceInDevice_mY,
         SymbolInstanceInDevice_symbolQualifiedName,
         SymbolInstanceInDevice_symbolTypeName,
         SymbolInstanceInDevice_pinSymbolQualifiedNames,
         SymbolInstanceInDevice_selectionDisplay,
         SymbolInstanceInDevice_unconnectedPins,
         SymbolInstanceInDevice_objectDisplay {

  //····················································································································
  //   To many property: mPinInstances
  //····················································································································

  final let mPinInstances_property = StoredArrayOf_SymbolPinInstanceInDevice (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var mPinInstances : EBReferenceArray <SymbolPinInstanceInDevice> {
    get { return self.mPinInstances_property.propval }
    set { self.mPinInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mInstanceName
  //····················································································································

  final let mInstanceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mInstanceName_toDefaultValue () {
    self.mInstanceName = ""
  }

  //····················································································································

  final var mInstanceName : String {
    get { return self.mInstanceName_property.propval }
    set { self.mInstanceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mDeviceRoot
  //····················································································································

  final let mDeviceRoot_property = StoredObject_DeviceRoot (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mDeviceRoot : DeviceRoot? {
    get {
      return self.mDeviceRoot_property.propval
    }
    set {
      if self.mDeviceRoot_property.propval !== newValue {
        if self.mDeviceRoot_property.propval != nil {
          self.mDeviceRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mDeviceRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mDeviceRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mType
  //····················································································································

  final let mType_property = StoredObject_SymbolTypeInDevice (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mType : SymbolTypeInDevice? {
    get {
      return self.mType_property.propval
    }
    set {
      if self.mType_property.propval !== newValue {
        if self.mType_property.propval != nil {
          self.mType_property.setProp (nil)
        }
        if newValue != nil {
          self.mType_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mType_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: symbolQualifiedName
  //····················································································································

  final let symbolQualifiedName_property = EBTransientProperty_String ()

  //····················································································································

  final var symbolQualifiedName : String? {
    switch self.symbolQualifiedName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeName
  //····················································································································

  final let symbolTypeName_property = EBTransientProperty_String ()

  //····················································································································

  final var symbolTypeName : String? {
    switch self.symbolTypeName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinSymbolQualifiedNames
  //····················································································································

  final let pinSymbolQualifiedNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var pinSymbolQualifiedNames : StringArray? {
    switch self.pinSymbolQualifiedNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  final let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  final var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    super.init (inUndoManager)
    self.mDeviceRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mDeviceRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mDeviceRoot_property.addEBObserver (self.mDeviceRoot_none)
    self.mType_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mType_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mType_property.addEBObserver (self.mType_none)
//    gInitSemaphore.wait ()
  //--- To many property: mPinInstances (has opposite relationship)
    self.mPinInstances_property.undoManager = inUndoManager
    self.mPinInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbolInstance_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbolInstance_property.setProp (nil) }
    )
  //--- To one property: mDeviceRoot (has opposite to many relationship: mSymbolInstances)
    self.mDeviceRoot_property.undoManager = inUndoManager
    self.mDeviceRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbolInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSymbolInstances_property.remove (me) } }
    )
  //--- To one property: mType (has opposite to many relationship: mInstances)
    self.mType_property.undoManager = inUndoManager
    self.mType_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mInstances_property.remove (me) } }
    )
  //--- Atomic property: symbolQualifiedName
    self.symbolQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mInstanceName_property.selection
        let s1 = unwSelf.mType_property.mTypeName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SymbolInstanceInDevice_symbolQualifiedName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mInstanceName_property.addEBObserver (self.symbolQualifiedName_property)
    self.mType_property.mTypeName_property.addEBObserver (self.symbolQualifiedName_property)
  //--- Atomic property: symbolTypeName
    self.symbolTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mType_property.mTypeName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolInstanceInDevice_symbolTypeName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mType_property.mTypeName_property.addEBObserver (self.symbolTypeName_property)
  //--- Atomic property: pinSymbolQualifiedNames
    self.pinSymbolQualifiedNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mInstanceName_property.selection
        let s1 = unwSelf.mPinInstances_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SymbolInstanceInDevice_pinSymbolQualifiedNames (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mInstanceName_property.addEBObserver (self.pinSymbolQualifiedNames_property)
    self.mPinInstances_property.addEBObserverOf_pinName (self.pinSymbolQualifiedNames_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mType_property.mStrokeBezierPath_property.selection
        let s1 = unwSelf.mType_property.mFilledBezierPath_property.selection
        let s2 = unwSelf.mType_property.pinNameShape_property.selection
        let s3 = unwSelf.mPinInstances_property.selection
        let s4 = unwSelf.symbolQualifiedName_property.selection
        let s5 = preferences_symbolDrawingWidthMultipliedByTen_property.selection
        let s6 = unwSelf.mX_property.selection
        let s7 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SymbolInstanceInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mType_property.mStrokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    self.mType_property.mFilledBezierPath_property.addEBObserver (self.selectionDisplay_property)
    self.mType_property.pinNameShape_property.addEBObserver (self.selectionDisplay_property)
    self.mPinInstances_property.addEBObserverOf_numberShape (self.selectionDisplay_property)
    self.symbolQualifiedName_property.addEBObserver (self.selectionDisplay_property)
    preferences_symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPinInstances_property.selection
        let s1 = unwSelf.mPinInstances_property.selection
        let s2 = unwSelf.mInstanceName_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_SymbolInstanceInDevice_unconnectedPins (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPinInstances_property.addEBObserverOf_pinName (self.unconnectedPins_property)
    self.mPinInstances_property.addEBObserverOf_isConnected (self.unconnectedPins_property)
    self.mInstanceName_property.addEBObserver (self.unconnectedPins_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mType_property.mStrokeBezierPath_property.selection
        let s1 = unwSelf.mType_property.mFilledBezierPath_property.selection
        let s2 = unwSelf.mType_property.pinNameShape_property.selection
        let s3 = unwSelf.mPinInstances_property.selection
        let s4 = unwSelf.symbolQualifiedName_property.selection
        let s5 = unwSelf.mX_property.selection
        let s6 = unwSelf.mY_property.selection
        let s7 = preferences_symbolDrawingWidthMultipliedByTen_property.selection
        let s8 = preferences_symbolColor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_SymbolInstanceInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mType_property.mStrokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    self.mType_property.mFilledBezierPath_property.addEBObserver (self.objectDisplay_property)
    self.mType_property.pinNameShape_property.addEBObserver (self.objectDisplay_property)
    self.mPinInstances_property.addEBObserverOf_numberShape (self.objectDisplay_property)
    self.symbolQualifiedName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolColor_property.addEBObserver (self.objectDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mPinInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbolInstance_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbolInstance_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mInstanceName_property.setSignatureObserver (observer: self)
    self.mPinInstances_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
  //--- To many property: mPinInstances
    self.store (
      managedObjectArray: self.mPinInstances_property.propval.values,
      relationshipName: "mPinInstances",
      intoDictionary: &ioDictionary
    )
    //--- Atomic property: mInstanceName
      self.mInstanceName_property.storeIn (dictionary: &ioDictionary, forKey: "mInstanceName")
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: &ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: &ioDictionary, forKey: "mY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mPinInstances
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPinInstances",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SymbolPinInstanceInDevice]
      self.mPinInstances_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mDeviceRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDeviceRoot",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? DeviceRoot {
        self.mDeviceRoot_property.setProp (entity)
      }
    }
  //--- To one property: mType
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mType",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? SymbolTypeInDevice {
        self.mType_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mInstanceName
    self.mInstanceName_property.readFrom (dictionary: inDictionary, forKey: "mInstanceName")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mInstanceName\n"
    ioString += "mX\n"
    ioString += "mY\n"
  //--- To one relationships
    ioString += "mDeviceRoot\n"
    ioString += "mType\n"
  //--- To many relationships
    ioString += "mPinInstances\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mInstanceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mDeviceRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mType {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mPinInstances.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mInstanceName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mInstanceName = value
    }
    if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mX = value
    }
    if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mY = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mDeviceRoot"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! DeviceRoot
      self.mDeviceRoot = object
    }
    if let range = inDictionary ["mType"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! SymbolTypeInDevice
      self.mType = object
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many mPinInstances
    if let range = inDictionary ["mPinInstances"], range.length > 0 {
      var relationshipArray = EBReferenceArray <SymbolPinInstanceInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! SymbolPinInstanceInDevice)
      }
      self.mPinInstances = relationshipArray
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mPinInstances
    for managedObject in self.mPinInstances.values {
      ioObjectArray.append (managedObject)
    }
  //--- To one property: mDeviceRoot
    if let object = self.mDeviceRoot {
      ioObjectArray.append (object)
    }
  //--- To one property: mType
    if let object = self.mType {
      ioObjectArray.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mInstanceName_property.signature ())
    crc.accumulate (u32: self.mPinInstances_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_SymbolInstanceInDevice (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_SymbolInstanceInDevice (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_SymbolInstanceInDevice (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_SymbolInstanceInDevice (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_SymbolInstanceInDevice (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_SymbolInstanceInDevice (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_SymbolInstanceInDevice (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_SymbolInstanceInDevice (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_SymbolInstanceInDevice ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_SymbolInstanceInDevice ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_SymbolInstanceInDevice ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_SymbolInstanceInDevice ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_SymbolInstanceInDevice (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_SymbolInstanceInDevice (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_SymbolInstanceInDevice (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_SymbolInstanceInDevice (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_SymbolInstanceInDevice (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_SymbolInstanceInDevice ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_SymbolInstanceInDevice ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

