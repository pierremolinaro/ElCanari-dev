//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPinInstanceInDevice_pinName : AnyObject {
  var pinName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPinInstanceInDevice_symbolName : AnyObject {
  var symbolName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPinInstanceInDevice_pinQualifiedName : AnyObject {
  var pinQualifiedName : PinQualifiedNameStruct? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPinInstanceInDevice_isConnected : AnyObject {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPinInstanceInDevice_numberShape : AnyObject {
  var numberShape : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPinInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolPinInstanceInDevice : EBManagedObject,
         SymbolPinInstanceInDevice_pinName,
         SymbolPinInstanceInDevice_symbolName,
         SymbolPinInstanceInDevice_pinQualifiedName,
         SymbolPinInstanceInDevice_isConnected,
         SymbolPinInstanceInDevice_numberShape {

  //····················································································································
  //   To one property: mSymbolInstance
  //····················································································································

  final let mSymbolInstance_property = StoredObject_SymbolInstanceInDevice (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mSymbolInstance : SymbolInstanceInDevice? {
    get {
      return self.mSymbolInstance_property.propval
    }
    set {
      if self.mSymbolInstance_property.propval !== newValue {
        if self.mSymbolInstance_property.propval != nil {
          self.mSymbolInstance_property.setProp (nil)
        }
        if newValue != nil {
          self.mSymbolInstance_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSymbolInstance_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mType
  //····················································································································

  final let mType_property = StoredObject_SymbolPinTypeInDevice (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mType : SymbolPinTypeInDevice? {
    get {
      return self.mType_property.propval
    }
    set {
      if self.mType_property.propval !== newValue {
        if self.mType_property.propval != nil {
          self.mType_property.setProp (nil)
        }
        if newValue != nil {
          self.mType_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mType_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mPadProxy
  //····················································································································

  final let mPadProxy_property = StoredObject_PadProxyInDevice (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mPadProxy : PadProxyInDevice? {
    get {
      return self.mPadProxy_property.propval
    }
    set {
      if self.mPadProxy_property.propval !== newValue {
        if self.mPadProxy_property.propval != nil {
          self.mPadProxy_property.setProp (nil)
        }
        if newValue != nil {
          self.mPadProxy_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mPadProxy_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: pinName
  //····················································································································

  final let pinName_property = EBTransientProperty_String ()

  //····················································································································

  final var pinName : String? {
    switch self.pinName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolName
  //····················································································································

  final let symbolName_property = EBTransientProperty_String ()

  //····················································································································

  final var symbolName : String? {
    switch self.symbolName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinQualifiedName
  //····················································································································

  final let pinQualifiedName_property = EBTransientProperty_PinQualifiedNameStruct ()

  //····················································································································

  final var pinQualifiedName : PinQualifiedNameStruct? {
    switch self.pinQualifiedName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  final let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isConnected : Bool? {
    switch self.isConnected_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: numberShape
  //····················································································································

  final let numberShape_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var numberShape : EBShape? {
    switch self.numberShape_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    super.init (inUndoManager)
    self.mSymbolInstance_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSymbolInstance_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSymbolInstance_property.addEBObserver (self.mSymbolInstance_none)
    self.mType_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mType_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mType_property.addEBObserver (self.mType_none)
    self.mPadProxy_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mPadProxy_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPadProxy_property.addEBObserver (self.mPadProxy_none)
//    gInitSemaphore.wait ()
  //--- To one property: mSymbolInstance (has opposite to many relationship: mPinInstances)
    self.mSymbolInstance_property.undoManager = inUndoManager
    self.mSymbolInstance_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPinInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPinInstances_property.remove (me) } }
    )
  //--- To one property: mType (has opposite to many relationship: mInstances)
    self.mType_property.undoManager = inUndoManager
    self.mType_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mInstances_property.remove (me) } }
    )
  //--- To one property: mPadProxy (has opposite to one relationship: mPinInstance)
    self.mPadProxy_property.undoManager = inUndoManager
    self.mPadProxy_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPinInstance_property.setProp (me) } },
      resetter: { inObject in inObject.mPinInstance_property.setProp (nil) }
    )
  //--- Atomic property: pinName
    self.pinName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mType_property.mName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolPinInstanceInDevice_pinName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mType_property.mName_property.addEBObserver (self.pinName_property)
  //--- Atomic property: symbolName
    self.symbolName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstance_property.mInstanceName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolPinInstanceInDevice_symbolName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstance_property.mInstanceName_property.addEBObserver (self.symbolName_property)
  //--- Atomic property: pinQualifiedName
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolName_property.selection
        let s1 = unwSelf.pinName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SymbolPinInstanceInDevice_pinQualifiedName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolName_property.addEBObserver (self.pinQualifiedName_property)
    self.pinName_property.addEBObserver (self.pinQualifiedName_property)
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadProxy_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolPinInstanceInDevice_isConnected (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadProxy_property.addEBObserver (self.isConnected_property)
  //--- Atomic property: numberShape
    self.numberShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mType_property.mXNumber_property.selection
        let s1 = unwSelf.mType_property.mYNumber_property.selection
        let s2 = unwSelf.mType_property.mNumberHorizontalAlignment_property.selection
        let s3 = unwSelf.mPadProxy_property.mPadName_property.selection
        let s4 = preferences_pinNameFont_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SymbolPinInstanceInDevice_numberShape (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mType_property.mXNumber_property.addEBObserver (self.numberShape_property)
    self.mType_property.mYNumber_property.addEBObserver (self.numberShape_property)
    self.mType_property.mNumberHorizontalAlignment_property.addEBObserver (self.numberShape_property)
    self.mPadProxy_property.mPadName_property.addEBObserver (self.numberShape_property)
    preferences_pinNameFont_property.addEBObserver (self.numberShape_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To one property: mPadProxy // Opposite is toOne mPinInstance
    self.store (managedObject:self.mPadProxy_property.propval,
      relationshipName: "mPadProxy",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mSymbolInstance
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSymbolInstance",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? SymbolInstanceInDevice {
        self.mSymbolInstance_property.setProp (entity)
      }
    }
  //--- To one property: mType
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mType",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? SymbolPinTypeInDevice {
        self.mType_property.setProp (entity)
      }
    }
  //--- To one property: mPadProxy
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPadProxy",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? PadProxyInDevice {
        self.mPadProxy_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
  //--- To one relationships
    ioString += "mSymbolInstance\n"
    ioString += "mType\n"
    ioString += "mPadProxy\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
  //--- To one relationships
    if let object = self.mSymbolInstance {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mType {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mPadProxy {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mSymbolInstance"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! SymbolInstanceInDevice
      self.mSymbolInstance = object
    }
    if let range = inDictionary ["mType"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! SymbolPinTypeInDevice
      self.mType = object
    }
    if let range = inDictionary ["mPadProxy"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! PadProxyInDevice
      self.mPadProxy = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: mSymbolInstance
    if let object = self.mSymbolInstance {
      ioObjectArray.append (object)
    }
  //--- To one property: mType
    if let object = self.mType {
      ioObjectArray.append (object)
    }
  //--- To one property: mPadProxy
    if let object = self.mPadProxy {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

