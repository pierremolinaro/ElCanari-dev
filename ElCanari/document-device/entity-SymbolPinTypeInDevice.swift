//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mPinX : AnyObject {
  var mPinX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mPinY : AnyObject {
  var mPinY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mXName : AnyObject {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mYName : AnyObject {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mName : AnyObject {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mNameHorizontalAlignment : AnyObject {
  var mNameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mPinNameIsDisplayedInSchematics : AnyObject {
  var mPinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mXNumber : AnyObject {
  var mXNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mYNumber : AnyObject {
  var mYNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_mNumberHorizontalAlignment : AnyObject {
  var mNumberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPinTypeInDevice_nameShape : AnyObject {
  var nameShape : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolPinTypeInDevice : EBManagedObject,
         SymbolPinTypeInDevice_mPinX,
         SymbolPinTypeInDevice_mPinY,
         SymbolPinTypeInDevice_mXName,
         SymbolPinTypeInDevice_mYName,
         SymbolPinTypeInDevice_mName,
         SymbolPinTypeInDevice_mNameHorizontalAlignment,
         SymbolPinTypeInDevice_mPinNameIsDisplayedInSchematics,
         SymbolPinTypeInDevice_mXNumber,
         SymbolPinTypeInDevice_mYNumber,
         SymbolPinTypeInDevice_mNumberHorizontalAlignment,
         SymbolPinTypeInDevice_nameShape {

  //····················································································································
  //   Atomic property: mPinX
  //····················································································································

  final let mPinX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPinX_toDefaultValue () {
    self.mPinX = 0
  }

  //····················································································································

  final var mPinX : Int {
    get { return self.mPinX_property.propval }
    set { self.mPinX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinY
  //····················································································································

  final let mPinY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPinY_toDefaultValue () {
    self.mPinY = 0
  }

  //····················································································································

  final var mPinY : Int {
    get { return self.mPinY_property.propval }
    set { self.mPinY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  final let mXName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXName_toDefaultValue () {
    self.mXName = 0
  }

  //····················································································································

  final var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  final let mYName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYName_toDefaultValue () {
    self.mYName = 0
  }

  //····················································································································

  final var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  final let mName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mName_toDefaultValue () {
    self.mName = ""
  }

  //····················································································································

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameHorizontalAlignment
  //····················································································································

  final let mNameHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mNameHorizontalAlignment_toDefaultValue () {
    self.mNameHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mNameHorizontalAlignment : HorizontalAlignment {
    get { return self.mNameHorizontalAlignment_property.propval }
    set { self.mNameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinNameIsDisplayedInSchematics
  //····················································································································

  final let mPinNameIsDisplayedInSchematics_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPinNameIsDisplayedInSchematics_toDefaultValue () {
    self.mPinNameIsDisplayedInSchematics = true
  }

  //····················································································································

  final var mPinNameIsDisplayedInSchematics : Bool {
    get { return self.mPinNameIsDisplayedInSchematics_property.propval }
    set { self.mPinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXNumber
  //····················································································································

  final let mXNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXNumber_toDefaultValue () {
    self.mXNumber = 0
  }

  //····················································································································

  final var mXNumber : Int {
    get { return self.mXNumber_property.propval }
    set { self.mXNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYNumber
  //····················································································································

  final let mYNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYNumber_toDefaultValue () {
    self.mYNumber = 0
  }

  //····················································································································

  final var mYNumber : Int {
    get { return self.mYNumber_property.propval }
    set { self.mYNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNumberHorizontalAlignment
  //····················································································································

  final let mNumberHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mNumberHorizontalAlignment_toDefaultValue () {
    self.mNumberHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mNumberHorizontalAlignment : HorizontalAlignment {
    get { return self.mNumberHorizontalAlignment_property.propval }
    set { self.mNumberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mInstances
  //····················································································································

  final let mInstances_property = StoredArrayOf_SymbolPinInstanceInDevice (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mInstances : EBReferenceArray <SymbolPinInstanceInDevice> {
    get { return self.mInstances_property.propval }
    set { self.mInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: nameShape
  //····················································································································

  final let nameShape_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var nameShape : EBShape? {
    switch self.nameShape_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mPinX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mPinY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mXName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mNameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    self.mPinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mXNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mNumberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mInstances (has opposite relationship)
    self.mInstances_property.ebUndoManager = self.ebUndoManager
    self.mInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mType_property.setProp (me) } },
      resetter: { inObject in inObject.mType_property.setProp (nil) }
    )
  //--- Atomic property: nameShape
    self.nameShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mXName_property.selection,
                unwSelf.mYName_property.selection,
                unwSelf.mName_property.selection,
                unwSelf.mNameHorizontalAlignment_property.selection,
                unwSelf.mPinNameIsDisplayedInSchematics_property.selection,
                preferences_pinNameFont_property.selection) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_SymbolPinTypeInDevice_nameShape (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mXName_property.addEBObserver (self.nameShape_property)
    self.mYName_property.addEBObserver (self.nameShape_property)
    self.mName_property.addEBObserver (self.nameShape_property)
    self.mNameHorizontalAlignment_property.addEBObserver (self.nameShape_property)
    self.mPinNameIsDisplayedInSchematics_property.addEBObserver (self.nameShape_property)
    preferences_pinNameFont_property.addEBObserver (self.nameShape_property)
  //--- Install undoers and opposite setter for relationships
    self.mInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mType_property.setProp (me) } },
      resetter: { inObject in inObject.mType_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mName_property.setSignatureObserver (observer: self)
    self.mNameHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.mNumberHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.mPinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: self)
    self.mPinX_property.setSignatureObserver (observer: self)
    self.mPinY_property.setSignatureObserver (observer: self)
    self.mXName_property.setSignatureObserver (observer: self)
    self.mXNumber_property.setSignatureObserver (observer: self)
    self.mYName_property.setSignatureObserver (observer: self)
    self.mYNumber_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override func removeAllObservers () {
    super.removeAllObservers ()
    // self.mXName_property.removeEBObserver (self.nameShape_property)
    // self.mYName_property.removeEBObserver (self.nameShape_property)
    // self.mName_property.removeEBObserver (self.nameShape_property)
    // self.mNameHorizontalAlignment_property.removeEBObserver (self.nameShape_property)
    // self.mPinNameIsDisplayedInSchematics_property.removeEBObserver (self.nameShape_property)
    // preferences_pinNameFont_property.removeEBObserver (self.nameShape_property)
  //--- Unregister properties for handling signature
    self.mName_property.setSignatureObserver (observer: nil)
    self.mNameHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.mNumberHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.mPinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: nil)
    self.mPinX_property.setSignatureObserver (observer: nil)
    self.mPinY_property.setSignatureObserver (observer: nil)
    self.mXName_property.setSignatureObserver (observer: nil)
    self.mXNumber_property.setSignatureObserver (observer: nil)
    self.mYName_property.setSignatureObserver (observer: nil)
    self.mYNumber_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mPinX",
        object: self.mPinX_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinX_property.mObserverExplorer,
        valueExplorer: &self.mPinX_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPinY",
        object: self.mPinY_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinY_property.mObserverExplorer,
        valueExplorer: &self.mPinY_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mXName",
        object: self.mXName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mXName_property.mObserverExplorer,
        valueExplorer: &self.mXName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mYName",
        object: self.mYName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mYName_property.mObserverExplorer,
        valueExplorer: &self.mYName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mName",
        object: self.mName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mName_property.mObserverExplorer,
        valueExplorer: &self.mName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mNameHorizontalAlignment",
        object: self.mNameHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.mNameHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.mNameHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPinNameIsDisplayedInSchematics",
        object: self.mPinNameIsDisplayedInSchematics_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer,
        valueExplorer: &self.mPinNameIsDisplayedInSchematics_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mXNumber",
        object: self.mXNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.mXNumber_property.mObserverExplorer,
        valueExplorer: &self.mXNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mYNumber",
        object: self.mYNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.mYNumber_property.mObserverExplorer,
        valueExplorer: &self.mYNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mNumberHorizontalAlignment",
        object: self.mNumberHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.mNumberHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.mNumberHorizontalAlignment_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "nameShape",
        object: self.nameShape_property,
        y: &y,
        view: view,
        observerExplorer: &self.nameShape_property.mObserverExplorer,
        valueExplorer: &self.nameShape_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForToManyRelationshipNamed (
        "mInstances",
        object: mInstances_property,
        y: &y,
        view: view,
        valueExplorer:&mInstances_property.mValueExplorer
      )
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mPinX
    self.mPinX_property.mObserverExplorer = nil
    self.mPinX_property.mValueExplorer = nil
  //--- Atomic property: mPinY
    self.mPinY_property.mObserverExplorer = nil
    self.mPinY_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.mObserverExplorer = nil
    self.mNameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.mPinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: mXNumber
    self.mXNumber_property.mObserverExplorer = nil
    self.mXNumber_property.mValueExplorer = nil
  //--- Atomic property: mYNumber
    self.mYNumber_property.mObserverExplorer = nil
    self.mYNumber_property.mValueExplorer = nil
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.mObserverExplorer = nil
    self.mNumberHorizontalAlignment_property.mValueExplorer = nil
    //--- To many property: mInstances
      self.mInstances_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
    self.mInstances.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mPinX
      self.mPinX_property.storeIn (dictionary: ioDictionary, forKey: "mPinX")
    //--- Atomic property: mPinY
      self.mPinY_property.storeIn (dictionary: ioDictionary, forKey: "mPinY")
    //--- Atomic property: mXName
      self.mXName_property.storeIn (dictionary: ioDictionary, forKey: "mXName")
    //--- Atomic property: mYName
      self.mYName_property.storeIn (dictionary: ioDictionary, forKey: "mYName")
    //--- Atomic property: mName
      self.mName_property.storeIn (dictionary: ioDictionary, forKey: "mName")
    //--- Atomic property: mNameHorizontalAlignment
      self.mNameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mNameHorizontalAlignment")
    //--- Atomic property: mPinNameIsDisplayedInSchematics
      self.mPinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey: "mPinNameIsDisplayedInSchematics")
    //--- Atomic property: mXNumber
      self.mXNumber_property.storeIn (dictionary: ioDictionary, forKey: "mXNumber")
    //--- Atomic property: mYNumber
      self.mYNumber_property.storeIn (dictionary: ioDictionary, forKey: "mYNumber")
    //--- Atomic property: mNumberHorizontalAlignment
      self.mNumberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mNumberHorizontalAlignment")
  //--- To many property: mInstances
    self.store (
      managedObjectArray: self.mInstances_property.propval.values,
      relationshipName: "mInstances",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mInstances
/*    self.mInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolPinInstanceInDevice]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mInstances",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [SymbolPinInstanceInDevice]
      self.mInstances_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPinX
    self.mPinX_property.readFrom (dictionary: inDictionary, forKey: "mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.readFrom (dictionary: inDictionary, forKey: "mPinY")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey: "mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey: "mYName")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey: "mName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey: "mPinNameIsDisplayedInSchematics")
  //--- Atomic property: mXNumber
    self.mXNumber_property.readFrom (dictionary: inDictionary, forKey: "mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.readFrom (dictionary: inDictionary, forKey: "mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mNumberHorizontalAlignment")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mPinX\n"
    ioString += "mPinY\n"
    ioString += "mXName\n"
    ioString += "mYName\n"
    ioString += "mName\n"
    ioString += "mNameHorizontalAlignment\n"
    ioString += "mPinNameIsDisplayedInSchematics\n"
    ioString += "mXNumber\n"
    ioString += "mYNumber\n"
    ioString += "mNumberHorizontalAlignment\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mInstances\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mPinX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPinY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPinNameIsDisplayedInSchematics.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNumberHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mInstances.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mPinX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mPinX = value
      }
      if let range = inDictionary ["mPinY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mPinY = value
      }
      if let range = inDictionary ["mXName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXName = value
      }
      if let range = inDictionary ["mYName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYName = value
      }
      if let range = inDictionary ["mName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mName = value
      }
      if let range = inDictionary ["mNameHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.mNameHorizontalAlignment = value
      }
      if let range = inDictionary ["mPinNameIsDisplayedInSchematics"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mPinNameIsDisplayedInSchematics = value
      }
      if let range = inDictionary ["mXNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXNumber = value
      }
      if let range = inDictionary ["mYNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYNumber = value
      }
      if let range = inDictionary ["mNumberHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.mNumberHorizontalAlignment = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mInstances"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SymbolPinInstanceInDevice> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SymbolPinInstanceInDevice)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mInstances = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mInstances
    for managedObject in self.mInstances.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mInstances
    for managedObject in self.mInstances.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mNameHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.mNumberHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.mPinNameIsDisplayedInSchematics_property.signature ())
    crc.accumulateUInt32 (self.mPinX_property.signature ())
    crc.accumulateUInt32 (self.mPinY_property.signature ())
    crc.accumulateUInt32 (self.mXName_property.signature ())
    crc.accumulateUInt32 (self.mXNumber_property.signature ())
    crc.accumulateUInt32 (self.mYName_property.signature ())
    crc.accumulateUInt32 (self.mYNumber_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

