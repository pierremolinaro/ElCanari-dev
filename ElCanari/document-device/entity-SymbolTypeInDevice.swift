//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_mTypeName : AnyObject {
  var mTypeName : String { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_mVersion : AnyObject {
  var mVersion : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_mFileData : AnyObject {
  var mFileData : Data { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_mStrokeBezierPath : AnyObject {
  var mStrokeBezierPath : NSBezierPath { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_mFilledBezierPath : AnyObject {
  var mFilledBezierPath : NSBezierPath { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_versionString : AnyObject {
  var versionString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_instanceCount : AnyObject {
  var instanceCount : Int? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_documentSize : AnyObject {
  var documentSize : Int? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol SymbolTypeInDevice_pinNameShape : AnyObject {
  var pinNameShape : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: SymbolTypeInDevice
//--------------------------------------------------------------------------------------------------

final class SymbolTypeInDevice : EBManagedObject,
         SymbolTypeInDevice_mTypeName,
         SymbolTypeInDevice_mVersion,
         SymbolTypeInDevice_mFileData,
         SymbolTypeInDevice_mStrokeBezierPath,
         SymbolTypeInDevice_mFilledBezierPath,
         SymbolTypeInDevice_versionString,
         SymbolTypeInDevice_instanceCount,
         SymbolTypeInDevice_documentSize,
         SymbolTypeInDevice_pinNameShape {

  //································································································
  //   To many property: mInstances
  //································································································

  final let mInstances_property = StoredArrayOf_SymbolInstanceInDevice (usedForSignature: false, key: "mInstances")

  //································································································

  final var mInstances : EBReferenceArray <SymbolInstanceInDevice> {
    get { return self.mInstances_property.propval }
  }

  //································································································
  //   Atomic property: mTypeName
  //································································································

  final let mTypeName_property : EBStoredProperty_String

  //································································································

  final var mTypeName : String {
    get { return self.mTypeName_property.propval }
    set { self.mTypeName_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mVersion
  //································································································

  final let mVersion_property : EBStoredProperty_Int

  //································································································

  final var mVersion : Int {
    get { return self.mVersion_property.propval }
    set { self.mVersion_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mFileData
  //································································································

  final let mFileData_property : EBStoredProperty_Data

  //································································································

  final var mFileData : Data {
    get { return self.mFileData_property.propval }
    set { self.mFileData_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mStrokeBezierPath
  //································································································

  final let mStrokeBezierPath_property : EBStoredProperty_NSBezierPath

  //································································································

  final var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mFilledBezierPath
  //································································································

  final let mFilledBezierPath_property : EBStoredProperty_NSBezierPath

  //································································································

  final var mFilledBezierPath : NSBezierPath {
    get { return self.mFilledBezierPath_property.propval }
    set { self.mFilledBezierPath_property.setProp (newValue) }
  }

  //································································································
  //   To many property: mPinTypes
  //································································································

  final let mPinTypes_property = StoredArrayOf_SymbolPinTypeInDevice (usedForSignature: true, key: "mPinTypes")

  //································································································

  final var mPinTypes : EBReferenceArray <SymbolPinTypeInDevice> {
    get { return self.mPinTypes_property.propval }
    set { self.mPinTypes_property.setProp (newValue) }
  }

  //································································································
  //   Transient property: versionString
  //································································································

  final let versionString_property = EBTransientProperty <String> ()

  //································································································

  final var versionString : String? {
    return self.versionString_property.optionalValue
  }

  //································································································
  //   Transient property: instanceCount
  //································································································

  final let instanceCount_property = EBTransientProperty <Int> ()

  //································································································

  final var instanceCount : Int? {
    return self.instanceCount_property.optionalValue
  }

  //································································································
  //   Transient property: documentSize
  //································································································

  final let documentSize_property = EBTransientProperty <Int> ()

  //································································································

  final var documentSize : Int? {
    return self.documentSize_property.optionalValue
  }

  //································································································
  //   Transient property: pinNameShape
  //································································································

  final let pinNameShape_property = EBTransientProperty <EBShape> ()

  //································································································

  final var pinNameShape : EBShape? {
    return self.pinNameShape_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mTypeName")
    self.mVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mVersion")
    self.mFileData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: inUndoManager, key: "mFileData")
    self.mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath (), undoManager: inUndoManager, key: "mStrokeBezierPath")
    self.mFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath (), undoManager: inUndoManager, key: "mFilledBezierPath")
    super.init (inUndoManager)
  //--- To many property: mInstances (has opposite relationship)
    self.mInstances_property.undoManager = inUndoManager
    self.mInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mType_property.setProp (me) } },
      resetter: { inObject in inObject.mType_property.setProp (nil) }
    )
  //--- To many property: mPinTypes (no option)
    self.mPinTypes_property.undoManager = inUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mVersion_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolTypeInDevice_versionString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.startsBeingObserved (by: self.versionString_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mInstances_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolTypeInDevice_instanceCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mInstances_property.startsBeingObserved (by: self.instanceCount_property)
  //--- Atomic property: documentSize
    self.documentSize_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFileData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolTypeInDevice_documentSize (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFileData_property.startsBeingObserved (by: self.documentSize_property)
  //--- Atomic property: pinNameShape
    self.pinNameShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPinTypes_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SymbolTypeInDevice_pinNameShape (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPinTypes_property.toMany_nameShape_StartsBeingObserved (by: self.pinNameShape_property)
  //--- Install undoers and opposite setter for relationships
    self.mInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mType_property.setProp (me) } },
      resetter: { inObject in inObject.mType_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: self)
    self.mFilledBezierPath_property.setSignatureObserver (observer: self)
    self.mPinTypes_property.setSignatureObserver (observer: self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: self)
    self.mTypeName_property.setSignatureObserver (observer: self)
    self.mVersion_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.mFileData_property.signature ())
    crc.accumulate (u32: self.mFilledBezierPath_property.signature ())
    crc.accumulate (u32: self.mPinTypes_property.signature ())
    crc.accumulate (u32: self.mStrokeBezierPath_property.signature ())
    crc.accumulate (u32: self.mTypeName_property.signature ())
    crc.accumulate (u32: self.mVersion_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

