//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutDeviceDocument symbolTypeSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutDeviceDocument_symbolTypeSelection : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: documentSize
  //····················································································································

  var documentSize_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: mFileData
  //····················································································································

  var mFileData_property = EBPropertyProxy_Data ()

  //····················································································································
  //   Selection observable property: mFilledBezierPath
  //····················································································································

  var mFilledBezierPath_property = EBPropertyProxy_NSBezierPath ()

  //····················································································································
  //   Selection observable property: mInstances
  //····················································································································

  //····················································································································
  //   Selection observable property: mPinTypes
  //····················································································································

  //····················································································································
  //   Selection observable property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBPropertyProxy_NSBezierPath ()

  //····················································································································
  //   Selection observable property: mTypeName
  //····················································································································

  var mTypeName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: mVersion
  //····················································································································

  var mVersion_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: pinNameShape
  //····················································································································

  var pinNameShape_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_SymbolTypeInDevice? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    self.mModel = model
    self.bind_property_documentSize (model: model)
    self.bind_property_instanceCount (model: model)
    self.bind_property_mFileData (model: model)
    self.bind_property_mFilledBezierPath (model: model)
    self.bind_property_mStrokeBezierPath (model: model)
    self.bind_property_mTypeName (model: model)
    self.bind_property_mVersion (model: model)
    self.bind_property_pinNameShape (model: model)
    self.bind_property_versionString (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
  //--- documentSize
    self.documentSize_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_documentSize (self.documentSize_property)
  //--- instanceCount
    self.instanceCount_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_instanceCount (self.instanceCount_property)
  //--- mFileData
    self.mFileData_property.mReadModelFunction = nil 
    self.mFileData_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mFileData (self.mFileData_property)
  //--- mFilledBezierPath
    self.mFilledBezierPath_property.mReadModelFunction = nil 
    self.mFilledBezierPath_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mFilledBezierPath (self.mFilledBezierPath_property)
  //--- mStrokeBezierPath
    self.mStrokeBezierPath_property.mReadModelFunction = nil 
    self.mStrokeBezierPath_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mStrokeBezierPath (self.mStrokeBezierPath_property)
  //--- mTypeName
    self.mTypeName_property.mReadModelFunction = nil 
    self.mTypeName_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mTypeName (self.mTypeName_property)
  //--- mVersion
    self.mVersion_property.mReadModelFunction = nil 
    self.mVersion_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mVersion (self.mVersion_property)
  //--- pinNameShape
    self.pinNameShape_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_pinNameShape (self.pinNameShape_property)
  //--- versionString
    self.versionString_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_versionString (self.versionString_property)
  //---
    self.mModel = nil
  } */

  //···················································································································*

  private final func bind_property_documentSize (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_documentSize (self.documentSize_property)
    self.documentSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.documentSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceCount (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_instanceCount (self.instanceCount_property)
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_mFileData (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_mFileData (self.mFileData_property)
    self.mFileData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Data> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mFileData_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mFileData_property.mWriteModelFunction = { [weak self] (inValue : Data) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mFileData_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mFilledBezierPath (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_mFilledBezierPath (self.mFilledBezierPath_property)
    self.mFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mFilledBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mFilledBezierPath_property.mWriteModelFunction = { [weak self] (inValue : NSBezierPath) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mFilledBezierPath_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mStrokeBezierPath (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_mStrokeBezierPath (self.mStrokeBezierPath_property)
    self.mStrokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mStrokeBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mStrokeBezierPath_property.mWriteModelFunction = { [weak self] (inValue : NSBezierPath) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mStrokeBezierPath_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mTypeName (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_mTypeName (self.mTypeName_property)
    self.mTypeName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mTypeName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mTypeName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mTypeName_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mVersion (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_mVersion (self.mVersion_property)
    self.mVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mVersion_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mVersion_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_pinNameShape (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_pinNameShape (self.pinNameShape_property)
    self.pinNameShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinNameShape_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_versionString (model : ReadOnlyArrayOf_SymbolTypeInDevice) {
    model.addEBObserverOf_versionString (self.versionString_property)
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.versionString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

