//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceRoot : ReadOnlyAbstractArrayProperty <DeviceRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceRoot>,
                                          addedSet inAddedSet : EBReferenceSet <DeviceRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mTitle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mImageData_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPrefix_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mComments_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mShowPackages_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSymbolDisplayZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSymbolDisplayHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSymbolDisplayVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_imageIsValid_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unconnectedPins_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inconsistentSymbolNameSetMessage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolNameAreConsistent_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolTypeNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unconnectedPads_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_assignedPadProxies_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mTitle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mImageData_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPrefix_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mComments_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mShowPackages_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mShowPackageBackPads_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSymbolDisplayZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSymbolDisplayHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSymbolDisplayVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_imageIsValid_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unconnectedPins_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inconsistentSymbolNameSetMessage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolNameAreConsistent_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolTypeNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unconnectedPads_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_assignedPadProxies_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private final var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mSelectedPageIndex.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
          managedObject.mSelectedPageIndex_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTitle' stored property
  //····················································································································

  private final var mObserversOf_mTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTitle_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mTitle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
          managedObject.mTitle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTitle_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mImageData' stored property
  //····················································································································

  private final var mObserversOf_mImageData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mImageData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mImageData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mImageData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mImageData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mImageData_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mImageData.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
          managedObject.mImageData_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mImageData_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mImageData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private final var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mPrefix.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
          managedObject.mPrefix_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComments' stored property
  //····················································································································

  private final var mObserversOf_mComments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComments_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mComments.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
          managedObject.mComments_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComments_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mComments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  private final var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mPackageDisplayZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
          managedObject.mPackageDisplayZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mPackageDisplayHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
          managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mPackageDisplayVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
          managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  private final var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackages_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mShowPackages.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
          managedObject.mShowPackages_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackages_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mShowPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  private final var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mShowPackagePadNumbers.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
          managedObject.mShowPackagePadNumbers_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  private final var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mShowPackageFrontPads.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
          managedObject.mShowPackageFrontPads_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  private final var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageBackPads_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mShowPackageBackPads.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
          managedObject.mShowPackageBackPads_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mShowPackageBackPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayZoom' stored property
  //····················································································································

  private final var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayZoom_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mSymbolDisplayZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
          managedObject.mSymbolDisplayZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayZoom_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSymbolDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mSymbolDisplayHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
          managedObject.mSymbolDisplayHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSymbolDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    if !self.mObserversOf_mSymbolDisplayVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
          managedObject.mSymbolDisplayVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSymbolDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  private final var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageIsValid.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageIsValid.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageIsValid_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageIsValid_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  private final var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPins_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPins_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  private final var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  private final var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentSymbolNameSetMessage_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentSymbolNameSetMessage_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  private final var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolNameAreConsistent' transient property
  //····················································································································

  private final var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameAreConsistent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameAreConsistent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolNameAreConsistent_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolNameAreConsistent_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeNames' transient property
  //····················································································································

  private final var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeNames_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeNames_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPads' transient property
  //····················································································································

  private final var mObserversOf_unconnectedPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPads_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPads_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'assignedPadProxies' transient property
  //····················································································································

  private final var mObserversOf_assignedPadProxies = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.assignedPadProxies_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.assignedPadProxies_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_assignedPadProxies_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_assignedPadProxies_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : DeviceRoot, _ right : DeviceRoot) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_DeviceRoot? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DeviceRoot,
                        sortCallback inSortCallBack : Optional < (_ left : DeviceRoot, _ right : DeviceRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <DeviceRoot>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DeviceRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_DeviceRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <DeviceRoot> ()
      for superObject in newModelArray.values {
        if let object = superObject as? DeviceRoot {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DeviceRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <DeviceRoot>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DeviceRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <DeviceRoot>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <DeviceRoot> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <DeviceRoot>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [DeviceRoot] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceRoot> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <DeviceRoot>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceRoot>,
                                 addedSet inAddedSet : EBReferenceSet <DeviceRoot>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [DeviceRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DeviceRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <DeviceRoot> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : DeviceRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : DeviceRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot {

  //····················································································································

  override var selection : EBSelection < [DeviceRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DeviceRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <DeviceRoot> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : DeviceRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_DeviceRoot : StoredArrayOf_DeviceRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <DeviceRoot> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceRoot") as? DeviceRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mSelectedPageIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mTitle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mImageData (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPrefix (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mComments (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPackageDisplayZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPackageDisplayHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPackageDisplayVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mShowPackages (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mShowPackagePadNumbers (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mShowPackageFrontPads (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mShowPackageBackPads (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSymbolDisplayZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSymbolDisplayHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSymbolDisplayVerticalFlip (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

