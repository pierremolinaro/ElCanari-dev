//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageInDevice : ReadOnlyAbstractArrayProperty <PackageInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mFileData { // Stored property
        managedObject.mFileData_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mName { // Stored property
        managedObject.mName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVersion { // Stored property
        managedObject.mVersion_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mStrokeBezierPath { // Stored property
        managedObject.mStrokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_versionString { // Transient property
        managedObject.versionString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_documentSize { // Transient property
        managedObject.documentSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontSidePadFilledBezierPathArray { // Transient property
        managedObject.frontSidePadFilledBezierPathArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backSidePadFilledBezierPathArray { // Transient property
        managedObject.backSidePadFilledBezierPathArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameSet { // Transient property
        managedObject.padNameSet_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mFileData { // Stored property
        managedObject.mFileData_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mName { // Stored property
        managedObject.mName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVersion { // Stored property
        managedObject.mVersion_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mStrokeBezierPath { // Stored property
        managedObject.mStrokeBezierPath_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_versionString { // Transient property
        managedObject.versionString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_documentSize { // Transient property
        managedObject.documentSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontSidePadFilledBezierPathArray { // Transient property
        managedObject.frontSidePadFilledBezierPathArray_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backSidePadFilledBezierPathArray { // Transient property
        managedObject.backSidePadFilledBezierPathArray_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameSet { // Transient property
        managedObject.padNameSet_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private final var mObserversOf_mFileData : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mFileData_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mFileData {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mFileData_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mFileData = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mFileData_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mFileData?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private final var mObserversOf_mName : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mName {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mName = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mName?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private final var mObserversOf_mVersion : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mVersion_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mVersion {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mVersion_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mVersion = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mVersion_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mVersion?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private final var mObserversOf_mStrokeBezierPath : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mStrokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mStrokeBezierPath {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mStrokeBezierPath_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mStrokeBezierPath = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mStrokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mStrokeBezierPath?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var mObserversOf_versionString : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_versionString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_versionString {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.versionString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_versionString = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_versionString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_versionString?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'documentSize' transient property
  //····················································································································

  private final var mObserversOf_documentSize : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_documentSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_documentSize {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.documentSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_documentSize = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_documentSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_documentSize?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'frontSidePadFilledBezierPathArray' transient property
  //····················································································································

  private final var mObserversOf_frontSidePadFilledBezierPathArray : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_frontSidePadFilledBezierPathArray_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_frontSidePadFilledBezierPathArray {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontSidePadFilledBezierPathArray_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_frontSidePadFilledBezierPathArray = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_frontSidePadFilledBezierPathArray_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontSidePadFilledBezierPathArray?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'backSidePadFilledBezierPathArray' transient property
  //····················································································································

  private final var mObserversOf_backSidePadFilledBezierPathArray : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_backSidePadFilledBezierPathArray_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_backSidePadFilledBezierPathArray {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backSidePadFilledBezierPathArray_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_backSidePadFilledBezierPathArray = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_backSidePadFilledBezierPathArray_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backSidePadFilledBezierPathArray?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padNameSet' transient property
  //····················································································································

  private final var mObserversOf_padNameSet : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padNameSet_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padNameSet {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNameSet_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padNameSet = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_padNameSet_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNameSet?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : PackageInDevice, _ right : PackageInDevice) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_PackageInDevice? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageInDevice,
                        sortCallback inSortCallBack : Optional < (_ left : PackageInDevice, _ right : PackageInDevice) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <PackageInDevice>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageInDevice] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.propval.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageInDevice> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_PackageInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PackageInDevice> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PackageInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <PackageInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! PackageInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PackageInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PackageInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <PackageInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackageInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackageInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <PackageInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackageInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackageInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

