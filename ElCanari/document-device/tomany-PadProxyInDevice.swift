//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PadProxyInDevice : ReadOnlyAbstractArrayProperty <PadProxyInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PadProxyInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <PadProxyInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mPinInstanceName { // Stored property
        managedObject.mPinInstanceName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadName { // Stored property
        managedObject.mPadName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsNC { // Stored property
        managedObject.mIsNC_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_isConnected { // Transient property
        managedObject.isConnected_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolName { // Transient property
        managedObject.symbolName_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mPinInstanceName { // Stored property
        managedObject.mPinInstanceName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadName { // Stored property
        managedObject.mPadName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsNC { // Stored property
        managedObject.mIsNC_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_isConnected { // Transient property
        managedObject.isConnected_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolName { // Transient property
        managedObject.symbolName_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinInstanceName' stored property
  //····················································································································

  private final var mObserversOf_mPinInstanceName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPinInstanceName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPinInstanceName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPinInstanceName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mPinInstanceName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPinInstanceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinInstanceName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mPadName' stored property
  //····················································································································

  private final var mObserversOf_mPadName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPadName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPadName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPadName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mPadName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPadName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPadName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsNC' stored property
  //····················································································································

  private final var mObserversOf_mIsNC : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mIsNC_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mIsNC {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsNC_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsNC = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mIsNC_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsNC?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private final var mObserversOf_isConnected : EBObservedObserver? = nil

  //····················································································································

  final func toMany_isConnected_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_isConnected {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.isConnected_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_isConnected = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_isConnected_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_isConnected?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'symbolName' transient property
  //····················································································································

  private final var mObserversOf_symbolName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_symbolName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_symbolName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.symbolName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_symbolName = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_symbolName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_symbolName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PadProxyInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_PadProxyInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PadProxyInDevice : ReadOnlyArrayOf_PadProxyInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PadProxyInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PadProxyInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PadProxyInDevice : ReadWriteArrayOf_PadProxyInDevice, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PadProxyInDevice> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PadProxyInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <PadProxyInDevice> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! PadProxyInDevice)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PadProxyInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PadProxyInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PadProxyInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PadProxyInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PadProxyInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PadProxyInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <PadProxyInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PadProxyInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PadProxyInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <PadProxyInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PadProxyInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PadProxyInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PadProxyInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

