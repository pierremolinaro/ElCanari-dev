//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SlavePadInDevice : ReadOnlyAbstractArrayProperty <SlavePadInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SlavePadInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <SlavePadInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mCenterX_property.stopsBeingObserved (by: self.mObserversOf_mCenterX) // Stored property
      managedObject.mCenterY_property.stopsBeingObserved (by: self.mObserversOf_mCenterY) // Stored property
      managedObject.mWidth_property.stopsBeingObserved (by: self.mObserversOf_mWidth) // Stored property
      managedObject.mHeight_property.stopsBeingObserved (by: self.mObserversOf_mHeight) // Stored property
      managedObject.mHoleWidth_property.stopsBeingObserved (by: self.mObserversOf_mHoleWidth) // Stored property
      managedObject.mHoleHeight_property.stopsBeingObserved (by: self.mObserversOf_mHoleHeight) // Stored property
      managedObject.mShape_property.stopsBeingObserved (by: self.mObserversOf_mShape) // Stored property
      managedObject.mStyle_property.stopsBeingObserved (by: self.mObserversOf_mStyle) // Stored property
      managedObject.frontSideFilledBezierPath_property.stopsBeingObserved (by: self.mObserversOf_frontSideFilledBezierPath) // Transient property
      managedObject.backSideFilledBezierPath_property.stopsBeingObserved (by: self.mObserversOf_backSideFilledBezierPath) // Transient property
      managedObject.padNumberDisplay_property.stopsBeingObserved (by: self.mObserversOf_padNumberDisplay) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mCenterX_property.startsToBeObserved (by: self.mObserversOf_mCenterX) // Stored property
      managedObject.mCenterY_property.startsToBeObserved (by: self.mObserversOf_mCenterY) // Stored property
      managedObject.mWidth_property.startsToBeObserved (by: self.mObserversOf_mWidth) // Stored property
      managedObject.mHeight_property.startsToBeObserved (by: self.mObserversOf_mHeight) // Stored property
      managedObject.mHoleWidth_property.startsToBeObserved (by: self.mObserversOf_mHoleWidth) // Stored property
      managedObject.mHoleHeight_property.startsToBeObserved (by: self.mObserversOf_mHoleHeight) // Stored property
      managedObject.mShape_property.startsToBeObserved (by: self.mObserversOf_mShape) // Stored property
      managedObject.mStyle_property.startsToBeObserved (by: self.mObserversOf_mStyle) // Stored property
      managedObject.frontSideFilledBezierPath_property.startsToBeObserved (by: self.mObserversOf_frontSideFilledBezierPath) // Transient property
      managedObject.backSideFilledBezierPath_property.startsToBeObserved (by: self.mObserversOf_backSideFilledBezierPath) // Transient property
      managedObject.padNumberDisplay_property.startsToBeObserved (by: self.mObserversOf_padNumberDisplay) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  private final var mObserversOf_mCenterX = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCenterX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCenterX.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCenterX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCenterX.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCenterX_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mCenterX_property.startsToBeObserved (by: self.mObserversOf_mCenterX)
    }*/
    /* if !self.mObserversOf_mCenterX.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCenterX.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCenterX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCenterX.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCenterX_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mCenterX_property.stopsBeingObserved (by: self.mObserversOf_mCenterX)
    }
    for entry in self.mObserversOf_mCenterX.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCenterX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCenterX.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  private final var mObserversOf_mCenterY = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCenterY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCenterY.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCenterY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCenterY.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCenterY_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mCenterY_property.startsToBeObserved (by: self.mObserversOf_mCenterY)
    }*/
    /* if !self.mObserversOf_mCenterY.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCenterY.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCenterY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCenterY.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCenterY_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mCenterY_property.stopsBeingObserved (by: self.mObserversOf_mCenterY)
    }
    for entry in self.mObserversOf_mCenterY.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCenterY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCenterY.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  private final var mObserversOf_mWidth = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mWidth.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mWidth.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mWidth_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mWidth_property.startsToBeObserved (by: self.mObserversOf_mWidth)
    }*/
    /* if !self.mObserversOf_mWidth.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mWidth.values () {
          if let observer = entry.possibleObserver {
            managedObject.mWidth_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mWidth.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mWidth_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mWidth_property.stopsBeingObserved (by: self.mObserversOf_mWidth)
    }
    for entry in self.mObserversOf_mWidth.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mWidth_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mWidth.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mHeight' stored property
  //····················································································································

  private final var mObserversOf_mHeight = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mHeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mHeight.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHeight_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mHeight.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHeight_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mHeight_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mHeight_property.startsToBeObserved (by: self.mObserversOf_mHeight)
    }*/
    /* if !self.mObserversOf_mHeight.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mHeight.values () {
          if let observer = entry.possibleObserver {
            managedObject.mHeight_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mHeight.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mHeight_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mHeight_property.stopsBeingObserved (by: self.mObserversOf_mHeight)
    }
    for entry in self.mObserversOf_mHeight.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mHeight_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mHeight.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mHoleWidth' stored property
  //····················································································································

  private final var mObserversOf_mHoleWidth = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mHoleWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mHoleWidth.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleWidth_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mHoleWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mHoleWidth.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleWidth_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mHoleWidth_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mHoleWidth_property.startsToBeObserved (by: self.mObserversOf_mHoleWidth)
    }*/
    /* if !self.mObserversOf_mHoleWidth.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mHoleWidth.values () {
          if let observer = entry.possibleObserver {
            managedObject.mHoleWidth_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mHoleWidth.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mHoleWidth_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mHoleWidth_property.stopsBeingObserved (by: self.mObserversOf_mHoleWidth)
    }
    for entry in self.mObserversOf_mHoleWidth.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mHoleWidth_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mHoleWidth.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mHoleHeight' stored property
  //····················································································································

  private final var mObserversOf_mHoleHeight = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mHoleHeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mHoleHeight.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleHeight_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mHoleHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mHoleHeight.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleHeight_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mHoleHeight_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mHoleHeight_property.startsToBeObserved (by: self.mObserversOf_mHoleHeight)
    }*/
    /* if !self.mObserversOf_mHoleHeight.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mHoleHeight.values () {
          if let observer = entry.possibleObserver {
            managedObject.mHoleHeight_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mHoleHeight.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mHoleHeight_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mHoleHeight_property.stopsBeingObserved (by: self.mObserversOf_mHoleHeight)
    }
    for entry in self.mObserversOf_mHoleHeight.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mHoleHeight_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mHoleHeight.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private final var mObserversOf_mShape = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mShape_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mShape.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mShape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mShape.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mShape_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mShape_property.startsToBeObserved (by: self.mObserversOf_mShape)
    }*/
    /* if !self.mObserversOf_mShape.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mShape.values () {
          if let observer = entry.possibleObserver {
            managedObject.mShape_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mShape.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mShape_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mShape_property.stopsBeingObserved (by: self.mObserversOf_mShape)
    }
    for entry in self.mObserversOf_mShape.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mShape_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mShape.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mStyle' stored property
  //····················································································································

  private final var mObserversOf_mStyle = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mStyle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mStyle.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStyle_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mStyle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mStyle.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStyle_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mStyle_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    /* for managedObject in inSet.values {
      managedObject.mStyle_property.startsToBeObserved (by: self.mObserversOf_mStyle)
    }*/
    /* if !self.mObserversOf_mStyle.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mStyle.values () {
          if let observer = entry.possibleObserver {
            managedObject.mStyle_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mStyle.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mStyle_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      managedObject.mStyle_property.stopsBeingObserved (by: self.mObserversOf_mStyle)
    }
    for entry in self.mObserversOf_mStyle.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mStyle_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mStyle.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'frontSideFilledBezierPath' transient property
  //····················································································································

  private final var mObserversOf_frontSideFilledBezierPath = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_frontSideFilledBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_frontSideFilledBezierPath.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPath_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_frontSideFilledBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_frontSideFilledBezierPath.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPath_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_frontSideFilledBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_frontSideFilledBezierPath.values () {
        if let observer = entry.possibleObserver {
          managedObject.frontSideFilledBezierPath_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_frontSideFilledBezierPath.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_frontSideFilledBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_frontSideFilledBezierPath.values () {
        if let observer = entry.possibleObserver {
          managedObject.frontSideFilledBezierPath_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_frontSideFilledBezierPath.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'backSideFilledBezierPath' transient property
  //····················································································································

  private final var mObserversOf_backSideFilledBezierPath = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_backSideFilledBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_backSideFilledBezierPath.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPath_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_backSideFilledBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_backSideFilledBezierPath.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPath_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_backSideFilledBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_backSideFilledBezierPath.values () {
        if let observer = entry.possibleObserver {
          managedObject.backSideFilledBezierPath_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_backSideFilledBezierPath.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_backSideFilledBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_backSideFilledBezierPath.values () {
        if let observer = entry.possibleObserver {
          managedObject.backSideFilledBezierPath_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_backSideFilledBezierPath.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padNumberDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padNumberDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNumberDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNumberDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padNumberDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNumberDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNumberDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padNumberDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SlavePadInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SlavePadInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SlavePadInDevice : ReadOnlyArrayOf_SlavePadInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SlavePadInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SlavePadInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SlavePadInDevice : ReadWriteArrayOf_SlavePadInDevice, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SlavePadInDevice> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SlavePadInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <SlavePadInDevice> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! SlavePadInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SlavePadInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SlavePadInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SlavePadInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SlavePadInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SlavePadInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SlavePadInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <SlavePadInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SlavePadInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SlavePadInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <SlavePadInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SlavePadInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SlavePadInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SlavePadInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

