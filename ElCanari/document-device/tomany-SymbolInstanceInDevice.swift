//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolInstanceInDevice : ReadOnlyAbstractArrayProperty <SymbolInstanceInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolInstanceInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolInstanceInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mInstanceName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_symbolQualifiedName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_pinSymbolQualifiedNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unconnectedPins_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mInstanceName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_symbolQualifiedName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolTypeName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_pinSymbolQualifiedNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unconnectedPins_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mInstanceName' stored property
  //····················································································································

  private final var mObserversOf_mInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mInstanceName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mInstanceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstanceName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mInstanceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mInstanceName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    if !self.mObserversOf_mInstanceName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mInstanceName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mInstanceName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mInstanceName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mInstanceName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for (_, entry) in self.mObserversOf_mInstanceName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mInstanceName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mInstanceName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolQualifiedName' transient property
  //····················································································································

  private final var mObserversOf_symbolQualifiedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolQualifiedName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolQualifiedName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolQualifiedName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolQualifiedName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolQualifiedName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolQualifiedName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolQualifiedName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolQualifiedName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolQualifiedName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_symbolQualifiedName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolQualifiedName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolQualifiedName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolQualifiedName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_symbolQualifiedName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeName' transient property
  //····················································································································

  private final var mObserversOf_symbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolTypeName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolTypeName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolTypeName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_symbolTypeName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolTypeName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolTypeName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_symbolTypeName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'pinSymbolQualifiedNames' transient property
  //····················································································································

  private final var mObserversOf_pinSymbolQualifiedNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinSymbolQualifiedNames (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinSymbolQualifiedNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinSymbolQualifiedNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinSymbolQualifiedNames (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinSymbolQualifiedNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinSymbolQualifiedNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinSymbolQualifiedNames_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinSymbolQualifiedNames.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.pinSymbolQualifiedNames_property.addEBObserver (observer)
        }else{
          self.mObserversOf_pinSymbolQualifiedNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinSymbolQualifiedNames_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinSymbolQualifiedNames.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.pinSymbolQualifiedNames_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_pinSymbolQualifiedNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  private final var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPins_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_unconnectedPins.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.unconnectedPins_property.addEBObserver (observer)
        }else{
          self.mObserversOf_unconnectedPins.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPins_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_unconnectedPins.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.unconnectedPins_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_unconnectedPins.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SymbolInstanceInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SymbolInstanceInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolInstanceInDevice : ReadOnlyArrayOf_SymbolInstanceInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SymbolInstanceInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SymbolInstanceInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SymbolInstanceInDevice : ReadWriteArrayOf_SymbolInstanceInDevice, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SymbolInstanceInDevice> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SymbolInstanceInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  final func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolInstanceInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolInstanceInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolInstanceInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SymbolInstanceInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SymbolInstanceInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolInstanceInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <SymbolInstanceInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SymbolInstanceInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolInstanceInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <SymbolInstanceInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SymbolInstanceInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SymbolInstanceInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_SymbolInstanceInDevice : ReadWriteArrayOf_SymbolInstanceInDevice {

  //····················································································································

  override var selection : EBSelection < [SymbolInstanceInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolInstanceInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <SymbolInstanceInDevice> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : SymbolInstanceInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : SymbolInstanceInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SymbolInstanceInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

