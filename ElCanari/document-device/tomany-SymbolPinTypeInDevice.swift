//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPinTypeInDevice : ReadOnlyAbstractArrayProperty <SymbolPinTypeInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPinTypeInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mPinX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPinY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mXName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mYName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mXNumber_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mYNumber_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_nameShape_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mPinX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPinY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mXName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mYName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mXNumber_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mYNumber_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_nameShape_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private final var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinX_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mPinX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPinX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mPinX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPinX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinX_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mPinX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPinX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPinX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private final var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinY_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mPinY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPinY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mPinY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPinY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinY_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mPinY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPinY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPinY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mXName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mXName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mXName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mXName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mXName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mXName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mXName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mYName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mYName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mYName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mYName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mYName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mYName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mYName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private final var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mNameHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNameHorizontalAlignment.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNameHorizontalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mNameHorizontalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mNameHorizontalAlignment.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNameHorizontalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mNameHorizontalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private final var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mPinNameIsDisplayedInSchematics.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPinNameIsDisplayedInSchematics.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPinNameIsDisplayedInSchematics.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mPinNameIsDisplayedInSchematics.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPinNameIsDisplayedInSchematics.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private final var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXNumber_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mXNumber.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mXNumber.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mXNumber_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mXNumber.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXNumber_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mXNumber.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mXNumber_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mXNumber.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private final var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYNumber_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mYNumber.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mYNumber.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mYNumber_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mYNumber.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYNumber_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mYNumber.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mYNumber_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mYNumber.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    if !self.mObserversOf_mNumberHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNumberHorizontalAlignment.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNumberHorizontalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mNumberHorizontalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for (_, entry) in self.mObserversOf_mNumberHorizontalAlignment.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNumberHorizontalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mNumberHorizontalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'nameShape' transient property
  //····················································································································

  private final var mObserversOf_nameShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameShape (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameShape (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameShape_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_nameShape.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.nameShape_property.addEBObserver (observer)
        }else{
          self.mObserversOf_nameShape.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameShape_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_nameShape.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.nameShape_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_nameShape.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPinTypeInDevice : ReadOnlyArrayOf_SymbolPinTypeInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SymbolPinTypeInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SymbolPinTypeInDevice : ReadWriteArrayOf_SymbolPinTypeInDevice, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  final func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SymbolPinTypeInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPinTypeInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SymbolPinTypeInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolPinTypeInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <SymbolPinTypeInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SymbolPinTypeInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SymbolPinTypeInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StandAloneArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

