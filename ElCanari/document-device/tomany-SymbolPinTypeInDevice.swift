//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPinTypeInDevice : EBReadOnlyAbstractArrayProperty <SymbolPinTypeInDevice> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPinTypeInDevice>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mPinX { // Stored property
        managedObject.mPinX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinY { // Stored property
        managedObject.mPinY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXName { // Stored property
        managedObject.mXName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYName { // Stored property
        managedObject.mYName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mName { // Stored property
        managedObject.mName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameHorizontalAlignment { // Stored property
        managedObject.mNameHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinNameIsDisplayedInSchematics { // Stored property
        managedObject.mPinNameIsDisplayedInSchematics_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXNumber { // Stored property
        managedObject.mXNumber_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYNumber { // Stored property
        managedObject.mYNumber_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNumberHorizontalAlignment { // Stored property
        managedObject.mNumberHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameShape { // Transient property
        managedObject.nameShape_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mPinX { // Stored property
        managedObject.mPinX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinY { // Stored property
        managedObject.mPinY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXName { // Stored property
        managedObject.mXName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYName { // Stored property
        managedObject.mYName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mName { // Stored property
        managedObject.mName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameHorizontalAlignment { // Stored property
        managedObject.mNameHorizontalAlignment_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinNameIsDisplayedInSchematics { // Stored property
        managedObject.mPinNameIsDisplayedInSchematics_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXNumber { // Stored property
        managedObject.mXNumber_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYNumber { // Stored property
        managedObject.mYNumber_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNumberHorizontalAlignment { // Stored property
        managedObject.mNumberHorizontalAlignment_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameShape { // Transient property
        managedObject.nameShape_property.startsBeingObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private final var mObserversOf_mPinX : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPinX_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPinX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPinX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPinX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPinX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private final var mObserversOf_mPinY : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPinY_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPinY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPinY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPinY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPinY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mObserversOf_mXName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mObserversOf_mYName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private final var mObserversOf_mName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNameHorizontalAlignment : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNameHorizontalAlignment_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNameHorizontalAlignment {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNameHorizontalAlignment_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNameHorizontalAlignment = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNameHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNameHorizontalAlignment?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private final var mObserversOf_mPinNameIsDisplayedInSchematics : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPinNameIsDisplayedInSchematics_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPinNameIsDisplayedInSchematics {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPinNameIsDisplayedInSchematics_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPinNameIsDisplayedInSchematics = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPinNameIsDisplayedInSchematics_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private final var mObserversOf_mXNumber : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXNumber_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXNumber {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXNumber_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXNumber = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXNumber_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXNumber?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private final var mObserversOf_mYNumber : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYNumber_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYNumber {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYNumber_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYNumber = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYNumber_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYNumber?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNumberHorizontalAlignment : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNumberHorizontalAlignment_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNumberHorizontalAlignment {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNumberHorizontalAlignment_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNumberHorizontalAlignment = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNumberHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNumberHorizontalAlignment?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'nameShape' transient property
  //····················································································································

  private final var mObserversOf_nameShape : EBObservedObserver? = nil

  //····················································································································

  final func toMany_nameShape_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_nameShape {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.nameShape_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_nameShape = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_nameShape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_nameShape?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPinTypeInDevice : ReadOnlyArrayOf_SymbolPinTypeInDevice {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SymbolPinTypeInDevice>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SymbolPinTypeInDevice : ReadWriteArrayOf_SymbolPinTypeInDevice, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SymbolPinTypeInDevice> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SymbolPinTypeInDevice)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <SymbolPinTypeInDevice> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! SymbolPinTypeInDevice)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SymbolPinTypeInDevice>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPinTypeInDevice>,
                                 addedSet inAddedSet : EBReferenceSet <SymbolPinTypeInDevice>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SymbolPinTypeInDevice] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolPinTypeInDevice>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <SymbolPinTypeInDevice> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SymbolPinTypeInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SymbolPinTypeInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolPinTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SymbolPinTypeInDevice is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

