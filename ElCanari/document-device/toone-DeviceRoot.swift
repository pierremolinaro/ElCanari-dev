//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_DeviceRoot : ReadOnlyAbstractObjectProperty <DeviceRoot> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSelectedPageIndex_property.removeEBObserver (self.mSelectedPageIndex_property) // Stored property
      oldValue.mSelectedSymbolInspectorIndex_property.removeEBObserver (self.mSelectedSymbolInspectorIndex_property) // Stored property
      oldValue.mSelectedPackageInspectorIndex_property.removeEBObserver (self.mSelectedPackageInspectorIndex_property) // Stored property
      oldValue.mTitle_property.removeEBObserver (self.mTitle_property) // Stored property
      oldValue.mImageData_property.removeEBObserver (self.mImageData_property) // Stored property
      oldValue.mPrefix_property.removeEBObserver (self.mPrefix_property) // Stored property
      oldValue.mComments_property.removeEBObserver (self.mComments_property) // Stored property
      oldValue.mPackageDisplayZoom_property.removeEBObserver (self.mPackageDisplayZoom_property) // Stored property
      oldValue.mPackageDisplayHorizontalFlip_property.removeEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
      oldValue.mPackageDisplayVerticalFlip_property.removeEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
      oldValue.mShowPackages_property.removeEBObserver (self.mShowPackages_property) // Stored property
      oldValue.mShowPackagePadNumbers_property.removeEBObserver (self.mShowPackagePadNumbers_property) // Stored property
      oldValue.mShowPackageFrontPads_property.removeEBObserver (self.mShowPackageFrontPads_property) // Stored property
      oldValue.mShowPackageBackPads_property.removeEBObserver (self.mShowPackageBackPads_property) // Stored property
      oldValue.mSymbolDisplayZoom_property.removeEBObserver (self.mSymbolDisplayZoom_property) // Stored property
      oldValue.imageIsValid_property.removeEBObserver (self.imageIsValid_property) // Transient property
      oldValue.unconnectedPins_property.removeEBObserver (self.unconnectedPins_property) // Transient property
      oldValue.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
      oldValue.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
      oldValue.packagePadNameSetsAreConsistent_property.removeEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
      oldValue.symbolNameAreConsistent_property.removeEBObserver (self.symbolNameAreConsistent_property) // Transient property
      oldValue.symbolTypeNames_property.removeEBObserver (self.symbolTypeNames_property) // Transient property
      oldValue.unconnectedPads_property.removeEBObserver (self.unconnectedPads_property) // Transient property
      oldValue.assignedPadProxies_property.removeEBObserver (self.assignedPadProxies_property) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mSelectedPageIndex_property.addEBObserver (self.mSelectedPageIndex_property) // Stored property
      newValue.mSelectedSymbolInspectorIndex_property.addEBObserver (self.mSelectedSymbolInspectorIndex_property) // Stored property
      newValue.mSelectedPackageInspectorIndex_property.addEBObserver (self.mSelectedPackageInspectorIndex_property) // Stored property
      newValue.mTitle_property.addEBObserver (self.mTitle_property) // Stored property
      newValue.mImageData_property.addEBObserver (self.mImageData_property) // Stored property
      newValue.mPrefix_property.addEBObserver (self.mPrefix_property) // Stored property
      newValue.mComments_property.addEBObserver (self.mComments_property) // Stored property
      newValue.mPackageDisplayZoom_property.addEBObserver (self.mPackageDisplayZoom_property) // Stored property
      newValue.mPackageDisplayHorizontalFlip_property.addEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
      newValue.mPackageDisplayVerticalFlip_property.addEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
      newValue.mShowPackages_property.addEBObserver (self.mShowPackages_property) // Stored property
      newValue.mShowPackagePadNumbers_property.addEBObserver (self.mShowPackagePadNumbers_property) // Stored property
      newValue.mShowPackageFrontPads_property.addEBObserver (self.mShowPackageFrontPads_property) // Stored property
      newValue.mShowPackageBackPads_property.addEBObserver (self.mShowPackageBackPads_property) // Stored property
      newValue.mSymbolDisplayZoom_property.addEBObserver (self.mSymbolDisplayZoom_property) // Stored property
      newValue.imageIsValid_property.addEBObserver (self.imageIsValid_property) // Transient property
      newValue.unconnectedPins_property.addEBObserver (self.unconnectedPins_property) // Transient property
      newValue.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
      newValue.inconsistentSymbolNameSetMessage_property.addEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
      newValue.packagePadNameSetsAreConsistent_property.addEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
      newValue.symbolNameAreConsistent_property.addEBObserver (self.symbolNameAreConsistent_property) // Transient property
      newValue.symbolTypeNames_property.addEBObserver (self.symbolTypeNames_property) // Transient property
      newValue.unconnectedPads_property.addEBObserver (self.unconnectedPads_property) // Transient property
      newValue.assignedPadProxies_property.addEBObserver (self.assignedPadProxies_property) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  final let mSelectedPageIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSelectedSymbolInspectorIndex' stored property
  //····················································································································

  final let mSelectedSymbolInspectorIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSelectedPackageInspectorIndex' stored property
  //····················································································································

  final let mSelectedPackageInspectorIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mTitle' stored property
  //····················································································································

  final let mTitle_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mImageData' stored property
  //····················································································································

  final let mImageData_property = EBGenericTransientProperty <Data?> ()

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  final let mPrefix_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mComments' stored property
  //····················································································································

  final let mComments_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  final let mPackageDisplayZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  final let mPackageDisplayHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  final let mPackageDisplayVerticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  final let mShowPackages_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  final let mShowPackagePadNumbers_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  final let mShowPackageFrontPads_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  final let mShowPackageBackPads_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mSymbolDisplayZoom' stored property
  //····················································································································

  final let mSymbolDisplayZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  final let imageIsValid_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  final let unconnectedPins_property = EBGenericTransientProperty <UnconnectedSymbolPinsInDevice?> ()

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  final let inconsistentPackagePadNameSetsMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  final let inconsistentSymbolNameSetMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  final let packagePadNameSetsAreConsistent_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'symbolNameAreConsistent' transient property
  //····················································································································

  final let symbolNameAreConsistent_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'symbolTypeNames' transient property
  //····················································································································

  final let symbolTypeNames_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'unconnectedPads' transient property
  //····················································································································

  final let unconnectedPads_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'assignedPadProxies' transient property
  //····················································································································

  final let assignedPadProxies_property = EBGenericTransientProperty <AssignedPadProxiesInDevice?> ()

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observable toMany property: mDocs
  //····················································································································

  private final var mObserversOf_mDocs = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDocs (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mDocs.insert (inObserver)
    if let object = self.propval {
      object.mDocs_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDocs (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mDocs.remove (inObserver)
    if let object = self.propval {
      object.mDocs_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolInstances
  //····················································································································

  private final var mObserversOf_mSymbolInstances = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstances (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbolInstances.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstances (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbolInstances.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private final var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolTypes
  //····················································································································

  private final var mObserversOf_mSymbolTypes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolTypes (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbolTypes.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypes (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbolTypes.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadProxies
  //····················································································································

  private final var mObserversOf_mPadProxies = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadProxies (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPadProxies.insert (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadProxies (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPadProxies.remove (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSelectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSelectedSymbolInspectorIndex simple stored property
    self.mSelectedSymbolInspectorIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSelectedSymbolInspectorIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSelectedPackageInspectorIndex simple stored property
    self.mSelectedPackageInspectorIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSelectedPackageInspectorIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTitle simple stored property
    self.mTitle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mImageData simple stored property
    self.mImageData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mImageData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPrefix simple stored property
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPrefix_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mComments simple stored property
    self.mComments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mComments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayZoom simple stored property
    self.mPackageDisplayZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPackageDisplayZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayHorizontalFlip simple stored property
    self.mPackageDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPackageDisplayHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayVerticalFlip simple stored property
    self.mPackageDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPackageDisplayVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackages simple stored property
    self.mShowPackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mShowPackages_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackagePadNumbers simple stored property
    self.mShowPackagePadNumbers_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mShowPackagePadNumbers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackageFrontPads simple stored property
    self.mShowPackageFrontPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mShowPackageFrontPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackageBackPads simple stored property
    self.mShowPackageBackPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mShowPackageBackPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSymbolDisplayZoom simple stored property
    self.mSymbolDisplayZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSymbolDisplayZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure imageIsValid transient property
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.imageIsValid_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unconnectedPins transient property
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.unconnectedPins_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inconsistentPackagePadNameSetsMessage transient property
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inconsistentPackagePadNameSetsMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inconsistentSymbolNameSetMessage transient property
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inconsistentSymbolNameSetMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure packagePadNameSetsAreConsistent transient property
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.packagePadNameSetsAreConsistent_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolNameAreConsistent transient property
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.symbolNameAreConsistent_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolTypeNames transient property
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.symbolTypeNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unconnectedPads transient property
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.unconnectedPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure assignedPadProxies transient property
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.assignedPadProxies_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class TransientObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyObject_DeviceRoot? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceRoot?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mWeakInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let v = self.mWeakInternalValue {
        return .single (v)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceRoot? { return self.mWeakInternalValue }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································

  func setProp (_ inValue : DeviceRoot?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ProxyObject_DeviceRoot : ReadWriteObject_DeviceRoot {

  //····················································································································

  private weak var mModel : ReadWriteObject_DeviceRoot? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mWeakInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

} */
 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_DeviceRoot : ReadWriteObject_DeviceRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorableProperty {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DeviceRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceRoot? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : DeviceRoot? = nil

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

