//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceRoot
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceRoot : EBReadOnlyAbstractObjectProperty <DeviceRoot> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSelectedPageIndex_property.stopsBeingObserved (by: self.mSelectedPageIndex_property) // Stored property
      oldValue.mSelectedSymbolInspectorIndex_property.stopsBeingObserved (by: self.mSelectedSymbolInspectorIndex_property) // Stored property
      oldValue.mSelectedPackageInspectorIndex_property.stopsBeingObserved (by: self.mSelectedPackageInspectorIndex_property) // Stored property
      oldValue.mTitle_property.stopsBeingObserved (by: self.mTitle_property) // Stored property
      oldValue.mImageData_property.stopsBeingObserved (by: self.mImageData_property) // Stored property
      oldValue.mPrefix_property.stopsBeingObserved (by: self.mPrefix_property) // Stored property
      oldValue.mComments_property.stopsBeingObserved (by: self.mComments_property) // Stored property
      oldValue.mPackageDisplayZoom_property.stopsBeingObserved (by: self.mPackageDisplayZoom_property) // Stored property
      oldValue.mPackageDisplayHorizontalFlip_property.stopsBeingObserved (by: self.mPackageDisplayHorizontalFlip_property) // Stored property
      oldValue.mPackageDisplayVerticalFlip_property.stopsBeingObserved (by: self.mPackageDisplayVerticalFlip_property) // Stored property
      oldValue.mShowPackages_property.stopsBeingObserved (by: self.mShowPackages_property) // Stored property
      oldValue.mShowPackagePadNumbers_property.stopsBeingObserved (by: self.mShowPackagePadNumbers_property) // Stored property
      oldValue.mShowPackageFrontPads_property.stopsBeingObserved (by: self.mShowPackageFrontPads_property) // Stored property
      oldValue.mShowPackageBackPads_property.stopsBeingObserved (by: self.mShowPackageBackPads_property) // Stored property
      oldValue.mSymbolDisplayZoom_property.stopsBeingObserved (by: self.mSymbolDisplayZoom_property) // Stored property
      oldValue.imageIsValid_property.stopsBeingObserved (by: self.imageIsValid_property) // Transient property
      oldValue.unconnectedPins_property.stopsBeingObserved (by: self.unconnectedPins_property) // Transient property
      oldValue.inconsistentPackagePadNameSetsMessage_property.stopsBeingObserved (by: self.inconsistentPackagePadNameSetsMessage_property) // Transient property
      oldValue.inconsistentSymbolNameSetMessage_property.stopsBeingObserved (by: self.inconsistentSymbolNameSetMessage_property) // Transient property
      oldValue.packagePadNameSetsAreConsistent_property.stopsBeingObserved (by: self.packagePadNameSetsAreConsistent_property) // Transient property
      oldValue.symbolNameAreConsistent_property.stopsBeingObserved (by: self.symbolNameAreConsistent_property) // Transient property
      oldValue.symbolTypeNames_property.stopsBeingObserved (by: self.symbolTypeNames_property) // Transient property
      oldValue.unconnectedPads_property.stopsBeingObserved (by: self.unconnectedPads_property) // Transient property
      oldValue.assignedPadProxies_property.stopsBeingObserved (by: self.assignedPadProxies_property) // Transient property
      oldValue.issues_property.stopsBeingObserved (by: self.issues_property) // Transient property
      if let relay = self.mObserversOf_mDocs { // to Many
        oldValue.mDocs_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolInstances { // to Many
        oldValue.mSymbolInstances_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPackages { // to Many
        oldValue.mPackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolTypes { // to Many
        oldValue.mSymbolTypes_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadProxies { // to Many
        oldValue.mPadProxies_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mSelectedPageIndex_property.startsBeingObserved (by: self.mSelectedPageIndex_property) // Stored property
      newValue.mSelectedSymbolInspectorIndex_property.startsBeingObserved (by: self.mSelectedSymbolInspectorIndex_property) // Stored property
      newValue.mSelectedPackageInspectorIndex_property.startsBeingObserved (by: self.mSelectedPackageInspectorIndex_property) // Stored property
      newValue.mTitle_property.startsBeingObserved (by: self.mTitle_property) // Stored property
      newValue.mImageData_property.startsBeingObserved (by: self.mImageData_property) // Stored property
      newValue.mPrefix_property.startsBeingObserved (by: self.mPrefix_property) // Stored property
      newValue.mComments_property.startsBeingObserved (by: self.mComments_property) // Stored property
      newValue.mPackageDisplayZoom_property.startsBeingObserved (by: self.mPackageDisplayZoom_property) // Stored property
      newValue.mPackageDisplayHorizontalFlip_property.startsBeingObserved (by: self.mPackageDisplayHorizontalFlip_property) // Stored property
      newValue.mPackageDisplayVerticalFlip_property.startsBeingObserved (by: self.mPackageDisplayVerticalFlip_property) // Stored property
      newValue.mShowPackages_property.startsBeingObserved (by: self.mShowPackages_property) // Stored property
      newValue.mShowPackagePadNumbers_property.startsBeingObserved (by: self.mShowPackagePadNumbers_property) // Stored property
      newValue.mShowPackageFrontPads_property.startsBeingObserved (by: self.mShowPackageFrontPads_property) // Stored property
      newValue.mShowPackageBackPads_property.startsBeingObserved (by: self.mShowPackageBackPads_property) // Stored property
      newValue.mSymbolDisplayZoom_property.startsBeingObserved (by: self.mSymbolDisplayZoom_property) // Stored property
      newValue.imageIsValid_property.startsBeingObserved (by: self.imageIsValid_property) // Transient property
      newValue.unconnectedPins_property.startsBeingObserved (by: self.unconnectedPins_property) // Transient property
      newValue.inconsistentPackagePadNameSetsMessage_property.startsBeingObserved (by: self.inconsistentPackagePadNameSetsMessage_property) // Transient property
      newValue.inconsistentSymbolNameSetMessage_property.startsBeingObserved (by: self.inconsistentSymbolNameSetMessage_property) // Transient property
      newValue.packagePadNameSetsAreConsistent_property.startsBeingObserved (by: self.packagePadNameSetsAreConsistent_property) // Transient property
      newValue.symbolNameAreConsistent_property.startsBeingObserved (by: self.symbolNameAreConsistent_property) // Transient property
      newValue.symbolTypeNames_property.startsBeingObserved (by: self.symbolTypeNames_property) // Transient property
      newValue.unconnectedPads_property.startsBeingObserved (by: self.unconnectedPads_property) // Transient property
      newValue.assignedPadProxies_property.startsBeingObserved (by: self.assignedPadProxies_property) // Transient property
      newValue.issues_property.startsBeingObserved (by: self.issues_property) // Transient property
      if let relay = self.mObserversOf_mDocs { // to Many
        newValue.mDocs_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolInstances { // to Many
        newValue.mSymbolInstances_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPackages { // to Many
        newValue.mPackages_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolTypes { // to Many
        newValue.mSymbolTypes_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadProxies { // to Many
        newValue.mPadProxies_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSelectedPageIndex' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSelectedPageIndex_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSelectedSymbolInspectorIndex' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSelectedSymbolInspectorIndex_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSelectedPackageInspectorIndex' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSelectedPackageInspectorIndex_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mTitle' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mTitle_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mImageData' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mImageData_property = EBTransientProperty <Data?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPrefix' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPrefix_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mComments' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mComments_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPackageDisplayZoom' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPackageDisplayZoom_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPackageDisplayHorizontalFlip_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPackageDisplayVerticalFlip_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mShowPackages' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mShowPackages_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mShowPackagePadNumbers' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mShowPackagePadNumbers_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mShowPackageFrontPads' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mShowPackageFrontPads_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mShowPackageBackPads' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mShowPackageBackPads_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSymbolDisplayZoom' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSymbolDisplayZoom_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'imageIsValid' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let imageIsValid_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'unconnectedPins' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let unconnectedPins_property = EBTransientProperty <UnconnectedSymbolPinsInDevice?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let inconsistentSymbolNameSetMessage_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let packagePadNameSetsAreConsistent_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'symbolNameAreConsistent' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let symbolNameAreConsistent_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'symbolTypeNames' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let symbolTypeNames_property = EBTransientProperty <StringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'unconnectedPads' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let unconnectedPads_property = EBTransientProperty <StringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'assignedPadProxies' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let assignedPadProxies_property = EBTransientProperty <AssignedPadProxiesInDevice?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'issues' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let issues_property = EBTransientProperty <CanariIssueArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mDocs
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDocs : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDocs_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDocs {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mDocs_property.startsBeingObserved (by: relay)
      self.mObserversOf_mDocs = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDocs_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDocs?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mSymbolInstances
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbolInstances : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolInstances_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbolInstances {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mSymbolInstances_property.startsBeingObserved (by: relay)
      self.mObserversOf_mSymbolInstances = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolInstances_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mSymbolInstances?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mPackages
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mPackages : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPackages_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPackages {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPackages_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPackages = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPackages_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mPackages?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mSymbolTypes
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbolTypes : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolTypes_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbolTypes {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mSymbolTypes_property.startsBeingObserved (by: relay)
      self.mObserversOf_mSymbolTypes = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolTypes_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mSymbolTypes?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mPadProxies
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mPadProxies : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPadProxies_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPadProxies {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPadProxies_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPadProxies = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPadProxies_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mPadProxies?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSelectedPageIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSelectedSymbolInspectorIndex simple stored property
    self.mSelectedSymbolInspectorIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSelectedSymbolInspectorIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSelectedPackageInspectorIndex simple stored property
    self.mSelectedPackageInspectorIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSelectedPackageInspectorIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mTitle simple stored property
    self.mTitle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mTitle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mImageData simple stored property
    self.mImageData_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mImageData_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPrefix simple stored property
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPrefix_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mComments simple stored property
    self.mComments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mComments_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPackageDisplayZoom simple stored property
    self.mPackageDisplayZoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPackageDisplayZoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPackageDisplayHorizontalFlip simple stored property
    self.mPackageDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPackageDisplayHorizontalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPackageDisplayVerticalFlip simple stored property
    self.mPackageDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPackageDisplayVerticalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mShowPackages simple stored property
    self.mShowPackages_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mShowPackages_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mShowPackagePadNumbers simple stored property
    self.mShowPackagePadNumbers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mShowPackagePadNumbers_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mShowPackageFrontPads simple stored property
    self.mShowPackageFrontPads_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mShowPackageFrontPads_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mShowPackageBackPads simple stored property
    self.mShowPackageBackPads_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mShowPackageBackPads_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSymbolDisplayZoom simple stored property
    self.mSymbolDisplayZoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolDisplayZoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure imageIsValid transient property
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.imageIsValid_property.optionalSelection ?? .single (nil)
    }
  //--- Configure unconnectedPins transient property
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.unconnectedPins_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inconsistentPackagePadNameSetsMessage transient property
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inconsistentPackagePadNameSetsMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inconsistentSymbolNameSetMessage transient property
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inconsistentSymbolNameSetMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure packagePadNameSetsAreConsistent transient property
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.packagePadNameSetsAreConsistent_property.optionalSelection ?? .single (nil)
    }
  //--- Configure symbolNameAreConsistent transient property
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolNameAreConsistent_property.optionalSelection ?? .single (nil)
    }
  //--- Configure symbolTypeNames transient property
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolTypeNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure unconnectedPads transient property
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.unconnectedPads_property.optionalSelection ?? .single (nil)
    }
  //--- Configure assignedPadProxies transient property
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.assignedPadProxies_property.optionalSelection ?? .single (nil)
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.issues_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_DeviceRoot
//--------------------------------------------------------------------------------------------------

final class StoredObject_DeviceRoot : ReadOnlyObject_DeviceRoot, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String?
  var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DeviceRoot
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! DeviceRoot
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : DeviceRoot?

    init (_ inOldValue : DeviceRoot?) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
    self.mWeakInternalValue = inObject.mOldValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
  //--- Register old value in undo manager
     self.undoManager?.registerUndo (  // For Swift 6
      withTarget: self,
      selector: #selector (Self.myPerformUndo (_:)),
      object: MyPrivateUndoer (inOldValue)
    )
//    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < DeviceRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : DeviceRoot? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : DeviceRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

