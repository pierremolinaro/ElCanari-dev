//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_MasterPadInDevice : ReadOnlyAbstractObjectProperty <MasterPadInDevice> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MasterPadInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mCenterX_property.removeEBObserver (self.mCenterX_property) // Stored property
      oldValue.mCenterY_property.removeEBObserver (self.mCenterY_property) // Stored property
      oldValue.mWidth_property.removeEBObserver (self.mWidth_property) // Stored property
      oldValue.mHeight_property.removeEBObserver (self.mHeight_property) // Stored property
      oldValue.mHoleWidth_property.removeEBObserver (self.mHoleWidth_property) // Stored property
      oldValue.mHoleHeight_property.removeEBObserver (self.mHoleHeight_property) // Stored property
      oldValue.mShape_property.removeEBObserver (self.mShape_property) // Stored property
      oldValue.mStyle_property.removeEBObserver (self.mStyle_property) // Stored property
      oldValue.mName_property.removeEBObserver (self.mName_property) // Stored property
      oldValue.padNumberDisplay_property.removeEBObserver (self.padNumberDisplay_property) // Transient property
      oldValue.frontSideFilledBezierPathArray_property.removeEBObserver (self.frontSideFilledBezierPathArray_property) // Transient property
      oldValue.backSideFilledBezierPathArray_property.removeEBObserver (self.backSideFilledBezierPathArray_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mCenterX_property.addEBObserver (self.mCenterX_property) // Stored property
      newValue.mCenterY_property.addEBObserver (self.mCenterY_property) // Stored property
      newValue.mWidth_property.addEBObserver (self.mWidth_property) // Stored property
      newValue.mHeight_property.addEBObserver (self.mHeight_property) // Stored property
      newValue.mHoleWidth_property.addEBObserver (self.mHoleWidth_property) // Stored property
      newValue.mHoleHeight_property.addEBObserver (self.mHoleHeight_property) // Stored property
      newValue.mShape_property.addEBObserver (self.mShape_property) // Stored property
      newValue.mStyle_property.addEBObserver (self.mStyle_property) // Stored property
      newValue.mName_property.addEBObserver (self.mName_property) // Stored property
      newValue.padNumberDisplay_property.addEBObserver (self.padNumberDisplay_property) // Transient property
      newValue.frontSideFilledBezierPathArray_property.addEBObserver (self.frontSideFilledBezierPathArray_property) // Transient property
      newValue.backSideFilledBezierPathArray_property.addEBObserver (self.backSideFilledBezierPathArray_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  final let mCenterX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  final let mCenterY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  final let mWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mHeight' stored property
  //····················································································································

  final let mHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mHoleWidth' stored property
  //····················································································································

  final let mHoleWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mHoleHeight' stored property
  //····················································································································

  final let mHoleHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  final let mShape_property = EBGenericTransientProperty <PadShape?> ()

  //····················································································································
  //   Observers of 'mStyle' stored property
  //····················································································································

  final let mStyle_property = EBGenericTransientProperty <PadStyle?> ()

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  final let mName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  final let padNumberDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'frontSideFilledBezierPathArray' transient property
  //····················································································································

  final let frontSideFilledBezierPathArray_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backSideFilledBezierPathArray' transient property
  //····················································································································

  final let backSideFilledBezierPathArray_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observable toMany property: mSlavePads
  //····················································································································

  private final var mObserversOf_mSlavePads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSlavePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSlavePads.insert (inObserver)
    if let object = self.propval {
      object.mSlavePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSlavePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSlavePads.remove (inObserver)
    if let object = self.propval {
      object.mSlavePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mCenterX simple stored property
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCenterX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCenterY simple stored property
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCenterY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mWidth simple stored property
    self.mWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHeight simple stored property
    self.mHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHoleWidth simple stored property
    self.mHoleWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mHoleWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHoleHeight simple stored property
    self.mHoleHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mHoleHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShape simple stored property
    self.mShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mStyle simple stored property
    self.mStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mName simple stored property
    self.mName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure padNumberDisplay transient property
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.padNumberDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontSideFilledBezierPathArray transient property
    self.frontSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontSideFilledBezierPathArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backSideFilledBezierPathArray transient property
    self.backSideFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backSideFilledBezierPathArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_MasterPadInDevice : ReadOnlyObject_MasterPadInDevice, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! MasterPadInDevice
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! MasterPadInDevice
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MasterPadInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MasterPadInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MasterPadInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MasterPadInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MasterPadInDevice?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < MasterPadInDevice? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MasterPadInDevice? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining
  // private var mStrongInternalValue : MasterPadInDevice? = nil

  //····················································································································

  func setProp (_ inValue : MasterPadInDevice?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

