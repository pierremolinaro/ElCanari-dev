//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_SymbolTypeInDevice : ReadOnlyAbstractObjectProperty <SymbolTypeInDevice> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mTypeName_property.removeEBObserver (self.mTypeName_property) // Stored property
      oldValue.mVersion_property.removeEBObserver (self.mVersion_property) // Stored property
      oldValue.mFileData_property.removeEBObserver (self.mFileData_property) // Stored property
      oldValue.mStrokeBezierPath_property.removeEBObserver (self.mStrokeBezierPath_property) // Stored property
      oldValue.mFilledBezierPath_property.removeEBObserver (self.mFilledBezierPath_property) // Stored property
      oldValue.versionString_property.removeEBObserver (self.versionString_property) // Transient property
      oldValue.instanceCount_property.removeEBObserver (self.instanceCount_property) // Transient property
      oldValue.documentSize_property.removeEBObserver (self.documentSize_property) // Transient property
      oldValue.pinNameShape_property.removeEBObserver (self.pinNameShape_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mTypeName_property.addEBObserver (self.mTypeName_property) // Stored property
      newValue.mVersion_property.addEBObserver (self.mVersion_property) // Stored property
      newValue.mFileData_property.addEBObserver (self.mFileData_property) // Stored property
      newValue.mStrokeBezierPath_property.addEBObserver (self.mStrokeBezierPath_property) // Stored property
      newValue.mFilledBezierPath_property.addEBObserver (self.mFilledBezierPath_property) // Stored property
      newValue.versionString_property.addEBObserver (self.versionString_property) // Transient property
      newValue.instanceCount_property.addEBObserver (self.instanceCount_property) // Transient property
      newValue.documentSize_property.addEBObserver (self.documentSize_property) // Transient property
      newValue.pinNameShape_property.addEBObserver (self.pinNameShape_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mTypeName' stored property
  //····················································································································

  final let mTypeName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  final let mVersion_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  final let mFileData_property = EBGenericTransientProperty <Data?> ()

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  final let mStrokeBezierPath_property = EBGenericTransientProperty <NSBezierPath?> ()

  //····················································································································
  //   Observers of 'mFilledBezierPath' stored property
  //····················································································································

  final let mFilledBezierPath_property = EBGenericTransientProperty <NSBezierPath?> ()

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  final let versionString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  final let instanceCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'documentSize' transient property
  //····················································································································

  final let documentSize_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'pinNameShape' transient property
  //····················································································································

  final let pinNameShape_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observable toMany property: mInstances
  //····················································································································

  private final var mObserversOf_mInstances = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mInstances (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mInstances.insert (inObserver)
    if let object = self.propval {
      object.mInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstances (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mInstances.remove (inObserver)
    if let object = self.propval {
      object.mInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPinTypes
  //····················································································································

  private final var mObserversOf_mPinTypes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinTypes (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinTypes.insert (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinTypes (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPinTypes.remove (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mTypeName simple stored property
    self.mTypeName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTypeName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mVersion simple stored property
    self.mVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mFileData simple stored property
    self.mFileData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFileData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mStrokeBezierPath simple stored property
    self.mStrokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mStrokeBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mFilledBezierPath simple stored property
    self.mFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFilledBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.versionString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure instanceCount transient property
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.instanceCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure documentSize transient property
    self.documentSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.documentSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure pinNameShape transient property
    self.pinNameShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.pinNameShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientObject_SymbolTypeInDevice : ReadOnlyObject_SymbolTypeInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyObject_SymbolTypeInDevice? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolTypeInDevice?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolTypeInDevice?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolTypeInDevice? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_SymbolTypeInDevice : ReadOnlyObject_SymbolTypeInDevice {

  //····················································································································

  func setProp (_ inValue : SymbolTypeInDevice?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_SymbolTypeInDevice : ReadWriteObject_SymbolTypeInDevice {

  //····················································································································

  private weak var mModel : ReadWriteObject_SymbolTypeInDevice? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolTypeInDevice?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolTypeInDevice?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolTypeInDevice?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolTypeInDevice? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_SymbolTypeInDevice : ReadWriteObject_SymbolTypeInDevice, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolTypeInDevice?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolTypeInDevice? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

