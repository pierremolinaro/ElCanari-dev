//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolTypeInDevice
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolTypeInDevice : EBReadOnlyAbstractObjectProperty <SymbolTypeInDevice> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mFileSystemStatusMessageForSymbolTypeInDevice_property.stopsBeingObserved (by: self.mFileSystemStatusMessageForSymbolTypeInDevice_property) // Stored property
      oldValue.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property.stopsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property) // Stored property
      oldValue.mTypeName_property.stopsBeingObserved (by: self.mTypeName_property) // Stored property
      oldValue.mVersion_property.stopsBeingObserved (by: self.mVersion_property) // Stored property
      oldValue.mFileData_property.stopsBeingObserved (by: self.mFileData_property) // Stored property
      oldValue.mStrokeBezierPath_property.stopsBeingObserved (by: self.mStrokeBezierPath_property) // Stored property
      oldValue.mFilledBezierPath_property.stopsBeingObserved (by: self.mFilledBezierPath_property) // Stored property
      oldValue.versionString_property.stopsBeingObserved (by: self.versionString_property) // Transient property
      oldValue.instanceCount_property.stopsBeingObserved (by: self.instanceCount_property) // Transient property
      oldValue.documentSize_property.stopsBeingObserved (by: self.documentSize_property) // Transient property
      oldValue.fileSystemStatusImage_property.stopsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      oldValue.pinNameShape_property.stopsBeingObserved (by: self.pinNameShape_property) // Transient property
      if let relay = self.mObserversOf_mInstances { // to Many
        oldValue.mInstances_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinTypes { // to Many
        oldValue.mPinTypes_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mFileSystemStatusMessageForSymbolTypeInDevice_property.startsBeingObserved (by: self.mFileSystemStatusMessageForSymbolTypeInDevice_property) // Stored property
      newValue.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property.startsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property) // Stored property
      newValue.mTypeName_property.startsBeingObserved (by: self.mTypeName_property) // Stored property
      newValue.mVersion_property.startsBeingObserved (by: self.mVersion_property) // Stored property
      newValue.mFileData_property.startsBeingObserved (by: self.mFileData_property) // Stored property
      newValue.mStrokeBezierPath_property.startsBeingObserved (by: self.mStrokeBezierPath_property) // Stored property
      newValue.mFilledBezierPath_property.startsBeingObserved (by: self.mFilledBezierPath_property) // Stored property
      newValue.versionString_property.startsBeingObserved (by: self.versionString_property) // Transient property
      newValue.instanceCount_property.startsBeingObserved (by: self.instanceCount_property) // Transient property
      newValue.documentSize_property.startsBeingObserved (by: self.documentSize_property) // Transient property
      newValue.fileSystemStatusImage_property.startsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      newValue.pinNameShape_property.startsBeingObserved (by: self.pinNameShape_property) // Transient property
      if let relay = self.mObserversOf_mInstances { // to Many
        newValue.mInstances_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPinTypes { // to Many
        newValue.mPinTypes_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusMessageForSymbolTypeInDevice' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusMessageForSymbolTypeInDevice_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusRequiresAttentionForSymbolTypeInDevice' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mTypeName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mTypeName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mVersion' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mVersion_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileData' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileData_property = EBTransientProperty <Data?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mStrokeBezierPath' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mStrokeBezierPath_property = EBTransientProperty <NSBezierPath?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFilledBezierPath' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFilledBezierPath_property = EBTransientProperty <NSBezierPath?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'versionString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let versionString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'instanceCount' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let instanceCount_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'documentSize' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let documentSize_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'fileSystemStatusImage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let fileSystemStatusImage_property = EBTransientProperty <NSImage?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'pinNameShape' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let pinNameShape_property = EBTransientProperty <EBShape?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mInstances
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mInstances : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mInstances_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mInstances {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mInstances_property.startsBeingObserved (by: relay)
      self.mObserversOf_mInstances = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mInstances_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mInstances?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mPinTypes
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mPinTypes : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPinTypes_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPinTypes {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPinTypes_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPinTypes = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPinTypes_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mPinTypes?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure mFileSystemStatusMessageForSymbolTypeInDevice simple stored property
    self.mFileSystemStatusMessageForSymbolTypeInDevice_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusMessageForSymbolTypeInDevice_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFileSystemStatusRequiresAttentionForSymbolTypeInDevice simple stored property
    self.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusRequiresAttentionForSymbolTypeInDevice_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mTypeName simple stored property
    self.mTypeName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mTypeName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mVersion simple stored property
    self.mVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFileData simple stored property
    self.mFileData_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileData_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mStrokeBezierPath simple stored property
    self.mStrokeBezierPath_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mStrokeBezierPath_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFilledBezierPath simple stored property
    self.mFilledBezierPath_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFilledBezierPath_property.optionalSelection ?? .single (nil)
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.versionString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure instanceCount transient property
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.instanceCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure documentSize transient property
    self.documentSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.documentSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure fileSystemStatusImage transient property
    self.fileSystemStatusImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.fileSystemStatusImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure pinNameShape transient property
    self.pinNameShape_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.pinNameShape_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_SymbolTypeInDevice
//--------------------------------------------------------------------------------------------------

final class StoredObject_SymbolTypeInDevice : ReadOnlyObject_SymbolTypeInDevice, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String
  var key : String { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromValueDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let objectSavingIndex = inDictionary [self.mKey] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! SymbolTypeInDevice
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! SymbolTypeInDevice
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [self.mKey] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 /* private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : SymbolTypeInDevice?

    init (_ inOldValue : SymbolTypeInDevice?) {
      self.mOldValue = inOldValue
    }
  } */

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
  //   self.setProp (inObject.mOldValue)
  // }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
  //--- Register old value in undo manager
     // self.undoManager?.registerUndo (  // For Swift 6
     //  withTarget: self,
     // selector: #selector (Self.myPerformUndo (_:)),
     // object: MyPrivateUndoer (inOldValue)
    // )
    self.undoManager?.registerUndo (withTarget: self) { selfTarget in
      selfTarget.setProp (inOldValue) // Ok in Swift 6.2
      // MainActor.assumeIsolated { selfTarget.setProp (inOldValue) }
    }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < SymbolTypeInDevice? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : SymbolTypeInDevice? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : SymbolTypeInDevice?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

