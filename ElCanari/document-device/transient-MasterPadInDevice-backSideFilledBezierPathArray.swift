//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_MasterPadInDevice_backSideFilledBezierPathArray (
       _ self_mCenterX : Int,                                              
       _ self_mCenterY : Int,                                              
       _ self_mWidth : Int,                                                
       _ self_mHeight : Int,                                               
       _ self_mHoleWidth : Int,                                            
       _ self_mHoleHeight : Int,                                           
       _ self_mShape : PadShape,                                           
       _ self_mStyle : PadStyle,                                           
       _ self_mSlavePads_backSideFilledBezierPath : [any SlavePadInDevice_backSideFilledBezierPath]
) -> BezierPathArray {
//--- START OF USER ZONE 2
    let xCenter = canariUnitToCocoa (self_mCenterX)
    let yCenter = canariUnitToCocoa (self_mCenterY)
    let width = canariUnitToCocoa (self_mWidth)
    let height = canariUnitToCocoa (self_mHeight)
    let rPad = NSRect (x: xCenter - width / 2.0, y: yCenter - height / 2.0, width: width, height: height)
    var bp : BezierPath
    switch self_mShape {
    case .rect :
      bp = BezierPath (rect: rPad)
    case .round :
      bp = BezierPath (oblongInRect: rPad)
    case .octo :
      bp = BezierPath (octogonInRect: rPad)
    }
    switch self_mStyle {
    case .traversing :
      let holeWidth = canariUnitToCocoa (self_mHoleWidth)
      let holeHeight = canariUnitToCocoa (self_mHoleHeight)
      let rHole = NSRect (x: xCenter - holeWidth / 2.0, y: yCenter - holeHeight / 2.0, width: holeWidth, height: holeHeight)
      bp.appendOblong (in: rHole)
      bp.windingRule = .evenOdd
    case .surface :
      bp = BezierPath ()
    }
    var array = BezierPathArray ()
    array.append (bp)
    for slavePad in self_mSlavePads_backSideFilledBezierPath {
      if let bp = slavePad.backSideFilledBezierPath {
        array.append (bp)
      }
    }
    return array
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
