//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_SlavePadInDevice_backSideFilledBezierPath (
       _ self_mCenterX : Int,                                        
       _ self_mCenterY : Int,                                        
       _ self_mWidth : Int,                                          
       _ self_mHeight : Int,                                         
       _ self_mHoleWidth : Int,                                      
       _ self_mHoleHeight : Int,                                     
       _ self_mShape : PadShape,                                     
       _ self_mStyle : SlavePadStyle
) -> EBBezierPath {
//--- START OF USER ZONE 2
    let xCenter = canariUnitToCocoa (self_mCenterX)
    let yCenter = canariUnitToCocoa (self_mCenterY)
    let width = canariUnitToCocoa (self_mWidth)
    let height = canariUnitToCocoa (self_mHeight)
    let rPad = NSRect (x: xCenter - width / 2.0, y: yCenter - height / 2.0, width: width, height: height)
    var bp : EBBezierPath
    switch self_mShape {
    case .rect :
      bp = EBBezierPath (rect: rPad)
    case .round :
      bp = EBBezierPath (oblongInRect: rPad)
    case .octo :
      bp = EBBezierPath (octogonInRect: rPad)
    }
    switch self_mStyle {
    case .traversing :
      let holeWidth = canariUnitToCocoa (self_mHoleWidth)
      let holeHeight = canariUnitToCocoa (self_mHoleHeight)
      let rHole = NSRect (x: xCenter - holeWidth / 2.0, y: yCenter - holeHeight / 2.0, width: holeWidth, height: holeHeight)
      bp.appendOblong (in: rHole)
      bp.windingRule = .evenOdd
    case .componentSide :
      bp = EBBezierPath ()
    case .oppositeSide :
      ()
    }
    return bp
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
