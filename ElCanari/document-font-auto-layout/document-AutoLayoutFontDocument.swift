//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutFontDocument) class AutoLayoutFontDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: selectedCharacterController
  //····················································································································

  var selectedCharacterController = Controller_AutoLayoutFontDocument_selectedCharacterController ()

  //····················································································································
  //   Selection controller: characterSelection
  //····················································································································

  var characterSelection = SelectionController_AutoLayoutFontDocument_characterSelection ()

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusTitle
  //····················································································································

  final let statusTitle_property = EBTransientProperty_String ()

  //····················································································································

  final var statusTitle : String? {
    switch self.statusTitle_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: metadataStatus
  //····················································································································

  final let metadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var metadataStatus : MetadataStatus? {
    switch self.metadataStatus_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canDeleteCurrentCharacter
  //····················································································································

  final let canDeleteCurrentCharacter_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canDeleteCurrentCharacter : Bool? {
    switch self.canDeleteCurrentCharacter_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mFontGraphicView : AutoLayoutCanariFontCharacterView? = nil
  weak final var mFontInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.postEvent ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: selectedCharacterController
      self.selectedCharacterController.addExplorer (name: "selectedCharacterController", y:&y, view:view)
    //--- Selection controller property: characterSelection
      self.characterSelection.addExplorer (name: "characterSelection", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "FontRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : FontRoot { return self.mRootObject as! FontRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Font", tooltip: "Characters Definition", pageView: self.mFontPage)
          .addPage (title: "Infos", tooltip: "Document Infos", pageView: self.mInfoPage)
          .bind_selectedPage (self.rootObject.selectedTab_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (size: .regular)
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (size: .regular)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.statusImage_property)
            .bind_tooltip (self.statusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mFontPageInspectorMasterView
  //····················································································································

  let mFontPageInspectorMasterView : AutoLayoutAbstractStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mFontPage
  //····················································································································

  lazy var mFontPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutCanariSampleFontStringView ()
      .bind_bezierPath (self.rootObject.sampleStringBezierPath_property)
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mFontPageInspectorMasterView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "", tooltip: "Selected Character Inspector", pageView: self.mSelectedCharacterInspectorView)
          .addPage (title: "", tooltip: "Sample String Inspector", pageView: self.mSampleStringInspectorView)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: self.mIssuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
          .bind_segmentImage (self.statusImage_property, segmentIndex:2)
          .bind_segmentTitle (self.statusTitle_property, segmentIndex:2)
        self.mFontInspectorSegmentedControl = view_1_0_0 // Outlet
        self.configure_fontPageSegmentedControl (view_1_0_0) // Configurator
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutVerticalStackView ()
          .set (leftMargin: 20)
          .set (rightMargin: 20)
          .set (bottomMargin: 20)
          .set (spacing: 12)
        do{
          let view_1_0_1_0 = self.mFontPageInspectorMasterView
          view_1_0_1.appendView (view_1_0_1_0)
        }
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutCanariFontCharacterView ()
        .bind_advance (self.characterSelection.advance_property)
        .bind_characterSegmentList (self.characterSelection.segmentArrayForDrawing_property)
        .bind_transparency (preferences_fontEditionTransparency_property)
        .bind_displayFlow (preferences_showGerberDrawingFlow_property)
        .bind_displayDrawingIndexes (preferences_showGerberDrawingIndexes_property)
      self.mFontGraphicView = view_1_1 // Outlet
      self.configure_fontGraphicView (view_1_1) // Configurator
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mIssuesInspectorView
  //····················································································································

  lazy var mIssuesInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.statusMessage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: false)
      .bind_issues (self.rootObject.issues_property)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSampleStringInspectorView
  //····················································································································

  lazy var mSampleStringInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Sample String", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTextView ()
      .bind_value (preferences_sampleString_property)
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutStaticLabel (title: "Sample String Metrics", bold: true, size: .small)
      view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_2)
    }
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutTwoColumnsGridView ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_2)
    }
    vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSelectedCharacterInspectorView
  //····················································································································

  lazy var mSelectedCharacterInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Font Nominal Size", bold: false, size: .small)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutIntField (width: 56, size: .small)
        .bind_value (self.rootObject.nominalSize_property, sendContinously:false)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutStaticLabel (title: "Segment Opacity", bold: false, size: .small)
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_1)
    }
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutDoubleSlider (width: 200, min: 0, max: 1, ticks: 11)
        .bind_value (preferences_fontEditionTransparency_property)
      view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutDoubleField (width: 56, size: .small)
        .bind_value (preferences_fontEditionTransparency_property, sendContinously:false)
      view_3.appendView (view_3_2)
    }
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_4)
    let view_5 = AutoLayoutHorizontalStackView ()
    do{
      let view_5_0 = AutoLayoutFlexibleSpace ()
      view_5.appendView (view_5_0)
      let view_5_1 = AutoLayoutStaticLabel (title: "Current Character", bold: false, size: .small)
      view_5.appendView (view_5_1)
      let view_5_2 = AutoLayoutButton (title: "New Character…", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.newCharacterAction (_:))
        )
      view_5.appendView (view_5_2)
      let view_5_3 = AutoLayoutButton (title: "Delete", size: .small)
        .bind_enabled (.id (self.canDeleteCurrentCharacter_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.deleteCurrentCharacterAction (_:))
        )
      view_5.appendView (view_5_3)
    }
    vStackView.appendView (view_5)
    let view_6 = AutoLayoutHorizontalStackView ()
    do{
      let view_6_0 = AutoLayoutCanariFontCharacterSelectButton ()
        .bind_codePoint (self.rootObject.currentCharacterCodePoint_property)
        .bind_characters (self.rootObject.definedCharacters_property)
      view_6.appendView (view_6_0)
    }
    vStackView.appendView (view_6)
    let view_7 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_7)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mInfoPage
  //····················································································································

  lazy var mInfoPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setTopAlignment ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Description", bold: false, size: .regular)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.resetVersionAndSignatureAction (_:))
        )
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (preferences_sampleStringSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathWidth_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Ascenders", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathAscent_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Descenders", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathDescent_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    }
    self.windowForSheet?.contentViewController = EBViewController (mainView)
//    self.windowForSheet?.contentView = mainView
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: selectedCharacterController
    self.selectedCharacterController.bind_model (self.rootObject.characters_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: characterSelection
    self.characterSelection.bind_selection (model: self.selectedCharacterController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusTitle
    self.statusTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusTitle (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusTitle_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.metadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canDeleteCurrentCharacter
    self.canDeleteCurrentCharacter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.definedCharacters_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_canDeleteCurrentCharacter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.definedCharacters_property.addEBObserver (self.canDeleteCurrentCharacter_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mFontPageInspectorMasterView.ebCleanUp ()
    self.mFontPage.ebCleanUp ()
    self.mIssuesInspectorView.ebCleanUp ()
    self.mSampleStringInspectorView.ebCleanUp ()
    self.mSelectedCharacterInspectorView.ebCleanUp ()
    self.mInfoPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: selectedCharacterController
    self.selectedCharacterController.unbind_model ()
  //--- Selection controller property: characterSelection
    self.characterSelection.unbind_selection ()
    // self.rootObject.issues_property.removeEBObserver (self.statusImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusTitle_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.metadataStatus_property)
    // self.rootObject.definedCharacters_property.removeEBObserver (self.canDeleteCurrentCharacter_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

