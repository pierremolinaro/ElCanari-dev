//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutFontDocument mCharacterSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutFontDocument_mCharacterSelection : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: advance
  //····················································································································

  var advance_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: codePoint
  //····················································································································

  var codePoint_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: gerberCode
  //····················································································································

  var gerberCode_property = EBTransientProperty_CharacterGerberCode ()

  //····················································································································
  //   Selection observable property: gerberCodeInstructionCountMessage
  //····················································································································

  var gerberCodeInstructionCountMessage_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: mWarnsWhenAdvanceIsZero
  //····················································································································

  var mWarnsWhenAdvanceIsZero_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: mWarnsWhenNoSegment
  //····················································································································

  var mWarnsWhenNoSegment_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: segmentArrayForDrawing
  //····················································································································

  var segmentArrayForDrawing_property = EBTransientProperty_CharacterSegmentList ()

  //····················································································································
  //   Selection observable property: segments
  //····················································································································

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private var mModel : ReadOnlyArrayOf_FontCharacter? = nil

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_FontCharacter) {
    self.mModel = model
    self.bind_property_advance (model: model)
    self.bind_property_codePoint (model: model)
    self.bind_property_gerberCode (model: model)
    self.bind_property_gerberCodeInstructionCountMessage (model: model)
    self.bind_property_issues (model: model)
    self.bind_property_mWarnsWhenAdvanceIsZero (model: model)
    self.bind_property_mWarnsWhenNoSegment (model: model)
    self.bind_property_segmentArrayForDrawing (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
  //--- advance
    self.advance_property.mReadModelFunction = nil 
    self.advance_property.mWriteModelFunction = nil 
    self.advance_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_advance (self.advance_property)
  //--- codePoint
    self.codePoint_property.mReadModelFunction = nil 
    self.codePoint_property.mWriteModelFunction = nil 
    self.codePoint_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_codePoint (self.codePoint_property)
  //--- gerberCode
    self.gerberCode_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_gerberCode (self.gerberCode_property)
  //--- gerberCodeInstructionCountMessage
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_gerberCodeInstructionCountMessage (self.gerberCodeInstructionCountMessage_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_issues (self.issues_property)
  //--- mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.mReadModelFunction = nil 
    self.mWarnsWhenAdvanceIsZero_property.mWriteModelFunction = nil 
    self.mWarnsWhenAdvanceIsZero_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mWarnsWhenAdvanceIsZero (self.mWarnsWhenAdvanceIsZero_property)
  //--- mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.mReadModelFunction = nil 
    self.mWarnsWhenNoSegment_property.mWriteModelFunction = nil 
    self.mWarnsWhenNoSegment_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mWarnsWhenNoSegment (self.mWarnsWhenNoSegment_property)
  //--- segmentArrayForDrawing
    self.segmentArrayForDrawing_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_segmentArrayForDrawing (self.segmentArrayForDrawing_property)
  //---
    self.mModel = nil
  }

  //····················································································································
  //    Explorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mValueExplorer : NSButton?
    private var mExplorerWindow : NSWindow?
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
      let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
      let tf = NSTextField (frame:secondColumn (y))
      tf.isEnabled = true
      tf.isEditable = false
      tf.stringValue = name
      tf.font = font
      view.addSubview (tf)
      let valueExplorer = NSButton (frame:thirdColumn (y))
      valueExplorer.font = font
      valueExplorer.title = self.explorerIndexString + " " + String (describing: type (of: self))
      valueExplorer.target = self
      valueExplorer.action = #selector(SelectionController_AutoLayoutFontDocument_mCharacterSelection.showObjectWindowFromExplorerButton(_:))
      view.addSubview (valueExplorer)
      mValueExplorer = valueExplorer
      y += EXPLORER_ROW_HEIGHT
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func buildExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
      mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
    //-------------------------------------------------- Adding properties
      let view = NSView (frame:r)
      var y : CGFloat = 0.0
      createEntryForPropertyNamed (
        "advance",
        object: self.advance_property,
        y: &y,
        view: view,
        observerExplorer: &self.advance_property.mObserverExplorer,
        valueExplorer: &self.advance_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "codePoint",
        object: self.codePoint_property,
        y: &y,
        view: view,
        observerExplorer: &self.codePoint_property.mObserverExplorer,
        valueExplorer: &self.codePoint_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mWarnsWhenAdvanceIsZero",
        object: self.mWarnsWhenAdvanceIsZero_property,
        y: &y,
        view: view,
        observerExplorer: &self.mWarnsWhenAdvanceIsZero_property.mObserverExplorer,
        valueExplorer: &self.mWarnsWhenAdvanceIsZero_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mWarnsWhenNoSegment",
        object: self.mWarnsWhenNoSegment_property,
        y: &y,
        view: view,
        observerExplorer: &self.mWarnsWhenNoSegment_property.mObserverExplorer,
        valueExplorer: &self.mWarnsWhenNoSegment_property.mValueExplorer
      )
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      view.frame = viewFrame
    //--- Set content size
      mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(SelectionController_AutoLayoutFontDocument_mCharacterSelection.deleteSelectionControllerWindowAction(_:))
    //--- Set window title
      let windowTitle = self.explorerIndexString + " " + String (describing: type (of: self))
      mExplorerWindow!.title = windowTitle
    //--- Add Scroll view
      let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      let sw = NSScrollView (frame:frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      mExplorerWindow!.contentView = sw
    }
  #endif
  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showObjectWindowFromExplorerButton (_ : Any) {
      if mExplorerWindow == nil {
        buildExplorerWindow ()
      }
      mExplorerWindow?.makeKeyAndOrderFront(nil)
    }
  #endif

  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteSelectionControllerWindowAction (_ : Any) {
      clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func clearObjectExplorer () {
      let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton!.target = nil
      mExplorerWindow?.orderOut (nil)
      mExplorerWindow = nil
    }
  #endif

  //···················································································································*

  private final func bind_property_advance (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_advance (self.advance_property)
    self.advance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.advance_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.advance_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.advance_property.setProp (inValue)
          }
        }
      }
    }
    self.advance_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.advance_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_codePoint (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_codePoint (self.codePoint_property)
    self.codePoint_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.codePoint_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.codePoint_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.codePoint_property.setProp (inValue)
          }
        }
      }
    }
    self.codePoint_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.codePoint_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_gerberCode (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_gerberCode (self.gerberCode_property)
    self.gerberCode_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CharacterGerberCode> ()
          var isMultipleSelection = false
          for object in v {
            switch object.gerberCode_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_gerberCodeInstructionCountMessage (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_gerberCodeInstructionCountMessage (self.gerberCodeInstructionCountMessage_property)
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.gerberCodeInstructionCountMessage_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_issues (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_mWarnsWhenAdvanceIsZero (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_mWarnsWhenAdvanceIsZero (self.mWarnsWhenAdvanceIsZero_property)
    self.mWarnsWhenAdvanceIsZero_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWarnsWhenAdvanceIsZero_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWarnsWhenAdvanceIsZero_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWarnsWhenAdvanceIsZero_property.setProp (inValue)
          }
        }
      }
    }
    self.mWarnsWhenAdvanceIsZero_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mWarnsWhenAdvanceIsZero_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mWarnsWhenNoSegment (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_mWarnsWhenNoSegment (self.mWarnsWhenNoSegment_property)
    self.mWarnsWhenNoSegment_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWarnsWhenNoSegment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWarnsWhenNoSegment_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWarnsWhenNoSegment_property.setProp (inValue)
          }
        }
      }
    }
    self.mWarnsWhenNoSegment_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mWarnsWhenNoSegment_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_segmentArrayForDrawing (model : ReadOnlyArrayOf_FontCharacter) {
    model.addEBObserverOf_segmentArrayForDrawing (self.segmentArrayForDrawing_property)
    self.segmentArrayForDrawing_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CharacterSegmentList> ()
          var isMultipleSelection = false
          for object in v {
            switch object.segmentArrayForDrawing_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

