//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutFontDocument) class AutoLayoutFontDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: selectedCharacterController
  //································································································

  final var selectedCharacterController = Controller_AutoLayoutFontDocument_selectedCharacterController ()

  //································································································
  //   Selection controller: characterSelection
  //································································································

  final var characterSelection = SelectionController_AutoLayoutFontDocument_characterSelection ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: statusImage
  //································································································

  final let statusImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var statusImage : NSImage? {
    return self.statusImage_property.optionalValue
  }

  //································································································
  //   Transient property: statusTitle
  //································································································

  final let statusTitle_property = EBTransientProperty <String> ()

  //································································································

  final var statusTitle : String? {
    return self.statusTitle_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: metadataStatus
  //································································································

  final let metadataStatus_property = EBTransientProperty <MetadataStatus> ()

  //································································································

  final var metadataStatus : MetadataStatus? {
    return self.metadataStatus_property.optionalValue
  }

  //································································································
  //   Transient property: canDeleteCurrentCharacter
  //································································································

  final let canDeleteCurrentCharacter_property = EBTransientProperty <Bool> ()

  //································································································

  final var canDeleteCurrentCharacter : Bool? {
    return self.canDeleteCurrentCharacter_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mFontGraphicView : AutoLayoutCanariFontCharacterView? = nil
  weak final var mFontInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "FontRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : FontRoot { return self.mRootObject as! FontRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.PageMasterView ()
    let fontPage = self.FontPage ()
    let infoPage = self.InfoPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: .regular)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Font", tooltip: "Characters Definition", pageView: fontPage)
          .addPage (title: "Infos", tooltip: "Document Infos", pageView: infoPage)
          .bind_selectedPage (self.rootObject.selectedTab_property)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (size: .regular)
          .bind_signature (self.signatureObserver_property)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .small, alignment: .center)
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (size: .regular)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small, alignment: .center)
        _ = view_0_2.appendView (view_0_2_1)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.statusMessage_property)
            .bind_errorCount (self.statusErrorCount_property)
            .bind_warningCount (self.statusWarningCount_property)
          _ = view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_2)
        }
        _ = view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
        _ = view_0_4.appendView (view_0_4_1)
      }
      _ = view_0.appendView (view_0_4)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW FontPageInspectorMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func FontPageInspectorMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW FontPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func FontPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let fontPageInspectorMasterView = self.FontPageInspectorMasterView ()
    let selectedCharacterInspectorView = self.SelectedCharacterInspectorView ()
    let sampleStringInspectorView = self.SampleStringInspectorView ()
    let issuesInspectorView = self.IssuesInspectorView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutTextField (minWidth: 200, size: .small)
        .expandableWidth ()
        .bind_value (preferences_sampleString_property, sendContinously:true)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutDoubleField (width: 60, size: .small)
        .bind_value (preferences_sampleStringSize_property, sendContinously:true)
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariSampleFontStringView ()
      .bind_bezierPath (self.rootObject.sampleStringBezierPath_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutVerticalStackView ()
      do{
        let view_2_0_0 = AutoLayoutSegmentedControlWithPages (documentView: fontPageInspectorMasterView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "🛠", tooltip: "Selected Character Inspector", pageView: selectedCharacterInspectorView)
          .addPage (title: "🔍", tooltip: "Sample String Inspector", pageView: sampleStringInspectorView)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: issuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
          .bind_segmentImage (self.statusImage_property, segmentIndex:2)
          .bind_segmentTitle (self.statusTitle_property, segmentIndex:2)
        self.mFontInspectorSegmentedControl = view_2_0_0 // Outlet
        _ = view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (bottomMargin: .large)
          .set (spacing: .large)
        do{
          let view_2_0_1_0 = fontPageInspectorMasterView
          _ = view_2_0_1.appendView (view_2_0_1_0)
        }
        _ = view_2_0.appendView (view_2_0_1)
      }
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutCanariFontCharacterView ()
        .bind_advance (self.characterSelection.advance_property)
        .bind_characterSegmentList (self.characterSelection.segmentArrayForDrawing_property)
        .bind_transparency (preferences_fontEditionTransparency_property)
        .bind_displayFlow (preferences_showGerberDrawingFlow_property)
        .bind_displayDrawingIndexes (preferences_showGerberDrawingIndexes_property)
      self.mFontGraphicView = view_2_1 // Outlet
      self.configure_fontGraphicView (view_2_1) // Configurator
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW IssuesInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func IssuesInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.statusMessage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: false)
      .bind_issues (self.rootObject.issues_property)
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SampleStringInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SampleStringInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Sample String", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTextView ()
      .bind_value (preferences_sampleString_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutStaticLabel (title: "Sample String Metrics", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutGridView2 ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      _ = view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_2)
    }
    _ = vStackView.appendView (view_3)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SelectedCharacterInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SelectedCharacterInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Font Nominal Size", bold: true, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutIntField (minWidth: 56, size: .small)
        .bind_value (self.rootObject.nominalSize_property, sendContinously:false)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutStaticLabel (title: "Segment Opacity", bold: true, size: .small, alignment: .center)
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutStaticLabel (title: "(for edition)", bold: false, size: .mini, alignment: .center)
      _ = view_2.appendView (view_2_2)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutDoubleSlider (width: -1, min: 0, max: 1, ticks: 11)
        .bind_value (preferences_fontEditionTransparency_property)
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutDoubleField (width: 56, size: .small)
        .bind_value (preferences_fontEditionTransparency_property, sendContinously:false)
      _ = view_3.appendView (view_3_1)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutHorizontalStackView ()
    do{
      let view_5_0 = AutoLayoutStaticLabel (title: "Current Character", bold: true, size: .small, alignment: .center)
      _ = view_5.appendView (view_5_0)
      let view_5_1 = AutoLayoutButton (title: "Delete", size: .small)
        .bind_enabled (.prop (self.canDeleteCurrentCharacter_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.deleteCurrentCharacterAction (_:))
        )
      _ = view_5.appendView (view_5_1)
      let view_5_2 = AutoLayoutFlexibleSpace ()
      _ = view_5.appendView (view_5_2)
      let view_5_3 = AutoLayoutButton (title: "New Character…", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.newCharacterAction (_:))
        )
      _ = view_5.appendView (view_5_3)
    }
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutHorizontalStackView ()
    do{
      let view_6_0 = AutoLayoutCanariFontCharacterSelectButton ()
        .bind_codePoint (self.rootObject.currentCharacterCodePoint_property)
        .bind_characters (self.rootObject.definedCharacters_property)
      _ = view_6.appendView (view_6_0)
      let view_6_1 = AutoLayoutStepper ()
        .bind_value (self.rootObject.currentCharacterCodePoint_property)
      _ = view_6.appendView (view_6_1)
      let view_6_2 = AutoLayoutStaticLabel (title: "Code", bold: false, size: .small, alignment: .center)
      _ = view_6.appendView (view_6_2)
      let view_6_3 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.rootObject.currentCharacterCodePointString_property)
      _ = view_6.appendView (view_6_3)
      let view_6_4 = AutoLayoutFlexibleSpace ()
      _ = view_6.appendView (view_6_4)
      let view_6_5 = AutoLayoutButton (title: "New Segment", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.addSegmentAction (_:))
        )
      _ = view_6.appendView (view_6_5)
    }
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutHorizontalStackView ()
    do{
      let view_7_0 = AutoLayoutStaticLabel (title: "Advancement", bold: false, size: .small, alignment: .center)
      _ = view_7.appendView (view_7_0)
      let view_7_1 = AutoLayoutFlexibleSpace ()
      _ = view_7.appendView (view_7_1)
    }
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutHorizontalStackView ()
    do{
      let view_8_0 = AutoLayoutIntSlider (width: -1, min: 0, max: 32, ticks: 33)
        .bind_value (self.characterSelection.advance_property)
      _ = view_8.appendView (view_8_0)
      let view_8_1 = AutoLayoutIntField (minWidth: 56, size: .small)
        .bind_value (self.characterSelection.advance_property, sendContinously:false)
      _ = view_8.appendView (view_8_1)
    }
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutHorizontalStackView ()
    do{
      let view_9_0 = AutoLayoutStaticLabel (title: "Warns", bold: false, size: .small, alignment: .center)
      _ = view_9.appendView (view_9_0)
      let view_9_1 = AutoLayoutCheckbox (title: "No Segment", size: .small)
        .bind_value (self.characterSelection.mWarnsWhenNoSegment_property)
      _ = view_9.appendView (view_9_1)
      let view_9_2 = AutoLayoutFlexibleSpace ()
      _ = view_9.appendView (view_9_2)
      let view_9_3 = AutoLayoutCheckbox (title: "Zero Advancement", size: .small)
        .bind_value (self.characterSelection.mWarnsWhenAdvanceIsZero_property)
      _ = view_9.appendView (view_9_3)
    }
    _ = vStackView.appendView (view_9)
    let view_10 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_10)
    let view_11 = AutoLayoutHorizontalStackView ()
    do{
      let view_11_0 = AutoLayoutStaticLabel (title: "Gerber Code", bold: true, size: .small, alignment: .center)
      _ = view_11.appendView (view_11_0)
      let view_11_1 = AutoLayoutFlexibleSpace ()
      _ = view_11.appendView (view_11_1)
      let view_11_2 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.characterSelection.gerberCodeInstructionCountMessage_property)
      _ = view_11.appendView (view_11_2)
    }
    _ = vStackView.appendView (view_11)
    let view_12 = AutoLayoutHorizontalStackView ()
    do{
      let view_12_0 = AutoLayoutCheckbox (title: "Show Gerber Flow", size: .small)
        .bind_value (preferences_showGerberDrawingFlow_property)
      _ = view_12.appendView (view_12_0)
      let view_12_1 = AutoLayoutFlexibleSpace ()
      _ = view_12.appendView (view_12_1)
      let view_12_2 = AutoLayoutCheckbox (title: "Show Indexes", size: .small)
        .bind_value (preferences_showGerberDrawingIndexes_property)
      _ = view_12.appendView (view_12_2)
    }
    _ = vStackView.appendView (view_12)
    let view_13 = AutoLayoutCanariFontCharacterGerberCodeTableView (size: .small)
      .bind_characterGerberCode (self.characterSelection.gerberCode_property)
    _ = vStackView.appendView (view_13)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW InfoPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func InfoPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setTopAlignment ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Description", bold: false, size: .regular, alignment: .center)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutFontDocument.resetVersionAndSignatureAction (_:))
        )
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 0
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .center)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 1
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (preferences_sampleStringSize_property, sendContinously:true)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 2
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .center)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 3
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathWidth_property)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 4
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Ascenders", bold: false, size: .small, alignment: .center)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 5
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathAscent_property)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 6
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Descenders", bold: false, size: .small, alignment: .center)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    IMPLICIT VIEW 7
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.sampleStringBezierPathDescent_property)
    return view
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: selectedCharacterController
    self.selectedCharacterController.bind_model (self.rootObject.characters_property, self.undoManager)

  //--- Selection controller property: characterSelection
    self.characterSelection.bind_selection (model: self.selectedCharacterController.selectedArray_property)


  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.statusImage_property)

  //--- Atomic property: statusTitle
    self.statusTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusTitle (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.statusTitle_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_statusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.metadataStatus_property)

  //--- Atomic property: canDeleteCurrentCharacter
    self.canDeleteCurrentCharacter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.definedCharacters_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutFontDocument_canDeleteCurrentCharacter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.definedCharacters_property.startsBeingObserved (by: self.canDeleteCurrentCharacter_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

