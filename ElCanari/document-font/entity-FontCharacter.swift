//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_codePoint : AnyObject {
  var codePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_advance : AnyObject {
  var advance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_mWarnsWhenNoSegment : AnyObject {
  var mWarnsWhenNoSegment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_mWarnsWhenAdvanceIsZero : AnyObject {
  var mWarnsWhenAdvanceIsZero : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_segmentArrayForDrawing : AnyObject {
  var segmentArrayForDrawing : CharacterSegmentList? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_gerberCode : AnyObject {
  var gerberCode : CharacterGerberCode? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_gerberCodeInstructionCountMessage : AnyObject {
  var gerberCodeInstructionCountMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class FontCharacter : EBManagedObject,
         FontCharacter_codePoint,
         FontCharacter_advance,
         FontCharacter_mWarnsWhenNoSegment,
         FontCharacter_mWarnsWhenAdvanceIsZero,
         FontCharacter_segmentArrayForDrawing,
         FontCharacter_gerberCode,
         FontCharacter_gerberCodeInstructionCountMessage,
         FontCharacter_issues {

  //································································································
  //   Atomic property: codePoint
  //································································································

  final let codePoint_property : EBStoredProperty_Int

  //································································································

  final var codePoint : Int {
    get { return self.codePoint_property.propval }
    set { self.codePoint_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: advance
  //································································································

  final let advance_property : EBStoredProperty_Int

  //································································································

  final var advance : Int {
    get { return self.advance_property.propval }
    set { self.advance_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mWarnsWhenNoSegment
  //································································································

  final let mWarnsWhenNoSegment_property : EBStoredProperty_Bool

  //································································································

  final var mWarnsWhenNoSegment : Bool {
    get { return self.mWarnsWhenNoSegment_property.propval }
    set { self.mWarnsWhenNoSegment_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mWarnsWhenAdvanceIsZero
  //································································································

  final let mWarnsWhenAdvanceIsZero_property : EBStoredProperty_Bool

  //································································································

  final var mWarnsWhenAdvanceIsZero : Bool {
    get { return self.mWarnsWhenAdvanceIsZero_property.propval }
    set { self.mWarnsWhenAdvanceIsZero_property.setProp (newValue) }
  }

  //································································································
  //   To many property: segments
  //································································································

  final let segments_property = StoredArrayOf_SegmentForFontCharacter (usedForSignature: true, key: "segments")

  //································································································
  //   Transient property: segmentArrayForDrawing
  //································································································

  final let segmentArrayForDrawing_property = EBTransientProperty <CharacterSegmentList> ()

  //································································································

  final var segmentArrayForDrawing : CharacterSegmentList? {
    return self.segmentArrayForDrawing_property.optionalValue
  }

  //································································································
  //   Transient property: gerberCode
  //································································································

  final let gerberCode_property = EBTransientProperty <CharacterGerberCode> ()

  //································································································

  final var gerberCode : CharacterGerberCode? {
    return self.gerberCode_property.optionalValue
  }

  //································································································
  //   Transient property: gerberCodeInstructionCountMessage
  //································································································

  final let gerberCodeInstructionCountMessage_property = EBTransientProperty <String> ()

  //································································································

  final var gerberCodeInstructionCountMessage : String? {
    return self.gerberCodeInstructionCountMessage_property.optionalValue
  }

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.codePoint_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "codePoint")
    self.advance_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "advance")
    self.mWarnsWhenNoSegment_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mWarnsWhenNoSegment")
    self.mWarnsWhenAdvanceIsZero_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mWarnsWhenAdvanceIsZero")
    super.init (inUndoManager)
  //--- To many property: segments (no option)
    self.segments_property.undoManager = inUndoManager
  //--- Atomic property: segmentArrayForDrawing
    self.segmentArrayForDrawing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.segments_property.selection
        let s1 = unwSelf.segments_property.selection
        let s2 = unwSelf.segments_property.selection
        let s3 = unwSelf.segments_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_FontCharacter_segmentArrayForDrawing (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.segments_property.toMany_x1_StartsBeingObserved (by: self.segmentArrayForDrawing_property)
    self.segments_property.toMany_y1_StartsBeingObserved (by: self.segmentArrayForDrawing_property)
    self.segments_property.toMany_x2_StartsBeingObserved (by: self.segmentArrayForDrawing_property)
    self.segments_property.toMany_y2_StartsBeingObserved (by: self.segmentArrayForDrawing_property)
  //--- Atomic property: gerberCode
    self.gerberCode_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.segmentArrayForDrawing_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontCharacter_gerberCode (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.segmentArrayForDrawing_property.startsBeingObserved (by: self.gerberCode_property)
  //--- Atomic property: gerberCodeInstructionCountMessage
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.gerberCode_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontCharacter_gerberCodeInstructionCountMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.gerberCode_property.startsBeingObserved (by: self.gerberCodeInstructionCountMessage_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.codePoint_property.selection
        let s1 = unwSelf.advance_property.selection
        let s2 = unwSelf.mWarnsWhenNoSegment_property.selection
        let s3 = unwSelf.mWarnsWhenAdvanceIsZero_property.selection
        let s4 = unwSelf.segments_property.count_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_FontCharacter_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.codePoint_property.startsBeingObserved (by: self.issues_property)
    self.advance_property.startsBeingObserved (by: self.issues_property)
    self.mWarnsWhenNoSegment_property.startsBeingObserved (by: self.issues_property)
    self.mWarnsWhenAdvanceIsZero_property.startsBeingObserved (by: self.issues_property)
    self.segments_property.startsBeingObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.advance_property.setSignatureObserver (observer: self)
    self.codePoint_property.setSignatureObserver (observer: self)
    self.mWarnsWhenAdvanceIsZero_property.setSignatureObserver (observer: self)
    self.mWarnsWhenNoSegment_property.setSignatureObserver (observer: self)
    self.segments_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.advance_property.signature ())
    crc.accumulate (u32: self.codePoint_property.signature ())
    crc.accumulate (u32: self.mWarnsWhenAdvanceIsZero_property.signature ())
    crc.accumulate (u32: self.mWarnsWhenNoSegment_property.signature ())
    crc.accumulate (u32: self.segments_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

