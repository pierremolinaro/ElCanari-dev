//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_codePoint : AnyObject {
  var codePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_advance : AnyObject {
  var advance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_mWarnsWhenNoSegment : AnyObject {
  var mWarnsWhenNoSegment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_mWarnsWhenAdvanceIsZero : AnyObject {
  var mWarnsWhenAdvanceIsZero : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_segmentArrayForDrawing : AnyObject {
  var segmentArrayForDrawing : CharacterSegmentList? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_gerberCode : AnyObject {
  var gerberCode : CharacterGerberCode? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_gerberCodeInstructionCountMessage : AnyObject {
  var gerberCodeInstructionCountMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontCharacter_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class FontCharacter : EBManagedObject,
         FontCharacter_codePoint,
         FontCharacter_advance,
         FontCharacter_mWarnsWhenNoSegment,
         FontCharacter_mWarnsWhenAdvanceIsZero,
         FontCharacter_segmentArrayForDrawing,
         FontCharacter_gerberCode,
         FontCharacter_gerberCodeInstructionCountMessage,
         FontCharacter_issues {

  //····················································································································
  //   Atomic property: codePoint
  //····················································································································

  final let codePoint_property : EBStoredProperty_Int

  //····················································································································

  final func reset_codePoint_toDefaultValue () {
    self.codePoint = 0
  }

  //····················································································································

  final var codePoint : Int {
    get { return self.codePoint_property.propval }
    set { self.codePoint_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: advance
  //····················································································································

  final let advance_property : EBStoredProperty_Int

  //····················································································································

  final func reset_advance_toDefaultValue () {
    self.advance = 0
  }

  //····················································································································

  final var advance : Int {
    get { return self.advance_property.propval }
    set { self.advance_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWarnsWhenNoSegment
  //····················································································································

  final let mWarnsWhenNoSegment_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mWarnsWhenNoSegment_toDefaultValue () {
    self.mWarnsWhenNoSegment = true
  }

  //····················································································································

  final var mWarnsWhenNoSegment : Bool {
    get { return self.mWarnsWhenNoSegment_property.propval }
    set { self.mWarnsWhenNoSegment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWarnsWhenAdvanceIsZero
  //····················································································································

  final let mWarnsWhenAdvanceIsZero_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mWarnsWhenAdvanceIsZero_toDefaultValue () {
    self.mWarnsWhenAdvanceIsZero = true
  }

  //····················································································································

  final var mWarnsWhenAdvanceIsZero : Bool {
    get { return self.mWarnsWhenAdvanceIsZero_property.propval }
    set { self.mWarnsWhenAdvanceIsZero_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: segments
  //····················································································································

  final let segments_property = StoredArrayOf_SegmentForFontCharacter (usedForSignature: true, key: "segments")

  //····················································································································

  //····················································································································

  final var segments : EBReferenceArray <SegmentForFontCharacter> {
    get { return self.segments_property.propval }
    set { self.segments_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: segmentArrayForDrawing
  //····················································································································

  final let segmentArrayForDrawing_property = EBTransientProperty_CharacterSegmentList ()

  //····················································································································

  final var segmentArrayForDrawing : CharacterSegmentList? {
    switch self.segmentArrayForDrawing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCode
  //····················································································································

  final let gerberCode_property = EBTransientProperty_CharacterGerberCode ()

  //····················································································································

  final var gerberCode : CharacterGerberCode? {
    switch self.gerberCode_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCodeInstructionCountMessage
  //····················································································································

  final let gerberCodeInstructionCountMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var gerberCodeInstructionCountMessage : String? {
    switch self.gerberCodeInstructionCountMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.codePoint_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "codePoint")
    self.advance_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "advance")
    self.mWarnsWhenNoSegment_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mWarnsWhenNoSegment")
    self.mWarnsWhenAdvanceIsZero_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mWarnsWhenAdvanceIsZero")
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: segments (no option)
    self.segments_property.undoManager = inUndoManager
  //--- Atomic property: segmentArrayForDrawing
    self.segmentArrayForDrawing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.segments_property.selection
        let s1 = unwSelf.segments_property.selection
        let s2 = unwSelf.segments_property.selection
        let s3 = unwSelf.segments_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_FontCharacter_segmentArrayForDrawing (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.segments_property.addEBObserverOf_x1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_x2 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y2 (self.segmentArrayForDrawing_property)
  //--- Atomic property: gerberCode
    self.gerberCode_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.segmentArrayForDrawing_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontCharacter_gerberCode (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.segmentArrayForDrawing_property.addEBObserver (self.gerberCode_property)
  //--- Atomic property: gerberCodeInstructionCountMessage
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.gerberCode_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontCharacter_gerberCodeInstructionCountMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.gerberCode_property.addEBObserver (self.gerberCodeInstructionCountMessage_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.codePoint_property.selection
        let s1 = unwSelf.advance_property.selection
        let s2 = unwSelf.mWarnsWhenNoSegment_property.selection
        let s3 = unwSelf.mWarnsWhenAdvanceIsZero_property.selection
        let s4 = unwSelf.segments_property.count_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_FontCharacter_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.codePoint_property.addEBObserver (self.issues_property)
    self.advance_property.addEBObserver (self.issues_property)
    self.mWarnsWhenNoSegment_property.addEBObserver (self.issues_property)
    self.mWarnsWhenAdvanceIsZero_property.addEBObserver (self.issues_property)
    self.segments_property.addEBObserver (self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.advance_property.setSignatureObserver (observer: self)
    self.codePoint_property.setSignatureObserver (observer: self)
    self.mWarnsWhenAdvanceIsZero_property.setSignatureObserver (observer: self)
    self.mWarnsWhenNoSegment_property.setSignatureObserver (observer: self)
    self.segments_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: codePoint
      self.codePoint_property.storeIn (dictionary: &ioDictionary, forKey: "codePoint")
    //--- Atomic property: advance
      self.advance_property.storeIn (dictionary: &ioDictionary, forKey: "advance")
    //--- Atomic property: mWarnsWhenNoSegment
      self.mWarnsWhenNoSegment_property.storeIn (dictionary: &ioDictionary, forKey: "mWarnsWhenNoSegment")
    //--- Atomic property: mWarnsWhenAdvanceIsZero
      self.mWarnsWhenAdvanceIsZero_property.storeIn (dictionary: &ioDictionary, forKey: "mWarnsWhenAdvanceIsZero")
  //--- To many property: segments
    self.store (
      managedObjectArray: self.segments_property.propval.values,
      relationshipName: "segments",
      intoDictionary: &ioDictionary
    )
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: segments
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "segments",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SegmentForFontCharacter]
      self.segments_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: codePoint
    self.codePoint_property.readFrom (dictionary: inDictionary, forKey: "codePoint")
  //--- Atomic property: advance
    self.advance_property.readFrom (dictionary: inDictionary, forKey: "advance")
  //--- Atomic property: mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.readFrom (dictionary: inDictionary, forKey: "mWarnsWhenNoSegment")
  //--- Atomic property: mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.readFrom (dictionary: inDictionary, forKey: "mWarnsWhenAdvanceIsZero")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "codePoint\n"
    ioString += "advance\n"
    ioString += "mWarnsWhenNoSegment\n"
    ioString += "mWarnsWhenAdvanceIsZero\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "segments\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.codePoint.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.advance.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWarnsWhenNoSegment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWarnsWhenAdvanceIsZero.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.segments.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["codePoint"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.codePoint = value
    }
    if let range = inDictionary ["advance"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.advance = value
    }
    if let range = inDictionary ["mWarnsWhenNoSegment"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mWarnsWhenNoSegment = value
    }
    if let range = inDictionary ["mWarnsWhenAdvanceIsZero"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mWarnsWhenAdvanceIsZero = value
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many segments
    if let range = inDictionary ["segments"], range.length > 0 {
      var relationshipArray = EBReferenceArray <SegmentForFontCharacter> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! SegmentForFontCharacter)
      }
      self.segments = relationshipArray
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: segments
    for managedObject in self.segments.values {
      ioObjectArray.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.advance_property.signature ())
    crc.accumulate (u32: self.codePoint_property.signature ())
    crc.accumulate (u32: self.mWarnsWhenAdvanceIsZero_property.signature ())
    crc.accumulate (u32: self.mWarnsWhenNoSegment_property.signature ())
    crc.accumulate (u32: self.segments_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

