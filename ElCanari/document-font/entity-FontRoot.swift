//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_comments : AnyObject {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_nominalSize : AnyObject {
  var nominalSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_selectedTab : AnyObject {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_selectedInspector : AnyObject {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_currentCharacterCodePoint : AnyObject {
  var currentCharacterCodePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_currentCharacterCodePointString : AnyObject {
  var currentCharacterCodePointString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_sampleStringBezierPath : AnyObject {
  var sampleStringBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_sampleStringBezierPathWidth : AnyObject {
  var sampleStringBezierPathWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_sampleStringBezierPathAscent : AnyObject {
  var sampleStringBezierPathAscent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_sampleStringBezierPathDescent : AnyObject {
  var sampleStringBezierPathDescent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_definedCharacters : AnyObject {
  var definedCharacters : DefinedCharactersInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class FontRoot : EBManagedObject,
         FontRoot_comments,
         FontRoot_nominalSize,
         FontRoot_selectedTab,
         FontRoot_selectedInspector,
         FontRoot_currentCharacterCodePoint,
         FontRoot_currentCharacterCodePointString,
         FontRoot_sampleStringBezierPath,
         FontRoot_sampleStringBezierPathWidth,
         FontRoot_sampleStringBezierPathAscent,
         FontRoot_sampleStringBezierPathDescent,
         FontRoot_definedCharacters,
         FontRoot_issues {

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  final let comments_property : EBStoredProperty_String

  //····················································································································

  final func reset_comments_toDefaultValue () {
    self.comments = ""
  }

  //····················································································································

  final var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: nominalSize
  //····················································································································

  final let nominalSize_property : EBStoredProperty_Int

  //····················································································································

  final func reset_nominalSize_toDefaultValue () {
    self.nominalSize = 14
  }

  //····················································································································

  final var nominalSize : Int {
    get { return self.nominalSize_property.propval }
    set { self.nominalSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedTab
  //····················································································································

  final let selectedTab_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedTab_toDefaultValue () {
    self.selectedTab = 0
  }

  //····················································································································

  final var selectedTab : Int {
    get { return self.selectedTab_property.propval }
    set { self.selectedTab_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  final let selectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedInspector_toDefaultValue () {
    self.selectedInspector = 0
  }

  //····················································································································

  final var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: currentCharacterCodePoint
  //····················································································································

  final let currentCharacterCodePoint_property : EBStoredProperty_Int

  //····················································································································

  final func reset_currentCharacterCodePoint_toDefaultValue () {
    self.currentCharacterCodePoint = 32
  }

  //····················································································································

  final var currentCharacterCodePoint : Int {
    get { return self.currentCharacterCodePoint_property.propval }
    set { self.currentCharacterCodePoint_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: characters
  //····················································································································

  final let characters_property = Custom_FontCharacter_StoredArrayOf_FontCharacter (usedForSignature: true, key: KEY_FOR_FontCharacter_characters)

  //····················································································································

  //····················································································································

  final var characters : EBReferenceArray <FontCharacter> {
    get { return self.characters_property.propval }
    set { self.characters_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: currentCharacterCodePointString
  //····················································································································

  final let currentCharacterCodePointString_property = EBTransientProperty_String ()

  //····················································································································

  final var currentCharacterCodePointString : String? {
    return self.currentCharacterCodePointString_property.optionalValue
  }

  //····················································································································
  //   Transient property: sampleStringBezierPath
  //····················································································································

  final let sampleStringBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  final var sampleStringBezierPath : NSBezierPath? {
    return self.sampleStringBezierPath_property.optionalValue
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathWidth
  //····················································································································

  final let sampleStringBezierPathWidth_property = EBTransientProperty_String ()

  //····················································································································

  final var sampleStringBezierPathWidth : String? {
    return self.sampleStringBezierPathWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathAscent
  //····················································································································

  final let sampleStringBezierPathAscent_property = EBTransientProperty_String ()

  //····················································································································

  final var sampleStringBezierPathAscent : String? {
    return self.sampleStringBezierPathAscent_property.optionalValue
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathDescent
  //····················································································································

  final let sampleStringBezierPathDescent_property = EBTransientProperty_String ()

  //····················································································································

  final var sampleStringBezierPathDescent : String? {
    return self.sampleStringBezierPathDescent_property.optionalValue
  }

  //····················································································································
  //   Transient property: definedCharacters
  //····················································································································

  final let definedCharacters_property = EBTransientProperty_DefinedCharactersInDevice ()

  //····················································································································

  final var definedCharacters : DefinedCharactersInDevice? {
    return self.definedCharacters_property.optionalValue
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "comments")
    self.nominalSize_property = EBStoredProperty_Int (defaultValue: 14, undoManager: inUndoManager, key: "nominalSize")
    self.selectedTab_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedTab")
    self.selectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedInspector")
    self.currentCharacterCodePoint_property = EBStoredProperty_Int (defaultValue: 32, undoManager: inUndoManager, key: "currentCharacterCodePoint")
    super.init (inUndoManager)
  //--- To many property: characters (no option)
    self.characters_property.undoManager = inUndoManager
  //--- Atomic property: currentCharacterCodePointString
    self.currentCharacterCodePointString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.currentCharacterCodePoint_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_currentCharacterCodePointString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.currentCharacterCodePoint_property.startsToBeObserved (by: self.currentCharacterCodePointString_property)
  //--- Atomic property: sampleStringBezierPath
    self.sampleStringBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.nominalSize_property.selection
        let s1 = unwSelf.characters_property.selection
        let s2 = unwSelf.characters_property.selection
        let s3 = preferences_sampleString_property.selection
        let s4 = preferences_sampleStringSize_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_FontRoot_sampleStringBezierPath (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.nominalSize_property.startsToBeObserved (by: self.sampleStringBezierPath_property)
    self.characters_property.toMany_segmentArrayForDrawing_StartsToBeObserved (by: self.sampleStringBezierPath_property)
    self.characters_property.toMany_advance_StartsToBeObserved (by: self.sampleStringBezierPath_property)
    preferences_sampleString_property.startsToBeObserved (by: self.sampleStringBezierPath_property)
    preferences_sampleStringSize_property.startsToBeObserved (by: self.sampleStringBezierPath_property)
  //--- Atomic property: sampleStringBezierPathWidth
    self.sampleStringBezierPathWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.sampleStringBezierPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_sampleStringBezierPathWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.startsToBeObserved (by: self.sampleStringBezierPathWidth_property)
  //--- Atomic property: sampleStringBezierPathAscent
    self.sampleStringBezierPathAscent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.sampleStringBezierPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_sampleStringBezierPathAscent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.startsToBeObserved (by: self.sampleStringBezierPathAscent_property)
  //--- Atomic property: sampleStringBezierPathDescent
    self.sampleStringBezierPathDescent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.sampleStringBezierPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_sampleStringBezierPathDescent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.startsToBeObserved (by: self.sampleStringBezierPathDescent_property)
  //--- Atomic property: definedCharacters
    self.definedCharacters_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.characters_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_definedCharacters (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.characters_property.toMany_codePoint_StartsToBeObserved (by: self.definedCharacters_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.characters_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontRoot_issues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.characters_property.toMany_issues_StartsToBeObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.characters_property.setSignatureObserver (observer: self)
    self.comments_property.setSignatureObserver (observer: self)
    self.nominalSize_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.characters_property.signature ())
    crc.accumulate (u32: self.comments_property.signature ())
    crc.accumulate (u32: self.nominalSize_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

