//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SegmentForFontCharacter : EBReadOnlyAbstractArrayProperty <SegmentForFontCharacter> {

  //································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SegmentForFontCharacter>,                            
                                 addedSet inAddedSet : EBReferenceSet <SegmentForFontCharacter>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_x1 { // Stored property
        managedObject.x1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y1 { // Stored property
        managedObject.y1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2 { // Stored property
        managedObject.x2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2 { // Stored property
        managedObject.y2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_x1 { // Stored property
        managedObject.x1_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y1 { // Stored property
        managedObject.y1_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2 { // Stored property
        managedObject.x2_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2 { // Stored property
        managedObject.y2_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
    }
  }

  //································································································
  //   Observers of 'x1' stored property
  //································································································

  private final var mObserversOf_x1 : EBObservedObserver? = nil

  //································································································

  final func toMany_x1_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x1_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_x1 = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_x1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x1?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'y1' stored property
  //································································································

  private final var mObserversOf_y1 : EBObservedObserver? = nil

  //································································································

  final func toMany_y1_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y1_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_y1 = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_y1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y1?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'x2' stored property
  //································································································

  private final var mObserversOf_x2 : EBObservedObserver? = nil

  //································································································

  final func toMany_x2_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x2_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_x2 = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_x2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x2?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'y2' stored property
  //································································································

  private final var mObserversOf_y2 : EBObservedObserver? = nil

  //································································································

  final func toMany_y2_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y2_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_y2 = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_y2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y2?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'objectDisplay' transient property
  //································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //································································································

  final func toMany_objectDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'selectionDisplay' transient property
  //································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //································································································

  final func toMany_selectionDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SegmentForFontCharacter is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SegmentForFontCharacter is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SegmentForFontCharacter : ReadOnlyArrayOf_SegmentForFontCharacter {

  //································································································

  func setProp (_ value :  EBReferenceArray <SegmentForFontCharacter>) { } // Abstract method

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SegmentForFontCharacter is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SegmentForFontCharacter : ReadWriteArrayOf_SegmentForFontCharacter, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol, Sendable {

  //································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SegmentForFontCharacter> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SegmentForFontCharacter)
      }
      self.setProp (objectArray)
    }
  }

  //································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <SegmentForFontCharacter> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! SegmentForFontCharacter)
    }
    self.setProp (objectArray)
  }

  //································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //································································································
  //   Signature ?
  //································································································

  final private let mUsedForSignature : Bool

  //································································································
  //   Undo manager
  //································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //································································································
  // Model will change
  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SegmentForFontCharacter>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
//    self.undoManager?.registerUndo < EBReferenceArray <SegmentForFontCharacter> > (withTarget: self) {
//      DispatchQueue.main.async {
//        $0.mInternalArrayValue = inOldValue
//      }
//    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //································································································
  // Model did change
  //································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //································································································
  // Update observers
  //································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SegmentForFontCharacter>,
                                 addedSet inAddedSet : EBReferenceSet <SegmentForFontCharacter>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //································································································

  override final var selection : EBSelection < [SegmentForFontCharacter] > { return .single (self.mInternalArrayValue.values) }

  //································································································

  override func setProp (_ inValue : EBReferenceArray <SegmentForFontCharacter>) { self.mInternalArrayValue = inValue }

  //································································································

  final override var propval : EBReferenceArray <SegmentForFontCharacter> { return self.mInternalArrayValue }

  //································································································

  final func remove (_ object : SegmentForFontCharacter) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //································································································

  final func add (_ object : SegmentForFontCharacter) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //································································································
  //   signature
  //································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //································································································

  private final var mSignatureCache : UInt32? = nil

  //································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SegmentForFontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SegmentForFontCharacter is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

