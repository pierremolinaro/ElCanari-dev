//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_FontCharacter : ReadOnlyAbstractObjectProperty <FontCharacter> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : FontCharacter?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.codePoint_property.removeEBObserver (self.codePoint_property) // Stored property
      oldValue.advance_property.removeEBObserver (self.advance_property) // Stored property
      oldValue.mWarnsWhenNoSegment_property.removeEBObserver (self.mWarnsWhenNoSegment_property) // Stored property
      oldValue.mWarnsWhenAdvanceIsZero_property.removeEBObserver (self.mWarnsWhenAdvanceIsZero_property) // Stored property
      oldValue.segmentArrayForDrawing_property.removeEBObserver (self.segmentArrayForDrawing_property) // Transient property
      oldValue.gerberCode_property.removeEBObserver (self.gerberCode_property) // Transient property
      oldValue.gerberCodeInstructionCountMessage_property.removeEBObserver (self.gerberCodeInstructionCountMessage_property) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.codePoint_property.addEBObserver (self.codePoint_property) // Stored property
      newValue.advance_property.addEBObserver (self.advance_property) // Stored property
      newValue.mWarnsWhenNoSegment_property.addEBObserver (self.mWarnsWhenNoSegment_property) // Stored property
      newValue.mWarnsWhenAdvanceIsZero_property.addEBObserver (self.mWarnsWhenAdvanceIsZero_property) // Stored property
      newValue.segmentArrayForDrawing_property.addEBObserver (self.segmentArrayForDrawing_property) // Transient property
      newValue.gerberCode_property.addEBObserver (self.gerberCode_property) // Transient property
      newValue.gerberCodeInstructionCountMessage_property.addEBObserver (self.gerberCodeInstructionCountMessage_property) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'codePoint' stored property
  //····················································································································

  final let codePoint_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'advance' stored property
  //····················································································································

  final let advance_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mWarnsWhenNoSegment' stored property
  //····················································································································

  final let mWarnsWhenNoSegment_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mWarnsWhenAdvanceIsZero' stored property
  //····················································································································

  final let mWarnsWhenAdvanceIsZero_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'segmentArrayForDrawing' transient property
  //····················································································································

  final let segmentArrayForDrawing_property = EBGenericTransientProperty <CharacterSegmentList?> ()

  //····················································································································
  //   Observers of 'gerberCode' transient property
  //····················································································································

  final let gerberCode_property = EBGenericTransientProperty <CharacterGerberCode?> ()

  //····················································································································
  //   Observers of 'gerberCodeInstructionCountMessage' transient property
  //····················································································································

  final let gerberCodeInstructionCountMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observable toMany property: segments
  //····················································································································

  private final var mObserversOf_segments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_segments (_ inObserver : EBEvent) {
    self.mObserversOf_segments.insert (inObserver)
    if let object = self.propval {
      object.segments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_segments (_ inObserver : EBEvent) {
    self.mObserversOf_segments.remove (inObserver)
    if let object = self.propval {
      object.segments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure codePoint simple stored property
    self.codePoint_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.codePoint_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure advance simple stored property
    self.advance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.advance_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mWarnsWhenNoSegment simple stored property
    self.mWarnsWhenNoSegment_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mWarnsWhenNoSegment_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mWarnsWhenAdvanceIsZero simple stored property
    self.mWarnsWhenAdvanceIsZero_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mWarnsWhenAdvanceIsZero_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure segmentArrayForDrawing transient property
    self.segmentArrayForDrawing_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.segmentArrayForDrawing_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gerberCode transient property
    self.gerberCode_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gerberCode_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gerberCodeInstructionCountMessage transient property
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gerberCodeInstructionCountMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientObject_FontCharacter : ReadOnlyObject_FontCharacter {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_FontCharacter? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_FontCharacter?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : FontCharacter?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontCharacter? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : FontCharacter? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_FontCharacter : ReadOnlyObject_FontCharacter {

  //····················································································································

  func setProp (_ inValue : FontCharacter?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_FontCharacter : ReadWriteObject_FontCharacter {

  //····················································································································

  private var mModel : ReadWriteObject_FontCharacter? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_FontCharacter?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : FontCharacter?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : FontCharacter?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < FontCharacter? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontCharacter? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_FontCharacter : ReadWriteObject_FontCharacter, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontCharacter) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontCharacter) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    var mValueExplorer : NSButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
          }
        }
      }
    }
  #endif
  
  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontCharacter?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontCharacter? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : FontCharacter?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : FontCharacter? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

