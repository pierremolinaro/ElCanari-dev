//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(MergerDocument) class MergerDocument : EBManagedXibDocument {

  //····················································································································
  //   Array controller: mBoardModelController
  //····················································································································

  var mBoardModelController = Controller_MergerDocument_mBoardModelController ()

  //····················································································································
  //   Selection controller: mBoardModelSelection
  //····················································································································

  var mBoardModelSelection = SelectionController_MergerDocument_mBoardModelSelection ()

  //····················································································································
  //   Array controller: mBoardInstanceController
  //····················································································································

  var mBoardInstanceController = Controller_MergerDocument_mBoardInstanceController ()

  //····················································································································
  //   Selection controller: mBoardInstanceSelection
  //····················································································································

  var mBoardInstanceSelection = SelectionController_MergerDocument_mBoardInstanceSelection ()

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_MergerDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_MergerDocument_mDataSelection ()

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileNameOk
  //····················································································································

  final let documentFileNameOk_property = EBTransientProperty_Bool ()

  //····················································································································

  final var documentFileNameOk : Bool? {
    switch self.documentFileNameOk_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  final let documentIsUnnamed_property = EBTransientProperty_Bool ()

  //····················································································································

  final var documentIsUnnamed : Bool? {
    switch self.documentIsUnnamed_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: importArtworkButtonTitle
  //····················································································································

  final let importArtworkButtonTitle_property = EBTransientProperty_String ()

  //····················································································································

  final var importArtworkButtonTitle : String? {
    switch self.importArtworkButtonTitle_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  final let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var mStatusMessage : String? {
    switch self.mStatusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileErrorMessage
  //····················································································································

  final let incorrectDocumentFileErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var incorrectDocumentFileErrorMessage : String? {
    switch self.incorrectDocumentFileErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet final var addBoardModelButton : EBButton? = nil
  @IBOutlet final var dismissPrefsForSettingMergerDisplayButton : EBButton? = nil
  @IBOutlet final var mArrowMagnitudeTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mArrowMagnitudeUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mArtworkNameTextField : EBTextObserverField? = nil
  @IBOutlet final var mArtworkSettingsTabView : NSTabView? = nil
  @IBOutlet final var mArtworkVersionTextField : EBIntObserverField? = nil
  @IBOutlet final var mArtwortNameTextField : EBTextObserverField? = nil
  @IBOutlet final var mAutomaticBoardSizeSwitch : EBSwitch? = nil
  @IBOutlet final var mAutomaticBoardSizeView : NSView? = nil
  @IBOutlet final var mBoardBoardLimitTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mBoardHeightTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mBoardHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mBoardInspectorMasterView : NSView? = nil
  @IBOutlet final var mBoardInspectorSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet final var mBoardIssueInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mBoardLimitWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mBoardModelTableView : EBTableView? = nil
  @IBOutlet final var mBoardModelView : EBEnclosingGraphicView? = nil
  @IBOutlet final var mBoardOperationInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mBoardPageView : CanariViewWithKeyView? = nil
  @IBOutlet final var mBoardViewDisplayBackComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackPackagesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackPadsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBackTracksCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayBoardLimitsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontPackagesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontPadsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayFrontTracksCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayHolesCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayInternalBoardsLimitsCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewDisplayViasCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewHorizontalFlipCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardViewVerticalFlipCheckbox : EBSwitch? = nil
  @IBOutlet final var mBoardWidthTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mBoardWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mCommentTextView : EBTextObserverView? = nil
  @IBOutlet final var mComposedBoardView : EBEnclosingGraphicView? = nil
  @IBOutlet final var mDangerView : NSView? = nil
  @IBOutlet final var mDataTableView : EBTableView? = nil
  @IBOutlet final var mDeselectIssueButton : EBButton? = nil
  @IBOutlet final var mDisplaySettingView : NSView? = nil
  @IBOutlet final var mDrawBoardLimitsSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawComponentNamesBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawComponentNamesTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawComponentValuesBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawComponentValuesTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawPackageLegendBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawPackageLegendTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawPadsBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawPadsTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTextsLayoutBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTextsLayoutTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTextsLegendBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTextsLegendTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTracksBottomSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawTracksTopSideSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrawViasSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mDrillDataFileExtensionTextField : EBTextObserverField? = nil
  @IBOutlet final var mEmptyBoardMessage : EBTextField? = nil
  @IBOutlet final var mExtensionTextField : EBTextObserverField? = nil
  @IBOutlet final var mGenerateProductFilesActionButton : EBButton? = nil
  @IBOutlet final var mHorizontalMirrorSwitch : CanariObserverSwitch? = nil
  @IBOutlet final var mImportArtworkButton : EBButton? = nil
  @IBOutlet final var mIncorrectDocumentNameTextField : EBTextObserverField? = nil
  @IBOutlet final var mInsertedInstanceDefaultOrientation : NSPopUpButton? = nil
  @IBOutlet final var mInstanceCountTextField : EBIntObserverField? = nil
  @IBOutlet final var mInstanceModelNameTextField : EBTextObserverField? = nil
  @IBOutlet final var mInstanceRotation : CanariQuadrantSegmentedControl? = nil
  @IBOutlet final var mIssueTableView : IssueTableView? = nil
  @IBOutlet final var mIssueTextField : EBTextObserverField? = nil
  @IBOutlet final var mLogTextView : NSTextView? = nil
  @IBOutlet final var mManualBoardHeightTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mManualBoardHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mManualBoardSizeView : NSView? = nil
  @IBOutlet final var mManualBoardWidthTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mManualBoardWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mMasterView : NSView? = nil
  @IBOutlet final var mMinPPTPTTTWdisplayUnitTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mMinPPTPTTTWinEBUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mModelBoardLimitTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mModelDragSourceTableView : CanariDragSourceTableView? = nil
  @IBOutlet final var mModelHeightTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mModelHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mModelLimitWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mModelPageView : CanariViewWithKeyView? = nil
  @IBOutlet final var mModelViewDisplayBackComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackPackagesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackPadsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBackTracksCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayBoardLimitsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontPackagesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontPadsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayFrontTracksCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayHolesCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayInternalBoardsLimitsCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewDisplayViasCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewHorizontalFlipCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelViewVerticalFlipCheckbox : EBSwitch? = nil
  @IBOutlet final var mModelWidthTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mModelWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mMoveDownButton : EBButton? = nil
  @IBOutlet final var mMoveLeftButton : EBButton? = nil
  @IBOutlet final var mMoveRightButton : EBButton? = nil
  @IBOutlet final var mMoveUpButton : EBButton? = nil
  @IBOutlet final var mNoArtworkMessage : EBTextField? = nil
  @IBOutlet final var mNoModelMessage : EBTextField? = nil
  @IBOutlet final var mOARUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mOARValueTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mOverlapSwitch : EBSwitch? = nil
  @IBOutlet final var mPDFBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet final var mPHDUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mPHDValueTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var mPageSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet final var mProductGenerationTabView : NSTabView? = nil
  @IBOutlet final var mProductPageView : CanariViewWithKeyView? = nil
  @IBOutlet final var mSelectedBoardXTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mSelectedBoardXUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mSelectedBoardYTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mSelectedBoardYUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mShiftArrowMagnitudeTextField : CanariDimensionTextField? = nil
  @IBOutlet final var mShiftArrowMagnitudeUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var mStatusImageViewInToolbar : EBImageObserverView? = nil
  @IBOutlet final var mergerViewBackLegendLinesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewBackgroundColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackComponentNamesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackComponentValuesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackLayoutTextsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackLegendTextsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackPackagesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackPadsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBackTracksColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontComponentNamesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontComponentValuesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontLayoutTextsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontLegendTextsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontPackagesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontPadsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayFrontTracksColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayHolesColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayInternalBoardsLimitsColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewDisplayViasColorWell : EBColorWell? = nil
  @IBOutlet final var mergerViewFrontLegendLinesColorWell : EBColorWell? = nil
  @IBOutlet final var minValueForBoardLimitTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet final var minValueForBoardLimitUnitPopUp : EBPopUpButton? = nil
  @IBOutlet final var removeBoardModelButton : EBButton? = nil
  @IBOutlet final var showBoardHelpButton : EBButton? = nil
  @IBOutlet final var showPrefsForSettingMergerDisplayButton : EBButton? = nil
  @IBOutlet final var updateBoardModelButton : EBButton? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  final var mController_showPrefsForSettingMergerDisplayButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mDisplaySettingView_hidden : MultipleBindingController_hidden? = nil
  final var mController_mNoModelMessage_hidden : MultipleBindingController_hidden? = nil
  final var mController_removeBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_updateBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mAutomaticBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  final var mController_mManualBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  final var mController_mEmptyBoardMessage_hidden : MultipleBindingController_hidden? = nil
  final var mController_mOverlapSwitch_enabled : MultipleBindingController_enabled? = nil
  final var mController_mMoveRightButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mMoveLeftButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mMoveUpButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mMoveDownButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mNoArtworkMessage_hidden : MultipleBindingController_hidden? = nil
  final var mController_mDangerView_hidden : MultipleBindingController_hidden? = nil
  final var mController_mGenerateProductFilesActionButton_enabled : MultipleBindingController_enabled? = nil
  final var mController_mArtworkSettingsTabView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFileName_property.postEvent ()
    }
  }

  //····················································································································

  final func computeTransient_documentFileName () -> String {
    var documentFileName = ""
    if let url = self.fileURL {
      documentFileName = url.path
    }
    return documentFileName
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: mBoardModelController
      self.mBoardModelController.addExplorer (name: "mBoardModelController", y:&y, view:view)
    //--- Selection controller property: mBoardModelSelection
      self.mBoardModelSelection.addExplorer (name: "mBoardModelSelection", y:&y, view:view)
    //--- Array controller property: mBoardInstanceController
      self.mBoardInstanceController.addExplorer (name: "mBoardInstanceController", y:&y, view:view)
    //--- Selection controller property: mBoardInstanceSelection
      self.mBoardInstanceSelection.addExplorer (name: "mBoardInstanceSelection", y:&y, view:view)
    //--- Array controller property: mDataController
      self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
    //--- Selection controller property: mDataSelection
      self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
    //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    windowNibName
  //····················································································································

  override final var windowNibName : NSNib.Name? {
    return NSNib.Name ("MergerDocument")
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "MergerRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : MergerRoot { return self.mRootObject as! MergerRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    let start = Date ()
    checkOutletConnection (self.addBoardModelButton, "addBoardModelButton", EBButton.self, #file, #line)
    checkOutletConnection (self.dismissPrefsForSettingMergerDisplayButton, "dismissPrefsForSettingMergerDisplayButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mArrowMagnitudeTextField, "mArrowMagnitudeTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mArrowMagnitudeUnitPopUp, "mArrowMagnitudeUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mArtworkNameTextField, "mArtworkNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mArtworkSettingsTabView, "mArtworkSettingsTabView", NSTabView.self, #file, #line)
    checkOutletConnection (self.mArtworkVersionTextField, "mArtworkVersionTextField", EBIntObserverField.self, #file, #line)
    checkOutletConnection (self.mArtwortNameTextField, "mArtwortNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mAutomaticBoardSizeSwitch, "mAutomaticBoardSizeSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mAutomaticBoardSizeView, "mAutomaticBoardSizeView", NSView.self, #file, #line)
    checkOutletConnection (self.mBoardBoardLimitTextField, "mBoardBoardLimitTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mBoardHeightTextField, "mBoardHeightTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mBoardHeightUnitPopUp, "mBoardHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardInspectorMasterView, "mBoardInspectorMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mBoardInspectorSegmentedControl, "mBoardInspectorSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mBoardIssueInspectorView, "mBoardIssueInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardLimitWidthUnitPopUp, "mBoardLimitWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardModelTableView, "mBoardModelTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mBoardModelView, "mBoardModelView", EBEnclosingGraphicView.self, #file, #line)
    checkOutletConnection (self.mBoardOperationInspectorView, "mBoardOperationInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardPageView, "mBoardPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackComponenValuesCheckbox, "mBoardViewDisplayBackComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackComponentNamesCheckbox, "mBoardViewDisplayBackComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLayoutTextsCheckbox, "mBoardViewDisplayBackLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLegendLinesCheckbox, "mBoardViewDisplayBackLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLegendTextsCheckbox, "mBoardViewDisplayBackLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackPackagesCheckbox, "mBoardViewDisplayBackPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackPadsCheckbox, "mBoardViewDisplayBackPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackTracksCheckbox, "mBoardViewDisplayBackTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBoardLimitsCheckbox, "mBoardViewDisplayBoardLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontComponenValuesCheckbox, "mBoardViewDisplayFrontComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontComponentNamesCheckbox, "mBoardViewDisplayFrontComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLayoutTextsCheckbox, "mBoardViewDisplayFrontLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLegendLinesCheckbox, "mBoardViewDisplayFrontLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLegendTextsCheckbox, "mBoardViewDisplayFrontLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontPackagesCheckbox, "mBoardViewDisplayFrontPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontPadsCheckbox, "mBoardViewDisplayFrontPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontTracksCheckbox, "mBoardViewDisplayFrontTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayHolesCheckbox, "mBoardViewDisplayHolesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayInternalBoardsLimitsCheckbox, "mBoardViewDisplayInternalBoardsLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayViasCheckbox, "mBoardViewDisplayViasCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewHorizontalFlipCheckbox, "mBoardViewHorizontalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewVerticalFlipCheckbox, "mBoardViewVerticalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardWidthTextField, "mBoardWidthTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mBoardWidthUnitPopUp, "mBoardWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mCommentTextView, "mCommentTextView", EBTextObserverView.self, #file, #line)
    checkOutletConnection (self.mComposedBoardView, "mComposedBoardView", EBEnclosingGraphicView.self, #file, #line)
    checkOutletConnection (self.mDangerView, "mDangerView", NSView.self, #file, #line)
    checkOutletConnection (self.mDataTableView, "mDataTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mDeselectIssueButton, "mDeselectIssueButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mDisplaySettingView, "mDisplaySettingView", NSView.self, #file, #line)
    checkOutletConnection (self.mDrawBoardLimitsSwitch, "mDrawBoardLimitsSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentNamesBottomSideSwitch, "mDrawComponentNamesBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentNamesTopSideSwitch, "mDrawComponentNamesTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentValuesBottomSideSwitch, "mDrawComponentValuesBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentValuesTopSideSwitch, "mDrawComponentValuesTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPackageLegendBottomSideSwitch, "mDrawPackageLegendBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPackageLegendTopSideSwitch, "mDrawPackageLegendTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPadsBottomSideSwitch, "mDrawPadsBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPadsTopSideSwitch, "mDrawPadsTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLayoutBottomSideSwitch, "mDrawTextsLayoutBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLayoutTopSideSwitch, "mDrawTextsLayoutTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLegendBottomSideSwitch, "mDrawTextsLegendBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLegendTopSideSwitch, "mDrawTextsLegendTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTracksBottomSideSwitch, "mDrawTracksBottomSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTracksTopSideSwitch, "mDrawTracksTopSideSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawViasSwitch, "mDrawViasSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mDrillDataFileExtensionTextField, "mDrillDataFileExtensionTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mEmptyBoardMessage, "mEmptyBoardMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mExtensionTextField, "mExtensionTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mGenerateProductFilesActionButton, "mGenerateProductFilesActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mHorizontalMirrorSwitch, "mHorizontalMirrorSwitch", CanariObserverSwitch.self, #file, #line)
    checkOutletConnection (self.mImportArtworkButton, "mImportArtworkButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mIncorrectDocumentNameTextField, "mIncorrectDocumentNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mInsertedInstanceDefaultOrientation, "mInsertedInstanceDefaultOrientation", NSPopUpButton.self, #file, #line)
    checkOutletConnection (self.mInstanceCountTextField, "mInstanceCountTextField", EBIntObserverField.self, #file, #line)
    checkOutletConnection (self.mInstanceModelNameTextField, "mInstanceModelNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mInstanceRotation, "mInstanceRotation", CanariQuadrantSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mIssueTableView, "mIssueTableView", IssueTableView.self, #file, #line)
    checkOutletConnection (self.mIssueTextField, "mIssueTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mLogTextView, "mLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mManualBoardHeightTextField, "mManualBoardHeightTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mManualBoardHeightUnitPopUp, "mManualBoardHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mManualBoardSizeView, "mManualBoardSizeView", NSView.self, #file, #line)
    checkOutletConnection (self.mManualBoardWidthTextField, "mManualBoardWidthTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mManualBoardWidthUnitPopUp, "mManualBoardWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mMinPPTPTTTWdisplayUnitTextField, "mMinPPTPTTTWdisplayUnitTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mMinPPTPTTTWinEBUnitPopUp, "mMinPPTPTTTWinEBUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mModelBoardLimitTextField, "mModelBoardLimitTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelDragSourceTableView, "mModelDragSourceTableView", CanariDragSourceTableView.self, #file, #line)
    checkOutletConnection (self.mModelHeightTextField, "mModelHeightTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelHeightUnitPopUp, "mModelHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mModelLimitWidthUnitPopUp, "mModelLimitWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mModelPageView, "mModelPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackComponenValuesCheckbox, "mModelViewDisplayBackComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackComponentNamesCheckbox, "mModelViewDisplayBackComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLayoutTextsCheckbox, "mModelViewDisplayBackLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLegendLinesCheckbox, "mModelViewDisplayBackLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLegendTextsCheckbox, "mModelViewDisplayBackLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackPackagesCheckbox, "mModelViewDisplayBackPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackPadsCheckbox, "mModelViewDisplayBackPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackTracksCheckbox, "mModelViewDisplayBackTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBoardLimitsCheckbox, "mModelViewDisplayBoardLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontComponenValuesCheckbox, "mModelViewDisplayFrontComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontComponentNamesCheckbox, "mModelViewDisplayFrontComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLayoutTextsCheckbox, "mModelViewDisplayFrontLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLegendLinesCheckbox, "mModelViewDisplayFrontLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLegendTextsCheckbox, "mModelViewDisplayFrontLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontPackagesCheckbox, "mModelViewDisplayFrontPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontPadsCheckbox, "mModelViewDisplayFrontPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontTracksCheckbox, "mModelViewDisplayFrontTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayHolesCheckbox, "mModelViewDisplayHolesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayInternalBoardsLimitsCheckbox, "mModelViewDisplayInternalBoardsLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayViasCheckbox, "mModelViewDisplayViasCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewHorizontalFlipCheckbox, "mModelViewHorizontalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewVerticalFlipCheckbox, "mModelViewVerticalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelWidthTextField, "mModelWidthTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelWidthUnitPopUp, "mModelWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMoveDownButton, "mMoveDownButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveLeftButton, "mMoveLeftButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveRightButton, "mMoveRightButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveUpButton, "mMoveUpButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mNoArtworkMessage, "mNoArtworkMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mNoModelMessage, "mNoModelMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mOARUnitPopUp, "mOARUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mOARValueTextField, "mOARValueTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mOverlapSwitch, "mOverlapSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mPDFBoardBackgroundColorWell, "mPDFBoardBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPHDUnitPopUp, "mPHDUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPHDValueTextField, "mPHDValueTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mPageSegmentedControl, "mPageSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mProductGenerationTabView, "mProductGenerationTabView", NSTabView.self, #file, #line)
    checkOutletConnection (self.mProductPageView, "mProductPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardXTextField, "mSelectedBoardXTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardXUnitPopUp, "mSelectedBoardXUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardYTextField, "mSelectedBoardYTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardYUnitPopUp, "mSelectedBoardYUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mShiftArrowMagnitudeTextField, "mShiftArrowMagnitudeTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mShiftArrowMagnitudeUnitPopUp, "mShiftArrowMagnitudeUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mergerViewBackLegendLinesColorWell, "mergerViewBackLegendLinesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewBackgroundColorWell, "mergerViewBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackComponentNamesColorWell, "mergerViewDisplayBackComponentNamesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackComponentValuesColorWell, "mergerViewDisplayBackComponentValuesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackLayoutTextsColorWell, "mergerViewDisplayBackLayoutTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackLegendTextsColorWell, "mergerViewDisplayBackLegendTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackPackagesColorWell, "mergerViewDisplayBackPackagesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackPadsColorWell, "mergerViewDisplayBackPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackTracksColorWell, "mergerViewDisplayBackTracksColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBoardLimitsColorWell, "mergerViewDisplayBoardLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontComponentNamesColorWell, "mergerViewDisplayFrontComponentNamesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontComponentValuesColorWell, "mergerViewDisplayFrontComponentValuesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontLayoutTextsColorWell, "mergerViewDisplayFrontLayoutTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontLegendTextsColorWell, "mergerViewDisplayFrontLegendTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontPackagesColorWell, "mergerViewDisplayFrontPackagesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontPadsColorWell, "mergerViewDisplayFrontPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontTracksColorWell, "mergerViewDisplayFrontTracksColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayHolesColorWell, "mergerViewDisplayHolesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayInternalBoardsLimitsColorWell, "mergerViewDisplayInternalBoardsLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayViasColorWell, "mergerViewDisplayViasColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewFrontLegendLinesColorWell, "mergerViewFrontLegendLinesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.minValueForBoardLimitTextField, "minValueForBoardLimitTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.minValueForBoardLimitUnitPopUp, "minValueForBoardLimitUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.removeBoardModelButton, "removeBoardModelButton", EBButton.self, #file, #line)
    checkOutletConnection (self.showBoardHelpButton, "showBoardHelpButton", EBButton.self, #file, #line)
    checkOutletConnection (self.showPrefsForSettingMergerDisplayButton, "showPrefsForSettingMergerDisplayButton", EBButton.self, #file, #line)
    checkOutletConnection (self.updateBoardModelButton, "updateBoardModelButton", EBButton.self, #file, #line)
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Check outlet connections \(durationMS) ms")
    }
  }

  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.bind_model (self.rootObject.boardModels_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.bind_selection (model: self.mBoardModelController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.bind_model (self.rootObject.boardInstances_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.bind_selection (model: self.mBoardInstanceController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentFileNameOk
    self.documentFileNameOk_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_documentFileNameOk (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentFileNameOk_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentIsUnnamed_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: importArtworkButtonTitle
    self.importArtworkButtonTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mArtworkName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_importArtworkButtonTitle (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mArtworkName_property.addEBObserver (self.importArtworkButtonTitle_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.overlapingArrangment_property.selection, unwSelf.rootObject.boardRect_property.selection, unwSelf.rootObject.boardDisplayRect_property.selection, unwSelf.rootObject.boardInstances_property.selection, unwSelf.rootObject.boardInstances_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_MergerDocument_issues (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.overlapingArrangment_property.addEBObserver (self.issues_property)
    self.rootObject.boardRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardDisplayRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_instanceRect (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_boardLimitWidth (self.issues_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_mStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_mStatusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: incorrectDocumentFileErrorMessage
    self.incorrectDocumentFileErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_MergerDocument_incorrectDocumentFileErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.incorrectDocumentFileErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
    self.mBoardModelController.bind_tableView (self.mBoardModelTableView)
    self.mDataController.bind_tableView (self.mDataTableView)
  //--------------------------- Install ebView bindings
    self.mBoardInstanceController.bind_ebView (self.mComposedBoardView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property)
    self.mIssueTextField?.bind_valueObserver (self.mStatusMessage_property)
    self.mIssueTableView?.bind_issues (self.issues_property)
    self.mModelViewHorizontalFlipCheckbox?.bind_value (preferences_mergerModelViewHorizontalFlip_property)
    self.mModelViewVerticalFlipCheckbox?.bind_value (preferences_mergerModelViewVerticalFlip_property)
    self.mModelViewDisplayHolesCheckbox?.bind_value (preferences_mergerModelViewDisplayHoles_property)
    self.mModelViewDisplayViasCheckbox?.bind_value (preferences_mergerModelViewDisplayVias_property)
    self.mModelViewDisplayFrontPadsCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontPads_property)
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.bind_value (preferences_mergerModelViewDisplayInternalBoardsLimits_property)
    self.mModelViewDisplayBoardLimitsCheckbox?.bind_value (preferences_mergerModelViewDisplayBoardLimits_property)
    self.mModelViewDisplayFrontComponentNamesCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontComponentNames_property)
    self.mModelViewDisplayFrontComponenValuesCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontComponentValues_property)
    self.mModelViewDisplayFrontPackagesCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontPackages_property)
    self.mModelViewDisplayFrontLegendTextsCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontLegendTexts_property)
    self.mModelViewDisplayFrontTracksCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontTracks_property)
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontLayoutTexts_property)
    self.mModelViewDisplayBackPadsCheckbox?.bind_value (preferences_mergerModelViewDisplayBackPads_property)
    self.mModelViewDisplayBackComponentNamesCheckbox?.bind_value (preferences_mergerModelViewDisplayBackComponentNames_property)
    self.mModelViewDisplayBackComponenValuesCheckbox?.bind_value (preferences_mergerModelViewDisplayBackComponentValues_property)
    self.mModelViewDisplayBackLegendTextsCheckbox?.bind_value (preferences_mergerModelViewDisplayBackLegendTexts_property)
    self.mModelViewDisplayBackPackagesCheckbox?.bind_value (preferences_mergerModelViewDisplayBackPackages_property)
    self.mModelViewDisplayBackTracksCheckbox?.bind_value (preferences_mergerModelViewDisplayBackTracks_property)
    self.mModelViewDisplayBackLayoutTextsCheckbox?.bind_value (preferences_mergerModelViewDisplayBackLayoutTexts_property)
    self.mModelViewDisplayFrontLegendLinesCheckbox?.bind_value (preferences_mergerModelViewDisplayFrontLegendLines_property)
    self.mModelViewDisplayBackLegendLinesCheckbox?.bind_value (preferences_mergerModelViewDisplayBackLegendLines_property)
    self.mBoardViewHorizontalFlipCheckbox?.bind_value (preferences_mergerBoardViewHorizontalFlip_property)
    self.mBoardViewVerticalFlipCheckbox?.bind_value (preferences_mergerBoardViewVerticalFlip_property)
    self.mBoardViewDisplayHolesCheckbox?.bind_value (preferences_mergerBoardViewDisplayHoles_property)
    self.mBoardViewDisplayViasCheckbox?.bind_value (preferences_mergerBoardViewDisplayVias_property)
    self.mBoardViewDisplayFrontPadsCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontPads_property)
    self.mBoardViewDisplayBoardLimitsCheckbox?.bind_value (preferences_mergerBoardViewDisplayBoardLimits_property)
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.bind_value (preferences_mergerBoardViewDisplayInternalBoardsLimits_property)
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontComponentNames_property)
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontComponentValues_property)
    self.mBoardViewDisplayFrontPackagesCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontPackages_property)
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontLegendTexts_property)
    self.mBoardViewDisplayFrontTracksCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontTracks_property)
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontLayoutTexts_property)
    self.mBoardViewDisplayBackPadsCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackPads_property)
    self.mBoardViewDisplayBackComponentNamesCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackComponentNames_property)
    self.mBoardViewDisplayBackComponenValuesCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackComponentValues_property)
    self.mBoardViewDisplayBackLegendTextsCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackLegendTexts_property)
    self.mBoardViewDisplayBackPackagesCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackPackages_property)
    self.mBoardViewDisplayBackTracksCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackTracks_property)
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackLayoutTexts_property)
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.bind_value (preferences_mergerBoardViewDisplayFrontLegendLines_property)
    self.mBoardViewDisplayBackLegendLinesCheckbox?.bind_value (preferences_mergerBoardViewDisplayBackLegendLines_property)
    self.mergerViewDisplayHolesColorWell?.bind_color (preferences_mergerColorHoles_property, sendContinously:false)
    self.mergerViewDisplayViasColorWell?.bind_color (preferences_mergerColorVias_property, sendContinously:false)
    self.mergerViewDisplayFrontPadsColorWell?.bind_color (preferences_mergerColorFrontPads_property, sendContinously:false)
    self.mergerViewDisplayBoardLimitsColorWell?.bind_color (preferences_mergerColorBoardLimits_property, sendContinously:false)
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.bind_color (preferences_mergerColorInternalBoardsLimits_property, sendContinously:false)
    self.mergerViewDisplayFrontComponentNamesColorWell?.bind_color (preferences_mergerColorFrontComponentNames_property, sendContinously:false)
    self.mergerViewDisplayFrontComponentValuesColorWell?.bind_color (preferences_mergerColorFrontComponentValues_property, sendContinously:false)
    self.mergerViewDisplayFrontPackagesColorWell?.bind_color (preferences_mergerColorFrontPackages_property, sendContinously:false)
    self.mergerViewDisplayFrontLegendTextsColorWell?.bind_color (preferences_mergerColorFrontLegendTexts_property, sendContinously:false)
    self.mergerViewDisplayFrontTracksColorWell?.bind_color (preferences_mergerColorFrontTracks_property, sendContinously:false)
    self.mergerViewDisplayFrontLayoutTextsColorWell?.bind_color (preferences_mergerColorFrontLayoutTexts_property, sendContinously:false)
    self.mergerViewDisplayBackPadsColorWell?.bind_color (preferences_mergerColorBackPads_property, sendContinously:false)
    self.mergerViewDisplayBackComponentNamesColorWell?.bind_color (preferences_mergerColorBackComponentNames_property, sendContinously:false)
    self.mergerViewDisplayBackComponentValuesColorWell?.bind_color (preferences_mergerColorBackComponentValues_property, sendContinously:false)
    self.mergerViewDisplayBackLegendTextsColorWell?.bind_color (preferences_mergerColorBackLegendTexts_property, sendContinously:false)
    self.mergerViewDisplayBackPackagesColorWell?.bind_color (preferences_mergerColorBackPackages_property, sendContinously:false)
    self.mergerViewDisplayBackTracksColorWell?.bind_color (preferences_mergerColorBackTracks_property, sendContinously:false)
    self.mergerViewDisplayBackLayoutTextsColorWell?.bind_color (preferences_mergerColorBackLayoutTexts_property, sendContinously:false)
    self.mergerViewBackgroundColorWell?.bind_color (preferences_mergerColorBackground_property, sendContinously:false)
    self.mergerViewFrontLegendLinesColorWell?.bind_color (preferences_mergerColorFrontLegendLines_property, sendContinously:false)
    self.mergerViewBackLegendLinesColorWell?.bind_color (preferences_mergerColorBackLegendLines_property, sendContinously:false)
    self.mBoardModelView?.bind_zoom (self.mBoardModelSelection.zoom_property)
    self.mBoardModelView?.bind_horizontalFlip (preferences_mergerModelViewHorizontalFlip_property)
    self.mBoardModelView?.bind_verticalFlip (preferences_mergerModelViewVerticalFlip_property)
    self.mBoardModelView?.bind_overObjectsDisplay (self.mBoardModelSelection.imageForModel_property)
    self.mArtworkNameTextField?.bind_valueObserver (self.mBoardModelSelection.artworkName_property)
    self.mInstanceCountTextField?.bind_valueObserver (self.mBoardModelSelection.instanceCount_property, autoFormatter:true)
    self.mModelWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelWidthUnit_property)
    self.mModelWidthTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelWidthUnit_property)
    self.mModelHeightUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelHeightUnit_property)
    self.mModelHeightTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelHeight_property, self.mBoardModelSelection.modelHeightUnit_property)
    self.mModelLimitWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelLimitWidthUnit_property)
    self.mModelBoardLimitTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelLimitWidth_property, self.mBoardModelSelection.modelLimitWidthUnit_property)
    self.mInstanceModelNameTextField?.bind_valueObserver (self.mBoardInstanceSelection.modelName_property)
    self.mAutomaticBoardSizeSwitch?.bind_value (self.rootObject.automaticBoardSize_property)
    self.mArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.arrowMagnitudeUnit_property)
    self.mArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.arrowMagnitude_property, self.rootObject.arrowMagnitudeUnit_property)
    self.mShiftArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.shiftArrowMagnitudeUnit_property)
    self.mShiftArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.shiftArrowMagnitude_property, self.rootObject.shiftArrowMagnitudeUnit_property)
    self.mManualBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property)
    self.mManualBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardManualWidth_property, self.rootObject.boardWidthUnit_property)
    self.mManualBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property)
    self.mManualBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardManualHeight_property, self.rootObject.boardHeightUnit_property)
    self.mBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property)
    self.mBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardWidth_property, self.rootObject.boardWidthUnit_property)
    self.mBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property)
    self.mBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardHeight_property, self.rootObject.boardHeightUnit_property)
    self.mModelDragSourceTableView?.bind_models (self.rootObject.modelNames_property)
    self.mBoardLimitWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardLimitWidthUnit_property)
    self.mBoardBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.boardLimitWidth_property, self.rootObject.boardLimitWidthUnit_property)
    self.mComposedBoardView?.bind_zoom (self.rootObject.zoom_property)
    self.mComposedBoardView?.bind_horizontalFlip (preferences_mergerBoardViewHorizontalFlip_property)
    self.mComposedBoardView?.bind_verticalFlip (preferences_mergerBoardViewVerticalFlip_property)
    self.mComposedBoardView?.bind_overObjectsDisplay (self.rootObject.boardOutlineRectDisplay_property)
    self.mComposedBoardView?.bind_arrowKeyMagnitude (self.rootObject.arrowMagnitude_property)
    self.mComposedBoardView?.bind_shiftArrowKeyMagnitude (self.rootObject.shiftArrowMagnitude_property)
    self.mSelectedBoardXUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardXUnit_property)
    self.mSelectedBoardXTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.x_property, self.rootObject.selectedBoardXUnit_property)
    self.mSelectedBoardYUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardYUnit_property)
    self.mSelectedBoardYTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.y_property, self.rootObject.selectedBoardYUnit_property)
    self.mInstanceRotation?.bind_quadrant (self.mBoardInstanceSelection.instanceRotation_property)
    self.mOverlapSwitch?.bind_value (self.rootObject.overlapingArrangment_property)
    self.mIncorrectDocumentNameTextField?.bind_valueObserver (self.incorrectDocumentFileErrorMessage_property)
    self.mArtwortNameTextField?.bind_valueObserver (self.rootObject.mArtworkName_property)
    self.mImportArtworkButton?.bind_title (self.importArtworkButtonTitle_property)
    self.mPDFBoardBackgroundColorWell?.bind_color (self.rootObject.mPDFBoardBackgroundColor_property, sendContinously:false)
    self.mMinPPTPTTTWinEBUnitPopUp?.bind_selectedTag (self.rootObject.minPPTPTTTWdisplayUnit_property)
    self.mMinPPTPTTTWdisplayUnitTextField?.bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    self.mOARUnitPopUp?.bind_selectedTag (self.rootObject.minValueForOARdisplayUnit_property)
    self.mOARValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    self.mPHDUnitPopUp?.bind_selectedTag (self.rootObject.minValueForPHDdisplayUnit_property)
    self.mPHDValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    self.minValueForBoardLimitUnitPopUp?.bind_selectedTag (self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    self.minValueForBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    self.mDrillDataFileExtensionTextField?.bind_valueObserver (self.rootObject.drillDataFileExtension_property)
    self.mExtensionTextField?.bind_valueObserver (self.mDataSelection.fileExtension_property)
    self.mDrawBoardLimitsSwitch?.bind_valueObserver (self.mDataSelection.drawBoardLimits_property)
    self.mDrawComponentValuesTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawComponentValuesTopSide_property)
    self.mDrawComponentValuesBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawComponentValuesBottomSide_property)
    self.mDrawComponentNamesTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawComponentNamesTopSide_property)
    self.mDrawComponentNamesBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawComponentNamesBottomSide_property)
    self.mDrawPackageLegendTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawPackageLegendTopSide_property)
    self.mDrawPackageLegendBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawPackageLegendBottomSide_property)
    self.mDrawPadsTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawPadsTopSide_property)
    self.mDrawPadsBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawPadsBottomSide_property)
    self.mDrawTextsLayoutTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawTextsLayoutTopSide_property)
    self.mDrawTextsLayoutBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawTextsLayoutBottomSide_property)
    self.mDrawTextsLegendTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawTextsLegendTopSide_property)
    self.mDrawTextsLegendBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawTextsLegendBottomSide_property)
    self.mDrawTracksTopSideSwitch?.bind_valueObserver (self.mDataSelection.drawTracksTopSide_property)
    self.mDrawTracksBottomSideSwitch?.bind_valueObserver (self.mDataSelection.drawTracksBottomSide_property)
    self.mDrawViasSwitch?.bind_valueObserver (self.mDataSelection.drawVias_property)
    self.mHorizontalMirrorSwitch?.bind_valueObserver (self.mDataSelection.horizontalMirror_property)
    self.mCommentTextView?.bind_valueObserver (self.rootObject.comments_property)
    self.mArtworkVersionTextField?.bind_valueObserver (self.rootObject.mArtworkVersion_property, autoFormatter:false)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.rootObject.selectedPageIndex_property), .le, .literalInt (1)),
        outlet: self.showPrefsForSettingMergerDisplayButton
      )
      self.mController_showPrefsForSettingMergerDisplayButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .intcmp (.id (self.rootObject.selectedPageIndex_property), .gt, .literalInt (1)),
        outlet: self.mDisplaySettingView
      )
      self.mController_mDisplaySettingView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .intcmp (.id (self.rootObject.boardModels_property.count_property), .gt, .literalInt (0)),
        outlet: self.mNoModelMessage
      )
      self.mController_mNoModelMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.intcmp (.id (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .intcmp (.id (self.mBoardModelSelection.instanceCount_property), .eq, .literalInt (0))),
        outlet: self.removeBoardModelButton
      )
      self.mController_removeBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.updateBoardModelButton
      )
      self.mController_updateBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .not (.id (self.rootObject.automaticBoardSize_property)),
        outlet: self.mAutomaticBoardSizeView
      )
      self.mController_mAutomaticBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.rootObject.automaticBoardSize_property),
        outlet: self.mManualBoardSizeView
      )
      self.mController_mManualBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .intcmp (.id (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0)),
        outlet: self.mEmptyBoardMessage
      )
      self.mController_mEmptyBoardMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0)),
        outlet: self.mOverlapSwitch
      )
      self.mController_mOverlapSwitch_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.mMoveRightButton
      )
      self.mController_mMoveRightButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.mMoveLeftButton
      )
      self.mController_mMoveLeftButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.mMoveUpButton
      )
      self.mController_mMoveUpButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)),
        outlet: self.mMoveDownButton
      )
      self.mController_mMoveDownButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .not (.id (self.rootObject.mArtwork_none)),
        outlet: self.mNoArtworkMessage
      )
      self.mController_mNoArtworkMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.documentFileNameOk_property),
        outlet: self.mDangerView
      )
      self.mController_mDangerView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.boolcmp (.not (.id (self.rootObject.mArtwork_none)), .and, .intcmp (.id (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0))), .and, .not (.id (self.documentIsUnnamed_property))),
        outlet: self.mGenerateProductFilesActionButton
      )
      self.mController_mGenerateProductFilesActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.rootObject.mArtwork_none),
        outlet: self.mArtworkSettingsTabView
      )
      self.mController_mArtworkSettingsTabView_hidden = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  }

  //····················································································································

  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    self.showPrefsForSettingMergerDisplayButton?.target = self
    self.showPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    self.dismissPrefsForSettingMergerDisplayButton?.target = self
    self.dismissPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    self.addBoardModelButton?.target = self
    self.addBoardModelButton?.action = #selector (MergerDocument.addBoardModelAction (_:))
    self.removeBoardModelButton?.target = mBoardModelController
    self.removeBoardModelButton?.action = #selector (Controller_MergerDocument_mBoardModelController.remove (_:))
    self.updateBoardModelButton?.target = self
    self.updateBoardModelButton?.action = #selector (MergerDocument.updateBoardModelAction (_:))
    self.showBoardHelpButton?.target = self
    self.showBoardHelpButton?.action = #selector (MergerDocument.showBoardHelpAction (_:))
    self.mMoveRightButton?.target = self
    self.mMoveRightButton?.action = #selector (MergerDocument.moveRightAction (_:))
    self.mMoveLeftButton?.target = self
    self.mMoveLeftButton?.action = #selector (MergerDocument.moveLeftAction (_:))
    self.mMoveUpButton?.target = self
    self.mMoveUpButton?.action = #selector (MergerDocument.moveUpAction (_:))
    self.mMoveDownButton?.target = self
    self.mMoveDownButton?.action = #selector (MergerDocument.moveDownAction (_:))
    self.mGenerateProductFilesActionButton?.target = self
    self.mGenerateProductFilesActionButton?.action = #selector (MergerDocument.generateProductFilesAction (_:))
    self.mImportArtworkButton?.target = self
    self.mImportArtworkButton?.action = #selector (MergerDocument.importArtworkAction (_:))
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
    self.mModelViewHorizontalFlipCheckbox?.unbind_value ()
    self.mModelViewVerticalFlipCheckbox?.unbind_value ()
    self.mModelViewDisplayHolesCheckbox?.unbind_value ()
    self.mModelViewDisplayViasCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontPadsCheckbox?.unbind_value ()
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    self.mModelViewDisplayBoardLimitsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontPackagesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontTracksCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackPadsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackPackagesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackTracksCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    self.mBoardViewHorizontalFlipCheckbox?.unbind_value ()
    self.mBoardViewVerticalFlipCheckbox?.unbind_value ()
    self.mBoardViewDisplayHolesCheckbox?.unbind_value ()
    self.mBoardViewDisplayViasCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontPadsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBoardLimitsCheckbox?.unbind_value ()
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontPackagesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontTracksCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackPadsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackPackagesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackTracksCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    self.mergerViewDisplayHolesColorWell?.unbind_color ()
    self.mergerViewDisplayViasColorWell?.unbind_color ()
    self.mergerViewDisplayFrontPadsColorWell?.unbind_color ()
    self.mergerViewDisplayBoardLimitsColorWell?.unbind_color ()
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.unbind_color ()
    self.mergerViewDisplayFrontComponentNamesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontComponentValuesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontPackagesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontLegendTextsColorWell?.unbind_color ()
    self.mergerViewDisplayFrontTracksColorWell?.unbind_color ()
    self.mergerViewDisplayFrontLayoutTextsColorWell?.unbind_color ()
    self.mergerViewDisplayBackPadsColorWell?.unbind_color ()
    self.mergerViewDisplayBackComponentNamesColorWell?.unbind_color ()
    self.mergerViewDisplayBackComponentValuesColorWell?.unbind_color ()
    self.mergerViewDisplayBackLegendTextsColorWell?.unbind_color ()
    self.mergerViewDisplayBackPackagesColorWell?.unbind_color ()
    self.mergerViewDisplayBackTracksColorWell?.unbind_color ()
    self.mergerViewDisplayBackLayoutTextsColorWell?.unbind_color ()
    self.mergerViewBackgroundColorWell?.unbind_color ()
    self.mergerViewFrontLegendLinesColorWell?.unbind_color ()
    self.mergerViewBackLegendLinesColorWell?.unbind_color ()
    self.mBoardModelView?.unbind_zoom ()
    self.mBoardModelView?.unbind_horizontalFlip ()
    self.mBoardModelView?.unbind_verticalFlip ()
    self.mBoardModelView?.unbind_overObjectsDisplay ()
    self.mArtworkNameTextField?.unbind_valueObserver ()
    self.mInstanceCountTextField?.unbind_valueObserver ()
    self.mModelWidthUnitPopUp?.unbind_selectedTag ()
    self.mModelWidthTextField?.unbind_dimensionAndUnit ()
    self.mModelHeightUnitPopUp?.unbind_selectedTag ()
    self.mModelHeightTextField?.unbind_dimensionAndUnit ()
    self.mModelLimitWidthUnitPopUp?.unbind_selectedTag ()
    self.mModelBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mInstanceModelNameTextField?.unbind_valueObserver ()
    self.mAutomaticBoardSizeSwitch?.unbind_value ()
    self.mArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    self.mArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    self.mShiftArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    self.mShiftArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    self.mManualBoardWidthUnitPopUp?.unbind_selectedTag ()
    self.mManualBoardWidthTextField?.unbind_dimensionAndUnit ()
    self.mManualBoardHeightUnitPopUp?.unbind_selectedTag ()
    self.mManualBoardHeightTextField?.unbind_dimensionAndUnit ()
    self.mBoardWidthUnitPopUp?.unbind_selectedTag ()
    self.mBoardWidthTextField?.unbind_dimensionAndUnit ()
    self.mBoardHeightUnitPopUp?.unbind_selectedTag ()
    self.mBoardHeightTextField?.unbind_dimensionAndUnit ()
    self.mModelDragSourceTableView?.unbind_models ()
    self.mBoardLimitWidthUnitPopUp?.unbind_selectedTag ()
    self.mBoardBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mComposedBoardView?.unbind_zoom ()
    self.mComposedBoardView?.unbind_horizontalFlip ()
    self.mComposedBoardView?.unbind_verticalFlip ()
    self.mComposedBoardView?.unbind_overObjectsDisplay ()
    self.mComposedBoardView?.unbind_arrowKeyMagnitude ()
    self.mComposedBoardView?.unbind_shiftArrowKeyMagnitude ()
    self.mSelectedBoardXUnitPopUp?.unbind_selectedTag ()
    self.mSelectedBoardXTextField?.unbind_dimensionAndUnit ()
    self.mSelectedBoardYUnitPopUp?.unbind_selectedTag ()
    self.mSelectedBoardYTextField?.unbind_dimensionAndUnit ()
    self.mInstanceRotation?.unbind_quadrant ()
    self.mOverlapSwitch?.unbind_value ()
    self.mIncorrectDocumentNameTextField?.unbind_valueObserver ()
    self.mArtwortNameTextField?.unbind_valueObserver ()
    self.mImportArtworkButton?.unbind_title ()
    self.mPDFBoardBackgroundColorWell?.unbind_color ()
    self.mMinPPTPTTTWinEBUnitPopUp?.unbind_selectedTag ()
    self.mMinPPTPTTTWdisplayUnitTextField?.unbind_dimensionAndUnit ()
    self.mOARUnitPopUp?.unbind_selectedTag ()
    self.mOARValueTextField?.unbind_dimensionAndUnit ()
    self.mPHDUnitPopUp?.unbind_selectedTag ()
    self.mPHDValueTextField?.unbind_dimensionAndUnit ()
    self.minValueForBoardLimitUnitPopUp?.unbind_selectedTag ()
    self.minValueForBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mDrillDataFileExtensionTextField?.unbind_valueObserver ()
    self.mExtensionTextField?.unbind_valueObserver ()
    self.mDrawBoardLimitsSwitch?.unbind_valueObserver ()
    self.mDrawComponentValuesTopSideSwitch?.unbind_valueObserver ()
    self.mDrawComponentValuesBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawComponentNamesTopSideSwitch?.unbind_valueObserver ()
    self.mDrawComponentNamesBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawPackageLegendTopSideSwitch?.unbind_valueObserver ()
    self.mDrawPackageLegendBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawPadsTopSideSwitch?.unbind_valueObserver ()
    self.mDrawPadsBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawTextsLayoutTopSideSwitch?.unbind_valueObserver ()
    self.mDrawTextsLayoutBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawTextsLegendTopSideSwitch?.unbind_valueObserver ()
    self.mDrawTextsLegendBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawTracksTopSideSwitch?.unbind_valueObserver ()
    self.mDrawTracksBottomSideSwitch?.unbind_valueObserver ()
    self.mDrawViasSwitch?.unbind_valueObserver ()
    self.mHorizontalMirrorSwitch?.unbind_valueObserver ()
    self.mCommentTextView?.unbind_valueObserver ()
    self.mArtworkVersionTextField?.unbind_valueObserver ()
  //--------------------------- Unbind multiple bindings
    self.mController_showPrefsForSettingMergerDisplayButton_enabled = nil
    self.mController_mDisplaySettingView_hidden = nil
    self.mController_mNoModelMessage_hidden = nil
    self.mController_removeBoardModelButton_enabled = nil
    self.mController_updateBoardModelButton_enabled = nil
    self.mController_mAutomaticBoardSizeView_hidden = nil
    self.mController_mManualBoardSizeView_hidden = nil
    self.mController_mEmptyBoardMessage_hidden = nil
    self.mController_mOverlapSwitch_enabled = nil
    self.mController_mMoveRightButton_enabled = nil
    self.mController_mMoveLeftButton_enabled = nil
    self.mController_mMoveUpButton_enabled = nil
    self.mController_mMoveDownButton_enabled = nil
    self.mController_mNoArtworkMessage_hidden = nil
    self.mController_mDangerView_hidden = nil
    self.mController_mGenerateProductFilesActionButton_enabled = nil
    self.mController_mArtworkSettingsTabView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mBoardModelController.unbind_tableView (self.mBoardModelTableView)
    self.mDataController.unbind_tableView (self.mDataTableView)
    self.mBoardInstanceController.unbind_ebView (self.mComposedBoardView)
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.unbind_model ()
  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.unbind_selection ()
  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.unbind_model ()
  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.unbind_selection ()
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    // self.documentFileName_property.removeEBObserver (self.documentFileNameOk_property)
    // self.documentFileName_property.removeEBObserver (self.documentIsUnnamed_property)
    // self.rootObject.mArtworkName_property.removeEBObserver (self.importArtworkButtonTitle_property)
    // self.rootObject.overlapingArrangment_property.removeEBObserver (self.issues_property)
    // self.rootObject.boardRect_property.removeEBObserver (self.issues_property)
    // self.rootObject.boardDisplayRect_property.removeEBObserver (self.issues_property)
    // self.rootObject.boardInstances_property.removeEBObserverOf_instanceRect (self.issues_property)
    // self.rootObject.boardInstances_property.removeEBObserverOf_boardLimitWidth (self.issues_property)
    // self.issues_property.removeEBObserver (self.mStatusImage_property)
    // self.issues_property.removeEBObserver (self.mStatusMessage_property)
    // self.documentFileName_property.removeEBObserver (self.incorrectDocumentFileErrorMessage_property)
  //--------------------------- Remove targets / actions
    self.showPrefsForSettingMergerDisplayButton?.target = nil
    self.dismissPrefsForSettingMergerDisplayButton?.target = nil
    self.addBoardModelButton?.target = nil
    self.removeBoardModelButton?.target = nil
    self.updateBoardModelButton?.target = nil
    self.showBoardHelpButton?.target = nil
    self.mMoveRightButton?.target = nil
    self.mMoveLeftButton?.target = nil
    self.mMoveUpButton?.target = nil
    self.mMoveDownButton?.target = nil
    self.mGenerateProductFilesActionButton?.target = nil
    self.mImportArtworkButton?.target = nil
  //--------------------------- Clean up outlets
    self.addBoardModelButton?.ebCleanUp ()
    self.dismissPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.mArrowMagnitudeTextField?.ebCleanUp ()
    self.mArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mArtworkNameTextField?.ebCleanUp ()
    self.mArtworkSettingsTabView?.ebCleanUp ()
    self.mArtworkVersionTextField?.ebCleanUp ()
    self.mArtwortNameTextField?.ebCleanUp ()
    self.mAutomaticBoardSizeSwitch?.ebCleanUp ()
    self.mAutomaticBoardSizeView?.ebCleanUp ()
    self.mBoardBoardLimitTextField?.ebCleanUp ()
    self.mBoardHeightTextField?.ebCleanUp ()
    self.mBoardHeightUnitPopUp?.ebCleanUp ()
    self.mBoardInspectorMasterView?.ebCleanUp ()
    self.mBoardInspectorSegmentedControl?.ebCleanUp ()
    self.mBoardIssueInspectorView?.ebCleanUp ()
    self.mBoardLimitWidthUnitPopUp?.ebCleanUp ()
    self.mBoardModelTableView?.ebCleanUp ()
    self.mBoardModelView?.ebCleanUp ()
    self.mBoardOperationInspectorView?.ebCleanUp ()
    self.mBoardPageView?.ebCleanUp ()
    self.mBoardViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayViasCheckbox?.ebCleanUp ()
    self.mBoardViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mBoardViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mBoardWidthTextField?.ebCleanUp ()
    self.mBoardWidthUnitPopUp?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedBoardView?.ebCleanUp ()
    self.mDangerView?.ebCleanUp ()
    self.mDataTableView?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mDisplaySettingView?.ebCleanUp ()
    self.mDrawBoardLimitsSwitch?.ebCleanUp ()
    self.mDrawComponentNamesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentNamesTopSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesTopSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawPadsBottomSideSwitch?.ebCleanUp ()
    self.mDrawPadsTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawTracksBottomSideSwitch?.ebCleanUp ()
    self.mDrawTracksTopSideSwitch?.ebCleanUp ()
    self.mDrawViasSwitch?.ebCleanUp ()
    self.mDrillDataFileExtensionTextField?.ebCleanUp ()
    self.mEmptyBoardMessage?.ebCleanUp ()
    self.mExtensionTextField?.ebCleanUp ()
    self.mGenerateProductFilesActionButton?.ebCleanUp ()
    self.mHorizontalMirrorSwitch?.ebCleanUp ()
    self.mImportArtworkButton?.ebCleanUp ()
    self.mIncorrectDocumentNameTextField?.ebCleanUp ()
    self.mInsertedInstanceDefaultOrientation?.ebCleanUp ()
    self.mInstanceCountTextField?.ebCleanUp ()
    self.mInstanceModelNameTextField?.ebCleanUp ()
    self.mInstanceRotation?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLogTextView?.ebCleanUp ()
    self.mManualBoardHeightTextField?.ebCleanUp ()
    self.mManualBoardHeightUnitPopUp?.ebCleanUp ()
    self.mManualBoardSizeView?.ebCleanUp ()
    self.mManualBoardWidthTextField?.ebCleanUp ()
    self.mManualBoardWidthUnitPopUp?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mMinPPTPTTTWdisplayUnitTextField?.ebCleanUp ()
    self.mMinPPTPTTTWinEBUnitPopUp?.ebCleanUp ()
    self.mModelBoardLimitTextField?.ebCleanUp ()
    self.mModelDragSourceTableView?.ebCleanUp ()
    self.mModelHeightTextField?.ebCleanUp ()
    self.mModelHeightUnitPopUp?.ebCleanUp ()
    self.mModelLimitWidthUnitPopUp?.ebCleanUp ()
    self.mModelPageView?.ebCleanUp ()
    self.mModelViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayViasCheckbox?.ebCleanUp ()
    self.mModelViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mModelViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mModelWidthTextField?.ebCleanUp ()
    self.mModelWidthUnitPopUp?.ebCleanUp ()
    self.mMoveDownButton?.ebCleanUp ()
    self.mMoveLeftButton?.ebCleanUp ()
    self.mMoveRightButton?.ebCleanUp ()
    self.mMoveUpButton?.ebCleanUp ()
    self.mNoArtworkMessage?.ebCleanUp ()
    self.mNoModelMessage?.ebCleanUp ()
    self.mOARUnitPopUp?.ebCleanUp ()
    self.mOARValueTextField?.ebCleanUp ()
    self.mOverlapSwitch?.ebCleanUp ()
    self.mPDFBoardBackgroundColorWell?.ebCleanUp ()
    self.mPHDUnitPopUp?.ebCleanUp ()
    self.mPHDValueTextField?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mProductGenerationTabView?.ebCleanUp ()
    self.mProductPageView?.ebCleanUp ()
    self.mSelectedBoardXTextField?.ebCleanUp ()
    self.mSelectedBoardXUnitPopUp?.ebCleanUp ()
    self.mSelectedBoardYTextField?.ebCleanUp ()
    self.mSelectedBoardYUnitPopUp?.ebCleanUp ()
    self.mShiftArrowMagnitudeTextField?.ebCleanUp ()
    self.mShiftArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mergerViewBackLegendLinesColorWell?.ebCleanUp ()
    self.mergerViewBackgroundColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayBoardLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayHolesColorWell?.ebCleanUp ()
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayViasColorWell?.ebCleanUp ()
    self.mergerViewFrontLegendLinesColorWell?.ebCleanUp ()
    self.minValueForBoardLimitTextField?.ebCleanUp ()
    self.minValueForBoardLimitUnitPopUp?.ebCleanUp ()
    self.removeBoardModelButton?.ebCleanUp ()
    self.showBoardHelpButton?.ebCleanUp ()
    self.showPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.updateBoardModelButton?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.addBoardModelButton = nil
    self.dismissPrefsForSettingMergerDisplayButton = nil
    self.mArrowMagnitudeTextField = nil
    self.mArrowMagnitudeUnitPopUp = nil
    self.mArtworkNameTextField = nil
    self.mArtworkSettingsTabView = nil
    self.mArtworkVersionTextField = nil
    self.mArtwortNameTextField = nil
    self.mAutomaticBoardSizeSwitch = nil
    self.mAutomaticBoardSizeView = nil
    self.mBoardBoardLimitTextField = nil
    self.mBoardHeightTextField = nil
    self.mBoardHeightUnitPopUp = nil
    self.mBoardInspectorMasterView = nil
    self.mBoardInspectorSegmentedControl = nil
    self.mBoardIssueInspectorView = nil
    self.mBoardLimitWidthUnitPopUp = nil
    self.mBoardModelTableView = nil
    self.mBoardModelView = nil
    self.mBoardOperationInspectorView = nil
    self.mBoardPageView = nil
    self.mBoardViewDisplayBackComponenValuesCheckbox = nil
    self.mBoardViewDisplayBackComponentNamesCheckbox = nil
    self.mBoardViewDisplayBackLayoutTextsCheckbox = nil
    self.mBoardViewDisplayBackLegendLinesCheckbox = nil
    self.mBoardViewDisplayBackLegendTextsCheckbox = nil
    self.mBoardViewDisplayBackPackagesCheckbox = nil
    self.mBoardViewDisplayBackPadsCheckbox = nil
    self.mBoardViewDisplayBackTracksCheckbox = nil
    self.mBoardViewDisplayBoardLimitsCheckbox = nil
    self.mBoardViewDisplayFrontComponenValuesCheckbox = nil
    self.mBoardViewDisplayFrontComponentNamesCheckbox = nil
    self.mBoardViewDisplayFrontLayoutTextsCheckbox = nil
    self.mBoardViewDisplayFrontLegendLinesCheckbox = nil
    self.mBoardViewDisplayFrontLegendTextsCheckbox = nil
    self.mBoardViewDisplayFrontPackagesCheckbox = nil
    self.mBoardViewDisplayFrontPadsCheckbox = nil
    self.mBoardViewDisplayFrontTracksCheckbox = nil
    self.mBoardViewDisplayHolesCheckbox = nil
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox = nil
    self.mBoardViewDisplayViasCheckbox = nil
    self.mBoardViewHorizontalFlipCheckbox = nil
    self.mBoardViewVerticalFlipCheckbox = nil
    self.mBoardWidthTextField = nil
    self.mBoardWidthUnitPopUp = nil
    self.mCommentTextView = nil
    self.mComposedBoardView = nil
    self.mDangerView = nil
    self.mDataTableView = nil
    self.mDeselectIssueButton = nil
    self.mDisplaySettingView = nil
    self.mDrawBoardLimitsSwitch = nil
    self.mDrawComponentNamesBottomSideSwitch = nil
    self.mDrawComponentNamesTopSideSwitch = nil
    self.mDrawComponentValuesBottomSideSwitch = nil
    self.mDrawComponentValuesTopSideSwitch = nil
    self.mDrawPackageLegendBottomSideSwitch = nil
    self.mDrawPackageLegendTopSideSwitch = nil
    self.mDrawPadsBottomSideSwitch = nil
    self.mDrawPadsTopSideSwitch = nil
    self.mDrawTextsLayoutBottomSideSwitch = nil
    self.mDrawTextsLayoutTopSideSwitch = nil
    self.mDrawTextsLegendBottomSideSwitch = nil
    self.mDrawTextsLegendTopSideSwitch = nil
    self.mDrawTracksBottomSideSwitch = nil
    self.mDrawTracksTopSideSwitch = nil
    self.mDrawViasSwitch = nil
    self.mDrillDataFileExtensionTextField = nil
    self.mEmptyBoardMessage = nil
    self.mExtensionTextField = nil
    self.mGenerateProductFilesActionButton = nil
    self.mHorizontalMirrorSwitch = nil
    self.mImportArtworkButton = nil
    self.mIncorrectDocumentNameTextField = nil
    self.mInsertedInstanceDefaultOrientation = nil
    self.mInstanceCountTextField = nil
    self.mInstanceModelNameTextField = nil
    self.mInstanceRotation = nil
    self.mIssueTableView = nil
    self.mIssueTextField = nil
    self.mLogTextView = nil
    self.mManualBoardHeightTextField = nil
    self.mManualBoardHeightUnitPopUp = nil
    self.mManualBoardSizeView = nil
    self.mManualBoardWidthTextField = nil
    self.mManualBoardWidthUnitPopUp = nil
    self.mMasterView = nil
    self.mMinPPTPTTTWdisplayUnitTextField = nil
    self.mMinPPTPTTTWinEBUnitPopUp = nil
    self.mModelBoardLimitTextField = nil
    self.mModelDragSourceTableView = nil
    self.mModelHeightTextField = nil
    self.mModelHeightUnitPopUp = nil
    self.mModelLimitWidthUnitPopUp = nil
    self.mModelPageView = nil
    self.mModelViewDisplayBackComponenValuesCheckbox = nil
    self.mModelViewDisplayBackComponentNamesCheckbox = nil
    self.mModelViewDisplayBackLayoutTextsCheckbox = nil
    self.mModelViewDisplayBackLegendLinesCheckbox = nil
    self.mModelViewDisplayBackLegendTextsCheckbox = nil
    self.mModelViewDisplayBackPackagesCheckbox = nil
    self.mModelViewDisplayBackPadsCheckbox = nil
    self.mModelViewDisplayBackTracksCheckbox = nil
    self.mModelViewDisplayBoardLimitsCheckbox = nil
    self.mModelViewDisplayFrontComponenValuesCheckbox = nil
    self.mModelViewDisplayFrontComponentNamesCheckbox = nil
    self.mModelViewDisplayFrontLayoutTextsCheckbox = nil
    self.mModelViewDisplayFrontLegendLinesCheckbox = nil
    self.mModelViewDisplayFrontLegendTextsCheckbox = nil
    self.mModelViewDisplayFrontPackagesCheckbox = nil
    self.mModelViewDisplayFrontPadsCheckbox = nil
    self.mModelViewDisplayFrontTracksCheckbox = nil
    self.mModelViewDisplayHolesCheckbox = nil
    self.mModelViewDisplayInternalBoardsLimitsCheckbox = nil
    self.mModelViewDisplayViasCheckbox = nil
    self.mModelViewHorizontalFlipCheckbox = nil
    self.mModelViewVerticalFlipCheckbox = nil
    self.mModelWidthTextField = nil
    self.mModelWidthUnitPopUp = nil
    self.mMoveDownButton = nil
    self.mMoveLeftButton = nil
    self.mMoveRightButton = nil
    self.mMoveUpButton = nil
    self.mNoArtworkMessage = nil
    self.mNoModelMessage = nil
    self.mOARUnitPopUp = nil
    self.mOARValueTextField = nil
    self.mOverlapSwitch = nil
    self.mPDFBoardBackgroundColorWell = nil
    self.mPHDUnitPopUp = nil
    self.mPHDValueTextField = nil
    self.mPageSegmentedControl = nil
    self.mProductGenerationTabView = nil
    self.mProductPageView = nil
    self.mSelectedBoardXTextField = nil
    self.mSelectedBoardXUnitPopUp = nil
    self.mSelectedBoardYTextField = nil
    self.mSelectedBoardYUnitPopUp = nil
    self.mShiftArrowMagnitudeTextField = nil
    self.mShiftArrowMagnitudeUnitPopUp = nil
    self.mStatusImageViewInToolbar = nil
    self.mergerViewBackLegendLinesColorWell = nil
    self.mergerViewBackgroundColorWell = nil
    self.mergerViewDisplayBackComponentNamesColorWell = nil
    self.mergerViewDisplayBackComponentValuesColorWell = nil
    self.mergerViewDisplayBackLayoutTextsColorWell = nil
    self.mergerViewDisplayBackLegendTextsColorWell = nil
    self.mergerViewDisplayBackPackagesColorWell = nil
    self.mergerViewDisplayBackPadsColorWell = nil
    self.mergerViewDisplayBackTracksColorWell = nil
    self.mergerViewDisplayBoardLimitsColorWell = nil
    self.mergerViewDisplayFrontComponentNamesColorWell = nil
    self.mergerViewDisplayFrontComponentValuesColorWell = nil
    self.mergerViewDisplayFrontLayoutTextsColorWell = nil
    self.mergerViewDisplayFrontLegendTextsColorWell = nil
    self.mergerViewDisplayFrontPackagesColorWell = nil
    self.mergerViewDisplayFrontPadsColorWell = nil
    self.mergerViewDisplayFrontTracksColorWell = nil
    self.mergerViewDisplayHolesColorWell = nil
    self.mergerViewDisplayInternalBoardsLimitsColorWell = nil
    self.mergerViewDisplayViasColorWell = nil
    self.mergerViewFrontLegendLinesColorWell = nil
    self.minValueForBoardLimitTextField = nil
    self.minValueForBoardLimitUnitPopUp = nil
    self.removeBoardModelButton = nil
    self.showBoardHelpButton = nil
    self.showPrefsForSettingMergerDisplayButton = nil
    self.updateBoardModelButton = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

