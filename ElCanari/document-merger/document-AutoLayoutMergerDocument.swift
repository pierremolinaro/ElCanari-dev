//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutMergerDocument) class AutoLayoutMergerDocument : EBAutoLayoutManagedDocument {
  
  //····················································································································
  //   Array controller: mBoardModelController
  //····················································································································

  final var mBoardModelController = Controller_AutoLayoutMergerDocument_mBoardModelController ()

  //····················································································································
  //   Selection controller: mBoardModelSelection
  //····················································································································

  final var mBoardModelSelection = SelectionController_AutoLayoutMergerDocument_mBoardModelSelection ()

  //····················································································································
  //   Array controller: mBoardInstanceController
  //····················································································································

  final var mBoardInstanceController = Controller_AutoLayoutMergerDocument_mBoardInstanceController ()

  //····················································································································
  //   Selection controller: mBoardInstanceSelection
  //····················································································································

  final var mBoardInstanceSelection = SelectionController_AutoLayoutMergerDocument_mBoardInstanceSelection ()

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  final var mDataController = Controller_AutoLayoutMergerDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  final var mDataSelection = SelectionController_AutoLayoutMergerDocument_mDataSelection ()

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //····················································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //····················································································································
  //   Transient property: statusWarningCount
  //····················································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //····················································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardDispositionStatusTitle
  //····················································································································

  final let boardDispositionStatusTitle_property = EBTransientProperty <String> ()

  //····················································································································

  final var boardDispositionStatusTitle : String? {
    return self.boardDispositionStatusTitle_property.optionalValue
  }

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //····················································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //····················································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty <String> ()

  //····················································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    return self.incorrectDocumentFileDetailedErrorMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //····················································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty <String> ()

  //····················································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    return self.documentFileShouldBeRenamedErrorMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtension
  //····················································································································

  final let emptyDrillFileExtension_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var emptyDrillFileExtension : Bool? {
    return self.emptyDrillFileExtension_property.optionalValue
  }

  //····················································································································
  //   Transient property: modelVersionErrorMessage
  //····················································································································

  final let modelVersionErrorMessage_property = EBTransientProperty <String> ()

  //····················································································································

  final var modelVersionErrorMessage : String? {
    return self.modelVersionErrorMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty <NSImage> ()

  //····················································································································

  final var statusImage : NSImage? {
    return self.statusImage_property.optionalValue
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //····················································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: statusErrorCount
  //····················································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //····················································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  final let documentIsUnnamed_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var documentIsUnnamed : Bool? {
    return self.documentIsUnnamed_property.optionalValue
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtensionImage
  //····················································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //····················································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    return self.emptyDrillFileExtensionImage_property.optionalValue
  }

  //····················································································································
  //   Transient property: generatedFileCountString
  //····················································································································

  final let generatedFileCountString_property = EBTransientProperty <String> ()

  //····················································································································

  final var generatedFileCountString : String? {
    return self.generatedFileCountString_property.optionalValue
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mBoardInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  weak final var mBoardIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mComposedBoardGraphicView : AutoLayoutGraphicView? = nil
  weak final var mLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mModelDragSourceTableView : AutoLayoutCanariDragSourceTableView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "MergerRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : MergerRoot { return self.mRootObject as! MergerRoot }

  //····················································································································
  //    VIEW PageMasterView
  //····················································································································

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW DocumentMainView
  //····················································································································

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let pageMasterView = self.PageMasterView ()
    let modelPage = self.ModelPage ()
    let boardPage = self.BoardPage ()
    let productPage = self.ProductPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Model", tooltip: "Model Description", pageView: modelPage)
          .addPage (title: "Board", tooltip: "Board Description", pageView: boardPage)
          .addPage (title: "Product", tooltip: "Product Description", pageView: productPage)
          .bind_selectedPage (self.rootObject.selectedPageIndex_property)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutCheckbox (title: "Show Display Settings", size: .regular)
          .bind_value (self.rootObject.showDisplaySettingView_property)
          .bind_enabled (.intcmp (.prop (self.rootObject.selectedPageIndex_property), .le, .literalInt (1)))
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "for Model and Board Views", bold: false, size: .small, alignment: .center)
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
      do{
        let view_0_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_3_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_3_0.appendView (view_0_3_0_0)
          let view_0_3_0_1 = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.statusMessage_property)
            .bind_errorCount (self.statusErrorCount_property)
            .bind_warningCount (self.statusWarningCount_property)
          _ = view_0_3_0.appendView (view_0_3_0_1)
          let view_0_3_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_3_0.appendView (view_0_3_0_2)
        }
        _ = view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small, alignment: .center)
        _ = view_0_3.appendView (view_0_3_1)
      }
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW ModelPage
  //····················································································································

  final func ModelPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let settingsView = self.SettingsView ()
    let view_0 = settingsView
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
      .set (margins: 8)
      .set (width: 250)
      .bind_hidden (.prop (self.rootObject.showDisplaySettingView_property))
    do{
      let view_1_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0_0 = AutoLayoutButton (title: "+", size: .small)
          .set (width: 40)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.addBoardModelAction (_:))
          )
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutButton (title: "Update…", size: .small)
          .expandableWidth ()
          .bind_enabled (.intcmp (.prop (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.updateBoardModelAction (_:))
          )
        _ = view_1_0.appendView (view_1_0_1)
        let view_1_0_2 = AutoLayoutButton (title: "-", size: .small)
          .set (width: 40)
          .bind_enabled (.boolcmp (.intcmp (.prop (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .intcmp (.prop (self.mBoardModelSelection.instanceCount_property), .eq, .literalInt (0))))
          .bind_run (
            target: mBoardModelController,
            selector: #selector (Controller_AutoLayoutMergerDocument_mBoardModelController.remove (_:))
          )
        _ = view_1_0.appendView (view_1_0_2)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        .noHeaderView ()
      self.mBoardModelController.bind_tableView (view_1_1)
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutGridView2 ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addSeparator ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
        .addSeparator ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
        .add (single: self.computeImplicitView_12 ())
        .add (single: self.computeImplicitView_13 ())
        .addSeparator ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
      _ = view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_4)
    }
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_2)
    let view_3 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_zoom (self.mBoardModelSelection.zoom_property)
      .bind_horizontalFlip (preferences_mergerModelViewHorizontalFlip_property)
      .bind_verticalFlip (preferences_mergerModelViewVerticalFlip_property)
      .bind_overObjectsDisplay (self.mBoardModelSelection.imageForModel_property)
      .bind_xPlacardUnit (self.mBoardModelSelection.modelWidthUnit_property)
      .bind_yPlacardUnit (self.mBoardModelSelection.modelHeightUnit_property)
      .bind_hidden (.intcmp (.prop (self.rootObject.boardModels_property.count_property), .eq, .literalInt (0)))
    _ = hStackView.appendView (view_3)
    let view_4 = AutoLayoutVerticalStackView ()
    do{
      let view_4_0 = AutoLayoutFlexibleSpace ()
      _ = view_4.appendView (view_4_0)
      let view_4_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_4_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_4_1.appendView (view_4_1_0)
        let view_4_1_1 = AutoLayoutStaticLabel (title: "No Model", bold: true, size: .regular, alignment: .center)
          .bind_hidden (.intcmp (.prop (self.rootObject.boardModels_property.count_property), .gt, .literalInt (0)))
        _ = view_4_1.appendView (view_4_1_1)
        let view_4_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_4_1.appendView (view_4_1_2)
      }
      _ = view_4.appendView (view_4_1)
      let view_4_2 = AutoLayoutFlexibleSpace ()
      _ = view_4.appendView (view_4_2)
    }
    _ = hStackView.appendView (view_4)
    return hStackView
  }

  //····················································································································
  //    VIEW SettingsView
  //····················································································································

  final func SettingsView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (bottomMargin: 8)
      .set (width: 250)
      .bind_hidden (.not (.prop (self.rootObject.showDisplaySettingView_property)))
    do{
      let view_0_0 = AutoLayoutVerticalScrollView (content: self.computeImplicitView_80 ())
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutHorizontalStackView ()
        .set (rightMargin: 8)
      do{
        let view_0_2_0 = AutoLayoutFlexibleSpace ()
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutButton (title: "Done", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.dismissDisplaySettingView (_:))
          )
        _ = view_0_2.appendView (view_0_2_1)
      }
      _ = view_0.appendView (view_0_2)
    }
    _ = hStackView.appendView (view_0)
    return hStackView
  }

  //····················································································································
  //    VIEW BoardBaseInspectorView
  //····················································································································

  final func BoardBaseInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW BoardPage
  //····················································································································

  final func BoardPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let boardBaseInspectorView = self.BoardBaseInspectorView ()
    let boardSettingsPage = self.BoardSettingsPage ()
    let boardIssuesPage = self.BoardIssuesPage ()
    let settingsView = self.SettingsView ()
    let view_0 = settingsView
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
      .set (margins: 8)
      .set (width: 250)
      .bind_hidden (.prop (self.rootObject.showDisplaySettingView_property))
    do{
      let view_1_0 = AutoLayoutSegmentedControlWithPages (documentView: boardBaseInspectorView, equalWidth: true, size: .regular)
        .expandableWidth ()
        .addPage (title: "", tooltip: "Model Description", pageView: boardSettingsPage)
        .addPage (title: "", tooltip: "Issue Inspector", pageView: boardIssuesPage)
        .bind_segmentImage (self.statusImage_property, segmentIndex:1)
        .bind_segmentTitle (self.boardDispositionStatusTitle_property, segmentIndex:1)
      self.mBoardInspectorSegmentedControl = view_1_0 // Outlet
      self.configure_boardPageSegmentedControl (view_1_0) // Configurator
      _ = view_1.appendView (view_1_0)
      let view_1_1 = boardBaseInspectorView
      _ = view_1.appendView (view_1_1)
    }
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_2)
    let view_3 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_horizontalFlip (preferences_mergerBoardViewHorizontalFlip_property)
      .bind_verticalFlip (preferences_mergerBoardViewVerticalFlip_property)
      .bind_overObjectsDisplay (self.rootObject.boardOutlineRectDisplay_property)
      .bind_xPlacardUnit (self.rootObject.boardWidthUnit_property)
      .bind_yPlacardUnit (self.rootObject.boardHeightUnit_property)
      .bind_graphic_controller (self.mBoardInstanceController)
    self.mComposedBoardGraphicView = view_3 // Outlet
    self.configure_boardGraphicView (view_3) // Configurator
    _ = hStackView.appendView (view_3)
    return hStackView
  }

  //····················································································································
  //    VIEW BoardSettingsPage
  //····················································································································

  final func BoardSettingsPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Add Model", bold: true, size: .small, alignment: .left)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHelpButton (size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.showBoardHelpAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutEnumPopUpButton (titles: QuadrantRotation.degreesTitles (), size: .small)
          .expandableWidth ()
          .bind_selectedIndex (self.rootObject.modelInsertionRotation_property)
        _ = view_0_0.appendView (view_0_0_2)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutCanariDragSourceTableView ()
        .bind_models (self.rootObject.modelNames_property)
      self.mModelDragSourceTableView = view_0_1 // Outlet
      self.configure_boardModelDragSourceTableView (view_0_1) // Configurator
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalScrollView (content: self.computeImplicitView_95 ())
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardIssuesPage
  //····················································································································

  final func BoardIssuesPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutLabel (bold: true, size: .small)
      .expandableWidth ()
      .bind_title (self.statusMessage_property)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      .bind_issues (self.issues_property)
    self.mBoardIssueTableView = view_1 // Outlet
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW ProductPage
  //····················································································································

  final func ProductPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let productMasterView = self.ProductMasterView ()
    let artworkDescriptionPage = self.ArtworkDescriptionPage ()
    let artworkMinimaPage = self.ArtworkMinimaPage ()
    let artworkDataPage = self.ArtworkDataPage ()
    let pdfSettingsPage = self.PDFSettingsPage ()
    let generationLogPage = self.GenerationLogPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutButton (title: "Import Artwork…", size: .regular)
          .expandableWidth ()
          .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.importArtworkAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutButton (title: "Detach Artwork", size: .regular)
          .expandableWidth ()
          .bind_hidden (.prop (self.rootObject.mArtwork_none))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.detachArtworkAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutLabel (bold: true, size: .regular)
          .expandableWidth ()
          .set (alignment: .center)
          .bind_title (self.rootObject.mArtworkName_property)
        _ = view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutButton (title: "Generate Files", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.boolcmp (.not (.prop (self.rootObject.mArtwork_none)), .and, .intcmp (.prop (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0))), .and, .not (.prop (self.documentIsUnnamed_property))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.generateProductFilesAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_3)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutTextObserverView ()
          .expandableWidth ()
          .setNoBackground ()
          .setNoVerticalScroller ()
          .setNoHorizontalScroller ()
          .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
        _ = view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_0_1.appendView (view_0_1_2)
      }
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular, alignment: .center)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_2)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView ()
      .bind_hidden (.prop (self.rootObject.mArtwork_none))
    do{
      let view_2_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0_0 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutSegmentedControlWithPages (documentView: productMasterView, equalWidth: true, size: .regular)
          .addPage (title: "Artwork Description", tooltip: "", pageView: artworkDescriptionPage)
          .addPage (title: "Artwork Minima", tooltip: "", pageView: artworkMinimaPage)
          .addPage (title: "Artwork Data", tooltip: "", pageView: artworkDataPage)
          .addPage (title: "PDF Settings", tooltip: "", pageView: pdfSettingsPage)
          .addPage (title: "Generation Log", tooltip: "", pageView: generationLogPage)
        self.mProductPageSegmentedControl = view_2_0_1 // Outlet
        _ = view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_2)
      }
      _ = view_2.appendView (view_2_0)
      let view_2_1 = productMasterView
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW ProductMasterView
  //····················································································································

  final func ProductMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkDescriptionPage
  //····················································································································

  final func ArtworkDescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_96 (), right: self.computeImplicitView_97 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_98 (), right: self.computeImplicitView_99 ())
      .addCenterYAligned (left: self.computeImplicitView_100 (), right: self.computeImplicitView_101 ())
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkDataPage
  //····················································································································

  final func ArtworkDataPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_0_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_1_0_1)
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_1_2_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
            _ = view_1_2_0_0.appendView (view_1_2_0_0_0)
            let view_1_2_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            _ = view_1_2_0_0.appendView (view_1_2_0_0_1)
          }
          _ = view_1_2_0.appendView (view_1_2_0_0)
          let view_1_2_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          _ = view_1_2_0.appendView (view_1_2_0_1)
          let view_1_2_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_0.appendView (view_1_2_0_2)
          let view_1_2_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
            .setOrangeTextColor ()
            .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
          _ = view_1_2_0.appendView (view_1_2_0_3)
        }
        _ = view_1_2.appendView (view_1_2_0)
        let view_1_2_1 = AutoLayoutFlexibleSpace ()
        _ = view_1_2.appendView (view_1_2_1)
        let view_1_2_2 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
        _ = view_1_2.appendView (view_1_2_2)
        let view_1_2_3 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_3_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_102 (), right: self.computeImplicitView_103 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_104 (), right: self.computeImplicitView_105 ())
          _ = view_1_2_3.appendView (view_1_2_3_0)
          let view_1_2_3_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_3.appendView (view_1_2_3_1)
        }
        _ = view_1_2.appendView (view_1_2_3)
        let view_1_2_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_4_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          _ = view_1_2_4.appendView (view_1_2_4_0)
          let view_1_2_4_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_4.appendView (view_1_2_4_1)
        }
        _ = view_1_2.appendView (view_1_2_4)
        let view_1_2_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_5_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          _ = view_1_2_5.appendView (view_1_2_5_0)
          let view_1_2_5_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_5.appendView (view_1_2_5_1)
        }
        _ = view_1_2.appendView (view_1_2_5)
        let view_1_2_6 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_6_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          _ = view_1_2_6.appendView (view_1_2_6_0)
          let view_1_2_6_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_6.appendView (view_1_2_6_1)
        }
        _ = view_1_2.appendView (view_1_2_6)
        let view_1_2_7 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .left)
        _ = view_1_2.appendView (view_1_2_7)
        let view_1_2_8 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_8_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_106 (), right: self.computeImplicitView_107 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_108 (), right: self.computeImplicitView_109 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_110 (), right: self.computeImplicitView_111 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_112 (), right: self.computeImplicitView_113 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_114 (), right: self.computeImplicitView_115 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_116 (), right: self.computeImplicitView_117 ())
          _ = view_1_2_8.appendView (view_1_2_8_0)
          let view_1_2_8_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_8.appendView (view_1_2_8_1)
        }
        _ = view_1_2.appendView (view_1_2_8)
        let view_1_2_9 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .center)
        _ = view_1_2.appendView (view_1_2_9)
        let view_1_2_10 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_10_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_118 (), right: self.computeImplicitView_119 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_120 (), right: self.computeImplicitView_121 ())
          _ = view_1_2_10.appendView (view_1_2_10_0)
          let view_1_2_10_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_10.appendView (view_1_2_10_1)
        }
        _ = view_1_2.appendView (view_1_2_10)
        let view_1_2_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_11_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          _ = view_1_2_11.appendView (view_1_2_11_0)
          let view_1_2_11_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_11.appendView (view_1_2_11_1)
        }
        _ = view_1_2.appendView (view_1_2_11)
        let view_1_2_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_12_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          _ = view_1_2_12.appendView (view_1_2_12_0)
          let view_1_2_12_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_12.appendView (view_1_2_12_1)
        }
        _ = view_1_2.appendView (view_1_2_12)
        let view_1_2_13 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_13_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          _ = view_1_2_13.appendView (view_1_2_13_0)
          let view_1_2_13_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_13.appendView (view_1_2_13_1)
        }
        _ = view_1_2.appendView (view_1_2_13)
        let view_1_2_14 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .center)
        _ = view_1_2.appendView (view_1_2_14)
        let view_1_2_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_15_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          _ = view_1_2_15.appendView (view_1_2_15_0)
          let view_1_2_15_1 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          _ = view_1_2_15.appendView (view_1_2_15_1)
          let view_1_2_15_2 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          _ = view_1_2_15.appendView (view_1_2_15_2)
          let view_1_2_15_3 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_15.appendView (view_1_2_15_3)
        }
        _ = view_1_2.appendView (view_1_2_15)
        let view_1_2_16 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
          .setFirstBaselineAlignment ()
        do{
          let view_1_2_16_0 = AutoLayoutCheckbox (title: "Pad Holes in PDF file, with diameter", size: .small)
            .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
          _ = view_1_2_16.appendView (view_1_2_16_0)
          let view_1_2_16_1 = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
            .bind_enabled (.prop (self.mDataSelection.drawPadHolesInPDF_property))
          _ = view_1_2_16.appendView (view_1_2_16_1)
          let view_1_2_16_2 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_16.appendView (view_1_2_16_2)
        }
        _ = view_1_2.appendView (view_1_2_16)
        let view_1_2_17 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .center)
        _ = view_1_2.appendView (view_1_2_17)
        let view_1_2_18 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_18_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          _ = view_1_2_18.appendView (view_1_2_18_0)
          let view_1_2_18_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_2_18.appendView (view_1_2_18_1)
        }
        _ = view_1_2.appendView (view_1_2_18)
        let view_1_2_19 = AutoLayoutFlexibleSpace ()
        _ = view_1_2.appendView (view_1_2_19)
      }
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkMinimaPage
  //····················································································································

  final func ArtworkMinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_2)
        let view_1_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_3)
        let view_1_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_4)
        let view_1_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_5)
        let view_1_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_6)
        let view_1_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .left)
        _ = view_1_1.appendView (view_1_1_7)
        let view_1_1_8 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_8)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutStaticImageView (name: "artwork")
      _ = view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_4)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutGridView2 ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_122 (), right: self.computeImplicitView_123 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_124 (), right: self.computeImplicitView_125 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_126 (), right: self.computeImplicitView_127 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_128 (), right: self.computeImplicitView_129 ())
      _ = view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      _ = view_3.appendView (view_3_2)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_4)
    return vStackView
  }

  //····················································································································
  //    VIEW PDFSettingsPage
  //····················································································································

  final func PDFSettingsPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutColorWell ()
        .bind_color (self.rootObject.mPDFBoardBackgroundColor_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW GenerationLogPage
  //····················································································································

  final func GenerationLogPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutTextObserverView ()
    self.mLogTextView = view_0 // Outlet
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  private final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Artwork Name", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  private final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .bind_title (self.mBoardModelSelection.artworkName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  private final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layout", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  private final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .bind_title (self.mBoardModelSelection.layerConfigurationString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  private final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Model Width", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  private final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  private final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Model Height", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  private final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.mBoardModelSelection.modelHeight_property, self.mBoardModelSelection.modelHeightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  private final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Limit Width", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  private final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.mBoardModelSelection.modelLimitWidth_property, self.mBoardModelSelection.modelLimitWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  private final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Archive Version", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  private final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .small)
      .set (alignment: .left)
      .bind_observedValue (self.mBoardModelSelection.modelVersion_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  private final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .setRedTextColor ()
      .bind_title (self.mBoardModelSelection.errorArchiveVersionMessage_property)
      .bind_size (self.mBoardModelSelection.errorArchiveLabelSize_property)
      .bind_textColor (self.mBoardModelSelection.errorArchiveLabelColor_property)
      .bind_hidden (.prop (self.mBoardModelSelection.errorArchiveVersionMessageIsHidden_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  private final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Ignore Board Archive Error", size: .small)
      .expandableWidth ()
      .bind_value (self.mBoardModelSelection.ignoreModelVersionError_property)
      .bind_hidden (.prop (self.mBoardModelSelection.errorArchiveVersionMessageIsHidden_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  private final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Count", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  private final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .small)
      .set (alignment: .left)
      .bind_observedValue (self.mBoardModelSelection.instanceCount_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  private final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  private final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Model", right: "Board", bold: true, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  private final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Horizontal Flip", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  private final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .bind_value (preferences_mergerModelViewHorizontalFlip_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .bind_value (preferences_mergerBoardViewHorizontalFlip_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  private final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Vertical Flip", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  private final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .bind_value (preferences_mergerModelViewVerticalFlip_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .bind_value (preferences_mergerBoardViewVerticalFlip_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  private final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Holes", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  private final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayHoles_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorHoles_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayHoles_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  private final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Vias", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  private final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayVias_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorVias_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayVias_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  private final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Limits", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  private final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .set (enabled: false, checked: true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBoardLimits_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBoardLimits_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  private final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Model Board Limits", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  private final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayModelBoardLimits_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorInternalBoardsLimits_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayModelBoardsLimits_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  private final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  private final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .set (enabled: false, checked: true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackground_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .set (enabled: false, checked: true)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  private final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Front", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  private final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  private final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pads", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  private final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontPads_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontPads_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontPads_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  private final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Names", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  private final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontComponentNames_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontComponentNames_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontComponentNames_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  private final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Values", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  private final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontComponentValues_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontComponentValues_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontComponentValues_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  private final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Packages", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  private final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontPackages_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontPackages_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontPackages_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 42
  //····················································································································

  private final func computeImplicitView_42 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Legend Texts", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 43
  //····················································································································

  private final func computeImplicitView_43 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontLegendTexts_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontLegendTexts_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontLegendTexts_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 44
  //····················································································································

  private final func computeImplicitView_44 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Legend Lines", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 45
  //····················································································································

  private final func computeImplicitView_45 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontLegendLines_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontLegendLines_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontLegendLines_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 46
  //····················································································································

  private final func computeImplicitView_46 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layout Texts", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 47
  //····················································································································

  private final func computeImplicitView_47 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontLayoutTexts_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontLayoutTexts_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontLayoutTexts_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 48
  //····················································································································

  private final func computeImplicitView_48 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 49
  //····················································································································

  private final func computeImplicitView_49 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayFrontTracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorFrontTracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayFrontTracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 50
  //····················································································································

  private final func computeImplicitView_50 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 51
  //····················································································································

  private final func computeImplicitView_51 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 52
  //····················································································································

  private final func computeImplicitView_52 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Traversing Pads", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 53
  //····················································································································

  private final func computeImplicitView_53 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayTraversingPads_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorTraversingPads_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayTraversingPads_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 54
  //····················································································································

  private final func computeImplicitView_54 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 1 Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 55
  //····················································································································

  private final func computeImplicitView_55 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayInner1Tracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorInner1Tracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayInner1Tracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 56
  //····················································································································

  private final func computeImplicitView_56 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 2 Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 57
  //····················································································································

  private final func computeImplicitView_57 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayInner2Tracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorInner2Tracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayInner2Tracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 58
  //····················································································································

  private final func computeImplicitView_58 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 3 Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 59
  //····················································································································

  private final func computeImplicitView_59 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayInner3Tracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorInner3Tracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayInner3Tracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 60
  //····················································································································

  private final func computeImplicitView_60 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 4 Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 61
  //····················································································································

  private final func computeImplicitView_61 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayInner4Tracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorInner4Tracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayInner4Tracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 62
  //····················································································································

  private final func computeImplicitView_62 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Back", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 63
  //····················································································································

  private final func computeImplicitView_63 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 64
  //····················································································································

  private final func computeImplicitView_64 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pads", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 65
  //····················································································································

  private final func computeImplicitView_65 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackPads_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackPads_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackPads_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 66
  //····················································································································

  private final func computeImplicitView_66 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Names", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 67
  //····················································································································

  private final func computeImplicitView_67 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackComponentNames_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackComponentNames_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackComponentNames_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 68
  //····················································································································

  private final func computeImplicitView_68 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Values", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 69
  //····················································································································

  private final func computeImplicitView_69 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackComponentValues_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackComponentValues_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackComponentValues_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 70
  //····················································································································

  private final func computeImplicitView_70 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Packages", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 71
  //····················································································································

  private final func computeImplicitView_71 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackPackages_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackPackages_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackPackages_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 72
  //····················································································································

  private final func computeImplicitView_72 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Legend Texts", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 73
  //····················································································································

  private final func computeImplicitView_73 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackLegendTexts_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackLegendTexts_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackLegendTexts_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 74
  //····················································································································

  private final func computeImplicitView_74 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Legend Lines", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 75
  //····················································································································

  private final func computeImplicitView_75 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackLegendLines_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackLegendLines_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackLegendLines_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 76
  //····················································································································

  private final func computeImplicitView_76 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layout Texts", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 77
  //····················································································································

  private final func computeImplicitView_77 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackLayoutTexts_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackLayoutTexts_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackLayoutTexts_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 78
  //····················································································································

  private final func computeImplicitView_78 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 79
  //····················································································································

  private final func computeImplicitView_79 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setCenterYAlignment ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerModelViewDisplayBackTracks_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_mergerColorBackTracks_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutCheckbox (title: "", size: .small)
        .expandableHeight ()
        .bind_value (preferences_mergerBoardViewDisplayBackTracks_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 80
  //····················································································································

  private final func computeImplicitView_80 () -> NSView {
    let view = AutoLayoutGridView2 ()
      .set (margins: 8)
      .addCenterYAligned (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
      .addCenterYAligned (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
      .addCenterYAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .addCenterYAligned (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
      .addCenterYAligned (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
      .addCenterYAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .addCenterYAligned (left: self.computeImplicitView_28 (), right: self.computeImplicitView_29 ())
      .addCenterYAligned (left: self.computeImplicitView_30 (), right: self.computeImplicitView_31 ())
      .addCenterYAligned (left: self.computeImplicitView_32 (), right: self.computeImplicitView_33 ())
      .addCenterYAligned (left: self.computeImplicitView_34 (), right: self.computeImplicitView_35 ())
      .addCenterYAligned (left: self.computeImplicitView_36 (), right: self.computeImplicitView_37 ())
      .addCenterYAligned (left: self.computeImplicitView_38 (), right: self.computeImplicitView_39 ())
      .addCenterYAligned (left: self.computeImplicitView_40 (), right: self.computeImplicitView_41 ())
      .addCenterYAligned (left: self.computeImplicitView_42 (), right: self.computeImplicitView_43 ())
      .addCenterYAligned (left: self.computeImplicitView_44 (), right: self.computeImplicitView_45 ())
      .addCenterYAligned (left: self.computeImplicitView_46 (), right: self.computeImplicitView_47 ())
      .addCenterYAligned (left: self.computeImplicitView_48 (), right: self.computeImplicitView_49 ())
      .addCenterYAligned (left: self.computeImplicitView_50 (), right: self.computeImplicitView_51 ())
      .addCenterYAligned (left: self.computeImplicitView_52 (), right: self.computeImplicitView_53 ())
      .addCenterYAligned (left: self.computeImplicitView_54 (), right: self.computeImplicitView_55 ())
      .addCenterYAligned (left: self.computeImplicitView_56 (), right: self.computeImplicitView_57 ())
      .addCenterYAligned (left: self.computeImplicitView_58 (), right: self.computeImplicitView_59 ())
      .addCenterYAligned (left: self.computeImplicitView_60 (), right: self.computeImplicitView_61 ())
      .addCenterYAligned (left: self.computeImplicitView_62 (), right: self.computeImplicitView_63 ())
      .addCenterYAligned (left: self.computeImplicitView_64 (), right: self.computeImplicitView_65 ())
      .addCenterYAligned (left: self.computeImplicitView_66 (), right: self.computeImplicitView_67 ())
      .addCenterYAligned (left: self.computeImplicitView_68 (), right: self.computeImplicitView_69 ())
      .addCenterYAligned (left: self.computeImplicitView_70 (), right: self.computeImplicitView_71 ())
      .addCenterYAligned (left: self.computeImplicitView_72 (), right: self.computeImplicitView_73 ())
      .addCenterYAligned (left: self.computeImplicitView_74 (), right: self.computeImplicitView_75 ())
      .addCenterYAligned (left: self.computeImplicitView_76 (), right: self.computeImplicitView_77 ())
      .addCenterYAligned (left: self.computeImplicitView_78 (), right: self.computeImplicitView_79 ())
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 81
  //····················································································································

  private final func computeImplicitView_81 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 82
  //····················································································································

  private final func computeImplicitView_82 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutCanariDimensionAndPopUp (size: .small)
        .bind_dimensionAndUnit (self.rootObject.boardManualWidth_property, self.rootObject.boardWidthUnit_property)
        .bind_hidden (.prop (self.rootObject.automaticBoardSize_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
        .bind_dimensionAndUnit (self.rootObject.boardWidth_property, self.rootObject.boardWidthUnit_property)
        .bind_hidden (.not (.prop (self.rootObject.automaticBoardSize_property)))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 83
  //····················································································································

  private final func computeImplicitView_83 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 84
  //····················································································································

  private final func computeImplicitView_84 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutCanariDimensionAndPopUp (size: .small)
        .bind_dimensionAndUnit (self.rootObject.boardManualHeight_property, self.rootObject.boardHeightUnit_property)
        .bind_hidden (.prop (self.rootObject.automaticBoardSize_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
        .bind_dimensionAndUnit (self.rootObject.boardHeight_property, self.rootObject.boardHeightUnit_property)
        .bind_hidden (.not (.prop (self.rootObject.automaticBoardSize_property)))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 85
  //····················································································································

  private final func computeImplicitView_85 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Limit Width", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 86
  //····················································································································

  private final func computeImplicitView_86 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.boardLimitWidth_property, self.rootObject.boardLimitWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 87
  //····················································································································

  private final func computeImplicitView_87 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Selected Element", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 88
  //····················································································································

  private final func computeImplicitView_88 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Model", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 89
  //····················································································································

  private final func computeImplicitView_89 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.mBoardInstanceSelection.modelName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 90
  //····················································································································

  private final func computeImplicitView_90 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Right", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 91
  //····················································································································

  private final func computeImplicitView_91 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.mBoardInstanceSelection.x_property, self.rootObject.selectedBoardXUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 92
  //····················································································································

  private final func computeImplicitView_92 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Bottom", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 93
  //····················································································································

  private final func computeImplicitView_93 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.mBoardInstanceSelection.y_property, self.rootObject.selectedBoardYUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 94
  //····················································································································

  private final func computeImplicitView_94 () -> NSView {
    let view = AutoLayoutCanariOrientationSegmentedControl (size: .small)
      .expandableWidth ()
      .bind_orientation (self.mBoardInstanceSelection.instanceRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 95
  //····················································································································

  private final func computeImplicitView_95 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Board", bold: true, size: .small, alignment: .left)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0 = AutoLayoutCheckbox (title: "Automatic Size", size: .small)
          .bind_value (self.rootObject.automaticBoardSize_property)
        _ = view_1.appendView (view_1_0)
        let view_1_1 = AutoLayoutFlexibleSpace ()
        _ = view_1.appendView (view_1_1)
        let view_1_2 = AutoLayoutCheckbox (title: "Limits Overlap", size: .small)
          .bind_value (self.rootObject.overlapingArrangment_property)
          .bind_enabled (.intcmp (.prop (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0)))
        _ = view_1.appendView (view_1_2)
      }
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutGridView2 ()
        .addFirstBaseLineAligned (left: self.computeImplicitView_81 (), right: self.computeImplicitView_82 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_83 (), right: self.computeImplicitView_84 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_85 (), right: self.computeImplicitView_86 ())
        .addSeparator ()
        .add (single: self.computeImplicitView_87 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_88 (), right: self.computeImplicitView_89 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_90 (), right: self.computeImplicitView_91 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_92 (), right: self.computeImplicitView_93 ())
        .add (single: self.computeImplicitView_94 ())
      _ = view.appendView (view_2)
      let view_3 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view.appendView (view_3)
      let view_4 = AutoLayoutHorizontalStackView ()
      do{
        let view_4_0 = AutoLayoutVerticalStackView ()
        do{
          let view_4_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_4_0.appendView (view_4_0_0)
          let view_4_0_1 = AutoLayoutButton (title: "Explode All", size: .small)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.explodeAllAction (_:))
            )
          _ = view_4_0.appendView (view_4_0_1)
          let view_4_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_4_0.appendView (view_4_0_2)
        }
        _ = view_4.appendView (view_4_0)
        let view_4_1 = AutoLayoutVerticalStackView ()
          .set (margins: 0)
        do{
          let view_4_1_0 = AutoLayoutStaticLabel (title: "Stack All", bold: true, size: .small, alignment: .center)
          _ = view_4_1.appendView (view_4_1_0)
          let view_4_1_1 = AutoLayoutHorizontalStackView ()
          do{
            let view_4_1_1_0 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_1.appendView (view_4_1_1_0)
            let view_4_1_1_1 = AutoLayoutButton (title: "Up", size: .small)
              .setTitleAsUpArrow ()
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackAllUpAction (_:))
              )
            _ = view_4_1_1.appendView (view_4_1_1_1)
            let view_4_1_1_2 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_1.appendView (view_4_1_1_2)
          }
          _ = view_4_1.appendView (view_4_1_1)
          let view_4_1_2 = AutoLayoutHorizontalStackView ()
          do{
            let view_4_1_2_0 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_2.appendView (view_4_1_2_0)
            let view_4_1_2_1 = AutoLayoutButton (title: "Left", size: .small)
              .setTitleAsLeftArrow ()
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackAllLeftAction (_:))
              )
            _ = view_4_1_2.appendView (view_4_1_2_1)
            let view_4_1_2_2 = AutoLayoutButton (title: "Right", size: .small)
              .setTitleAsRightArrow ()
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackAllRightAction (_:))
              )
            _ = view_4_1_2.appendView (view_4_1_2_2)
            let view_4_1_2_3 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_2.appendView (view_4_1_2_3)
          }
          _ = view_4_1.appendView (view_4_1_2)
          let view_4_1_3 = AutoLayoutHorizontalStackView ()
          do{
            let view_4_1_3_0 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_3.appendView (view_4_1_3_0)
            let view_4_1_3_1 = AutoLayoutButton (title: "Down", size: .small)
              .setTitleAsDownArrow ()
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackAllDownAction (_:))
              )
            _ = view_4_1_3.appendView (view_4_1_3_1)
            let view_4_1_3_2 = AutoLayoutFlexibleSpace ()
            _ = view_4_1_3.appendView (view_4_1_3_2)
          }
          _ = view_4_1.appendView (view_4_1_3)
        }
        _ = view_4.appendView (view_4_1)
      }
      _ = view.appendView (view_4)
      let view_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view.appendView (view_5)
      let view_6 = AutoLayoutHorizontalStackView ()
        .set (margins: 0)
        .equalWidth ()
      do{
        let view_6_0 = AutoLayoutVerticalStackView ()
          .set (margins: 0)
        do{
          let view_6_0_0 = AutoLayoutStaticLabel (title: "Move Selection", bold: true, size: .small, alignment: .center)
          _ = view_6_0.appendView (view_6_0_0)
          let view_6_0_1 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_0_1_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_1.appendView (view_6_0_1_0)
            let view_6_0_1_1 = AutoLayoutButton (title: "Up", size: .small)
              .setTitleAsUpArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.moveSelectionUpAction (_:))
              )
            _ = view_6_0_1.appendView (view_6_0_1_1)
            let view_6_0_1_2 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_1.appendView (view_6_0_1_2)
          }
          _ = view_6_0.appendView (view_6_0_1)
          let view_6_0_2 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_0_2_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_2.appendView (view_6_0_2_0)
            let view_6_0_2_1 = AutoLayoutButton (title: "Left", size: .small)
              .setTitleAsLeftArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.moveSelectionLeftAction (_:))
              )
            _ = view_6_0_2.appendView (view_6_0_2_1)
            let view_6_0_2_2 = AutoLayoutButton (title: "Right", size: .small)
              .setTitleAsRightArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.moveSelectionRightAction (_:))
              )
            _ = view_6_0_2.appendView (view_6_0_2_2)
            let view_6_0_2_3 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_2.appendView (view_6_0_2_3)
          }
          _ = view_6_0.appendView (view_6_0_2)
          let view_6_0_3 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_0_3_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_3.appendView (view_6_0_3_0)
            let view_6_0_3_1 = AutoLayoutButton (title: "Down", size: .small)
              .setTitleAsDownArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.moveSelectionDownAction (_:))
              )
            _ = view_6_0_3.appendView (view_6_0_3_1)
            let view_6_0_3_2 = AutoLayoutFlexibleSpace ()
            _ = view_6_0_3.appendView (view_6_0_3_2)
          }
          _ = view_6_0.appendView (view_6_0_3)
        }
        _ = view_6.appendView (view_6_0)
        let view_6_1 = AutoLayoutVerticalStackView ()
          .set (margins: 0)
        do{
          let view_6_1_0 = AutoLayoutStaticLabel (title: "Stack Selection", bold: true, size: .small, alignment: .center)
          _ = view_6_1.appendView (view_6_1_0)
          let view_6_1_1 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_1_1_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_1.appendView (view_6_1_1_0)
            let view_6_1_1_1 = AutoLayoutButton (title: "Up", size: .small)
              .setTitleAsUpArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackSelectionUpAction (_:))
              )
            _ = view_6_1_1.appendView (view_6_1_1_1)
            let view_6_1_1_2 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_1.appendView (view_6_1_1_2)
          }
          _ = view_6_1.appendView (view_6_1_1)
          let view_6_1_2 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_1_2_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_2.appendView (view_6_1_2_0)
            let view_6_1_2_1 = AutoLayoutButton (title: "Left", size: .small)
              .setTitleAsLeftArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackSelectionLeftAction (_:))
              )
            _ = view_6_1_2.appendView (view_6_1_2_1)
            let view_6_1_2_2 = AutoLayoutButton (title: "Right", size: .small)
              .setTitleAsRightArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackSelectionRightAction (_:))
              )
            _ = view_6_1_2.appendView (view_6_1_2_2)
            let view_6_1_2_3 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_2.appendView (view_6_1_2_3)
          }
          _ = view_6_1.appendView (view_6_1_2)
          let view_6_1_3 = AutoLayoutHorizontalStackView ()
          do{
            let view_6_1_3_0 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_3.appendView (view_6_1_3_0)
            let view_6_1_3_1 = AutoLayoutButton (title: "Down", size: .small)
              .setTitleAsDownArrow ()
              .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.stackSelectionDownAction (_:))
              )
            _ = view_6_1_3.appendView (view_6_1_3_1)
            let view_6_1_3_2 = AutoLayoutFlexibleSpace ()
            _ = view_6_1_3.appendView (view_6_1_3_2)
          }
          _ = view_6_1.appendView (view_6_1_3)
        }
        _ = view_6.appendView (view_6_1)
      }
      _ = view.appendView (view_6)
      let view_7 = AutoLayoutButton (title: "Explode Selection", size: .small)
        .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutMergerDocument.explodeSelectionAction (_:))
        )
      _ = view.appendView (view_7)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 96
  //····················································································································

  private final func computeImplicitView_96 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 97
  //····················································································································

  private final func computeImplicitView_97 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.rootObject.layerConfigurationString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 98
  //····················································································································

  private final func computeImplicitView_98 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 99
  //····················································································································

  private final func computeImplicitView_99 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_observedValue (self.rootObject.mArtworkVersion_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 100
  //····················································································································

  private final func computeImplicitView_100 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular, alignment: .right)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 101
  //····················································································································

  private final func computeImplicitView_101 () -> NSView {
    let view = AutoLayoutTextObserverView ()
      .expandableWidth ()
      .bind_observedValue (self.rootObject.comments_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 102
  //····················································································································

  private final func computeImplicitView_102 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 103
  //····················································································································

  private final func computeImplicitView_103 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 104
  //····················································································································

  private final func computeImplicitView_104 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 105
  //····················································································································

  private final func computeImplicitView_105 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 106
  //····················································································································

  private final func computeImplicitView_106 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_value (self.mDataSelection.drawTraversingPads_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 107
  //····················································································································

  private final func computeImplicitView_107 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 108
  //····················································································································

  private final func computeImplicitView_108 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 109
  //····················································································································

  private final func computeImplicitView_109 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 110
  //····················································································································

  private final func computeImplicitView_110 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 111
  //····················································································································

  private final func computeImplicitView_111 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 112
  //····················································································································

  private final func computeImplicitView_112 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 113
  //····················································································································

  private final func computeImplicitView_113 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 114
  //····················································································································

  private final func computeImplicitView_114 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 115
  //····················································································································

  private final func computeImplicitView_115 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 116
  //····················································································································

  private final func computeImplicitView_116 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
      .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 117
  //····················································································································

  private final func computeImplicitView_117 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
      .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 118
  //····················································································································

  private final func computeImplicitView_118 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 119
  //····················································································································

  private final func computeImplicitView_119 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 120
  //····················································································································

  private final func computeImplicitView_120 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 121
  //····················································································································

  private final func computeImplicitView_121 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 122
  //····················································································································

  private final func computeImplicitView_122 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 123
  //····················································································································

  private final func computeImplicitView_123 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 124
  //····················································································································

  private final func computeImplicitView_124 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 125
  //····················································································································

  private final func computeImplicitView_125 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 126
  //····················································································································

  private final func computeImplicitView_126 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 127
  //····················································································································

  private final func computeImplicitView_127 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 128
  //····················································································································

  private final func computeImplicitView_128 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 129
  //····················································································································

  private final func computeImplicitView_129 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mBoardIssueTableView, self.mComposedBoardGraphicView)
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.bind_model (self.rootObject.boardModels_property, self.undoManager)

  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.bind_selection (model: self.mBoardModelController.selectedArray_property)

  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.bind_model (self.rootObject.boardInstances_property, self.undoManager)

  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.bind_selection (model: self.mBoardInstanceController.selectedArray_property)

  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)

  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.overlapingArrangment_property.selection
        let s1 = unwSelf.rootObject.boardRect_property.selection
        let s2 = unwSelf.rootObject.boardLimitWidth_property.selection
        let s3 = unwSelf.rootObject.boardInstances_property.selection
        let s4 = unwSelf.rootObject.boardInstances_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutMergerDocument_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.overlapingArrangment_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardRect_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardLimitWidth_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardInstances_property.toMany_instanceRect_StartsBeingObserved (by: self.issues_property)
    self.rootObject.boardInstances_property.toMany_boardLimitWidth_StartsBeingObserved (by: self.issues_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: boardDispositionStatusTitle
    self.boardDispositionStatusTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_boardDispositionStatusTitle (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.boardDispositionStatusTitle_property)


  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.incorrectDocumentFileDetailedErrorMessage_property)

  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentFileShouldBeRenamedErrorMessage_property)

  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtension_property)

  //--- Atomic property: modelVersionErrorMessage
    self.modelVersionErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.boardModels_property.selection
        let s1 = unwSelf.rootObject.boardModels_property.selection
        let s2 = unwSelf.rootObject.boardModels_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_AutoLayoutMergerDocument_modelVersionErrorMessage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.boardModels_property.toMany_name_StartsBeingObserved (by: self.modelVersionErrorMessage_property)
    self.rootObject.boardModels_property.toMany_modelVersion_StartsBeingObserved (by: self.modelVersionErrorMessage_property)
    self.rootObject.boardModels_property.toMany_ignoreModelVersionError_StartsBeingObserved (by: self.modelVersionErrorMessage_property)

  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusImage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusImage_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusImage_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusMessage_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusErrorCount (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusErrorCount_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentIsUnnamed_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.startsBeingObserved (by: self.generatedFileCountString_property)

  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

