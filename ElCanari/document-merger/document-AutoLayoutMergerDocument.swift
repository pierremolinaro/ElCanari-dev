//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutMergerDocument) class AutoLayoutMergerDocument : AutoLayoutMergerDocumentSuperClass {
  
  //································································································
  //   Array controller: mBoardModelController
  //································································································

  final var mBoardModelController = Controller_AutoLayoutMergerDocument_mBoardModelController ()

  //································································································
  //   Selection controller: mBoardModelSelection
  //································································································

  final var mBoardModelSelection = SelectionController_AutoLayoutMergerDocument_mBoardModelSelection ()

  //································································································
  //   Array controller: mBoardInstanceController
  //································································································

  final var mBoardInstanceController = Controller_AutoLayoutMergerDocument_mBoardInstanceController ()

  //································································································
  //   Selection controller: mBoardInstanceSelection
  //································································································

  final var mBoardInstanceSelection = SelectionController_AutoLayoutMergerDocument_mBoardInstanceSelection ()

  //································································································
  //   Array controller: mDataController
  //································································································

  final var mDataController = Controller_AutoLayoutMergerDocument_mDataController ()

  //································································································
  //   Selection controller: mDataSelection
  //································································································

  final var mDataSelection = SelectionController_AutoLayoutMergerDocument_mDataSelection ()

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: boardDispositionStatusTitle
  //································································································

  final let boardDispositionStatusTitle_property = EBTransientProperty <String> ()

  //································································································

  final var boardDispositionStatusTitle : String? {
    return self.boardDispositionStatusTitle_property.optionalValue
  }

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty <String> ()

  //································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    return self.incorrectDocumentFileDetailedErrorMessage_property.optionalValue
  }

  //································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    return self.documentFileShouldBeRenamedErrorMessage_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtension
  //································································································

  final let emptyDrillFileExtension_property = EBTransientProperty <Bool> ()

  //································································································

  final var emptyDrillFileExtension : Bool? {
    return self.emptyDrillFileExtension_property.optionalValue
  }

  //································································································
  //   Transient property: modelVersionErrorMessage
  //································································································

  final let modelVersionErrorMessage_property = EBTransientProperty <String> ()

  //································································································

  final var modelVersionErrorMessage : String? {
    return self.modelVersionErrorMessage_property.optionalValue
  }

  //································································································
  //   Transient property: statusImage
  //································································································

  final let statusImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var statusImage : NSImage? {
    return self.statusImage_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: documentIsUnnamed
  //································································································

  final let documentIsUnnamed_property = EBTransientProperty <Bool> ()

  //································································································

  final var documentIsUnnamed : Bool? {
    return self.documentIsUnnamed_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtensionImage
  //································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    return self.emptyDrillFileExtensionImage_property.optionalValue
  }

  //································································································
  //   Transient property: generatedFileCountString
  //································································································

  final let generatedFileCountString_property = EBTransientProperty <String> ()

  //································································································

  final var generatedFileCountString : String? {
    return self.generatedFileCountString_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mBoardInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  weak final var mBoardIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mComposedBoardGraphicView : AutoLayoutGraphicView? = nil
  weak final var mLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mModelDragSourceTableView : AutoLayoutCanariDragSourceTableView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "MergerRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : MergerRoot { return self.mRootObject as! MergerRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.PageMasterView ()
    let modelPage = self.ModelPage ()
    let boardPage = self.BoardPage ()
    let productPage = self.ProductPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
            .addPage (title: "Model", tooltip: "Model Description", pageView: modelPage)
            .addPage (title: "Board", tooltip: "Board Description", pageView: boardPage)
            .addPage (title: "Product", tooltip: "Product Description", pageView: productPage)
            .bind_selectedPage (self.rootObject.selectedPageIndex_property)
            .bind_segmentImage (self.rootObject.segmentedControlArtworkAttentionImage_property, segmentIndex:2)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Page", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Show Display Settings", size: .regular)
            .bind_value (self.rootObject.showDisplaySettingView_property)
            .bind_enabled (.intcmp (.prop (self.rootObject.selectedPageIndex_property), .le, .literalInt (1)))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Models and Board", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
          .bind_hidden (.prop (preferences_fileSystemLibraryIsOk_property))
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Show Consistency Window", size: .regular)
            .bind_image (preferences_fileSystemLibraryStatusImage_property)
            .bind_run (
              target: gPreferences!,
              selector: #selector (Preferences.showLibraryConsistencyLogWindowAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "File System Library requires attention", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.statusMessage_property)
            .bind_errorCount (self.statusErrorCount_property)
            .bind_warningCount (self.statusWarningCount_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Status", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    _ = vStackView.appendView (pageMasterView)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ModelPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ModelPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let settingsView = self.SettingsView ()
    _ = hStackView.appendView (settingsView)
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (margins: .regular)
        .set (width: 250)
        .bind_hidden (.prop (self.rootObject.showDisplaySettingView_property))
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "+", size: .small)
            .set (width: 40)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.addBoardModelAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "Update…", size: .small)
            .expandableWidth ()
            .bind_enabled (.intcmp (.prop (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.updateBoardModelAction (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "-", size: .small)
            .set (width: 40)
            .bind_enabled (.boolcmp (.intcmp (.prop (self.mBoardModelController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .intcmp (.prop (self.mBoardModelSelection.instanceCount_property), .eq, .literalInt (0))))
            .bind_run (
              target: mBoardModelController,
              selector: #selector (Controller_AutoLayoutMergerDocument_mBoardModelController.remove (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
          .noHeaderView ()
        self.mBoardModelController.bind_tableView (hStackView_view_view)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Artwork Name", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .set (alignment: .left)
            .bind_title (self.mBoardModelSelection.artworkName_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Layout", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .set (alignment: .left)
            .bind_title (self.mBoardModelSelection.layerConfigurationString_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Model Width", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelWidthUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Model Height", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mBoardModelSelection.modelHeight_property, self.mBoardModelSelection.modelHeightUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Limit Width", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mBoardModelSelection.modelLimitWidth_property, self.mBoardModelSelection.modelLimitWidthUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Archive Version", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutIntObserverField (bold: true, size: .small)
            .set (alignment: .left)
            .bind_observedValue (self.mBoardModelSelection.modelVersion_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .setRedTextColor ()
          .bind_title (self.mBoardModelSelection.errorArchiveVersionMessage_property)
          .bind_size (self.mBoardModelSelection.errorArchiveLabelSize_property)
          .bind_textColor (self.mBoardModelSelection.errorArchiveLabelColor_property)
          .bind_hidden (.prop (self.mBoardModelSelection.errorArchiveVersionMessageIsHidden_property))
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutCheckbox (title: "Ignore Board Archive Error", size: .small)
          .expandableWidth ()
          .bind_value (self.mBoardModelSelection.ignoreModelVersionError_property)
          .bind_hidden (.prop (self.mBoardModelSelection.errorArchiveVersionMessageIsHidden_property))
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Board Count", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutIntObserverField (bold: true, size: .small)
            .set (alignment: .left)
            .bind_observedValue (self.mBoardModelSelection.instanceCount_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
        .bind_zoom (self.mBoardModelSelection.zoom_property)
        .bind_horizontalFlip (preferences_mergerModelViewHorizontalFlip_property)
        .bind_verticalFlip (preferences_mergerModelViewVerticalFlip_property)
        .bind_overObjectsDisplay (self.mBoardModelSelection.imageForModel_property)
        .bind_xPlacardUnit (self.mBoardModelSelection.modelWidthUnit_property)
        .bind_yPlacardUnit (self.mBoardModelSelection.modelHeightUnit_property)
        .bind_hidden (.intcmp (.prop (self.rootObject.boardModels_property.count_property), .eq, .literalInt (0)))
      _ = hStackView .appendView (hStackView_view)
    }
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
      _ = hStackView_view.appendFlexibleSpace ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "No Model", bold: true, size: .regular, alignment: .center)
          .bind_hidden (.intcmp (.prop (self.rootObject.boardModels_property.count_property), .gt, .literalInt (0)))
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SettingsView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SettingsView () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (bottomMargin: .regular)
        .set (width: 250)
        .bind_hidden (.not (.prop (self.rootObject.showDisplaySettingView_property)))
      do{
        let hStackView_view_view = AutoLayoutVerticalStackViewWithScrollBar ()
          .set (margins: .regular)
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabels (left: "Model", right: "Board", bold: true, size: .small)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Horizontal Flip", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewHorizontalFlip_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewHorizontalFlip_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Vertical Flip", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewVerticalFlip_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewVerticalFlip_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Holes", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .expandableHeight ()
              .bind_value (preferences_mergerModelViewDisplayHoles_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorHoles_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .expandableHeight ()
              .bind_value (preferences_mergerBoardViewDisplayHoles_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Vias", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .expandableHeight ()
              .bind_value (preferences_mergerModelViewDisplayVias_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorVias_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .expandableHeight ()
              .bind_value (preferences_mergerBoardViewDisplayVias_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Board Limits", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBoardLimits_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .expandableHeight ()
              .bind_value (preferences_mergerBoardViewDisplayBoardLimits_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Model Board Limits", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayModelBoardLimits_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorInternalBoardsLimits_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayModelBoardsLimits_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerShowModelBackground_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackground_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerShowInstanceBackground_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Front", bold: true, size: .small, alignment: .left)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Pads", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Component Names", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Component Values", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Packages", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Legend Texts", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Legend Lines", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Layout Texts", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayFrontTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorFrontTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayFrontTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner", bold: true, size: .small, alignment: .left)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Traversing Pads", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayTraversingPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorTraversingPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayTraversingPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Inner 1 Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayInner1Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorInner1Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayInner1Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Inner 2 Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayInner2Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorInner2Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayInner2Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Inner 3 Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayInner3Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorInner3Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayInner3Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Inner 4 Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayInner4Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorInner4Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayInner4Tracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Back", bold: true, size: .small, alignment: .left)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Pads", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackPads_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Component Names", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackComponentNames_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Component Values", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackComponentValues_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Packages", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackPackages_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Legend Texts", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackLegendTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Legend Lines", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackLegendLines_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Layout Texts", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackLayoutTexts_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Tracks", bold: false, size: .small, alignment: .right)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendGutter ()
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerModelViewDisplayBackTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .set (toolTip: "Stored in Preferences")
              .bind_color (preferences_mergerColorBackTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutCheckbox (title: "", size: .small)
              .bind_value (preferences_mergerBoardViewDisplayBackTracks_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
          .set (rightMargin: .regular)
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutButton (title: "Done", size: .regular)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.dismissDisplaySettingView (_:))
            )
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView.appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardBaseInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardBaseInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let boardBaseInspectorView = self.BoardBaseInspectorView ()
    let boardSettingsPage = self.BoardSettingsPage ()
    let boardIssuesPage = self.BoardIssuesPage ()
    let settingsView = self.SettingsView ()
    _ = hStackView.appendView (settingsView)
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (margins: .regular)
        .set (width: 250)
        .bind_hidden (.prop (self.rootObject.showDisplaySettingView_property))
      do{
        let hStackView_view_view = AutoLayoutSegmentedControlWithPages (documentView: boardBaseInspectorView, equalWidth: true, size: .regular)
          .expandableWidth ()
          .addPage (title: "", tooltip: "Model Description", pageView: boardSettingsPage)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: boardIssuesPage)
          .bind_segmentImage (self.statusImage_property, segmentIndex:1)
          .bind_segmentTitle (self.boardDispositionStatusTitle_property, segmentIndex:1)
        self.mBoardInspectorSegmentedControl = hStackView_view_view // Outlet
        self.configure_boardPageSegmentedControl (hStackView_view_view) // Configurator
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendView (boardBaseInspectorView)
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
        .bind_zoom (self.rootObject.zoom_property)
        .bind_horizontalFlip (preferences_mergerBoardViewHorizontalFlip_property)
        .bind_verticalFlip (preferences_mergerBoardViewVerticalFlip_property)
        .bind_overObjectsDisplay (self.rootObject.boardOutlineRectDisplay_property)
        .bind_xPlacardUnit (self.rootObject.boardWidthUnit_property)
        .bind_yPlacardUnit (self.rootObject.boardHeightUnit_property)
        .bind_graphic_controller (self.mBoardInstanceController)
      self.mComposedBoardGraphicView = hStackView_view // Outlet
      self.configure_boardGraphicView (hStackView_view) // Configurator
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardSettingsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardSettingsPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Add Model", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHelpButton (size: .small)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.showBoardHelpAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: QuadrantRotation.degreesTitles (), size: .small)
            .expandableWidth ()
            .bind_selectedIndex (self.rootObject.modelInsertionRotation_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDragSourceTableView ()
          .bind_models (self.rootObject.modelNames_property)
        self.mModelDragSourceTableView = vStackView_view_view // Outlet
        self.configure_boardModelDragSourceTableView (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutVerticalStackViewWithScrollBar ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Board", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Automatic Size", size: .small)
            .bind_value (self.rootObject.automaticBoardSize_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Limits Overlap", size: .small)
            .bind_value (self.rootObject.overlapingArrangment_property)
            .bind_enabled (.intcmp (.prop (self.rootObject.boardInstances_property.count_property), .gt, .literalInt (0)))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.boardManualWidth_property, self.rootObject.boardWidthUnit_property)
            .bind_hidden (.prop (self.rootObject.automaticBoardSize_property))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.boardWidth_property, self.rootObject.boardWidthUnit_property)
            .bind_hidden (.not (.prop (self.rootObject.automaticBoardSize_property)))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.boardManualHeight_property, self.rootObject.boardHeightUnit_property)
            .bind_hidden (.prop (self.rootObject.automaticBoardSize_property))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.boardHeight_property, self.rootObject.boardHeightUnit_property)
            .bind_hidden (.not (.prop (self.rootObject.automaticBoardSize_property)))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Limit Width", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.boardLimitWidth_property, self.rootObject.boardLimitWidthUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Selected Element", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Model", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.mBoardInstanceSelection.modelName_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Right", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mBoardInstanceSelection.x_property, self.rootObject.selectedBoardXUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Bottom", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mBoardInstanceSelection.y_property, self.rootObject.selectedBoardYUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariOrientationSegmentedControl (size: .small)
          .expandableWidth ()
          .bind_orientation (self.mBoardInstanceSelection.instanceRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Explode All", size: .small)
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.explodeAllAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Stack All", bold: true, size: .small, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Up", size: .small)
                .setTitleAsUpArrow ()
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackAllUpAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Left", size: .small)
                .setTitleAsLeftArrow ()
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackAllLeftAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Right", size: .small)
                .setTitleAsRightArrow ()
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackAllRightAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Down", size: .small)
                .setTitleAsDownArrow ()
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackAllDownAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Move Selection", bold: true, size: .small, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Up", size: .small)
                .setTitleAsUpArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.moveSelectionUpAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Left", size: .small)
                .setTitleAsLeftArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.moveSelectionLeftAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Right", size: .small)
                .setTitleAsRightArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.moveSelectionRightAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Down", size: .small)
                .setTitleAsDownArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.moveSelectionDownAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Stack Selection", bold: true, size: .small, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Up", size: .small)
                .setTitleAsUpArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackSelectionUpAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Left", size: .small)
                .setTitleAsLeftArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackSelectionLeftAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Right", size: .small)
                .setTitleAsRightArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackSelectionRightAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutButton (title: "Down", size: .small)
                .setTitleAsDownArrow ()
                .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
                .bind_run (
                  target: self,
                  selector: #selector (AutoLayoutMergerDocument.stackSelectionDownAction (_:))
                )
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendFlexibleSpace ()
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Explode Selection", size: .small)
          .bind_enabled (.intcmp (.prop (self.mBoardInstanceController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutMergerDocument.explodeSelectionAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardIssuesPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardIssuesPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .bind_title (self.statusMessage_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
        .bind_issues (self.issues_property)
      self.mBoardIssueTableView = vStackView_view // Outlet
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ProductPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ProductPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let productMasterView = self.ProductMasterView ()
    let artworkDescriptionPage = self.ArtworkDescriptionPage ()
    let artworkMinimaPage = self.ArtworkMinimaPage ()
    let artworkDataPage = self.ArtworkDataPage ()
    let pdfSettingsPage = self.PDFSettingsPage ()
    let generationLogPage = self.GenerationLogPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Import Artwork…", size: .regular)
            .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutMergerDocument.importArtworkAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .bind_hidden (.prop (self.rootObject.mArtwork_none))
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Artwork", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
              .bind_title (self.rootObject.mArtworkName_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendSeparator ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Version", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutIntObserverField (bold: true, size: .regular)
              .bind_observedValue (self.rootObject.mArtworkVersion_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendSeparator ()
          do{
            let vStackView_view_view_view_view = AutoLayoutImageObserverView (size: .small)
              .bind_image (self.rootObject.segmentedControlArtworkAttentionImage_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
              .bind_title (self.rootObject.mArtworkFileSystemLibraryStatus_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendSeparator ()
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Update", size: .regular)
              .bind_enabled (.prop (self.rootObject.mArtworkIsUpdatable_property))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.updateArtworkAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Detach Artwork", size: .regular)
              .expandableWidth ()
              .bind_hidden (.prop (self.rootObject.mArtwork_none))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.detachArtworkAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Merger Archive", size: .regular)
              .bind_value (self.rootObject.mGenerateMergerArchive_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Gerber, PDF", size: .regular)
              .bind_value (self.rootObject.mGenerateGerberAndPDF_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Generate Files", size: .regular)
              .expandableWidth ()
              .bind_enabled (.boolcmp (.not (.prop (self.rootObject.mArtwork_none)), .and, .not (.prop (self.documentIsUnnamed_property))))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutMergerDocument.generateProductFilesAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
            .set (alignment: .left)
            .expandableWidth ()
            .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTextObserverView (size: .small)
            .expandableWidth ()
            .setNoBackground ()
            .setNoVerticalScroller ()
            .setNoHorizontalScroller ()
            .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
        .bind_hidden (.prop (self.rootObject.mArtwork_none))
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: productMasterView, equalWidth: true, size: .regular)
            .addPage (title: "Gerber and PDF Settings", tooltip: "", pageView: pdfSettingsPage)
            .addPage (title: "Artwork Description", tooltip: "", pageView: artworkDescriptionPage)
            .addPage (title: "Artwork Minima", tooltip: "", pageView: artworkMinimaPage)
            .addPage (title: "Artwork Data", tooltip: "", pageView: artworkDataPage)
            .addPage (title: "Generation Log", tooltip: "", pageView: generationLogPage)
          self.mProductPageSegmentedControl = vStackView_view_view_view // Outlet
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendView (productMasterView)
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ProductMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ProductMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkDescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkDescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.rootObject.layerConfigurationString_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutIntObserverField (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_observedValue (self.rootObject.mArtworkVersion_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutTextObserverView (size: .small)
          .expandableWidth ()
          .bind_observedValue (self.rootObject.comments_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkDataPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkDataPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTextField (minWidth: 56, size: .small)
            .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutImageObserverView (size: .small)
          .bind_image (self.emptyDrillFileExtensionImage_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (leftMargin: .regular)
        .set (rightMargin: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.generatedFileCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTableView (size: .small, addControlButtons: true)
          self.mDataController.bind_tableView (vStackView_view_view_view)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutTextField (minWidth: 56, size: .small)
                .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutImageObserverView (size: .small)
              .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
              .setOrangeTextColor ()
              .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Images", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawImagesTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side QRCodes", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawQRCodesTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawPadsTopSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTraversingPads_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              _ = vStackView_view_view_view_view_view.appendFlexibleSpace ()
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              _ = vStackView_view_view_view_view_view.appendFlexibleSpace ()
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                  .set (enabled: false)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
              .set (leftMargin: .large)
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Images", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawImagesBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side QRCodes", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawQRCodesBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            do{
              let vStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawTracksBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view_view.appendGutter ()
              do{
                let vStackView_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
                  .set (enabled: false)
                  .bind_value (self.mDataSelection.drawPadsBottomSide_property)
                _ = vStackView_view_view_view_view_view .appendView (vStackView_view_view_view_view_view_view)
              }
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Vias", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawVias_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Board Limits", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.drawBoardLimits_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .large)
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
              .set (enabled: false)
              .bind_value (self.mDataSelection.horizontalMirror_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendFlexibleSpace ()
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkMinimaPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkMinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    _ = vStackView.appendFlexibleSpace ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticImageView (name: "artwork")
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PDFSettingsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PDFSettingsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .large)
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Gerber Settings", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
        do{
          let hStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: GerberUnit.popupTitles (), size: .regular)
            .bind_selectedIndex (self.rootObject.mGerberProductUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "PDF Settings", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .bind_color (self.rootObject.mPDFBoardBackgroundColor_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular, alignment: .center)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: PDFProductGrid.popupTitles (), size: .regular)
            .bind_selectedIndex (self.rootObject.mPDFProductGrid_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendFlexibleSpace ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW GenerationLogPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func GenerationLogPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutTextObserverView (size: .regular)
      self.mLogTextView = vStackView_view // Outlet
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mBoardIssueTableView, self.mComposedBoardGraphicView)
  //--- Assign main view to window
    self.windowForSheet?.setContentView (mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.bind_model (self.rootObject.boardModels_property, self.undoManager)

  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.bind_selection (model: self.mBoardModelController.selectedArray_property)

  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.bind_model (self.rootObject.boardInstances_property, self.undoManager)

  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.bind_selection (model: self.mBoardInstanceController.selectedArray_property)

  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)

  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.overlapingArrangment_property.selection
        let s1 = unwSelf.rootObject.boardRect_property.selection
        let s2 = unwSelf.rootObject.boardLimitWidth_property.selection
        let s3 = unwSelf.rootObject.boardInstances_property.selection
        let s4 = unwSelf.rootObject.boardInstances_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutMergerDocument_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.overlapingArrangment_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardRect_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardLimitWidth_property.startsBeingObserved (by: self.issues_property)
    self.rootObject.boardInstances_property.toMany_instanceRect_StartsBeingObserved (by: self.issues_property)
    self.rootObject.boardInstances_property.toMany_boardLimitWidth_StartsBeingObserved (by: self.issues_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: boardDispositionStatusTitle
    self.boardDispositionStatusTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_boardDispositionStatusTitle (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.boardDispositionStatusTitle_property)


  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.incorrectDocumentFileDetailedErrorMessage_property)

  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentFileShouldBeRenamedErrorMessage_property)

  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtension_property)

  //--- Atomic property: modelVersionErrorMessage
    self.modelVersionErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.boardModels_property.selection
        let s1 = unwSelf.rootObject.boardModels_property.selection
        let s2 = unwSelf.rootObject.boardModels_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_AutoLayoutMergerDocument_modelVersionErrorMessage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.boardModels_property.toMany_name_StartsBeingObserved (by: self.modelVersionErrorMessage_property)
    self.rootObject.boardModels_property.toMany_modelVersion_StartsBeingObserved (by: self.modelVersionErrorMessage_property)
    self.rootObject.boardModels_property.toMany_ignoreModelVersionError_StartsBeingObserved (by: self.modelVersionErrorMessage_property)

  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusImage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusImage_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusImage_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusMessage_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        let s1 = unwSelf.modelVersionErrorMessage_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutMergerDocument_statusErrorCount (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusErrorCount_property)
    self.modelVersionErrorMessage_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentIsUnnamed_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutMergerDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.startsBeingObserved (by: self.generatedFileCountString_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

