//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_name : AnyObject {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelWidth : AnyObject {
  var modelWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelWidthUnit : AnyObject {
  var modelWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelHeight : AnyObject {
  var modelHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelHeightUnit : AnyObject {
  var modelHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_zoom : AnyObject {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_layerConfiguration : AnyObject {
  var layerConfiguration : LayerConfiguration { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelLimitWidth : AnyObject {
  var modelLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_modelLimitWidthUnit : AnyObject {
  var modelLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_artworkName : AnyObject {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_layerConfigurationString : AnyObject {
  var layerConfigurationString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLegendLinesSegments : AnyObject {
  var frontLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLegendLinesSegments : AnyObject {
  var backLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLegendLinesBezierPaths : AnyObject {
  var backLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLegendTextsSegments : AnyObject {
  var frontLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLegendTextsBezierPaths : AnyObject {
  var frontLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLayoutTextsSegments : AnyObject {
  var frontLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLayoutTextsBezierPaths : AnyObject {
  var frontLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLegendTextsSegments : AnyObject {
  var backLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLegendTextsBezierPaths : AnyObject {
  var backLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLayoutTextsSegments : AnyObject {
  var backLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backLayoutTextsBezierPaths : AnyObject {
  var backLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_internalBoardsLimitsSegments : AnyObject {
  var internalBoardsLimitsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_internalBoardsLimitsBezierPaths : AnyObject {
  var internalBoardsLimitsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_drillSegments : AnyObject {
  var drillSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_holesBezierPaths : AnyObject {
  var holesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_viaShapes : AnyObject {
  var viaShapes : MergerViaShapeArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_viasBezierPaths : AnyObject {
  var viasBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontPadArray : AnyObject {
  var frontPadArray : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontPadsBezierPaths : AnyObject {
  var frontPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backPadArray : AnyObject {
  var backPadArray : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backPadsBezierPaths : AnyObject {
  var backPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_traversingPadArray : AnyObject {
  var traversingPadArray : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_traversingPadsBezierPaths : AnyObject {
  var traversingPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_boardLimitsBezierPaths : AnyObject {
  var boardLimitsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backComponentNameSegments : AnyObject {
  var backComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backComponentNamesBezierPaths : AnyObject {
  var backComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontComponentNameSegments : AnyObject {
  var frontComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontComponentNamesBezierPaths : AnyObject {
  var frontComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontComponentValueSegments : AnyObject {
  var frontComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontComponentValuesBezierPaths : AnyObject {
  var frontComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backComponentValueSegments : AnyObject {
  var backComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backComponentValuesBezierPaths : AnyObject {
  var backComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backTrackSegments : AnyObject {
  var backTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backTracksBezierPaths : AnyObject {
  var backTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontTrackSegments : AnyObject {
  var frontTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontTracksBezierPaths : AnyObject {
  var frontTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner1TracksSegments : AnyObject {
  var inner1TracksSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner1TracksBezierPaths : AnyObject {
  var inner1TracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner2TracksSegments : AnyObject {
  var inner2TracksSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner2TracksBezierPaths : AnyObject {
  var inner2TracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner3TracksSegments : AnyObject {
  var inner3TracksSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner3TracksBezierPaths : AnyObject {
  var inner3TracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner4TracksSegments : AnyObject {
  var inner4TracksSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_inner4TracksBezierPaths : AnyObject {
  var inner4TracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontPackagesSegments : AnyObject {
  var frontPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontPackagesBezierPaths : AnyObject {
  var frontPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backPackagesSegments : AnyObject {
  var backPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_backPackagesBezierPaths : AnyObject {
  var backPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_instanceCount : AnyObject {
  var instanceCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_frontLegendLinesBezierPaths : AnyObject {
  var frontLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_imageForModel : AnyObject {
  var imageForModel : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardModel_imageForInstances : AnyObject {
  var imageForInstances : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardModel : EBManagedObject,
         BoardModel_name,
         BoardModel_modelWidth,
         BoardModel_modelWidthUnit,
         BoardModel_modelHeight,
         BoardModel_modelHeightUnit,
         BoardModel_zoom,
         BoardModel_layerConfiguration,
         BoardModel_modelLimitWidth,
         BoardModel_modelLimitWidthUnit,
         BoardModel_artworkName,
         BoardModel_layerConfigurationString,
         BoardModel_frontLegendLinesSegments,
         BoardModel_backLegendLinesSegments,
         BoardModel_backLegendLinesBezierPaths,
         BoardModel_frontLegendTextsSegments,
         BoardModel_frontLegendTextsBezierPaths,
         BoardModel_frontLayoutTextsSegments,
         BoardModel_frontLayoutTextsBezierPaths,
         BoardModel_backLegendTextsSegments,
         BoardModel_backLegendTextsBezierPaths,
         BoardModel_backLayoutTextsSegments,
         BoardModel_backLayoutTextsBezierPaths,
         BoardModel_internalBoardsLimitsSegments,
         BoardModel_internalBoardsLimitsBezierPaths,
         BoardModel_drillSegments,
         BoardModel_holesBezierPaths,
         BoardModel_viaShapes,
         BoardModel_viasBezierPaths,
         BoardModel_frontPadArray,
         BoardModel_frontPadsBezierPaths,
         BoardModel_backPadArray,
         BoardModel_backPadsBezierPaths,
         BoardModel_traversingPadArray,
         BoardModel_traversingPadsBezierPaths,
         BoardModel_boardLimitsBezierPaths,
         BoardModel_backComponentNameSegments,
         BoardModel_backComponentNamesBezierPaths,
         BoardModel_frontComponentNameSegments,
         BoardModel_frontComponentNamesBezierPaths,
         BoardModel_frontComponentValueSegments,
         BoardModel_frontComponentValuesBezierPaths,
         BoardModel_backComponentValueSegments,
         BoardModel_backComponentValuesBezierPaths,
         BoardModel_backTrackSegments,
         BoardModel_backTracksBezierPaths,
         BoardModel_frontTrackSegments,
         BoardModel_frontTracksBezierPaths,
         BoardModel_inner1TracksSegments,
         BoardModel_inner1TracksBezierPaths,
         BoardModel_inner2TracksSegments,
         BoardModel_inner2TracksBezierPaths,
         BoardModel_inner3TracksSegments,
         BoardModel_inner3TracksBezierPaths,
         BoardModel_inner4TracksSegments,
         BoardModel_inner4TracksBezierPaths,
         BoardModel_frontPackagesSegments,
         BoardModel_frontPackagesBezierPaths,
         BoardModel_backPackagesSegments,
         BoardModel_backPackagesBezierPaths,
         BoardModel_instanceCount,
         BoardModel_frontLegendLinesBezierPaths,
         BoardModel_imageForModel,
         BoardModel_imageForInstances {

  //····················································································································
  //   Atomic property: name
  //····················································································································

  final let name_property : EBStoredProperty_String

  //····················································································································

  final func reset_name_toDefaultValue () {
    self.name = ""
  }

  //····················································································································

  final var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelWidth
  //····················································································································

  final let modelWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelWidth_toDefaultValue () {
    self.modelWidth = 0
  }

  //····················································································································

  final var modelWidth : Int {
    get { return self.modelWidth_property.propval }
    set { self.modelWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelWidthUnit
  //····················································································································

  final let modelWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelWidthUnit_toDefaultValue () {
    self.modelWidthUnit = 0
  }

  //····················································································································

  final var modelWidthUnit : Int {
    get { return self.modelWidthUnit_property.propval }
    set { self.modelWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelHeight
  //····················································································································

  final let modelHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelHeight_toDefaultValue () {
    self.modelHeight = 0
  }

  //····················································································································

  final var modelHeight : Int {
    get { return self.modelHeight_property.propval }
    set { self.modelHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelHeightUnit
  //····················································································································

  final let modelHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelHeightUnit_toDefaultValue () {
    self.modelHeightUnit = 0
  }

  //····················································································································

  final var modelHeightUnit : Int {
    get { return self.modelHeightUnit_property.propval }
    set { self.modelHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  final let zoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_zoom_toDefaultValue () {
    self.zoom = 0
  }

  //····················································································································

  final var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: layerConfiguration
  //····················································································································

  final let layerConfiguration_property : EBStoredProperty_LayerConfiguration

  //····················································································································

  final func reset_layerConfiguration_toDefaultValue () {
    self.layerConfiguration = LayerConfiguration.twoLayers
  }

  //····················································································································

  final var layerConfiguration : LayerConfiguration {
    get { return self.layerConfiguration_property.propval }
    set { self.layerConfiguration_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontLegendLines
  //····················································································································

  final let frontLegendLines_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontLegendLines")

  //····················································································································

  //····················································································································

  final var frontLegendLines : EBReferenceArray <SegmentEntity> {
    get { return self.frontLegendLines_property.propval }
    set { self.frontLegendLines_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLegendLines
  //····················································································································

  final let backLegendLines_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backLegendLines")

  //····················································································································

  //····················································································································

  final var backLegendLines : EBReferenceArray <SegmentEntity> {
    get { return self.backLegendLines_property.propval }
    set { self.backLegendLines_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontLegendTexts
  //····················································································································

  final let frontLegendTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontLegendTexts")

  //····················································································································

  //····················································································································

  final var frontLegendTexts : EBReferenceArray <SegmentEntity> {
    get { return self.frontLegendTexts_property.propval }
    set { self.frontLegendTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontLayoutTexts
  //····················································································································

  final let frontLayoutTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontLayoutTexts")

  //····················································································································

  //····················································································································

  final var frontLayoutTexts : EBReferenceArray <SegmentEntity> {
    get { return self.frontLayoutTexts_property.propval }
    set { self.frontLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLegendTexts
  //····················································································································

  final let backLegendTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backLegendTexts")

  //····················································································································

  //····················································································································

  final var backLegendTexts : EBReferenceArray <SegmentEntity> {
    get { return self.backLegendTexts_property.propval }
    set { self.backLegendTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLayoutTexts
  //····················································································································

  final let backLayoutTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backLayoutTexts")

  //····················································································································

  //····················································································································

  final var backLayoutTexts : EBReferenceArray <SegmentEntity> {
    get { return self.backLayoutTexts_property.propval }
    set { self.backLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: internalBoardsLimits
  //····················································································································

  final let internalBoardsLimits_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "internalBoardsLimits")

  //····················································································································

  //····················································································································

  final var internalBoardsLimits : EBReferenceArray <SegmentEntity> {
    get { return self.internalBoardsLimits_property.propval }
    set { self.internalBoardsLimits_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: drills
  //····················································································································

  final let drills_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "drills")

  //····················································································································

  //····················································································································

  final var drills : EBReferenceArray <SegmentEntity> {
    get { return self.drills_property.propval }
    set { self.drills_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: vias
  //····················································································································

  final let vias_property = StoredArrayOf_BoardModelVia (usedForSignature: false, key: "vias")

  //····················································································································

  //····················································································································

  final var vias : EBReferenceArray <BoardModelVia> {
    get { return self.vias_property.propval }
    set { self.vias_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontPads
  //····················································································································

  final let frontPads_property = StoredArrayOf_BoardModelPad (usedForSignature: false, key: "frontPads")

  //····················································································································

  //····················································································································

  final var frontPads : EBReferenceArray <BoardModelPad> {
    get { return self.frontPads_property.propval }
    set { self.frontPads_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backPads
  //····················································································································

  final let backPads_property = StoredArrayOf_BoardModelPad (usedForSignature: false, key: "backPads")

  //····················································································································

  //····················································································································

  final var backPads : EBReferenceArray <BoardModelPad> {
    get { return self.backPads_property.propval }
    set { self.backPads_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: traversingPads
  //····················································································································

  final let traversingPads_property = StoredArrayOf_BoardModelPad (usedForSignature: false, key: "traversingPads")

  //····················································································································

  //····················································································································

  final var traversingPads : EBReferenceArray <BoardModelPad> {
    get { return self.traversingPads_property.propval }
    set { self.traversingPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelLimitWidth
  //····················································································································

  final let modelLimitWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelLimitWidth_toDefaultValue () {
    self.modelLimitWidth = 0
  }

  //····················································································································

  final var modelLimitWidth : Int {
    get { return self.modelLimitWidth_property.propval }
    set { self.modelLimitWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelLimitWidthUnit
  //····················································································································

  final let modelLimitWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_modelLimitWidthUnit_toDefaultValue () {
    self.modelLimitWidthUnit = 0
  }

  //····················································································································

  final var modelLimitWidthUnit : Int {
    get { return self.modelLimitWidthUnit_property.propval }
    set { self.modelLimitWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backComponentNames
  //····················································································································

  final let backComponentNames_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backComponentNames")

  //····················································································································

  //····················································································································

  final var backComponentNames : EBReferenceArray <SegmentEntity> {
    get { return self.backComponentNames_property.propval }
    set { self.backComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontComponentNames
  //····················································································································

  final let frontComponentNames_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontComponentNames")

  //····················································································································

  //····················································································································

  final var frontComponentNames : EBReferenceArray <SegmentEntity> {
    get { return self.frontComponentNames_property.propval }
    set { self.frontComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontComponentValues
  //····················································································································

  final let frontComponentValues_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontComponentValues")

  //····················································································································

  //····················································································································

  final var frontComponentValues : EBReferenceArray <SegmentEntity> {
    get { return self.frontComponentValues_property.propval }
    set { self.frontComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backComponentValues
  //····················································································································

  final let backComponentValues_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backComponentValues")

  //····················································································································

  //····················································································································

  final var backComponentValues : EBReferenceArray <SegmentEntity> {
    get { return self.backComponentValues_property.propval }
    set { self.backComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backTracks
  //····················································································································

  final let backTracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backTracks")

  //····················································································································

  //····················································································································

  final var backTracks : EBReferenceArray <SegmentEntity> {
    get { return self.backTracks_property.propval }
    set { self.backTracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontTracks
  //····················································································································

  final let frontTracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontTracks")

  //····················································································································

  //····················································································································

  final var frontTracks : EBReferenceArray <SegmentEntity> {
    get { return self.frontTracks_property.propval }
    set { self.frontTracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: inner1Tracks
  //····················································································································

  final let inner1Tracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "inner1Tracks")

  //····················································································································

  //····················································································································

  final var inner1Tracks : EBReferenceArray <SegmentEntity> {
    get { return self.inner1Tracks_property.propval }
    set { self.inner1Tracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: inner2Tracks
  //····················································································································

  final let inner2Tracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "inner2Tracks")

  //····················································································································

  //····················································································································

  final var inner2Tracks : EBReferenceArray <SegmentEntity> {
    get { return self.inner2Tracks_property.propval }
    set { self.inner2Tracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: inner3Tracks
  //····················································································································

  final let inner3Tracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "inner3Tracks")

  //····················································································································

  //····················································································································

  final var inner3Tracks : EBReferenceArray <SegmentEntity> {
    get { return self.inner3Tracks_property.propval }
    set { self.inner3Tracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: inner4Tracks
  //····················································································································

  final let inner4Tracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "inner4Tracks")

  //····················································································································

  //····················································································································

  final var inner4Tracks : EBReferenceArray <SegmentEntity> {
    get { return self.inner4Tracks_property.propval }
    set { self.inner4Tracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontPackages
  //····················································································································

  final let frontPackages_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "frontPackages")

  //····················································································································

  //····················································································································

  final var frontPackages : EBReferenceArray <SegmentEntity> {
    get { return self.frontPackages_property.propval }
    set { self.frontPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backPackages
  //····················································································································

  final let backPackages_property = StoredArrayOf_SegmentEntity (usedForSignature: false, key: "backPackages")

  //····················································································································

  //····················································································································

  final var backPackages : EBReferenceArray <SegmentEntity> {
    get { return self.backPackages_property.propval }
    set { self.backPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  final let artworkName_property : EBStoredProperty_String

  //····················································································································

  final func reset_artworkName_toDefaultValue () {
    self.artworkName = ""
  }

  //····················································································································

  final var artworkName : String {
    get { return self.artworkName_property.propval }
    set { self.artworkName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: myInstances
  //····················································································································

  final let myInstances_property = StoredArrayOf_MergerBoardInstance (usedForSignature: false, key: "myInstances")

  //····················································································································

  //····················································································································

  final var myInstances : EBReferenceArray <MergerBoardInstance> {
    get { return self.myInstances_property.propval }
    set { self.myInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: layerConfigurationString
  //····················································································································

  final let layerConfigurationString_property = EBTransientProperty_String ()

  //····················································································································

  final var layerConfigurationString : String? {
    switch self.layerConfigurationString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendLinesSegments
  //····················································································································

  final let frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontLegendLinesSegments : MergerSegmentArray? {
    switch self.frontLegendLinesSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesSegments
  //····················································································································

  final let backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backLegendLinesSegments : MergerSegmentArray? {
    switch self.backLegendLinesSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesBezierPaths
  //····················································································································

  final let backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backLegendLinesBezierPaths : BezierPathArray? {
    switch self.backLegendLinesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsSegments
  //····················································································································

  final let frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontLegendTextsSegments : MergerSegmentArray? {
    switch self.frontLegendTextsSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsBezierPaths
  //····················································································································

  final let frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontLegendTextsBezierPaths : BezierPathArray? {
    switch self.frontLegendTextsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsSegments
  //····················································································································

  final let frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontLayoutTextsSegments : MergerSegmentArray? {
    switch self.frontLayoutTextsSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsBezierPaths
  //····················································································································

  final let frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontLayoutTextsBezierPaths : BezierPathArray? {
    switch self.frontLayoutTextsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsSegments
  //····················································································································

  final let backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backLegendTextsSegments : MergerSegmentArray? {
    switch self.backLegendTextsSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsBezierPaths
  //····················································································································

  final let backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backLegendTextsBezierPaths : BezierPathArray? {
    switch self.backLegendTextsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsSegments
  //····················································································································

  final let backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backLayoutTextsSegments : MergerSegmentArray? {
    switch self.backLayoutTextsSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsBezierPaths
  //····················································································································

  final let backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backLayoutTextsBezierPaths : BezierPathArray? {
    switch self.backLayoutTextsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsSegments
  //····················································································································

  final let internalBoardsLimitsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var internalBoardsLimitsSegments : MergerSegmentArray? {
    switch self.internalBoardsLimitsSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsBezierPaths
  //····················································································································

  final let internalBoardsLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var internalBoardsLimitsBezierPaths : BezierPathArray? {
    switch self.internalBoardsLimitsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: drillSegments
  //····················································································································

  final let drillSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var drillSegments : MergerSegmentArray? {
    switch self.drillSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: holesBezierPaths
  //····················································································································

  final let holesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var holesBezierPaths : BezierPathArray? {
    switch self.holesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaShapes
  //····················································································································

  final let viaShapes_property = EBTransientProperty_MergerViaShapeArray ()

  //····················································································································

  final var viaShapes : MergerViaShapeArray? {
    switch self.viaShapes_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viasBezierPaths
  //····················································································································

  final let viasBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var viasBezierPaths : BezierPathArray? {
    switch self.viasBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadArray
  //····················································································································

  final let frontPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  final var frontPadArray : MergerPadArray? {
    switch self.frontPadArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadsBezierPaths
  //····················································································································

  final let frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontPadsBezierPaths : BezierPathArray? {
    switch self.frontPadsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadArray
  //····················································································································

  final let backPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  final var backPadArray : MergerPadArray? {
    switch self.backPadArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadsBezierPaths
  //····················································································································

  final let backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backPadsBezierPaths : BezierPathArray? {
    switch self.backPadsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: traversingPadArray
  //····················································································································

  final let traversingPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  final var traversingPadArray : MergerPadArray? {
    switch self.traversingPadArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: traversingPadsBezierPaths
  //····················································································································

  final let traversingPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var traversingPadsBezierPaths : BezierPathArray? {
    switch self.traversingPadsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitsBezierPaths
  //····················································································································

  final let boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var boardLimitsBezierPaths : BezierPathArray? {
    switch self.boardLimitsBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNameSegments
  //····················································································································

  final let backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backComponentNameSegments : MergerSegmentArray? {
    switch self.backComponentNameSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNamesBezierPaths
  //····················································································································

  final let backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backComponentNamesBezierPaths : BezierPathArray? {
    switch self.backComponentNamesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNameSegments
  //····················································································································

  final let frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontComponentNameSegments : MergerSegmentArray? {
    switch self.frontComponentNameSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNamesBezierPaths
  //····················································································································

  final let frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontComponentNamesBezierPaths : BezierPathArray? {
    switch self.frontComponentNamesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValueSegments
  //····················································································································

  final let frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontComponentValueSegments : MergerSegmentArray? {
    switch self.frontComponentValueSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValuesBezierPaths
  //····················································································································

  final let frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontComponentValuesBezierPaths : BezierPathArray? {
    switch self.frontComponentValuesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValueSegments
  //····················································································································

  final let backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backComponentValueSegments : MergerSegmentArray? {
    switch self.backComponentValueSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValuesBezierPaths
  //····················································································································

  final let backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backComponentValuesBezierPaths : BezierPathArray? {
    switch self.backComponentValuesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTrackSegments
  //····················································································································

  final let backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backTrackSegments : MergerSegmentArray? {
    switch self.backTrackSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTracksBezierPaths
  //····················································································································

  final let backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backTracksBezierPaths : BezierPathArray? {
    switch self.backTracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTrackSegments
  //····················································································································

  final let frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontTrackSegments : MergerSegmentArray? {
    switch self.frontTrackSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTracksBezierPaths
  //····················································································································

  final let frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontTracksBezierPaths : BezierPathArray? {
    switch self.frontTracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner1TracksSegments
  //····················································································································

  final let inner1TracksSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var inner1TracksSegments : MergerSegmentArray? {
    switch self.inner1TracksSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner1TracksBezierPaths
  //····················································································································

  final let inner1TracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var inner1TracksBezierPaths : BezierPathArray? {
    switch self.inner1TracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner2TracksSegments
  //····················································································································

  final let inner2TracksSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var inner2TracksSegments : MergerSegmentArray? {
    switch self.inner2TracksSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner2TracksBezierPaths
  //····················································································································

  final let inner2TracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var inner2TracksBezierPaths : BezierPathArray? {
    switch self.inner2TracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner3TracksSegments
  //····················································································································

  final let inner3TracksSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var inner3TracksSegments : MergerSegmentArray? {
    switch self.inner3TracksSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner3TracksBezierPaths
  //····················································································································

  final let inner3TracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var inner3TracksBezierPaths : BezierPathArray? {
    switch self.inner3TracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner4TracksSegments
  //····················································································································

  final let inner4TracksSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var inner4TracksSegments : MergerSegmentArray? {
    switch self.inner4TracksSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inner4TracksBezierPaths
  //····················································································································

  final let inner4TracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var inner4TracksBezierPaths : BezierPathArray? {
    switch self.inner4TracksBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesSegments
  //····················································································································

  final let frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var frontPackagesSegments : MergerSegmentArray? {
    switch self.frontPackagesSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesBezierPaths
  //····················································································································

  final let frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontPackagesBezierPaths : BezierPathArray? {
    switch self.frontPackagesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesSegments
  //····················································································································

  final let backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  final var backPackagesSegments : MergerSegmentArray? {
    switch self.backPackagesSegments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesBezierPaths
  //····················································································································

  final let backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var backPackagesBezierPaths : BezierPathArray? {
    switch self.backPackagesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: instanceCount
  //····················································································································

  final let instanceCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var instanceCount : Int? {
    switch self.instanceCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendLinesBezierPaths
  //····················································································································

  final let frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  final var frontLegendLinesBezierPaths : BezierPathArray? {
    switch self.frontLegendLinesBezierPaths_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForModel
  //····················································································································

  final let imageForModel_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var imageForModel : EBShape? {
    switch self.imageForModel_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForInstances
  //····················································································································

  final let imageForInstances_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var imageForInstances : EBShape? {
    switch self.imageForInstances_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.name_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "name")
    self.modelWidth_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelWidth")
    self.modelWidthUnit_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelWidthUnit")
    self.modelHeight_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelHeight")
    self.modelHeightUnit_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelHeightUnit")
    self.zoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "zoom")
    self.layerConfiguration_property = EBStoredProperty_LayerConfiguration (defaultValue: LayerConfiguration.twoLayers, undoManager: inUndoManager, key: "layerConfiguration")
    self.modelLimitWidth_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelLimitWidth")
    self.modelLimitWidthUnit_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "modelLimitWidthUnit")
    self.artworkName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "artworkName")
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: frontLegendLines (no option)
    self.frontLegendLines_property.undoManager = inUndoManager
  //--- To many property: backLegendLines (no option)
    self.backLegendLines_property.undoManager = inUndoManager
  //--- To many property: frontLegendTexts (no option)
    self.frontLegendTexts_property.undoManager = inUndoManager
  //--- To many property: frontLayoutTexts (no option)
    self.frontLayoutTexts_property.undoManager = inUndoManager
  //--- To many property: backLegendTexts (no option)
    self.backLegendTexts_property.undoManager = inUndoManager
  //--- To many property: backLayoutTexts (no option)
    self.backLayoutTexts_property.undoManager = inUndoManager
  //--- To many property: internalBoardsLimits (no option)
    self.internalBoardsLimits_property.undoManager = inUndoManager
  //--- To many property: drills (no option)
    self.drills_property.undoManager = inUndoManager
  //--- To many property: vias (no option)
    self.vias_property.undoManager = inUndoManager
  //--- To many property: frontPads (no option)
    self.frontPads_property.undoManager = inUndoManager
  //--- To many property: backPads (no option)
    self.backPads_property.undoManager = inUndoManager
  //--- To many property: traversingPads (no option)
    self.traversingPads_property.undoManager = inUndoManager
  //--- To many property: backComponentNames (no option)
    self.backComponentNames_property.undoManager = inUndoManager
  //--- To many property: frontComponentNames (no option)
    self.frontComponentNames_property.undoManager = inUndoManager
  //--- To many property: frontComponentValues (no option)
    self.frontComponentValues_property.undoManager = inUndoManager
  //--- To many property: backComponentValues (no option)
    self.backComponentValues_property.undoManager = inUndoManager
  //--- To many property: backTracks (no option)
    self.backTracks_property.undoManager = inUndoManager
  //--- To many property: frontTracks (no option)
    self.frontTracks_property.undoManager = inUndoManager
  //--- To many property: inner1Tracks (no option)
    self.inner1Tracks_property.undoManager = inUndoManager
  //--- To many property: inner2Tracks (no option)
    self.inner2Tracks_property.undoManager = inUndoManager
  //--- To many property: inner3Tracks (no option)
    self.inner3Tracks_property.undoManager = inUndoManager
  //--- To many property: inner4Tracks (no option)
    self.inner4Tracks_property.undoManager = inUndoManager
  //--- To many property: frontPackages (no option)
    self.frontPackages_property.undoManager = inUndoManager
  //--- To many property: backPackages (no option)
    self.backPackages_property.undoManager = inUndoManager
  //--- To many property: myInstances (has opposite relationship)
    self.myInstances_property.undoManager = inUndoManager
    self.myInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myModel_property.setProp (me) } },
      resetter: { inObject in inObject.myModel_property.setProp (nil) }
    )
  //--- Atomic property: layerConfigurationString
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.layerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_layerConfigurationString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.layerConfiguration_property.startsToBeObserved (by: self.layerConfigurationString_property)
  //--- Atomic property: frontLegendLinesSegments
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLegendLines_property.selection
        let s1 = unwSelf.frontLegendLines_property.selection
        let s2 = unwSelf.frontLegendLines_property.selection
        let s3 = unwSelf.frontLegendLines_property.selection
        let s4 = unwSelf.frontLegendLines_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontLegendLinesSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLines_property.toMany_x1_StartsToBeObserved (by: self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.toMany_y1_StartsToBeObserved (by: self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.toMany_x2_StartsToBeObserved (by: self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.toMany_y2_StartsToBeObserved (by: self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.toMany_width_StartsToBeObserved (by: self.frontLegendLinesSegments_property)
  //--- Atomic property: backLegendLinesSegments
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLegendLines_property.selection
        let s1 = unwSelf.backLegendLines_property.selection
        let s2 = unwSelf.backLegendLines_property.selection
        let s3 = unwSelf.backLegendLines_property.selection
        let s4 = unwSelf.backLegendLines_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backLegendLinesSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLegendLines_property.toMany_x1_StartsToBeObserved (by: self.backLegendLinesSegments_property)
    self.backLegendLines_property.toMany_y1_StartsToBeObserved (by: self.backLegendLinesSegments_property)
    self.backLegendLines_property.toMany_x2_StartsToBeObserved (by: self.backLegendLinesSegments_property)
    self.backLegendLines_property.toMany_y2_StartsToBeObserved (by: self.backLegendLinesSegments_property)
    self.backLegendLines_property.toMany_width_StartsToBeObserved (by: self.backLegendLinesSegments_property)
  //--- Atomic property: backLegendLinesBezierPaths
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLegendLinesSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backLegendLinesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesSegments_property.startsToBeObserved (by: self.backLegendLinesBezierPaths_property)
  //--- Atomic property: frontLegendTextsSegments
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLegendTexts_property.selection
        let s1 = unwSelf.frontLegendTexts_property.selection
        let s2 = unwSelf.frontLegendTexts_property.selection
        let s3 = unwSelf.frontLegendTexts_property.selection
        let s4 = unwSelf.frontLegendTexts_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontLegendTextsSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTexts_property.toMany_x1_StartsToBeObserved (by: self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.toMany_y1_StartsToBeObserved (by: self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.toMany_x2_StartsToBeObserved (by: self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.toMany_y2_StartsToBeObserved (by: self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.toMany_width_StartsToBeObserved (by: self.frontLegendTextsSegments_property)
  //--- Atomic property: frontLegendTextsBezierPaths
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLegendTextsSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontLegendTextsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.startsToBeObserved (by: self.frontLegendTextsBezierPaths_property)
  //--- Atomic property: frontLayoutTextsSegments
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLayoutTexts_property.selection
        let s1 = unwSelf.frontLayoutTexts_property.selection
        let s2 = unwSelf.frontLayoutTexts_property.selection
        let s3 = unwSelf.frontLayoutTexts_property.selection
        let s4 = unwSelf.frontLayoutTexts_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTexts_property.toMany_x1_StartsToBeObserved (by: self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.toMany_y1_StartsToBeObserved (by: self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.toMany_x2_StartsToBeObserved (by: self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.toMany_y2_StartsToBeObserved (by: self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.toMany_width_StartsToBeObserved (by: self.frontLayoutTextsSegments_property)
  //--- Atomic property: frontLayoutTextsBezierPaths
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLayoutTextsSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontLayoutTextsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.startsToBeObserved (by: self.frontLayoutTextsBezierPaths_property)
  //--- Atomic property: backLegendTextsSegments
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLegendTexts_property.selection
        let s1 = unwSelf.backLegendTexts_property.selection
        let s2 = unwSelf.backLegendTexts_property.selection
        let s3 = unwSelf.backLegendTexts_property.selection
        let s4 = unwSelf.backLegendTexts_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backLegendTextsSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLegendTexts_property.toMany_x1_StartsToBeObserved (by: self.backLegendTextsSegments_property)
    self.backLegendTexts_property.toMany_y1_StartsToBeObserved (by: self.backLegendTextsSegments_property)
    self.backLegendTexts_property.toMany_x2_StartsToBeObserved (by: self.backLegendTextsSegments_property)
    self.backLegendTexts_property.toMany_y2_StartsToBeObserved (by: self.backLegendTextsSegments_property)
    self.backLegendTexts_property.toMany_width_StartsToBeObserved (by: self.backLegendTextsSegments_property)
  //--- Atomic property: backLegendTextsBezierPaths
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLegendTextsSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backLegendTextsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.startsToBeObserved (by: self.backLegendTextsBezierPaths_property)
  //--- Atomic property: backLayoutTextsSegments
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLayoutTexts_property.selection
        let s1 = unwSelf.backLayoutTexts_property.selection
        let s2 = unwSelf.backLayoutTexts_property.selection
        let s3 = unwSelf.backLayoutTexts_property.selection
        let s4 = unwSelf.backLayoutTexts_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backLayoutTextsSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTexts_property.toMany_x1_StartsToBeObserved (by: self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.toMany_y1_StartsToBeObserved (by: self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.toMany_x2_StartsToBeObserved (by: self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.toMany_y2_StartsToBeObserved (by: self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.toMany_width_StartsToBeObserved (by: self.backLayoutTextsSegments_property)
  //--- Atomic property: backLayoutTextsBezierPaths
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backLayoutTextsSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backLayoutTextsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.startsToBeObserved (by: self.backLayoutTextsBezierPaths_property)
  //--- Atomic property: internalBoardsLimitsSegments
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.internalBoardsLimits_property.selection
        let s1 = unwSelf.internalBoardsLimits_property.selection
        let s2 = unwSelf.internalBoardsLimits_property.selection
        let s3 = unwSelf.internalBoardsLimits_property.selection
        let s4 = unwSelf.internalBoardsLimits_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_internalBoardsLimitsSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimits_property.toMany_x1_StartsToBeObserved (by: self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.toMany_y1_StartsToBeObserved (by: self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.toMany_x2_StartsToBeObserved (by: self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.toMany_y2_StartsToBeObserved (by: self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.toMany_width_StartsToBeObserved (by: self.internalBoardsLimitsSegments_property)
  //--- Atomic property: internalBoardsLimitsBezierPaths
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.internalBoardsLimitsSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_internalBoardsLimitsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimitsSegments_property.startsToBeObserved (by: self.internalBoardsLimitsBezierPaths_property)
  //--- Atomic property: drillSegments
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.drills_property.selection
        let s1 = unwSelf.drills_property.selection
        let s2 = unwSelf.drills_property.selection
        let s3 = unwSelf.drills_property.selection
        let s4 = unwSelf.drills_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_drillSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.drills_property.toMany_x1_StartsToBeObserved (by: self.drillSegments_property)
    self.drills_property.toMany_y1_StartsToBeObserved (by: self.drillSegments_property)
    self.drills_property.toMany_x2_StartsToBeObserved (by: self.drillSegments_property)
    self.drills_property.toMany_y2_StartsToBeObserved (by: self.drillSegments_property)
    self.drills_property.toMany_width_StartsToBeObserved (by: self.drillSegments_property)
  //--- Atomic property: holesBezierPaths
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.drillSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_holesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.drillSegments_property.startsToBeObserved (by: self.holesBezierPaths_property)
  //--- Atomic property: viaShapes
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.vias_property.selection
        let s1 = unwSelf.vias_property.selection
        let s2 = unwSelf.vias_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardModel_viaShapes (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.vias_property.toMany_x_StartsToBeObserved (by: self.viaShapes_property)
    self.vias_property.toMany_y_StartsToBeObserved (by: self.viaShapes_property)
    self.vias_property.toMany_padDiameter_StartsToBeObserved (by: self.viaShapes_property)
  //--- Atomic property: viasBezierPaths
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.viaShapes_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_viasBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.startsToBeObserved (by: self.viasBezierPaths_property)
  //--- Atomic property: frontPadArray
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontPads_property.selection
        let s1 = unwSelf.frontPads_property.selection
        let s2 = unwSelf.frontPads_property.selection
        let s3 = unwSelf.frontPads_property.selection
        let s4 = unwSelf.frontPads_property.selection
        let s5 = unwSelf.frontPads_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardModel_frontPadArray (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.toMany_x_StartsToBeObserved (by: self.frontPadArray_property)
    self.frontPads_property.toMany_y_StartsToBeObserved (by: self.frontPadArray_property)
    self.frontPads_property.toMany_width_StartsToBeObserved (by: self.frontPadArray_property)
    self.frontPads_property.toMany_height_StartsToBeObserved (by: self.frontPadArray_property)
    self.frontPads_property.toMany_shape_StartsToBeObserved (by: self.frontPadArray_property)
    self.frontPads_property.toMany_rotation_StartsToBeObserved (by: self.frontPadArray_property)
  //--- Atomic property: frontPadsBezierPaths
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontPadArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontPadsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontPadArray_property.startsToBeObserved (by: self.frontPadsBezierPaths_property)
  //--- Atomic property: backPadArray
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backPads_property.selection
        let s1 = unwSelf.backPads_property.selection
        let s2 = unwSelf.backPads_property.selection
        let s3 = unwSelf.backPads_property.selection
        let s4 = unwSelf.backPads_property.selection
        let s5 = unwSelf.backPads_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardModel_backPadArray (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.toMany_x_StartsToBeObserved (by: self.backPadArray_property)
    self.backPads_property.toMany_y_StartsToBeObserved (by: self.backPadArray_property)
    self.backPads_property.toMany_width_StartsToBeObserved (by: self.backPadArray_property)
    self.backPads_property.toMany_height_StartsToBeObserved (by: self.backPadArray_property)
    self.backPads_property.toMany_shape_StartsToBeObserved (by: self.backPadArray_property)
    self.backPads_property.toMany_rotation_StartsToBeObserved (by: self.backPadArray_property)
  //--- Atomic property: backPadsBezierPaths
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backPadArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backPadsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backPadArray_property.startsToBeObserved (by: self.backPadsBezierPaths_property)
  //--- Atomic property: traversingPadArray
    self.traversingPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.traversingPads_property.selection
        let s1 = unwSelf.traversingPads_property.selection
        let s2 = unwSelf.traversingPads_property.selection
        let s3 = unwSelf.traversingPads_property.selection
        let s4 = unwSelf.traversingPads_property.selection
        let s5 = unwSelf.traversingPads_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardModel_traversingPadArray (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.traversingPads_property.toMany_x_StartsToBeObserved (by: self.traversingPadArray_property)
    self.traversingPads_property.toMany_y_StartsToBeObserved (by: self.traversingPadArray_property)
    self.traversingPads_property.toMany_width_StartsToBeObserved (by: self.traversingPadArray_property)
    self.traversingPads_property.toMany_height_StartsToBeObserved (by: self.traversingPadArray_property)
    self.traversingPads_property.toMany_shape_StartsToBeObserved (by: self.traversingPadArray_property)
    self.traversingPads_property.toMany_rotation_StartsToBeObserved (by: self.traversingPadArray_property)
  //--- Atomic property: traversingPadsBezierPaths
    self.traversingPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.traversingPadArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_traversingPadsBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.traversingPadArray_property.startsToBeObserved (by: self.traversingPadsBezierPaths_property)
  //--- Atomic property: boardLimitsBezierPaths
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.modelWidth_property.selection
        let s1 = unwSelf.modelHeight_property.selection
        let s2 = unwSelf.modelLimitWidth_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardModel_boardLimitsBezierPaths (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.startsToBeObserved (by: self.boardLimitsBezierPaths_property)
    self.modelHeight_property.startsToBeObserved (by: self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.startsToBeObserved (by: self.boardLimitsBezierPaths_property)
  //--- Atomic property: backComponentNameSegments
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backComponentNames_property.selection
        let s1 = unwSelf.backComponentNames_property.selection
        let s2 = unwSelf.backComponentNames_property.selection
        let s3 = unwSelf.backComponentNames_property.selection
        let s4 = unwSelf.backComponentNames_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backComponentNameSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backComponentNames_property.toMany_x1_StartsToBeObserved (by: self.backComponentNameSegments_property)
    self.backComponentNames_property.toMany_y1_StartsToBeObserved (by: self.backComponentNameSegments_property)
    self.backComponentNames_property.toMany_x2_StartsToBeObserved (by: self.backComponentNameSegments_property)
    self.backComponentNames_property.toMany_y2_StartsToBeObserved (by: self.backComponentNameSegments_property)
    self.backComponentNames_property.toMany_width_StartsToBeObserved (by: self.backComponentNameSegments_property)
  //--- Atomic property: backComponentNamesBezierPaths
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backComponentNameSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backComponentNamesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.startsToBeObserved (by: self.backComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentNameSegments
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontComponentNames_property.selection
        let s1 = unwSelf.frontComponentNames_property.selection
        let s2 = unwSelf.frontComponentNames_property.selection
        let s3 = unwSelf.frontComponentNames_property.selection
        let s4 = unwSelf.frontComponentNames_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontComponentNameSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNames_property.toMany_x1_StartsToBeObserved (by: self.frontComponentNameSegments_property)
    self.frontComponentNames_property.toMany_y1_StartsToBeObserved (by: self.frontComponentNameSegments_property)
    self.frontComponentNames_property.toMany_x2_StartsToBeObserved (by: self.frontComponentNameSegments_property)
    self.frontComponentNames_property.toMany_y2_StartsToBeObserved (by: self.frontComponentNameSegments_property)
    self.frontComponentNames_property.toMany_width_StartsToBeObserved (by: self.frontComponentNameSegments_property)
  //--- Atomic property: frontComponentNamesBezierPaths
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontComponentNameSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontComponentNamesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.startsToBeObserved (by: self.frontComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentValueSegments
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontComponentValues_property.selection
        let s1 = unwSelf.frontComponentValues_property.selection
        let s2 = unwSelf.frontComponentValues_property.selection
        let s3 = unwSelf.frontComponentValues_property.selection
        let s4 = unwSelf.frontComponentValues_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontComponentValueSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValues_property.toMany_x1_StartsToBeObserved (by: self.frontComponentValueSegments_property)
    self.frontComponentValues_property.toMany_y1_StartsToBeObserved (by: self.frontComponentValueSegments_property)
    self.frontComponentValues_property.toMany_x2_StartsToBeObserved (by: self.frontComponentValueSegments_property)
    self.frontComponentValues_property.toMany_y2_StartsToBeObserved (by: self.frontComponentValueSegments_property)
    self.frontComponentValues_property.toMany_width_StartsToBeObserved (by: self.frontComponentValueSegments_property)
  //--- Atomic property: frontComponentValuesBezierPaths
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontComponentValueSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontComponentValuesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.startsToBeObserved (by: self.frontComponentValuesBezierPaths_property)
  //--- Atomic property: backComponentValueSegments
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backComponentValues_property.selection
        let s1 = unwSelf.backComponentValues_property.selection
        let s2 = unwSelf.backComponentValues_property.selection
        let s3 = unwSelf.backComponentValues_property.selection
        let s4 = unwSelf.backComponentValues_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backComponentValueSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backComponentValues_property.toMany_x1_StartsToBeObserved (by: self.backComponentValueSegments_property)
    self.backComponentValues_property.toMany_y1_StartsToBeObserved (by: self.backComponentValueSegments_property)
    self.backComponentValues_property.toMany_x2_StartsToBeObserved (by: self.backComponentValueSegments_property)
    self.backComponentValues_property.toMany_y2_StartsToBeObserved (by: self.backComponentValueSegments_property)
    self.backComponentValues_property.toMany_width_StartsToBeObserved (by: self.backComponentValueSegments_property)
  //--- Atomic property: backComponentValuesBezierPaths
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backComponentValueSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backComponentValuesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.startsToBeObserved (by: self.backComponentValuesBezierPaths_property)
  //--- Atomic property: backTrackSegments
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backTracks_property.selection
        let s1 = unwSelf.backTracks_property.selection
        let s2 = unwSelf.backTracks_property.selection
        let s3 = unwSelf.backTracks_property.selection
        let s4 = unwSelf.backTracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backTrackSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backTracks_property.toMany_x1_StartsToBeObserved (by: self.backTrackSegments_property)
    self.backTracks_property.toMany_y1_StartsToBeObserved (by: self.backTrackSegments_property)
    self.backTracks_property.toMany_x2_StartsToBeObserved (by: self.backTrackSegments_property)
    self.backTracks_property.toMany_y2_StartsToBeObserved (by: self.backTrackSegments_property)
    self.backTracks_property.toMany_width_StartsToBeObserved (by: self.backTrackSegments_property)
  //--- Atomic property: backTracksBezierPaths
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backTrackSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backTracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.startsToBeObserved (by: self.backTracksBezierPaths_property)
  //--- Atomic property: frontTrackSegments
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontTracks_property.selection
        let s1 = unwSelf.frontTracks_property.selection
        let s2 = unwSelf.frontTracks_property.selection
        let s3 = unwSelf.frontTracks_property.selection
        let s4 = unwSelf.frontTracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontTrackSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontTracks_property.toMany_x1_StartsToBeObserved (by: self.frontTrackSegments_property)
    self.frontTracks_property.toMany_y1_StartsToBeObserved (by: self.frontTrackSegments_property)
    self.frontTracks_property.toMany_x2_StartsToBeObserved (by: self.frontTrackSegments_property)
    self.frontTracks_property.toMany_y2_StartsToBeObserved (by: self.frontTrackSegments_property)
    self.frontTracks_property.toMany_width_StartsToBeObserved (by: self.frontTrackSegments_property)
  //--- Atomic property: frontTracksBezierPaths
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontTrackSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontTracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.startsToBeObserved (by: self.frontTracksBezierPaths_property)
  //--- Atomic property: inner1TracksSegments
    self.inner1TracksSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner1Tracks_property.selection
        let s1 = unwSelf.inner1Tracks_property.selection
        let s2 = unwSelf.inner1Tracks_property.selection
        let s3 = unwSelf.inner1Tracks_property.selection
        let s4 = unwSelf.inner1Tracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_inner1TracksSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner1Tracks_property.toMany_x1_StartsToBeObserved (by: self.inner1TracksSegments_property)
    self.inner1Tracks_property.toMany_y1_StartsToBeObserved (by: self.inner1TracksSegments_property)
    self.inner1Tracks_property.toMany_x2_StartsToBeObserved (by: self.inner1TracksSegments_property)
    self.inner1Tracks_property.toMany_y2_StartsToBeObserved (by: self.inner1TracksSegments_property)
    self.inner1Tracks_property.toMany_width_StartsToBeObserved (by: self.inner1TracksSegments_property)
  //--- Atomic property: inner1TracksBezierPaths
    self.inner1TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner1TracksSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_inner1TracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner1TracksSegments_property.startsToBeObserved (by: self.inner1TracksBezierPaths_property)
  //--- Atomic property: inner2TracksSegments
    self.inner2TracksSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner2Tracks_property.selection
        let s1 = unwSelf.inner2Tracks_property.selection
        let s2 = unwSelf.inner2Tracks_property.selection
        let s3 = unwSelf.inner2Tracks_property.selection
        let s4 = unwSelf.inner2Tracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_inner2TracksSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner2Tracks_property.toMany_x1_StartsToBeObserved (by: self.inner2TracksSegments_property)
    self.inner2Tracks_property.toMany_y1_StartsToBeObserved (by: self.inner2TracksSegments_property)
    self.inner2Tracks_property.toMany_x2_StartsToBeObserved (by: self.inner2TracksSegments_property)
    self.inner2Tracks_property.toMany_y2_StartsToBeObserved (by: self.inner2TracksSegments_property)
    self.inner2Tracks_property.toMany_width_StartsToBeObserved (by: self.inner2TracksSegments_property)
  //--- Atomic property: inner2TracksBezierPaths
    self.inner2TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner2TracksSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_inner2TracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner2TracksSegments_property.startsToBeObserved (by: self.inner2TracksBezierPaths_property)
  //--- Atomic property: inner3TracksSegments
    self.inner3TracksSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner3Tracks_property.selection
        let s1 = unwSelf.inner3Tracks_property.selection
        let s2 = unwSelf.inner3Tracks_property.selection
        let s3 = unwSelf.inner3Tracks_property.selection
        let s4 = unwSelf.inner3Tracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_inner3TracksSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner3Tracks_property.toMany_x1_StartsToBeObserved (by: self.inner3TracksSegments_property)
    self.inner3Tracks_property.toMany_y1_StartsToBeObserved (by: self.inner3TracksSegments_property)
    self.inner3Tracks_property.toMany_x2_StartsToBeObserved (by: self.inner3TracksSegments_property)
    self.inner3Tracks_property.toMany_y2_StartsToBeObserved (by: self.inner3TracksSegments_property)
    self.inner3Tracks_property.toMany_width_StartsToBeObserved (by: self.inner3TracksSegments_property)
  //--- Atomic property: inner3TracksBezierPaths
    self.inner3TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner3TracksSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_inner3TracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner3TracksSegments_property.startsToBeObserved (by: self.inner3TracksBezierPaths_property)
  //--- Atomic property: inner4TracksSegments
    self.inner4TracksSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner4Tracks_property.selection
        let s1 = unwSelf.inner4Tracks_property.selection
        let s2 = unwSelf.inner4Tracks_property.selection
        let s3 = unwSelf.inner4Tracks_property.selection
        let s4 = unwSelf.inner4Tracks_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_inner4TracksSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner4Tracks_property.toMany_x1_StartsToBeObserved (by: self.inner4TracksSegments_property)
    self.inner4Tracks_property.toMany_y1_StartsToBeObserved (by: self.inner4TracksSegments_property)
    self.inner4Tracks_property.toMany_x2_StartsToBeObserved (by: self.inner4TracksSegments_property)
    self.inner4Tracks_property.toMany_y2_StartsToBeObserved (by: self.inner4TracksSegments_property)
    self.inner4Tracks_property.toMany_width_StartsToBeObserved (by: self.inner4TracksSegments_property)
  //--- Atomic property: inner4TracksBezierPaths
    self.inner4TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.inner4TracksSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_inner4TracksBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.inner4TracksSegments_property.startsToBeObserved (by: self.inner4TracksBezierPaths_property)
  //--- Atomic property: frontPackagesSegments
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontPackages_property.selection
        let s1 = unwSelf.frontPackages_property.selection
        let s2 = unwSelf.frontPackages_property.selection
        let s3 = unwSelf.frontPackages_property.selection
        let s4 = unwSelf.frontPackages_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_frontPackagesSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontPackages_property.toMany_x1_StartsToBeObserved (by: self.frontPackagesSegments_property)
    self.frontPackages_property.toMany_y1_StartsToBeObserved (by: self.frontPackagesSegments_property)
    self.frontPackages_property.toMany_x2_StartsToBeObserved (by: self.frontPackagesSegments_property)
    self.frontPackages_property.toMany_y2_StartsToBeObserved (by: self.frontPackagesSegments_property)
    self.frontPackages_property.toMany_width_StartsToBeObserved (by: self.frontPackagesSegments_property)
  //--- Atomic property: frontPackagesBezierPaths
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontPackagesSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontPackagesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.startsToBeObserved (by: self.frontPackagesBezierPaths_property)
  //--- Atomic property: backPackagesSegments
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backPackages_property.selection
        let s1 = unwSelf.backPackages_property.selection
        let s2 = unwSelf.backPackages_property.selection
        let s3 = unwSelf.backPackages_property.selection
        let s4 = unwSelf.backPackages_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardModel_backPackagesSegments (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backPackages_property.toMany_x1_StartsToBeObserved (by: self.backPackagesSegments_property)
    self.backPackages_property.toMany_y1_StartsToBeObserved (by: self.backPackagesSegments_property)
    self.backPackages_property.toMany_x2_StartsToBeObserved (by: self.backPackagesSegments_property)
    self.backPackages_property.toMany_y2_StartsToBeObserved (by: self.backPackagesSegments_property)
    self.backPackages_property.toMany_width_StartsToBeObserved (by: self.backPackagesSegments_property)
  //--- Atomic property: backPackagesBezierPaths
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.backPackagesSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_backPackagesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.startsToBeObserved (by: self.backPackagesBezierPaths_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.myInstances_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_instanceCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.myInstances_property.startsToBeObserved (by: self.instanceCount_property)
  //--- Atomic property: frontLegendLinesBezierPaths
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.frontLegendLinesSegments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardModel_frontLegendLinesBezierPaths (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesSegments_property.startsToBeObserved (by: self.frontLegendLinesBezierPaths_property)
  //--- Atomic property: imageForModel
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_mergerColorBackground_property.selection
        let s1 = unwSelf.modelWidth_property.selection
        let s2 = unwSelf.modelHeight_property.selection
        let s3 = unwSelf.boardLimitsBezierPaths_property.selection
        let s4 = preferences_mergerModelViewDisplayModelBoardLimits_property.selection
        let s5 = preferences_mergerColorInternalBoardsLimits_property.selection
        let s6 = unwSelf.internalBoardsLimitsBezierPaths_property.selection
        let s7 = unwSelf.frontTracksBezierPaths_property.selection
        let s8 = preferences_mergerModelViewDisplayFrontTracks_property.selection
        let s9 = preferences_mergerColorFrontTracks_property.selection
        let s10 = unwSelf.inner1TracksBezierPaths_property.selection
        let s11 = preferences_mergerModelViewDisplayInner1Tracks_property.selection
        let s12 = preferences_mergerColorInner1Tracks_property.selection
        let s13 = unwSelf.inner2TracksBezierPaths_property.selection
        let s14 = preferences_mergerModelViewDisplayInner2Tracks_property.selection
        let s15 = preferences_mergerColorInner2Tracks_property.selection
        let s16 = unwSelf.inner3TracksBezierPaths_property.selection
        let s17 = preferences_mergerModelViewDisplayInner3Tracks_property.selection
        let s18 = preferences_mergerColorInner3Tracks_property.selection
        let s19 = unwSelf.inner4TracksBezierPaths_property.selection
        let s20 = preferences_mergerModelViewDisplayInner4Tracks_property.selection
        let s21 = preferences_mergerColorInner4Tracks_property.selection
        let s22 = unwSelf.backTracksBezierPaths_property.selection
        let s23 = preferences_mergerModelViewDisplayBackTracks_property.selection
        let s24 = preferences_mergerColorBackTracks_property.selection
        let s25 = unwSelf.frontPadsBezierPaths_property.selection
        let s26 = preferences_mergerModelViewDisplayFrontPads_property.selection
        let s27 = preferences_mergerColorFrontPads_property.selection
        let s28 = unwSelf.backPadsBezierPaths_property.selection
        let s29 = preferences_mergerModelViewDisplayBackPads_property.selection
        let s30 = preferences_mergerColorBackPads_property.selection
        let s31 = unwSelf.traversingPadsBezierPaths_property.selection
        let s32 = preferences_mergerModelViewDisplayTraversingPads_property.selection
        let s33 = preferences_mergerColorTraversingPads_property.selection
        let s34 = unwSelf.viasBezierPaths_property.selection
        let s35 = preferences_mergerModelViewDisplayVias_property.selection
        let s36 = preferences_mergerColorVias_property.selection
        let s37 = unwSelf.holesBezierPaths_property.selection
        let s38 = preferences_mergerModelViewDisplayHoles_property.selection
        let s39 = preferences_mergerColorHoles_property.selection
        let s40 = unwSelf.frontLegendLinesBezierPaths_property.selection
        let s41 = preferences_mergerModelViewDisplayFrontLegendLines_property.selection
        let s42 = preferences_mergerColorFrontLegendLines_property.selection
        let s43 = unwSelf.backLegendLinesBezierPaths_property.selection
        let s44 = preferences_mergerModelViewDisplayBackLegendLines_property.selection
        let s45 = preferences_mergerColorBackLegendLines_property.selection
        let s46 = unwSelf.frontLegendTextsBezierPaths_property.selection
        let s47 = preferences_mergerModelViewDisplayFrontLegendTexts_property.selection
        let s48 = preferences_mergerColorFrontLegendTexts_property.selection
        let s49 = unwSelf.frontLayoutTextsBezierPaths_property.selection
        let s50 = preferences_mergerModelViewDisplayFrontLayoutTexts_property.selection
        let s51 = preferences_mergerColorFrontLayoutTexts_property.selection
        let s52 = unwSelf.backLegendTextsBezierPaths_property.selection
        let s53 = preferences_mergerModelViewDisplayBackLegendTexts_property.selection
        let s54 = preferences_mergerColorBackLegendTexts_property.selection
        let s55 = unwSelf.backLayoutTextsBezierPaths_property.selection
        let s56 = preferences_mergerModelViewDisplayBackLayoutTexts_property.selection
        let s57 = preferences_mergerColorBackLayoutTexts_property.selection
        let s58 = unwSelf.backComponentNamesBezierPaths_property.selection
        let s59 = preferences_mergerModelViewDisplayBackComponentNames_property.selection
        let s60 = preferences_mergerColorBackComponentNames_property.selection
        let s61 = unwSelf.frontComponentNamesBezierPaths_property.selection
        let s62 = preferences_mergerModelViewDisplayFrontComponentNames_property.selection
        let s63 = preferences_mergerColorFrontComponentNames_property.selection
        let s64 = unwSelf.frontComponentValuesBezierPaths_property.selection
        let s65 = preferences_mergerModelViewDisplayFrontComponentValues_property.selection
        let s66 = preferences_mergerColorFrontComponentValues_property.selection
        let s67 = unwSelf.backComponentValuesBezierPaths_property.selection
        let s68 = preferences_mergerModelViewDisplayBackComponentValues_property.selection
        let s69 = preferences_mergerColorBackComponentValues_property.selection
        let s70 = unwSelf.frontPackagesBezierPaths_property.selection
        let s71 = preferences_mergerModelViewDisplayFrontPackages_property.selection
        let s72 = preferences_mergerColorFrontPackages_property.selection
        let s73 = unwSelf.backPackagesBezierPaths_property.selection
        let s74 = preferences_mergerModelViewDisplayBackPackages_property.selection
        let s75 = preferences_mergerColorBackPackages_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18),
              .single (let v19),
              .single (let v20),
              .single (let v21),
              .single (let v22),
              .single (let v23),
              .single (let v24),
              .single (let v25),
              .single (let v26),
              .single (let v27),
              .single (let v28),
              .single (let v29),
              .single (let v30),
              .single (let v31),
              .single (let v32),
              .single (let v33),
              .single (let v34),
              .single (let v35),
              .single (let v36),
              .single (let v37),
              .single (let v38),
              .single (let v39),
              .single (let v40),
              .single (let v41),
              .single (let v42),
              .single (let v43),
              .single (let v44),
              .single (let v45),
              .single (let v46),
              .single (let v47),
              .single (let v48),
              .single (let v49),
              .single (let v50),
              .single (let v51),
              .single (let v52),
              .single (let v53),
              .single (let v54),
              .single (let v55),
              .single (let v56),
              .single (let v57),
              .single (let v58),
              .single (let v59),
              .single (let v60),
              .single (let v61),
              .single (let v62),
              .single (let v63),
              .single (let v64),
              .single (let v65),
              .single (let v66),
              .single (let v67),
              .single (let v68),
              .single (let v69),
              .single (let v70),
              .single (let v71),
              .single (let v72),
              .single (let v73),
              .single (let v74),
              .single (let v75)) :
          return .single (transient_BoardModel_imageForModel (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_mergerColorBackground_property.startsToBeObserved (by: self.imageForModel_property)
    self.modelWidth_property.startsToBeObserved (by: self.imageForModel_property)
    self.modelHeight_property.startsToBeObserved (by: self.imageForModel_property)
    self.boardLimitsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayModelBoardLimits_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorInternalBoardsLimits_property.startsToBeObserved (by: self.imageForModel_property)
    self.internalBoardsLimitsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontTracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontTracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontTracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.inner1TracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayInner1Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorInner1Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.inner2TracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayInner2Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorInner2Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.inner3TracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayInner3Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorInner3Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.inner4TracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayInner4Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorInner4Tracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.backTracksBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackTracks_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackTracks_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontPadsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontPads_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontPads_property.startsToBeObserved (by: self.imageForModel_property)
    self.backPadsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackPads_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackPads_property.startsToBeObserved (by: self.imageForModel_property)
    self.traversingPadsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayTraversingPads_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorTraversingPads_property.startsToBeObserved (by: self.imageForModel_property)
    self.viasBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayVias_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorVias_property.startsToBeObserved (by: self.imageForModel_property)
    self.holesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayHoles_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorHoles_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontLegendLinesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontLegendLines_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontLegendLines_property.startsToBeObserved (by: self.imageForModel_property)
    self.backLegendLinesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackLegendLines_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackLegendLines_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontLegendTextsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontLegendTexts_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontLegendTexts_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontLayoutTextsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontLayoutTexts_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontLayoutTexts_property.startsToBeObserved (by: self.imageForModel_property)
    self.backLegendTextsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackLegendTexts_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackLegendTexts_property.startsToBeObserved (by: self.imageForModel_property)
    self.backLayoutTextsBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackLayoutTexts_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackLayoutTexts_property.startsToBeObserved (by: self.imageForModel_property)
    self.backComponentNamesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackComponentNames_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackComponentNames_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontComponentNamesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontComponentNames_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontComponentNames_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontComponentValuesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontComponentValues_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontComponentValues_property.startsToBeObserved (by: self.imageForModel_property)
    self.backComponentValuesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackComponentValues_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackComponentValues_property.startsToBeObserved (by: self.imageForModel_property)
    self.frontPackagesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayFrontPackages_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorFrontPackages_property.startsToBeObserved (by: self.imageForModel_property)
    self.backPackagesBezierPaths_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerModelViewDisplayBackPackages_property.startsToBeObserved (by: self.imageForModel_property)
    preferences_mergerColorBackPackages_property.startsToBeObserved (by: self.imageForModel_property)
  //--- Atomic property: imageForInstances
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_mergerColorBackground_property.selection
        let s1 = unwSelf.modelWidth_property.selection
        let s2 = unwSelf.modelHeight_property.selection
        let s3 = unwSelf.frontTracksBezierPaths_property.selection
        let s4 = preferences_mergerBoardViewDisplayFrontTracks_property.selection
        let s5 = preferences_mergerColorFrontTracks_property.selection
        let s6 = unwSelf.inner1TracksBezierPaths_property.selection
        let s7 = preferences_mergerBoardViewDisplayInner1Tracks_property.selection
        let s8 = preferences_mergerColorInner1Tracks_property.selection
        let s9 = unwSelf.inner2TracksBezierPaths_property.selection
        let s10 = preferences_mergerBoardViewDisplayInner2Tracks_property.selection
        let s11 = preferences_mergerColorInner2Tracks_property.selection
        let s12 = unwSelf.inner3TracksBezierPaths_property.selection
        let s13 = preferences_mergerBoardViewDisplayInner3Tracks_property.selection
        let s14 = preferences_mergerColorInner3Tracks_property.selection
        let s15 = unwSelf.inner4TracksBezierPaths_property.selection
        let s16 = preferences_mergerBoardViewDisplayInner4Tracks_property.selection
        let s17 = preferences_mergerColorInner4Tracks_property.selection
        let s18 = unwSelf.backTracksBezierPaths_property.selection
        let s19 = preferences_mergerBoardViewDisplayBackTracks_property.selection
        let s20 = preferences_mergerColorBackTracks_property.selection
        let s21 = unwSelf.internalBoardsLimitsBezierPaths_property.selection
        let s22 = unwSelf.boardLimitsBezierPaths_property.selection
        let s23 = preferences_mergerBoardViewDisplayModelBoardsLimits_property.selection
        let s24 = preferences_mergerColorInternalBoardsLimits_property.selection
        let s25 = unwSelf.frontPadsBezierPaths_property.selection
        let s26 = preferences_mergerBoardViewDisplayFrontPads_property.selection
        let s27 = preferences_mergerColorFrontPads_property.selection
        let s28 = unwSelf.traversingPadsBezierPaths_property.selection
        let s29 = preferences_mergerBoardViewDisplayTraversingPads_property.selection
        let s30 = preferences_mergerColorTraversingPads_property.selection
        let s31 = unwSelf.backPadsBezierPaths_property.selection
        let s32 = preferences_mergerBoardViewDisplayBackPads_property.selection
        let s33 = preferences_mergerColorBackPads_property.selection
        let s34 = unwSelf.viasBezierPaths_property.selection
        let s35 = preferences_mergerBoardViewDisplayVias_property.selection
        let s36 = preferences_mergerColorVias_property.selection
        let s37 = unwSelf.holesBezierPaths_property.selection
        let s38 = preferences_mergerBoardViewDisplayHoles_property.selection
        let s39 = preferences_mergerColorHoles_property.selection
        let s40 = unwSelf.frontLegendLinesBezierPaths_property.selection
        let s41 = preferences_mergerBoardViewDisplayFrontLegendLines_property.selection
        let s42 = preferences_mergerColorFrontLegendLines_property.selection
        let s43 = unwSelf.backLegendLinesBezierPaths_property.selection
        let s44 = preferences_mergerBoardViewDisplayBackLegendLines_property.selection
        let s45 = preferences_mergerColorBackLegendLines_property.selection
        let s46 = unwSelf.frontLegendTextsBezierPaths_property.selection
        let s47 = preferences_mergerBoardViewDisplayFrontLegendTexts_property.selection
        let s48 = preferences_mergerColorFrontLegendTexts_property.selection
        let s49 = unwSelf.frontLayoutTextsBezierPaths_property.selection
        let s50 = preferences_mergerBoardViewDisplayFrontLayoutTexts_property.selection
        let s51 = preferences_mergerColorFrontLayoutTexts_property.selection
        let s52 = unwSelf.backLegendTextsBezierPaths_property.selection
        let s53 = preferences_mergerBoardViewDisplayBackLegendTexts_property.selection
        let s54 = preferences_mergerColorBackLegendTexts_property.selection
        let s55 = unwSelf.backLayoutTextsBezierPaths_property.selection
        let s56 = preferences_mergerBoardViewDisplayBackLayoutTexts_property.selection
        let s57 = preferences_mergerColorBackLayoutTexts_property.selection
        let s58 = unwSelf.backComponentNamesBezierPaths_property.selection
        let s59 = preferences_mergerBoardViewDisplayBackComponentNames_property.selection
        let s60 = preferences_mergerColorBackComponentNames_property.selection
        let s61 = unwSelf.frontComponentNamesBezierPaths_property.selection
        let s62 = preferences_mergerBoardViewDisplayFrontComponentNames_property.selection
        let s63 = preferences_mergerColorFrontComponentNames_property.selection
        let s64 = unwSelf.frontComponentValuesBezierPaths_property.selection
        let s65 = preferences_mergerBoardViewDisplayFrontComponentValues_property.selection
        let s66 = preferences_mergerColorFrontComponentValues_property.selection
        let s67 = unwSelf.backComponentValuesBezierPaths_property.selection
        let s68 = preferences_mergerBoardViewDisplayBackComponentValues_property.selection
        let s69 = preferences_mergerColorBackComponentValues_property.selection
        let s70 = unwSelf.frontPackagesBezierPaths_property.selection
        let s71 = preferences_mergerBoardViewDisplayFrontPackages_property.selection
        let s72 = preferences_mergerColorFrontPackages_property.selection
        let s73 = unwSelf.backPackagesBezierPaths_property.selection
        let s74 = preferences_mergerBoardViewDisplayBackPackages_property.selection
        let s75 = preferences_mergerColorBackPackages_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18),
              .single (let v19),
              .single (let v20),
              .single (let v21),
              .single (let v22),
              .single (let v23),
              .single (let v24),
              .single (let v25),
              .single (let v26),
              .single (let v27),
              .single (let v28),
              .single (let v29),
              .single (let v30),
              .single (let v31),
              .single (let v32),
              .single (let v33),
              .single (let v34),
              .single (let v35),
              .single (let v36),
              .single (let v37),
              .single (let v38),
              .single (let v39),
              .single (let v40),
              .single (let v41),
              .single (let v42),
              .single (let v43),
              .single (let v44),
              .single (let v45),
              .single (let v46),
              .single (let v47),
              .single (let v48),
              .single (let v49),
              .single (let v50),
              .single (let v51),
              .single (let v52),
              .single (let v53),
              .single (let v54),
              .single (let v55),
              .single (let v56),
              .single (let v57),
              .single (let v58),
              .single (let v59),
              .single (let v60),
              .single (let v61),
              .single (let v62),
              .single (let v63),
              .single (let v64),
              .single (let v65),
              .single (let v66),
              .single (let v67),
              .single (let v68),
              .single (let v69),
              .single (let v70),
              .single (let v71),
              .single (let v72),
              .single (let v73),
              .single (let v74),
              .single (let v75)) :
          return .single (transient_BoardModel_imageForInstances (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_mergerColorBackground_property.startsToBeObserved (by: self.imageForInstances_property)
    self.modelWidth_property.startsToBeObserved (by: self.imageForInstances_property)
    self.modelHeight_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontTracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontTracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontTracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.inner1TracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayInner1Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorInner1Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.inner2TracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayInner2Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorInner2Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.inner3TracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayInner3Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorInner3Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.inner4TracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayInner4Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorInner4Tracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backTracksBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackTracks_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackTracks_property.startsToBeObserved (by: self.imageForInstances_property)
    self.internalBoardsLimitsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayModelBoardsLimits_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorInternalBoardsLimits_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontPadsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontPads_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontPads_property.startsToBeObserved (by: self.imageForInstances_property)
    self.traversingPadsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayTraversingPads_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorTraversingPads_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backPadsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackPads_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackPads_property.startsToBeObserved (by: self.imageForInstances_property)
    self.viasBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayVias_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorVias_property.startsToBeObserved (by: self.imageForInstances_property)
    self.holesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayHoles_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorHoles_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontLegendLines_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontLegendLines_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackLegendLines_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackLegendLines_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontLegendTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontLegendTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontLayoutTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontLayoutTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackLegendTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackLegendTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackLayoutTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackLayoutTexts_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackComponentNames_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackComponentNames_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontComponentNames_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontComponentNames_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontComponentValues_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontComponentValues_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackComponentValues_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackComponentValues_property.startsToBeObserved (by: self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayFrontPackages_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorFrontPackages_property.startsToBeObserved (by: self.imageForInstances_property)
    self.backPackagesBezierPaths_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerBoardViewDisplayBackPackages_property.startsToBeObserved (by: self.imageForInstances_property)
    preferences_mergerColorBackPackages_property.startsToBeObserved (by: self.imageForInstances_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.myInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myModel_property.setProp (me) } },
      resetter: { inObject in inObject.myModel_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

