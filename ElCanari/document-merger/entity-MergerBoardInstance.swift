//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_x : AnyObject {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_y : AnyObject {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_instanceRotation : AnyObject {
  var instanceRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_instanceRect : AnyObject {
  var instanceRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_modelName : AnyObject {
  var modelName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_boardLimitWidth : AnyObject {
  var boardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol MergerBoardInstance_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class MergerBoardInstance : EBGraphicManagedObject,
         MergerBoardInstance_x,
         MergerBoardInstance_y,
         MergerBoardInstance_instanceRotation,
         MergerBoardInstance_instanceRect,
         MergerBoardInstance_modelName,
         MergerBoardInstance_boardLimitWidth,
         MergerBoardInstance_selectionDisplay,
         MergerBoardInstance_objectDisplay {

  //····················································································································
  //   Atomic property: x
  //····················································································································

  final let x_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x_toDefaultValue () {
    self.x = 0
  }

  //····················································································································

  final var x : Int {
    get { return self.x_property.propval }
    set { self.x_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y
  //····················································································································

  final let y_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y_toDefaultValue () {
    self.y = 0
  }

  //····················································································································

  final var y : Int {
    get { return self.y_property.propval }
    set { self.y_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: instanceRotation
  //····················································································································

  final let instanceRotation_property : EBStoredProperty_QuadrantRotation

  //····················································································································

  final func reset_instanceRotation_toDefaultValue () {
    self.instanceRotation = QuadrantRotation.rotation0
  }

  //····················································································································

  final var instanceRotation : QuadrantRotation {
    get { return self.instanceRotation_property.propval }
    set { self.instanceRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: myModel
  //····················································································································

  final let myModel_property = StoredObject_BoardModel (usedForSignature: false, strongRef: false, key: "myModel")

  //····················································································································

  final var myModel : BoardModel? {
    get {
      return self.myModel_property.propval
    }
    set {
      if self.myModel_property.propval !== newValue {
        if self.myModel_property.propval != nil {
          self.myModel_property.setProp (nil)
        }
        if newValue != nil {
          self.myModel_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let myModel_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: instanceRect
  //····················································································································

  final let instanceRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  final var instanceRect : CanariRect? {
    switch self.instanceRect_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: modelName
  //····················································································································

  final let modelName_property = EBTransientProperty_String ()

  //····················································································································

  final var modelName : String? {
    switch self.modelName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitWidth
  //····················································································································

  final let boardLimitWidth_property = EBTransientProperty_Int ()

  //····················································································································

  final var boardLimitWidth : Int? {
    switch self.boardLimitWidth_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: myRoot
  //····················································································································

  final let myRoot_property = StoredObject_MergerRoot (usedForSignature: false, strongRef: false, key: "myRoot")

  //····················································································································

  final var myRoot : MergerRoot? {
    get {
      return self.myRoot_property.propval
    }
    set {
      if self.myRoot_property.propval !== newValue {
        if self.myRoot_property.propval != nil {
          self.myRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.myRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let myRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.x_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "x")
    self.y_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "y")
    self.instanceRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: inUndoManager, key: "instanceRotation")
    super.init (inUndoManager)
    self.myModel_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.myModel_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.myModel_property.addEBObserver (self.myModel_none)
    self.myRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.myRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.myRoot_property.addEBObserver (self.myRoot_none)
//    gInitSemaphore.wait ()
  //--- To one property: myModel (has opposite to many relationship: myInstances)
    self.myModel_property.undoManager = inUndoManager
    self.myModel_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.myInstances_property.remove (me) } }
    )
  //--- Atomic property: instanceRect
    self.instanceRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.myModel_property.modelWidth_property.selection
        let s3 = unwSelf.myModel_property.modelHeight_property.selection
        let s4 = unwSelf.instanceRotation_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_MergerBoardInstance_instanceRect (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.instanceRect_property)
    self.y_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.modelWidth_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.modelHeight_property.addEBObserver (self.instanceRect_property)
    self.instanceRotation_property.addEBObserver (self.instanceRect_property)
  //--- Atomic property: modelName
    self.modelName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.myModel_property.name_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerBoardInstance_modelName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.myModel_property.name_property.addEBObserver (self.modelName_property)
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.myModel_property.modelLimitWidth_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerBoardInstance_boardLimitWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.myModel_property.modelLimitWidth_property.addEBObserver (self.boardLimitWidth_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.instanceRect_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerBoardInstance_selectionDisplay (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.instanceRect_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.myModel_property.modelWidth_property.selection
        let s3 = unwSelf.myModel_property.modelHeight_property.selection
        let s4 = unwSelf.instanceRotation_property.selection
        let s5 = unwSelf.myModel_property.imageForInstances_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_MergerBoardInstance_objectDisplay (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.objectDisplay_property)
    self.y_property.addEBObserver (self.objectDisplay_property)
    self.myModel_property.modelWidth_property.addEBObserver (self.objectDisplay_property)
    self.myModel_property.modelHeight_property.addEBObserver (self.objectDisplay_property)
    self.instanceRotation_property.addEBObserver (self.objectDisplay_property)
    self.myModel_property.imageForInstances_property.addEBObserver (self.objectDisplay_property)
  //--- To one property: myRoot (has opposite to many relationship: boardInstances)
    self.myRoot_property.undoManager = inUndoManager
    self.myRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.boardInstances_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.boardInstances_property.remove (me) } }
    )
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: x
      self.x_property.storeIn (dictionary: &ioDictionary, forKey: "x")
    //--- Atomic property: y
      self.y_property.storeIn (dictionary: &ioDictionary, forKey: "y")
    //--- Atomic property: instanceRotation
      self.instanceRotation_property.storeIn (dictionary: &ioDictionary, forKey: "instanceRotation")
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: myModel
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "myModel",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? BoardModel {
        self.myModel_property.setProp (entity)
      }
    }
  //--- To one property: myRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "myRoot",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? MergerRoot {
        self.myRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: x
    self.x_property.readFrom (dictionary: inDictionary, forKey: "x")
  //--- Atomic property: y
    self.y_property.readFrom (dictionary: inDictionary, forKey: "y")
  //--- Atomic property: instanceRotation
    self.instanceRotation_property.readFrom (dictionary: inDictionary, forKey: "instanceRotation")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "x\n"
    ioString += "y\n"
    ioString += "instanceRotation\n"
  //--- To one relationships
    ioString += "myModel\n"
    ioString += "myRoot\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.x.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.instanceRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.myModel {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.myRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["x"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x = value
    }
    if let range = inDictionary ["y"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y = value
    }
    if let range = inDictionary ["instanceRotation"], let value = QuadrantRotation.unarchiveFromDataRange (inData, range) {
      self.instanceRotation = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["myModel"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! BoardModel
      self.myModel = object
    }
    if let range = inDictionary ["myRoot"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! MergerRoot
      self.myRoot = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

/*  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: myModel
    if let object = self.myModel {
      ioObjectArray.append (object)
    }
  //--- To one property: myRoot
    if let object = self.myRoot {
      ioObjectArray.append (object)
    }
  } */

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_MergerBoardInstance (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_MergerBoardInstance (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_MergerBoardInstance (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_MergerBoardInstance (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_MergerBoardInstance (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_MergerBoardInstance (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_MergerBoardInstance (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_MergerBoardInstance (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_MergerBoardInstance ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_MergerBoardInstance ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_MergerBoardInstance ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_MergerBoardInstance ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_MergerBoardInstance (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_MergerBoardInstance (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_MergerBoardInstance (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_MergerBoardInstance (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_MergerBoardInstance (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_MergerBoardInstance ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_MergerBoardInstance ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

