//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Entity: MergerRoot
//--------------------------------------------------------------------------------------------------

final class MergerRoot : EBManagedObject {

  //································································································
  //   To many property: boardModels
  //································································································

  final let boardModels_property = StoredArrayOf_BoardModel (usedForSignature: false, key: "boardModels")

  //································································································

  final var boardModels : EBReferenceArray <BoardModel> {
    get { return self.boardModels_property.propval }
  }

  //································································································
  //   To many property: boardInstances
  //································································································

  final let boardInstances_property = StoredArrayOf_MergerBoardInstance (usedForSignature: false, key: "boardInstances")

  //································································································

  final var boardInstances : EBReferenceArray <MergerBoardInstance> {
    get { return self.boardInstances_property.propval }
  }

  //································································································
  //   Atomic property: selectedPageIndex
  //································································································

  final let selectedPageIndex_property : EBStoredProperty_Int

  //································································································

  final var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: zoom
  //································································································

  final let zoom_property : EBStoredProperty_Int

  //································································································
  //   Atomic property: showDisplaySettingView
  //································································································

  final let showDisplaySettingView_property : EBStoredProperty_Bool

  //································································································

  final var showDisplaySettingView : Bool {
    get { return self.showDisplaySettingView_property.propval }
    set { self.showDisplaySettingView_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: modelInsertionRotation
  //································································································

  final let modelInsertionRotation_property : EBStoredProperty_QuadrantRotation

  //································································································

  final var modelInsertionRotation : QuadrantRotation {
    get { return self.modelInsertionRotation_property.propval }
  }

  //································································································
  //   Atomic property: automaticBoardSize
  //································································································

  final let automaticBoardSize_property : EBStoredProperty_Bool

  //································································································
  //   Atomic property: boardManualWidth
  //································································································

  final let boardManualWidth_property : EBStoredProperty_Int

  //································································································
  //   Atomic property: boardManualHeight
  //································································································

  final let boardManualHeight_property : EBStoredProperty_Int

  //································································································
  //   Atomic property: boardWidthUnit
  //································································································

  final let boardWidthUnit_property : EBStoredProperty_Int

  //································································································

  final var boardWidthUnit : Int {
    get { return self.boardWidthUnit_property.propval }
  }

  //································································································
  //   Atomic property: boardHeightUnit
  //································································································

  final let boardHeightUnit_property : EBStoredProperty_Int

  //································································································

  final var boardHeightUnit : Int {
    get { return self.boardHeightUnit_property.propval }
  }

  //································································································
  //   Atomic property: overlapingArrangment
  //································································································

  final let overlapingArrangment_property : EBStoredProperty_Bool

  //································································································

  final var overlapingArrangment : Bool {
    get { return self.overlapingArrangment_property.propval }
  }

  //································································································
  //   Atomic property: selectedBoardXUnit
  //································································································

  final let selectedBoardXUnit_property : EBStoredProperty_Int

  //································································································
  //   Atomic property: selectedBoardYUnit
  //································································································

  final let selectedBoardYUnit_property : EBStoredProperty_Int

  //································································································
  //   Atomic property: boardLimitWidth
  //································································································

  final let boardLimitWidth_property : EBStoredProperty_Int

  //································································································

  final var boardLimitWidth : Int {
    get { return self.boardLimitWidth_property.propval }
  }

  //································································································
  //   Atomic property: boardLimitWidthUnit
  //································································································

  final let boardLimitWidthUnit_property : EBStoredProperty_Int

  //································································································

  final var boardLimitWidthUnit : Int {
    get { return self.boardLimitWidthUnit_property.propval }
  }

  //································································································
  //   Atomic property: mPDFBoardBackgroundColor
  //································································································

  final let mPDFBoardBackgroundColor_property : EBStoredProperty_NSColor

  //································································································

  final var mPDFBoardBackgroundColor : NSColor {
    get { return self.mPDFBoardBackgroundColor_property.propval }
  }

  //································································································
  //   Atomic property: mGenerateMergerArchive
  //································································································

  final let mGenerateMergerArchive_property : EBStoredProperty_Bool

  //································································································
  //   Atomic property: mGenerateGerberAndPDF
  //································································································

  final let mGenerateGerberAndPDF_property : EBStoredProperty_Bool

  //································································································
  //   Atomic property: mPDFProductGrid
  //································································································

  final let mPDFProductGrid_property : EBStoredProperty_PDFProductGrid

  //································································································
  //   Atomic property: mGerberProductUnit
  //································································································

  final let mGerberProductUnit_property : EBStoredProperty_GerberUnit

  //································································································

  final var mGerberProductUnit : GerberUnit {
    get { return self.mGerberProductUnit_property.propval }
  }

  //································································································
  //   Atomic property: mArtworkName
  //································································································

  final let mArtworkName_property : EBStoredProperty_String

  //································································································

  final var mArtworkName : String {
    get { return self.mArtworkName_property.propval }
    set { self.mArtworkName_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mArtworkVersion
  //································································································

  final let mArtworkVersion_property : EBStoredProperty_Int

  //································································································

  final var mArtworkVersion : Int {
    get { return self.mArtworkVersion_property.propval }
    set { self.mArtworkVersion_property.setProp (newValue) }
  }

  //································································································
  //   Atomic proxy property: minPPTPTTTWdisplayUnit
  //································································································

  final let minPPTPTTTWdisplayUnit_property = EBComputedProperty_Int ()

  //································································································

  var minPPTPTTTWdisplayUnit : Int? {
    get {
      return self.minPPTPTTTWdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTWdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minPPTPTTTW
  //································································································

  final let minPPTPTTTW_property = EBComputedProperty_Int ()

  //································································································

  var minPPTPTTTW : Int? {
    get {
      return self.minPPTPTTTW_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTW_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForOARdisplayUnit
  //································································································

  final let minValueForOARdisplayUnit_property = EBComputedProperty_Int ()

  //································································································

  var minValueForOARdisplayUnit : Int? {
    get {
      return self.minValueForOARdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForOARinEBUnit
  //································································································

  final let minValueForOARinEBUnit_property = EBComputedProperty_Int ()

  //································································································

  var minValueForOARinEBUnit : Int? {
    get {
      return self.minValueForOARinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForPHDdisplayUnit
  //································································································

  final let minValueForPHDdisplayUnit_property = EBComputedProperty_Int ()

  //································································································

  var minValueForPHDdisplayUnit : Int? {
    get {
      return self.minValueForPHDdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForPHDinEBUnit
  //································································································

  final let minValueForPHDinEBUnit_property = EBComputedProperty_Int ()

  //································································································

  var minValueForPHDinEBUnit : Int? {
    get {
      return self.minValueForPHDinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForBoardLimitWidth
  //································································································

  final let minValueForBoardLimitWidth_property = EBComputedProperty_Int ()

  //································································································

  var minValueForBoardLimitWidth : Int? {
    get {
      return self.minValueForBoardLimitWidth_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidth_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
  //································································································

  final let minValueForBoardLimitWidthDisplayUnit_property = EBComputedProperty_Int ()

  //································································································

  var minValueForBoardLimitWidthDisplayUnit : Int? {
    get {
      return self.minValueForBoardLimitWidthDisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidthDisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   Atomic proxy property: drillDataFileExtension
  //································································································

  final let drillDataFileExtension_property = EBComputedProperty_String ()

  //································································································

  var drillDataFileExtension : String? {
    get {
      return self.drillDataFileExtension_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.drillDataFileExtension_property.setProp (unwrappedNewValue)
      }
    }
  }

  //································································································
  //   ToMany proxy: fileGenerationParameterArray
  //································································································

  var fileGenerationParameterArray_modelDidChangeController : EBObservablePropertyController? = nil
  // var fileGenerationParameterArray_boundObjectDidChangeController : EBObservablePropertyController? = nil
  final let fileGenerationParameterArray_property = ProxyArrayOf_ArtworkFileGenerationParameters ()

  //································································································

  var fileGenerationParameterArray : EBReferenceArray <ArtworkFileGenerationParameters> {
    get {
      switch self.fileGenerationParameterArray_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.fileGenerationParameterArray_property.setProp (newValue)
    }
  }

  //································································································
  //   Transient property: modelNames
  //································································································

  final let modelNames_property = EBTransientProperty <StringTagArray> ()

  //································································································

  final var modelNames : StringTagArray? {
    return self.modelNames_property.optionalValue
  }

  //································································································
  //   Transient property: boardRect
  //································································································

  final let boardRect_property = EBTransientProperty <CanariRect> ()

  //································································································

  final var boardRect : CanariRect? {
    return self.boardRect_property.optionalValue
  }

  //································································································
  //   Transient property: boardWidth
  //································································································

  final let boardWidth_property = EBTransientProperty <Int> ()

  //································································································

  final var boardWidth : Int? {
    return self.boardWidth_property.optionalValue
  }

  //································································································
  //   Transient property: boardHeight
  //································································································

  final let boardHeight_property = EBTransientProperty <Int> ()

  //································································································

  final var boardHeight : Int? {
    return self.boardHeight_property.optionalValue
  }

  //································································································
  //   To one property: mArtwork
  //································································································

  final let mArtwork_property = StoredObject_ArtworkRoot (usedForSignature: false, strongRef: true, key: "mArtwork")

  //································································································

  final var mArtwork : ArtworkRoot? {
    get {
      return self.mArtwork_property.propval
    }
    set {
      self.mArtwork_property.setProp (newValue)
      /* if self.mArtwork_property.propval !== newValue {
        if self.mArtwork_property.propval != nil {
          self.mArtwork_property.setProp (nil)
        }
        if newValue != nil {
          self.mArtwork_property.setProp (newValue)
        }
      } */
    }
  }

  //································································································

  final let mArtwork_none = EBTransientProperty <Bool> ()

  //································································································
  //   Transient property: comments
  //································································································

  final let comments_property = EBTransientProperty <String> ()

  //································································································

  final var comments : String? {
    return self.comments_property.optionalValue
  }

  //································································································
  //   Transient property: layoutLayerWarningMessage
  //································································································

  final let layoutLayerWarningMessage_property = EBTransientProperty <String> ()

  //································································································

  final var layoutLayerWarningMessage : String? {
    return self.layoutLayerWarningMessage_property.optionalValue
  }

  //································································································
  //   Transient property: layerConfigurationString
  //································································································

  final let layerConfigurationString_property = EBTransientProperty <String> ()

  //································································································

  final var layerConfigurationString : String? {
    return self.layerConfigurationString_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtension
  //································································································

  final let emptyDrillFileExtension_property = EBTransientProperty <Bool> ()

  //································································································

  final var emptyDrillFileExtension : Bool? {
    return self.emptyDrillFileExtension_property.optionalValue
  }

  //································································································
  //   Transient property: hasInnerElements
  //································································································

  final let hasInnerElements_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasInnerElements : Bool? {
    return self.hasInnerElements_property.optionalValue
  }

  //································································································
  //   Transient property: hasSixLayers
  //································································································

  final let hasSixLayers_property = EBTransientProperty <Bool> ()

  //································································································

  final var hasSixLayers : Bool? {
    return self.hasSixLayers_property.optionalValue
  }

  //································································································
  //   Transient property: boardOutlineRectDisplay
  //································································································

  final let boardOutlineRectDisplay_property = EBTransientProperty <EBShape> ()

  //································································································

  final var boardOutlineRectDisplay : EBShape? {
    return self.boardOutlineRectDisplay_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedPageIndex")
    self.zoom_property = EBStoredProperty_Int (defaultValue: 100, undoManager: inUndoManager, key: "zoom")
    self.showDisplaySettingView_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "showDisplaySettingView")
    self.modelInsertionRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: inUndoManager, key: "modelInsertionRotation")
    self.automaticBoardSize_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "automaticBoardSize")
    self.boardManualWidth_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "boardManualWidth")
    self.boardManualHeight_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "boardManualHeight")
    self.boardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "boardWidthUnit")
    self.boardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "boardHeightUnit")
    self.overlapingArrangment_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "overlapingArrangment")
    self.selectedBoardXUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "selectedBoardXUnit")
    self.selectedBoardYUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "selectedBoardYUnit")
    self.boardLimitWidth_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "boardLimitWidth")
    self.boardLimitWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "boardLimitWidthUnit")
    self.mPDFBoardBackgroundColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.lightGray, undoManager: inUndoManager, key: "mPDFBoardBackgroundColor")
    self.mGenerateMergerArchive_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mGenerateMergerArchive")
    self.mGenerateGerberAndPDF_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mGenerateGerberAndPDF")
    self.mPDFProductGrid_property = EBStoredProperty_PDFProductGrid (defaultValue: PDFProductGrid.noGrid, undoManager: inUndoManager, key: "mPDFProductGrid")
    self.mGerberProductUnit_property = EBStoredProperty_GerberUnit (defaultValue: GerberUnit.metric, undoManager: inUndoManager, key: "mGerberProductUnit")
    self.mArtworkName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mArtworkName")
    self.mArtworkVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mArtworkVersion")
    super.init (inUndoManager)
    self.mArtwork_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mArtwork_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mArtwork_property.startsBeingObserved (by: self.mArtwork_none)
  //--- To many property: boardModels (no option)
    self.boardModels_property.undoManager = inUndoManager
  //--- To many property: boardInstances (has opposite relationship)
    self.boardInstances_property.undoManager = inUndoManager
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTWdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTWdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minPPTPTTTWdisplayUnit_property.startsBeingObserved (by: self.minPPTPTTTWdisplayUnit_property)
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTW_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTW_property.setProp (inValue)
    }
    self.mArtwork_property.minPPTPTTTW_property.startsBeingObserved (by: self.minPPTPTTTW_property)
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForOARdisplayUnit_property.startsBeingObserved (by: self.minValueForOARdisplayUnit_property)
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARinEBUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForOARinEBUnit_property.startsBeingObserved (by: self.minValueForOARinEBUnit_property)
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForPHDdisplayUnit_property.startsBeingObserved (by: self.minValueForPHDdisplayUnit_property)
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDinEBUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForPHDinEBUnit_property.startsBeingObserved (by: self.minValueForPHDinEBUnit_property)
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidth_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForBoardLimitWidth_property.startsBeingObserved (by: self.minValueForBoardLimitWidth_property)
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidthDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidthDisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForBoardLimitWidthDisplayUnit_property.startsBeingObserved (by: self.minValueForBoardLimitWidthDisplayUnit_property)
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.drillDataFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.drillDataFileExtension_property.setProp (inValue)
    }
    self.mArtwork_property.drillDataFileExtension_property.startsBeingObserved (by: self.drillDataFileExtension_property)
  //--- ToMany proxy: fileGenerationParameterArray
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mArtwork_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mArtwork {
            me.fileGenerationParameterArray_property.setModel (model.fileGenerationParameterArray_property)
          }
        }
      )
      self.mArtwork_property.toMany_fileGenerationParameterArray_StartsBeingObserved (by: controller)
      self.fileGenerationParameterArray_modelDidChangeController = controller
    }
  //--- Atomic property: modelNames
    self.modelNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardModels_property.selection
        let s1 = unwSelf.boardModels_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_MergerRoot_modelNames (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardModels_property.toMany_name_StartsBeingObserved (by: self.modelNames_property)
    self.boardModels_property.startsBeingObserved (by: self.modelNames_property)
  //--- Atomic property: boardRect
    self.boardRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.automaticBoardSize_property.selection
        let s1 = unwSelf.boardLimitWidth_property.selection
        let s2 = unwSelf.boardManualWidth_property.selection
        let s3 = unwSelf.boardManualHeight_property.selection
        let s4 = unwSelf.boardInstances_property.selection
        let s5 = unwSelf.boardInstances_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_MergerRoot_boardRect (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.automaticBoardSize_property.startsBeingObserved (by: self.boardRect_property)
    self.boardLimitWidth_property.startsBeingObserved (by: self.boardRect_property)
    self.boardManualWidth_property.startsBeingObserved (by: self.boardRect_property)
    self.boardManualHeight_property.startsBeingObserved (by: self.boardRect_property)
    self.boardInstances_property.toMany_instanceRect_StartsBeingObserved (by: self.boardRect_property)
    self.boardInstances_property.toMany_boardLimitWidth_StartsBeingObserved (by: self.boardRect_property)
  //--- Atomic property: boardWidth
    self.boardWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardRect_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_boardWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.startsBeingObserved (by: self.boardWidth_property)
  //--- Atomic property: boardHeight
    self.boardHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardRect_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_boardHeight (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.startsBeingObserved (by: self.boardHeight_property)
  //--- To one property: mArtwork
    self.mArtwork_property.undoManager = inUndoManager
  //--- Atomic property: comments
    self.comments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.comments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_comments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.comments_property.startsBeingObserved (by: self.comments_property)
  //--- Atomic property: layoutLayerWarningMessage
    self.layoutLayerWarningMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.layerConfiguration_property.selection
        let s1 = unwSelf.boardModels_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_MergerRoot_layoutLayerWarningMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.layerConfiguration_property.startsBeingObserved (by: self.layoutLayerWarningMessage_property)
    self.boardModels_property.toMany_layerConfiguration_StartsBeingObserved (by: self.layoutLayerWarningMessage_property)
  //--- Atomic property: layerConfigurationString
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.layerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_layerConfigurationString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.layerConfiguration_property.startsBeingObserved (by: self.layerConfigurationString_property)
  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.drillDataFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtension_property)
  //--- Atomic property: hasInnerElements
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.hasInnerElements_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_hasInnerElements (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.hasInnerElements_property.startsBeingObserved (by: self.hasInnerElements_property)
  //--- Atomic property: hasSixLayers
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.hasSixLayers_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_MergerRoot_hasSixLayers (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.hasSixLayers_property.startsBeingObserved (by: self.hasSixLayers_property)
  //--- Atomic property: boardOutlineRectDisplay
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardRect_property.selection
        let s1 = unwSelf.boardLimitWidth_property.selection
        let s2 = preferences_mergerBoardViewDisplayBoardLimits_property.selection
        let s3 = preferences_mergerColorBoardLimits_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_MergerRoot_boardOutlineRectDisplay (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.startsBeingObserved (by: self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.startsBeingObserved (by: self.boardOutlineRectDisplay_property)
    preferences_mergerBoardViewDisplayBoardLimits_property.startsBeingObserved (by: self.boardOutlineRectDisplay_property)
    preferences_mergerColorBoardLimits_property.startsBeingObserved (by: self.boardOutlineRectDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

