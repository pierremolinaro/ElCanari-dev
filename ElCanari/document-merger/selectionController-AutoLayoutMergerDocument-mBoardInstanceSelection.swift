//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutMergerDocument mBoardInstanceSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutMergerDocument_mBoardInstanceSelection : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: boardLimitWidth
  //····················································································································

  var boardLimitWidth_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: instanceRect
  //····················································································································

  var instanceRect_property = EBTransientProperty_CanariRect ()

  //····················································································································
  //   Selection observable property: instanceRotation
  //····················································································································

  var instanceRotation_property = EBComputedProperty_QuadrantRotation ()

  //····················································································································
  //   Selection observable property: modelName
  //····················································································································

  var modelName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: myModel
  //····················································································································

  //····················································································································
  //   Selection observable property: myRoot
  //····················································································································

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: x
  //····················································································································

  var x_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: y
  //····················································································································

  var y_property = EBComputedProperty_Int ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_MergerBoardInstance? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_MergerBoardInstance) {
    self.mModel = model
    self.bind_property_boardLimitWidth (model: model)
    self.bind_property_instanceRect (model: model)
    self.bind_property_instanceRotation (model: model)
    self.bind_property_modelName (model: model)
    self.bind_property_objectDisplay (model: model)
    self.bind_property_selectionDisplay (model: model)
    self.bind_property_x (model: model)
    self.bind_property_y (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
  //--- boardLimitWidth
    self.boardLimitWidth_property.mReadModelFunction = nil 
    self.mModel?.toMany_boardLimitWidth_StopsBeingObserved (by: self.boardLimitWidth_property)
  //--- instanceRect
    self.instanceRect_property.mReadModelFunction = nil 
    self.mModel?.toMany_instanceRect_StopsBeingObserved (by: self.instanceRect_property)
  //--- instanceRotation
    self.instanceRotation_property.mReadModelFunction = nil 
    self.instanceRotation_property.mWriteModelFunction = nil 
    self.mModel?.toMany_instanceRotation_StopsBeingObserved (by: self.instanceRotation_property)
  //--- modelName
    self.modelName_property.mReadModelFunction = nil 
    self.mModel?.toMany_modelName_StopsBeingObserved (by: self.modelName_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.mModel?.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.mModel?.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- x
    self.x_property.mReadModelFunction = nil 
    self.x_property.mWriteModelFunction = nil 
    self.mModel?.toMany_x_StopsBeingObserved (by: self.x_property)
  //--- y
    self.y_property.mReadModelFunction = nil 
    self.y_property.mWriteModelFunction = nil 
    self.mModel?.toMany_y_StopsBeingObserved (by: self.y_property)
  //---
    self.mModel = nil
  } */

  //···················································································································*

  private final func bind_property_boardLimitWidth (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_boardLimitWidth_StartsToBeObserved (by: self.boardLimitWidth_property)
    self.boardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceRect (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_instanceRect_StartsToBeObserved (by: self.instanceRect_property)
    self.instanceRect_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceRect_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceRotation (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_instanceRotation_StartsToBeObserved (by: self.instanceRotation_property)
    self.instanceRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <QuadrantRotation> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceRotation_property.mWriteModelFunction = { [weak self] (inValue : QuadrantRotation) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.instanceRotation_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelName (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_modelName_StartsToBeObserved (by: self.modelName_property)
    self.modelName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_objectDisplay_StartsToBeObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_selectionDisplay_StartsToBeObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_x (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_x_StartsToBeObserved (by: self.x_property)
    self.x_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_y (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.toMany_y_StartsToBeObserved (by: self.y_property)
    self.y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y_property.setProp (inValue)
          }
        }
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

