//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutMergerDocument mBoardModelSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutMergerDocument_mBoardModelSelection {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: artworkName
  //····················································································································

  var artworkName_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: backComponentNameSegments
  //····················································································································

  var backComponentNameSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backComponentNames
  //····················································································································

  //····················································································································
  //   Selection observable property: backComponentNamesBezierPaths
  //····················································································································

  var backComponentNamesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backComponentValueSegments
  //····················································································································

  var backComponentValueSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backComponentValues
  //····················································································································

  //····················································································································
  //   Selection observable property: backComponentValuesBezierPaths
  //····················································································································

  var backComponentValuesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backLayoutTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: backLayoutTextsBezierPaths
  //····················································································································

  var backLayoutTextsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backLayoutTextsSegments
  //····················································································································

  var backLayoutTextsSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backLegendBoardImageRectangles
  //····················································································································

  var backLegendBoardImageRectangles_property = EBTransientProperty <MergerRectangleArray> ()

  //····················································································································
  //   Selection observable property: backLegendLines
  //····················································································································

  //····················································································································
  //   Selection observable property: backLegendLinesBezierPaths
  //····················································································································

  var backLegendLinesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backLegendLinesSegments
  //····················································································································

  var backLegendLinesSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backLegendQRCodeRectangles
  //····················································································································

  var backLegendQRCodeRectangles_property = EBTransientProperty <MergerRectangleArray> ()

  //····················································································································
  //   Selection observable property: backLegendTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: backLegendTextsBezierPaths
  //····················································································································

  var backLegendTextsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backLegendTextsSegments
  //····················································································································

  var backLegendTextsSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backPackages
  //····················································································································

  //····················································································································
  //   Selection observable property: backPackagesBezierPaths
  //····················································································································

  var backPackagesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backPackagesSegments
  //····················································································································

  var backPackagesSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backPadArray
  //····················································································································

  var backPadArray_property = EBTransientProperty <MergerPadArray> ()

  //····················································································································
  //   Selection observable property: backPads
  //····················································································································

  //····················································································································
  //   Selection observable property: backPadsBezierPaths
  //····················································································································

  var backPadsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backTrackSegments
  //····················································································································

  var backTrackSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backTrackSegmentsNoSilkScreen
  //····················································································································

  var backTrackSegmentsNoSilkScreen_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: backTracks
  //····················································································································

  //····················································································································
  //   Selection observable property: backTracksBezierPaths
  //····················································································································

  var backTracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: backTracksNoSilkScreen
  //····················································································································

  //····················································································································
  //   Selection observable property: backTracksNoSilkScreenBezierPaths
  //····················································································································

  var backTracksNoSilkScreenBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: boardLimitsBezierPaths
  //····················································································································

  var boardLimitsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: drillSegments
  //····················································································································

  var drillSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: drills
  //····················································································································

  //····················································································································
  //   Selection observable property: errorArchiveLabelColor
  //····················································································································

  var errorArchiveLabelColor_property = EBTransientProperty <NSColor> ()

  //····················································································································
  //   Selection observable property: errorArchiveLabelSize
  //····················································································································

  var errorArchiveLabelSize_property = EBTransientProperty <EBControlSize> ()

  //····················································································································
  //   Selection observable property: errorArchiveVersionMessage
  //····················································································································

  var errorArchiveVersionMessage_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: errorArchiveVersionMessageIsHidden
  //····················································································································

  var errorArchiveVersionMessageIsHidden_property = EBTransientProperty <Bool> ()

  //····················································································································
  //   Selection observable property: frontComponentNameSegments
  //····················································································································

  var frontComponentNameSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontComponentNames
  //····················································································································

  //····················································································································
  //   Selection observable property: frontComponentNamesBezierPaths
  //····················································································································

  var frontComponentNamesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontComponentValueSegments
  //····················································································································

  var frontComponentValueSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontComponentValues
  //····················································································································

  //····················································································································
  //   Selection observable property: frontComponentValuesBezierPaths
  //····················································································································

  var frontComponentValuesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontLayoutTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLayoutTextsBezierPaths
  //····················································································································

  var frontLayoutTextsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontLayoutTextsSegments
  //····················································································································

  var frontLayoutTextsSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontLegendBoardImageRectangles
  //····················································································································

  var frontLegendBoardImageRectangles_property = EBTransientProperty <MergerRectangleArray> ()

  //····················································································································
  //   Selection observable property: frontLegendLines
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLegendLinesBezierPaths
  //····················································································································

  var frontLegendLinesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontLegendLinesSegments
  //····················································································································

  var frontLegendLinesSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontLegendQRCodeRectangles
  //····················································································································

  var frontLegendQRCodeRectangles_property = EBTransientProperty <MergerRectangleArray> ()

  //····················································································································
  //   Selection observable property: frontLegendTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLegendTextsBezierPaths
  //····················································································································

  var frontLegendTextsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontLegendTextsSegments
  //····················································································································

  var frontLegendTextsSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontPackages
  //····················································································································

  //····················································································································
  //   Selection observable property: frontPackagesBezierPaths
  //····················································································································

  var frontPackagesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontPackagesSegments
  //····················································································································

  var frontPackagesSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontPadArray
  //····················································································································

  var frontPadArray_property = EBTransientProperty <MergerPadArray> ()

  //····················································································································
  //   Selection observable property: frontPads
  //····················································································································

  //····················································································································
  //   Selection observable property: frontPadsBezierPaths
  //····················································································································

  var frontPadsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontTrackSegments
  //····················································································································

  var frontTrackSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontTrackSegmentsNoSilkScreen
  //····················································································································

  var frontTrackSegmentsNoSilkScreen_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: frontTracks
  //····················································································································

  //····················································································································
  //   Selection observable property: frontTracksBezierPaths
  //····················································································································

  var frontTracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: frontTracksNoSilkScreen
  //····················································································································

  //····················································································································
  //   Selection observable property: frontTracksNoSilkScreenBezierPaths
  //····················································································································

  var frontTracksNoSilkScreenBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: holesBezierPaths
  //····················································································································

  var holesBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: ignoreModelVersionError
  //····················································································································

  var ignoreModelVersionError_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: imageForInstances
  //····················································································································

  var imageForInstances_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: imageForModel
  //····················································································································

  var imageForModel_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: inner1Tracks
  //····················································································································

  //····················································································································
  //   Selection observable property: inner1TracksBezierPaths
  //····················································································································

  var inner1TracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: inner1TracksSegments
  //····················································································································

  var inner1TracksSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: inner2Tracks
  //····················································································································

  //····················································································································
  //   Selection observable property: inner2TracksBezierPaths
  //····················································································································

  var inner2TracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: inner2TracksSegments
  //····················································································································

  var inner2TracksSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: inner3Tracks
  //····················································································································

  //····················································································································
  //   Selection observable property: inner3TracksBezierPaths
  //····················································································································

  var inner3TracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: inner3TracksSegments
  //····················································································································

  var inner3TracksSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: inner4Tracks
  //····················································································································

  //····················································································································
  //   Selection observable property: inner4TracksBezierPaths
  //····················································································································

  var inner4TracksBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: inner4TracksSegments
  //····················································································································

  var inner4TracksSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: internalBoardsLimits
  //····················································································································

  //····················································································································
  //   Selection observable property: internalBoardsLimitsBezierPaths
  //····················································································································

  var internalBoardsLimitsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: internalBoardsLimitsSegments
  //····················································································································

  var internalBoardsLimitsSegments_property = EBTransientProperty <MergerSegmentArray> ()

  //····················································································································
  //   Selection observable property: layerConfiguration
  //····················································································································

  var layerConfiguration_property = EBComputedProperty_LayerConfiguration ()

  //····················································································································
  //   Selection observable property: layerConfigurationString
  //····················································································································

  var layerConfigurationString_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: legendBackImages
  //····················································································································

  //····················································································································
  //   Selection observable property: legendBackQRCodes
  //····················································································································

  //····················································································································
  //   Selection observable property: legendFrontImages
  //····················································································································

  //····················································································································
  //   Selection observable property: legendFrontQRCodes
  //····················································································································

  //····················································································································
  //   Selection observable property: modelHeight
  //····················································································································

  var modelHeight_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelHeightUnit
  //····················································································································

  var modelHeightUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelLimitWidth
  //····················································································································

  var modelLimitWidth_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelLimitWidthUnit
  //····················································································································

  var modelLimitWidthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelVersion
  //····················································································································

  var modelVersion_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelWidth
  //····················································································································

  var modelWidth_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: modelWidthUnit
  //····················································································································

  var modelWidthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: myInstances
  //····················································································································

  //····················································································································
  //   Selection observable property: name
  //····················································································································

  var name_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: traversingPadArray
  //····················································································································

  var traversingPadArray_property = EBTransientProperty <MergerPadArray> ()

  //····················································································································
  //   Selection observable property: traversingPads
  //····················································································································

  //····················································································································
  //   Selection observable property: traversingPadsBezierPaths
  //····················································································································

  var traversingPadsBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: viaShapes
  //····················································································································

  var viaShapes_property = EBTransientProperty <MergerViaShapeArray> ()

  //····················································································································
  //   Selection observable property: vias
  //····················································································································

  //····················································································································
  //   Selection observable property: viasBezierPaths
  //····················································································································

  var viasBezierPaths_property = EBTransientProperty <BezierPathArray> ()

  //····················································································································
  //   Selection observable property: zoom
  //····················································································································

  var zoom_property = EBComputedProperty_Int ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_BoardModel? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardModel) {
    self.mModel = model
    self.bind_property_artworkName (model: model)
    self.bind_property_backComponentNameSegments (model: model)
    self.bind_property_backComponentNamesBezierPaths (model: model)
    self.bind_property_backComponentValueSegments (model: model)
    self.bind_property_backComponentValuesBezierPaths (model: model)
    self.bind_property_backLayoutTextsBezierPaths (model: model)
    self.bind_property_backLayoutTextsSegments (model: model)
    self.bind_property_backLegendBoardImageRectangles (model: model)
    self.bind_property_backLegendLinesBezierPaths (model: model)
    self.bind_property_backLegendLinesSegments (model: model)
    self.bind_property_backLegendQRCodeRectangles (model: model)
    self.bind_property_backLegendTextsBezierPaths (model: model)
    self.bind_property_backLegendTextsSegments (model: model)
    self.bind_property_backPackagesBezierPaths (model: model)
    self.bind_property_backPackagesSegments (model: model)
    self.bind_property_backPadArray (model: model)
    self.bind_property_backPadsBezierPaths (model: model)
    self.bind_property_backTrackSegments (model: model)
    self.bind_property_backTrackSegmentsNoSilkScreen (model: model)
    self.bind_property_backTracksBezierPaths (model: model)
    self.bind_property_backTracksNoSilkScreenBezierPaths (model: model)
    self.bind_property_boardLimitsBezierPaths (model: model)
    self.bind_property_drillSegments (model: model)
    self.bind_property_errorArchiveLabelColor (model: model)
    self.bind_property_errorArchiveLabelSize (model: model)
    self.bind_property_errorArchiveVersionMessage (model: model)
    self.bind_property_errorArchiveVersionMessageIsHidden (model: model)
    self.bind_property_frontComponentNameSegments (model: model)
    self.bind_property_frontComponentNamesBezierPaths (model: model)
    self.bind_property_frontComponentValueSegments (model: model)
    self.bind_property_frontComponentValuesBezierPaths (model: model)
    self.bind_property_frontLayoutTextsBezierPaths (model: model)
    self.bind_property_frontLayoutTextsSegments (model: model)
    self.bind_property_frontLegendBoardImageRectangles (model: model)
    self.bind_property_frontLegendLinesBezierPaths (model: model)
    self.bind_property_frontLegendLinesSegments (model: model)
    self.bind_property_frontLegendQRCodeRectangles (model: model)
    self.bind_property_frontLegendTextsBezierPaths (model: model)
    self.bind_property_frontLegendTextsSegments (model: model)
    self.bind_property_frontPackagesBezierPaths (model: model)
    self.bind_property_frontPackagesSegments (model: model)
    self.bind_property_frontPadArray (model: model)
    self.bind_property_frontPadsBezierPaths (model: model)
    self.bind_property_frontTrackSegments (model: model)
    self.bind_property_frontTrackSegmentsNoSilkScreen (model: model)
    self.bind_property_frontTracksBezierPaths (model: model)
    self.bind_property_frontTracksNoSilkScreenBezierPaths (model: model)
    self.bind_property_holesBezierPaths (model: model)
    self.bind_property_ignoreModelVersionError (model: model)
    self.bind_property_imageForInstances (model: model)
    self.bind_property_imageForModel (model: model)
    self.bind_property_inner1TracksBezierPaths (model: model)
    self.bind_property_inner1TracksSegments (model: model)
    self.bind_property_inner2TracksBezierPaths (model: model)
    self.bind_property_inner2TracksSegments (model: model)
    self.bind_property_inner3TracksBezierPaths (model: model)
    self.bind_property_inner3TracksSegments (model: model)
    self.bind_property_inner4TracksBezierPaths (model: model)
    self.bind_property_inner4TracksSegments (model: model)
    self.bind_property_instanceCount (model: model)
    self.bind_property_internalBoardsLimitsBezierPaths (model: model)
    self.bind_property_internalBoardsLimitsSegments (model: model)
    self.bind_property_layerConfiguration (model: model)
    self.bind_property_layerConfigurationString (model: model)
    self.bind_property_modelHeight (model: model)
    self.bind_property_modelHeightUnit (model: model)
    self.bind_property_modelLimitWidth (model: model)
    self.bind_property_modelLimitWidthUnit (model: model)
    self.bind_property_modelVersion (model: model)
    self.bind_property_modelWidth (model: model)
    self.bind_property_modelWidthUnit (model: model)
    self.bind_property_name (model: model)
    self.bind_property_traversingPadArray (model: model)
    self.bind_property_traversingPadsBezierPaths (model: model)
    self.bind_property_viaShapes (model: model)
    self.bind_property_viasBezierPaths (model: model)
    self.bind_property_zoom (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
  //--- artworkName
    self.artworkName_property.mReadModelFunction = nil 
    self.artworkName_property.mWriteModelFunction = nil 
    self.mModel?.toMany_artworkName_StopsBeingObserved (by: self.artworkName_property)
  //--- backComponentNameSegments
    self.backComponentNameSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backComponentNameSegments_StopsBeingObserved (by: self.backComponentNameSegments_property)
  //--- backComponentNamesBezierPaths
    self.backComponentNamesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backComponentNamesBezierPaths_StopsBeingObserved (by: self.backComponentNamesBezierPaths_property)
  //--- backComponentValueSegments
    self.backComponentValueSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backComponentValueSegments_StopsBeingObserved (by: self.backComponentValueSegments_property)
  //--- backComponentValuesBezierPaths
    self.backComponentValuesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backComponentValuesBezierPaths_StopsBeingObserved (by: self.backComponentValuesBezierPaths_property)
  //--- backLayoutTextsBezierPaths
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLayoutTextsBezierPaths_StopsBeingObserved (by: self.backLayoutTextsBezierPaths_property)
  //--- backLayoutTextsSegments
    self.backLayoutTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLayoutTextsSegments_StopsBeingObserved (by: self.backLayoutTextsSegments_property)
  //--- backLegendBoardImageRectangles
    self.backLegendBoardImageRectangles_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendBoardImageRectangles_StopsBeingObserved (by: self.backLegendBoardImageRectangles_property)
  //--- backLegendLinesBezierPaths
    self.backLegendLinesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendLinesBezierPaths_StopsBeingObserved (by: self.backLegendLinesBezierPaths_property)
  //--- backLegendLinesSegments
    self.backLegendLinesSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendLinesSegments_StopsBeingObserved (by: self.backLegendLinesSegments_property)
  //--- backLegendQRCodeRectangles
    self.backLegendQRCodeRectangles_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendQRCodeRectangles_StopsBeingObserved (by: self.backLegendQRCodeRectangles_property)
  //--- backLegendTextsBezierPaths
    self.backLegendTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendTextsBezierPaths_StopsBeingObserved (by: self.backLegendTextsBezierPaths_property)
  //--- backLegendTextsSegments
    self.backLegendTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backLegendTextsSegments_StopsBeingObserved (by: self.backLegendTextsSegments_property)
  //--- backPackagesBezierPaths
    self.backPackagesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backPackagesBezierPaths_StopsBeingObserved (by: self.backPackagesBezierPaths_property)
  //--- backPackagesSegments
    self.backPackagesSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backPackagesSegments_StopsBeingObserved (by: self.backPackagesSegments_property)
  //--- backPadArray
    self.backPadArray_property.mReadModelFunction = nil 
    self.mModel?.toMany_backPadArray_StopsBeingObserved (by: self.backPadArray_property)
  //--- backPadsBezierPaths
    self.backPadsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backPadsBezierPaths_StopsBeingObserved (by: self.backPadsBezierPaths_property)
  //--- backTrackSegments
    self.backTrackSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_backTrackSegments_StopsBeingObserved (by: self.backTrackSegments_property)
  //--- backTrackSegmentsNoSilkScreen
    self.backTrackSegmentsNoSilkScreen_property.mReadModelFunction = nil 
    self.mModel?.toMany_backTrackSegmentsNoSilkScreen_StopsBeingObserved (by: self.backTrackSegmentsNoSilkScreen_property)
  //--- backTracksBezierPaths
    self.backTracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backTracksBezierPaths_StopsBeingObserved (by: self.backTracksBezierPaths_property)
  //--- backTracksNoSilkScreenBezierPaths
    self.backTracksNoSilkScreenBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_backTracksNoSilkScreenBezierPaths_StopsBeingObserved (by: self.backTracksNoSilkScreenBezierPaths_property)
  //--- boardLimitsBezierPaths
    self.boardLimitsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_boardLimitsBezierPaths_StopsBeingObserved (by: self.boardLimitsBezierPaths_property)
  //--- drillSegments
    self.drillSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_drillSegments_StopsBeingObserved (by: self.drillSegments_property)
  //--- errorArchiveLabelColor
    self.errorArchiveLabelColor_property.mReadModelFunction = nil 
    self.mModel?.toMany_errorArchiveLabelColor_StopsBeingObserved (by: self.errorArchiveLabelColor_property)
  //--- errorArchiveLabelSize
    self.errorArchiveLabelSize_property.mReadModelFunction = nil 
    self.mModel?.toMany_errorArchiveLabelSize_StopsBeingObserved (by: self.errorArchiveLabelSize_property)
  //--- errorArchiveVersionMessage
    self.errorArchiveVersionMessage_property.mReadModelFunction = nil 
    self.mModel?.toMany_errorArchiveVersionMessage_StopsBeingObserved (by: self.errorArchiveVersionMessage_property)
  //--- errorArchiveVersionMessageIsHidden
    self.errorArchiveVersionMessageIsHidden_property.mReadModelFunction = nil 
    self.mModel?.toMany_errorArchiveVersionMessageIsHidden_StopsBeingObserved (by: self.errorArchiveVersionMessageIsHidden_property)
  //--- frontComponentNameSegments
    self.frontComponentNameSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontComponentNameSegments_StopsBeingObserved (by: self.frontComponentNameSegments_property)
  //--- frontComponentNamesBezierPaths
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontComponentNamesBezierPaths_StopsBeingObserved (by: self.frontComponentNamesBezierPaths_property)
  //--- frontComponentValueSegments
    self.frontComponentValueSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontComponentValueSegments_StopsBeingObserved (by: self.frontComponentValueSegments_property)
  //--- frontComponentValuesBezierPaths
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontComponentValuesBezierPaths_StopsBeingObserved (by: self.frontComponentValuesBezierPaths_property)
  //--- frontLayoutTextsBezierPaths
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLayoutTextsBezierPaths_StopsBeingObserved (by: self.frontLayoutTextsBezierPaths_property)
  //--- frontLayoutTextsSegments
    self.frontLayoutTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLayoutTextsSegments_StopsBeingObserved (by: self.frontLayoutTextsSegments_property)
  //--- frontLegendBoardImageRectangles
    self.frontLegendBoardImageRectangles_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendBoardImageRectangles_StopsBeingObserved (by: self.frontLegendBoardImageRectangles_property)
  //--- frontLegendLinesBezierPaths
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendLinesBezierPaths_StopsBeingObserved (by: self.frontLegendLinesBezierPaths_property)
  //--- frontLegendLinesSegments
    self.frontLegendLinesSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendLinesSegments_StopsBeingObserved (by: self.frontLegendLinesSegments_property)
  //--- frontLegendQRCodeRectangles
    self.frontLegendQRCodeRectangles_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendQRCodeRectangles_StopsBeingObserved (by: self.frontLegendQRCodeRectangles_property)
  //--- frontLegendTextsBezierPaths
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendTextsBezierPaths_StopsBeingObserved (by: self.frontLegendTextsBezierPaths_property)
  //--- frontLegendTextsSegments
    self.frontLegendTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontLegendTextsSegments_StopsBeingObserved (by: self.frontLegendTextsSegments_property)
  //--- frontPackagesBezierPaths
    self.frontPackagesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontPackagesBezierPaths_StopsBeingObserved (by: self.frontPackagesBezierPaths_property)
  //--- frontPackagesSegments
    self.frontPackagesSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontPackagesSegments_StopsBeingObserved (by: self.frontPackagesSegments_property)
  //--- frontPadArray
    self.frontPadArray_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontPadArray_StopsBeingObserved (by: self.frontPadArray_property)
  //--- frontPadsBezierPaths
    self.frontPadsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontPadsBezierPaths_StopsBeingObserved (by: self.frontPadsBezierPaths_property)
  //--- frontTrackSegments
    self.frontTrackSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontTrackSegments_StopsBeingObserved (by: self.frontTrackSegments_property)
  //--- frontTrackSegmentsNoSilkScreen
    self.frontTrackSegmentsNoSilkScreen_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontTrackSegmentsNoSilkScreen_StopsBeingObserved (by: self.frontTrackSegmentsNoSilkScreen_property)
  //--- frontTracksBezierPaths
    self.frontTracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontTracksBezierPaths_StopsBeingObserved (by: self.frontTracksBezierPaths_property)
  //--- frontTracksNoSilkScreenBezierPaths
    self.frontTracksNoSilkScreenBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_frontTracksNoSilkScreenBezierPaths_StopsBeingObserved (by: self.frontTracksNoSilkScreenBezierPaths_property)
  //--- holesBezierPaths
    self.holesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_holesBezierPaths_StopsBeingObserved (by: self.holesBezierPaths_property)
  //--- ignoreModelVersionError
    self.ignoreModelVersionError_property.mReadModelFunction = nil 
    self.ignoreModelVersionError_property.mWriteModelFunction = nil 
    self.mModel?.toMany_ignoreModelVersionError_StopsBeingObserved (by: self.ignoreModelVersionError_property)
  //--- imageForInstances
    self.imageForInstances_property.mReadModelFunction = nil 
    self.mModel?.toMany_imageForInstances_StopsBeingObserved (by: self.imageForInstances_property)
  //--- imageForModel
    self.imageForModel_property.mReadModelFunction = nil 
    self.mModel?.toMany_imageForModel_StopsBeingObserved (by: self.imageForModel_property)
  //--- inner1TracksBezierPaths
    self.inner1TracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner1TracksBezierPaths_StopsBeingObserved (by: self.inner1TracksBezierPaths_property)
  //--- inner1TracksSegments
    self.inner1TracksSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner1TracksSegments_StopsBeingObserved (by: self.inner1TracksSegments_property)
  //--- inner2TracksBezierPaths
    self.inner2TracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner2TracksBezierPaths_StopsBeingObserved (by: self.inner2TracksBezierPaths_property)
  //--- inner2TracksSegments
    self.inner2TracksSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner2TracksSegments_StopsBeingObserved (by: self.inner2TracksSegments_property)
  //--- inner3TracksBezierPaths
    self.inner3TracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner3TracksBezierPaths_StopsBeingObserved (by: self.inner3TracksBezierPaths_property)
  //--- inner3TracksSegments
    self.inner3TracksSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner3TracksSegments_StopsBeingObserved (by: self.inner3TracksSegments_property)
  //--- inner4TracksBezierPaths
    self.inner4TracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner4TracksBezierPaths_StopsBeingObserved (by: self.inner4TracksBezierPaths_property)
  //--- inner4TracksSegments
    self.inner4TracksSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_inner4TracksSegments_StopsBeingObserved (by: self.inner4TracksSegments_property)
  //--- instanceCount
    self.instanceCount_property.mReadModelFunction = nil 
    self.mModel?.toMany_instanceCount_StopsBeingObserved (by: self.instanceCount_property)
  //--- internalBoardsLimitsBezierPaths
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_internalBoardsLimitsBezierPaths_StopsBeingObserved (by: self.internalBoardsLimitsBezierPaths_property)
  //--- internalBoardsLimitsSegments
    self.internalBoardsLimitsSegments_property.mReadModelFunction = nil 
    self.mModel?.toMany_internalBoardsLimitsSegments_StopsBeingObserved (by: self.internalBoardsLimitsSegments_property)
  //--- layerConfiguration
    self.layerConfiguration_property.mReadModelFunction = nil 
    self.layerConfiguration_property.mWriteModelFunction = nil 
    self.mModel?.toMany_layerConfiguration_StopsBeingObserved (by: self.layerConfiguration_property)
  //--- layerConfigurationString
    self.layerConfigurationString_property.mReadModelFunction = nil 
    self.mModel?.toMany_layerConfigurationString_StopsBeingObserved (by: self.layerConfigurationString_property)
  //--- modelHeight
    self.modelHeight_property.mReadModelFunction = nil 
    self.modelHeight_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelHeight_StopsBeingObserved (by: self.modelHeight_property)
  //--- modelHeightUnit
    self.modelHeightUnit_property.mReadModelFunction = nil 
    self.modelHeightUnit_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelHeightUnit_StopsBeingObserved (by: self.modelHeightUnit_property)
  //--- modelLimitWidth
    self.modelLimitWidth_property.mReadModelFunction = nil 
    self.modelLimitWidth_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelLimitWidth_StopsBeingObserved (by: self.modelLimitWidth_property)
  //--- modelLimitWidthUnit
    self.modelLimitWidthUnit_property.mReadModelFunction = nil 
    self.modelLimitWidthUnit_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelLimitWidthUnit_StopsBeingObserved (by: self.modelLimitWidthUnit_property)
  //--- modelVersion
    self.modelVersion_property.mReadModelFunction = nil 
    self.modelVersion_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelVersion_StopsBeingObserved (by: self.modelVersion_property)
  //--- modelWidth
    self.modelWidth_property.mReadModelFunction = nil 
    self.modelWidth_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelWidth_StopsBeingObserved (by: self.modelWidth_property)
  //--- modelWidthUnit
    self.modelWidthUnit_property.mReadModelFunction = nil 
    self.modelWidthUnit_property.mWriteModelFunction = nil 
    self.mModel?.toMany_modelWidthUnit_StopsBeingObserved (by: self.modelWidthUnit_property)
  //--- name
    self.name_property.mReadModelFunction = nil 
    self.name_property.mWriteModelFunction = nil 
    self.mModel?.toMany_name_StopsBeingObserved (by: self.name_property)
  //--- traversingPadArray
    self.traversingPadArray_property.mReadModelFunction = nil 
    self.mModel?.toMany_traversingPadArray_StopsBeingObserved (by: self.traversingPadArray_property)
  //--- traversingPadsBezierPaths
    self.traversingPadsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_traversingPadsBezierPaths_StopsBeingObserved (by: self.traversingPadsBezierPaths_property)
  //--- viaShapes
    self.viaShapes_property.mReadModelFunction = nil 
    self.mModel?.toMany_viaShapes_StopsBeingObserved (by: self.viaShapes_property)
  //--- viasBezierPaths
    self.viasBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.toMany_viasBezierPaths_StopsBeingObserved (by: self.viasBezierPaths_property)
  //--- zoom
    self.zoom_property.mReadModelFunction = nil 
    self.zoom_property.mWriteModelFunction = nil 
    self.mModel?.toMany_zoom_StopsBeingObserved (by: self.zoom_property)
  //---
    self.mModel = nil
  } */

  //···················································································································*

  private final func bind_property_artworkName (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_artworkName_StartsBeingObserved (by: self.artworkName_property)
    self.artworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.artworkName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.artworkName_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNameSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backComponentNameSegments_StartsBeingObserved (by: self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNamesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backComponentNamesBezierPaths_StartsBeingObserved (by: self.backComponentNamesBezierPaths_property)
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNamesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValueSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backComponentValueSegments_StartsBeingObserved (by: self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValueSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValuesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backComponentValuesBezierPaths_StartsBeingObserved (by: self.backComponentValuesBezierPaths_property)
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValuesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLayoutTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLayoutTextsBezierPaths_StartsBeingObserved (by: self.backLayoutTextsBezierPaths_property)
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLayoutTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLayoutTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLayoutTextsSegments_StartsBeingObserved (by: self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLayoutTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendBoardImageRectangles (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendBoardImageRectangles_StartsBeingObserved (by: self.backLegendBoardImageRectangles_property)
    self.backLegendBoardImageRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerRectangleArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendBoardImageRectangles_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendLinesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendLinesBezierPaths_StartsBeingObserved (by: self.backLegendLinesBezierPaths_property)
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendLinesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendLinesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendLinesSegments_StartsBeingObserved (by: self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendLinesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendQRCodeRectangles (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendQRCodeRectangles_StartsBeingObserved (by: self.backLegendQRCodeRectangles_property)
    self.backLegendQRCodeRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerRectangleArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendQRCodeRectangles_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendTextsBezierPaths_StartsBeingObserved (by: self.backLegendTextsBezierPaths_property)
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backLegendTextsSegments_StartsBeingObserved (by: self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backPackagesBezierPaths_StartsBeingObserved (by: self.backPackagesBezierPaths_property)
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backPackagesSegments_StartsBeingObserved (by: self.backPackagesSegments_property)
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPadArray (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backPadArray_StartsBeingObserved (by: self.backPadArray_property)
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPadsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backPadsBezierPaths_StartsBeingObserved (by: self.backPadsBezierPaths_property)
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPadsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTrackSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backTrackSegments_StartsBeingObserved (by: self.backTrackSegments_property)
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTrackSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTrackSegmentsNoSilkScreen (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backTrackSegmentsNoSilkScreen_StartsBeingObserved (by: self.backTrackSegmentsNoSilkScreen_property)
    self.backTrackSegmentsNoSilkScreen_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTrackSegmentsNoSilkScreen_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backTracksBezierPaths_StartsBeingObserved (by: self.backTracksBezierPaths_property)
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTracksNoSilkScreenBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_backTracksNoSilkScreenBezierPaths_StartsBeingObserved (by: self.backTracksNoSilkScreenBezierPaths_property)
    self.backTracksNoSilkScreenBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTracksNoSilkScreenBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_boardLimitsBezierPaths_StartsBeingObserved (by: self.boardLimitsBezierPaths_property)
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_drillSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_drillSegments_StartsBeingObserved (by: self.drillSegments_property)
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drillSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_errorArchiveLabelColor (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_errorArchiveLabelColor_StartsBeingObserved (by: self.errorArchiveLabelColor_property)
    self.errorArchiveLabelColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSColor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.errorArchiveLabelColor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_errorArchiveLabelSize (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_errorArchiveLabelSize_StartsBeingObserved (by: self.errorArchiveLabelSize_property)
    self.errorArchiveLabelSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBControlSize> ()
          var isMultipleSelection = false
          for object in v {
            switch object.errorArchiveLabelSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_errorArchiveVersionMessage (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_errorArchiveVersionMessage_StartsBeingObserved (by: self.errorArchiveVersionMessage_property)
    self.errorArchiveVersionMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.errorArchiveVersionMessage_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_errorArchiveVersionMessageIsHidden (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_errorArchiveVersionMessageIsHidden_StartsBeingObserved (by: self.errorArchiveVersionMessageIsHidden_property)
    self.errorArchiveVersionMessageIsHidden_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.errorArchiveVersionMessageIsHidden_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontComponentNameSegments_StartsBeingObserved (by: self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNamesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontComponentNamesBezierPaths_StartsBeingObserved (by: self.frontComponentNamesBezierPaths_property)
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNamesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValueSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontComponentValueSegments_StartsBeingObserved (by: self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValueSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValuesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontComponentValuesBezierPaths_StartsBeingObserved (by: self.frontComponentValuesBezierPaths_property)
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValuesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLayoutTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLayoutTextsBezierPaths_StartsBeingObserved (by: self.frontLayoutTextsBezierPaths_property)
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLayoutTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLayoutTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLayoutTextsSegments_StartsBeingObserved (by: self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLayoutTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendBoardImageRectangles (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendBoardImageRectangles_StartsBeingObserved (by: self.frontLegendBoardImageRectangles_property)
    self.frontLegendBoardImageRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerRectangleArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendBoardImageRectangles_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendLinesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendLinesBezierPaths_StartsBeingObserved (by: self.frontLegendLinesBezierPaths_property)
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendLinesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendLinesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendLinesSegments_StartsBeingObserved (by: self.frontLegendLinesSegments_property)
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendLinesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendQRCodeRectangles (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendQRCodeRectangles_StartsBeingObserved (by: self.frontLegendQRCodeRectangles_property)
    self.frontLegendQRCodeRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerRectangleArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendQRCodeRectangles_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendTextsBezierPaths_StartsBeingObserved (by: self.frontLegendTextsBezierPaths_property)
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontLegendTextsSegments_StartsBeingObserved (by: self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontPackagesBezierPaths_StartsBeingObserved (by: self.frontPackagesBezierPaths_property)
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontPackagesSegments_StartsBeingObserved (by: self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadArray (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontPadArray_StartsBeingObserved (by: self.frontPadArray_property)
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontPadsBezierPaths_StartsBeingObserved (by: self.frontPadsBezierPaths_property)
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTrackSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontTrackSegments_StartsBeingObserved (by: self.frontTrackSegments_property)
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTrackSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTrackSegmentsNoSilkScreen (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontTrackSegmentsNoSilkScreen_StartsBeingObserved (by: self.frontTrackSegmentsNoSilkScreen_property)
    self.frontTrackSegmentsNoSilkScreen_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTrackSegmentsNoSilkScreen_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontTracksBezierPaths_StartsBeingObserved (by: self.frontTracksBezierPaths_property)
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTracksNoSilkScreenBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_frontTracksNoSilkScreenBezierPaths_StartsBeingObserved (by: self.frontTracksNoSilkScreenBezierPaths_property)
    self.frontTracksNoSilkScreenBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTracksNoSilkScreenBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_holesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_holesBezierPaths_StartsBeingObserved (by: self.holesBezierPaths_property)
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_ignoreModelVersionError (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_ignoreModelVersionError_StartsBeingObserved (by: self.ignoreModelVersionError_property)
    self.ignoreModelVersionError_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.ignoreModelVersionError_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.ignoreModelVersionError_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.ignoreModelVersionError_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_imageForInstances (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_imageForInstances_StartsBeingObserved (by: self.imageForInstances_property)
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.imageForInstances_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_imageForModel (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_imageForModel_StartsBeingObserved (by: self.imageForModel_property)
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.imageForModel_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner1TracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner1TracksBezierPaths_StartsBeingObserved (by: self.inner1TracksBezierPaths_property)
    self.inner1TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner1TracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner1TracksSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner1TracksSegments_StartsBeingObserved (by: self.inner1TracksSegments_property)
    self.inner1TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner1TracksSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner2TracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner2TracksBezierPaths_StartsBeingObserved (by: self.inner2TracksBezierPaths_property)
    self.inner2TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner2TracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner2TracksSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner2TracksSegments_StartsBeingObserved (by: self.inner2TracksSegments_property)
    self.inner2TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner2TracksSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner3TracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner3TracksBezierPaths_StartsBeingObserved (by: self.inner3TracksBezierPaths_property)
    self.inner3TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner3TracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner3TracksSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner3TracksSegments_StartsBeingObserved (by: self.inner3TracksSegments_property)
    self.inner3TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner3TracksSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner4TracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner4TracksBezierPaths_StartsBeingObserved (by: self.inner4TracksBezierPaths_property)
    self.inner4TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner4TracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_inner4TracksSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_inner4TracksSegments_StartsBeingObserved (by: self.inner4TracksSegments_property)
    self.inner4TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.inner4TracksSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceCount (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_instanceCount_StartsBeingObserved (by: self.instanceCount_property)
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_internalBoardsLimitsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_internalBoardsLimitsBezierPaths_StartsBeingObserved (by: self.internalBoardsLimitsBezierPaths_property)
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.internalBoardsLimitsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_internalBoardsLimitsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_internalBoardsLimitsSegments_StartsBeingObserved (by: self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.internalBoardsLimitsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_layerConfiguration (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_layerConfiguration_StartsBeingObserved (by: self.layerConfiguration_property)
    self.layerConfiguration_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <LayerConfiguration> ()
          var isMultipleSelection = false
          for object in v {
            switch object.layerConfiguration_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.layerConfiguration_property.mWriteModelFunction = { [weak self] (inValue : LayerConfiguration) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.layerConfiguration_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_layerConfigurationString (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_layerConfigurationString_StartsBeingObserved (by: self.layerConfigurationString_property)
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.layerConfigurationString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelHeight (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelHeight_StartsBeingObserved (by: self.modelHeight_property)
    self.modelHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelHeight_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelHeightUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelHeightUnit_StartsBeingObserved (by: self.modelHeightUnit_property)
    self.modelHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelLimitWidth (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelLimitWidth_StartsBeingObserved (by: self.modelLimitWidth_property)
    self.modelLimitWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelLimitWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLimitWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelLimitWidth_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelLimitWidthUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelLimitWidthUnit_StartsBeingObserved (by: self.modelLimitWidthUnit_property)
    self.modelLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelLimitWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLimitWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelLimitWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelVersion (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelVersion_StartsBeingObserved (by: self.modelVersion_property)
    self.modelVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelVersion_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelVersion_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelWidth (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelWidth_StartsBeingObserved (by: self.modelWidth_property)
    self.modelWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelWidth_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelWidthUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_modelWidthUnit_StartsBeingObserved (by: self.modelWidthUnit_property)
    self.modelWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_name_StartsBeingObserved (by: self.name_property)
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.name_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_traversingPadArray (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_traversingPadArray_StartsBeingObserved (by: self.traversingPadArray_property)
    self.traversingPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.traversingPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_traversingPadsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_traversingPadsBezierPaths_StartsBeingObserved (by: self.traversingPadsBezierPaths_property)
    self.traversingPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.traversingPadsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaShapes (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_viaShapes_StartsBeingObserved (by: self.viaShapes_property)
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerViaShapeArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaShapes_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_viasBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_viasBezierPaths_StartsBeingObserved (by: self.viasBezierPaths_property)
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viasBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoom (model : ReadOnlyArrayOf_BoardModel) {
    model.toMany_zoom_StartsBeingObserved (by: self.zoom_property)
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoom_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoom_property.setProp (inValue)
          }
        }
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

