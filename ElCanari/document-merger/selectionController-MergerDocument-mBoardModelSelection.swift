//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller MergerDocument mBoardModelSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_MergerDocument_mBoardModelSelection : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: artworkName
  //····················································································································

  var artworkName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: backComponentNameSegments
  //····················································································································

  var backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backComponentNames
  //····················································································································

  //····················································································································
  //   Selection observable property: backComponentNamesBezierPaths
  //····················································································································

  var backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backComponentValueSegments
  //····················································································································

  var backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backComponentValues
  //····················································································································

  //····················································································································
  //   Selection observable property: backComponentValuesBezierPaths
  //····················································································································

  var backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backLayoutTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: backLayoutTextsBezierPaths
  //····················································································································

  var backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backLayoutTextsSegments
  //····················································································································

  var backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backLegendLines
  //····················································································································

  //····················································································································
  //   Selection observable property: backLegendLinesBezierPaths
  //····················································································································

  var backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backLegendLinesSegments
  //····················································································································

  var backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backLegendTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: backLegendTextsBezierPaths
  //····················································································································

  var backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backLegendTextsSegments
  //····················································································································

  var backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backPackages
  //····················································································································

  //····················································································································
  //   Selection observable property: backPackagesBezierPaths
  //····················································································································

  var backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backPackagesSegments
  //····················································································································

  var backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backPadArray
  //····················································································································

  var backPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································
  //   Selection observable property: backPads
  //····················································································································

  //····················································································································
  //   Selection observable property: backPadsBezierPaths
  //····················································································································

  var backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: backTrackSegments
  //····················································································································

  var backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: backTracks
  //····················································································································

  //····················································································································
  //   Selection observable property: backTracksBezierPaths
  //····················································································································

  var backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: boardLimits
  //····················································································································

  var boardLimits_property = EBTransientProperty_MergerBoardLimits ()

  //····················································································································
  //   Selection observable property: boardLimitsBezierPaths
  //····················································································································

  var boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: drillSegments
  //····················································································································

  var drillSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: drills
  //····················································································································

  //····················································································································
  //   Selection observable property: frontComponentNameSegments
  //····················································································································

  var frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontComponentNames
  //····················································································································

  //····················································································································
  //   Selection observable property: frontComponentNamesBezierPaths
  //····················································································································

  var frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontComponentValueSegments
  //····················································································································

  var frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontComponentValues
  //····················································································································

  //····················································································································
  //   Selection observable property: frontComponentValuesBezierPaths
  //····················································································································

  var frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontLayoutTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLayoutTextsBezierPaths
  //····················································································································

  var frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontLayoutTextsSegments
  //····················································································································

  var frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontLegendLines
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLegendLinesBezierPaths
  //····················································································································

  var frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontLegendLinesSegments
  //····················································································································

  var frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontLegendTexts
  //····················································································································

  //····················································································································
  //   Selection observable property: frontLegendTextsBezierPaths
  //····················································································································

  var frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontLegendTextsSegments
  //····················································································································

  var frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontPackages
  //····················································································································

  //····················································································································
  //   Selection observable property: frontPackagesBezierPaths
  //····················································································································

  var frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontPackagesSegments
  //····················································································································

  var frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontPadArray
  //····················································································································

  var frontPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································
  //   Selection observable property: frontPads
  //····················································································································

  //····················································································································
  //   Selection observable property: frontPadsBezierPaths
  //····················································································································

  var frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: frontTrackSegments
  //····················································································································

  var frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: frontTracks
  //····················································································································

  //····················································································································
  //   Selection observable property: frontTracksBezierPaths
  //····················································································································

  var frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: holesBezierPaths
  //····················································································································

  var holesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: imageForInstances
  //····················································································································

  var imageForInstances_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: imageForModel
  //····················································································································

  var imageForModel_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: internalBoardsLimits
  //····················································································································

  //····················································································································
  //   Selection observable property: internalBoardsLimitsBezierPaths
  //····················································································································

  var internalBoardsLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: internalBoardsLimitsSegments
  //····················································································································

  var internalBoardsLimitsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //   Selection observable property: modelHeight
  //····················································································································

  var modelHeight_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: modelHeightUnit
  //····················································································································

  var modelHeightUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: modelLimitWidth
  //····················································································································

  var modelLimitWidth_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: modelLimitWidthUnit
  //····················································································································

  var modelLimitWidthUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: modelWidth
  //····················································································································

  var modelWidth_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: modelWidthUnit
  //····················································································································

  var modelWidthUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: myInstances
  //····················································································································

  //····················································································································
  //   Selection observable property: name
  //····················································································································

  var name_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: viaShapes
  //····················································································································

  var viaShapes_property = EBTransientProperty_MergerViaShapeArray ()

  //····················································································································
  //   Selection observable property: vias
  //····················································································································

  //····················································································································
  //   Selection observable property: viasBezierPaths
  //····················································································································

  var viasBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································
  //   Selection observable property: zoom
  //····················································································································

  var zoom_property = EBPropertyProxy_Int ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private var mModel : ReadOnlyArrayOf_BoardModel? = nil

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardModel) {
    self.mModel = model
    self.bind_property_artworkName (model: model)
    self.bind_property_backComponentNameSegments (model: model)
    self.bind_property_backComponentNamesBezierPaths (model: model)
    self.bind_property_backComponentValueSegments (model: model)
    self.bind_property_backComponentValuesBezierPaths (model: model)
    self.bind_property_backLayoutTextsBezierPaths (model: model)
    self.bind_property_backLayoutTextsSegments (model: model)
    self.bind_property_backLegendLinesBezierPaths (model: model)
    self.bind_property_backLegendLinesSegments (model: model)
    self.bind_property_backLegendTextsBezierPaths (model: model)
    self.bind_property_backLegendTextsSegments (model: model)
    self.bind_property_backPackagesBezierPaths (model: model)
    self.bind_property_backPackagesSegments (model: model)
    self.bind_property_backPadArray (model: model)
    self.bind_property_backPadsBezierPaths (model: model)
    self.bind_property_backTrackSegments (model: model)
    self.bind_property_backTracksBezierPaths (model: model)
    self.bind_property_boardLimits (model: model)
    self.bind_property_boardLimitsBezierPaths (model: model)
    self.bind_property_drillSegments (model: model)
    self.bind_property_frontComponentNameSegments (model: model)
    self.bind_property_frontComponentNamesBezierPaths (model: model)
    self.bind_property_frontComponentValueSegments (model: model)
    self.bind_property_frontComponentValuesBezierPaths (model: model)
    self.bind_property_frontLayoutTextsBezierPaths (model: model)
    self.bind_property_frontLayoutTextsSegments (model: model)
    self.bind_property_frontLegendLinesBezierPaths (model: model)
    self.bind_property_frontLegendLinesSegments (model: model)
    self.bind_property_frontLegendTextsBezierPaths (model: model)
    self.bind_property_frontLegendTextsSegments (model: model)
    self.bind_property_frontPackagesBezierPaths (model: model)
    self.bind_property_frontPackagesSegments (model: model)
    self.bind_property_frontPadArray (model: model)
    self.bind_property_frontPadsBezierPaths (model: model)
    self.bind_property_frontTrackSegments (model: model)
    self.bind_property_frontTracksBezierPaths (model: model)
    self.bind_property_holesBezierPaths (model: model)
    self.bind_property_imageForInstances (model: model)
    self.bind_property_imageForModel (model: model)
    self.bind_property_instanceCount (model: model)
    self.bind_property_internalBoardsLimitsBezierPaths (model: model)
    self.bind_property_internalBoardsLimitsSegments (model: model)
    self.bind_property_modelHeight (model: model)
    self.bind_property_modelHeightUnit (model: model)
    self.bind_property_modelLimitWidth (model: model)
    self.bind_property_modelLimitWidthUnit (model: model)
    self.bind_property_modelWidth (model: model)
    self.bind_property_modelWidthUnit (model: model)
    self.bind_property_name (model: model)
    self.bind_property_viaShapes (model: model)
    self.bind_property_viasBezierPaths (model: model)
    self.bind_property_zoom (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
  //--- artworkName
    self.artworkName_property.mReadModelFunction = nil 
    self.artworkName_property.mWriteModelFunction = nil 
    self.artworkName_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_artworkName (self.artworkName_property)
  //--- backComponentNameSegments
    self.backComponentNameSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentNameSegments (self.backComponentNameSegments_property)
  //--- backComponentNamesBezierPaths
    self.backComponentNamesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentNamesBezierPaths (self.backComponentNamesBezierPaths_property)
  //--- backComponentValueSegments
    self.backComponentValueSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentValueSegments (self.backComponentValueSegments_property)
  //--- backComponentValuesBezierPaths
    self.backComponentValuesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentValuesBezierPaths (self.backComponentValuesBezierPaths_property)
  //--- backLayoutTextsBezierPaths
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLayoutTextsBezierPaths (self.backLayoutTextsBezierPaths_property)
  //--- backLayoutTextsSegments
    self.backLayoutTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLayoutTextsSegments (self.backLayoutTextsSegments_property)
  //--- backLegendLinesBezierPaths
    self.backLegendLinesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendLinesBezierPaths (self.backLegendLinesBezierPaths_property)
  //--- backLegendLinesSegments
    self.backLegendLinesSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendLinesSegments (self.backLegendLinesSegments_property)
  //--- backLegendTextsBezierPaths
    self.backLegendTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendTextsBezierPaths (self.backLegendTextsBezierPaths_property)
  //--- backLegendTextsSegments
    self.backLegendTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendTextsSegments (self.backLegendTextsSegments_property)
  //--- backPackagesBezierPaths
    self.backPackagesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPackagesBezierPaths (self.backPackagesBezierPaths_property)
  //--- backPackagesSegments
    self.backPackagesSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPackagesSegments (self.backPackagesSegments_property)
  //--- backPadArray
    self.backPadArray_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPadArray (self.backPadArray_property)
  //--- backPadsBezierPaths
    self.backPadsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPadsBezierPaths (self.backPadsBezierPaths_property)
  //--- backTrackSegments
    self.backTrackSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backTrackSegments (self.backTrackSegments_property)
  //--- backTracksBezierPaths
    self.backTracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_backTracksBezierPaths (self.backTracksBezierPaths_property)
  //--- boardLimits
    self.boardLimits_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_boardLimits (self.boardLimits_property)
  //--- boardLimitsBezierPaths
    self.boardLimitsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_boardLimitsBezierPaths (self.boardLimitsBezierPaths_property)
  //--- drillSegments
    self.drillSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_drillSegments (self.drillSegments_property)
  //--- frontComponentNameSegments
    self.frontComponentNameSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentNameSegments (self.frontComponentNameSegments_property)
  //--- frontComponentNamesBezierPaths
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentNamesBezierPaths (self.frontComponentNamesBezierPaths_property)
  //--- frontComponentValueSegments
    self.frontComponentValueSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentValueSegments (self.frontComponentValueSegments_property)
  //--- frontComponentValuesBezierPaths
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentValuesBezierPaths (self.frontComponentValuesBezierPaths_property)
  //--- frontLayoutTextsBezierPaths
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLayoutTextsBezierPaths (self.frontLayoutTextsBezierPaths_property)
  //--- frontLayoutTextsSegments
    self.frontLayoutTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLayoutTextsSegments (self.frontLayoutTextsSegments_property)
  //--- frontLegendLinesBezierPaths
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendLinesBezierPaths (self.frontLegendLinesBezierPaths_property)
  //--- frontLegendLinesSegments
    self.frontLegendLinesSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendLinesSegments (self.frontLegendLinesSegments_property)
  //--- frontLegendTextsBezierPaths
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendTextsBezierPaths (self.frontLegendTextsBezierPaths_property)
  //--- frontLegendTextsSegments
    self.frontLegendTextsSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendTextsSegments (self.frontLegendTextsSegments_property)
  //--- frontPackagesBezierPaths
    self.frontPackagesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPackagesBezierPaths (self.frontPackagesBezierPaths_property)
  //--- frontPackagesSegments
    self.frontPackagesSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPackagesSegments (self.frontPackagesSegments_property)
  //--- frontPadArray
    self.frontPadArray_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPadArray (self.frontPadArray_property)
  //--- frontPadsBezierPaths
    self.frontPadsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPadsBezierPaths (self.frontPadsBezierPaths_property)
  //--- frontTrackSegments
    self.frontTrackSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontTrackSegments (self.frontTrackSegments_property)
  //--- frontTracksBezierPaths
    self.frontTracksBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontTracksBezierPaths (self.frontTracksBezierPaths_property)
  //--- holesBezierPaths
    self.holesBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_holesBezierPaths (self.holesBezierPaths_property)
  //--- imageForInstances
    self.imageForInstances_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_imageForInstances (self.imageForInstances_property)
  //--- imageForModel
    self.imageForModel_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_imageForModel (self.imageForModel_property)
  //--- instanceCount
    self.instanceCount_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_instanceCount (self.instanceCount_property)
  //--- internalBoardsLimitsBezierPaths
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_internalBoardsLimitsBezierPaths (self.internalBoardsLimitsBezierPaths_property)
  //--- internalBoardsLimitsSegments
    self.internalBoardsLimitsSegments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_internalBoardsLimitsSegments (self.internalBoardsLimitsSegments_property)
  //--- modelHeight
    self.modelHeight_property.mReadModelFunction = nil 
    self.modelHeight_property.mWriteModelFunction = nil 
    self.modelHeight_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelHeight (self.modelHeight_property)
  //--- modelHeightUnit
    self.modelHeightUnit_property.mReadModelFunction = nil 
    self.modelHeightUnit_property.mWriteModelFunction = nil 
    self.modelHeightUnit_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelHeightUnit (self.modelHeightUnit_property)
  //--- modelLimitWidth
    self.modelLimitWidth_property.mReadModelFunction = nil 
    self.modelLimitWidth_property.mWriteModelFunction = nil 
    self.modelLimitWidth_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelLimitWidth (self.modelLimitWidth_property)
  //--- modelLimitWidthUnit
    self.modelLimitWidthUnit_property.mReadModelFunction = nil 
    self.modelLimitWidthUnit_property.mWriteModelFunction = nil 
    self.modelLimitWidthUnit_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelLimitWidthUnit (self.modelLimitWidthUnit_property)
  //--- modelWidth
    self.modelWidth_property.mReadModelFunction = nil 
    self.modelWidth_property.mWriteModelFunction = nil 
    self.modelWidth_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelWidth (self.modelWidth_property)
  //--- modelWidthUnit
    self.modelWidthUnit_property.mReadModelFunction = nil 
    self.modelWidthUnit_property.mWriteModelFunction = nil 
    self.modelWidthUnit_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_modelWidthUnit (self.modelWidthUnit_property)
  //--- name
    self.name_property.mReadModelFunction = nil 
    self.name_property.mWriteModelFunction = nil 
    self.name_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_name (self.name_property)
  //--- viaShapes
    self.viaShapes_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_viaShapes (self.viaShapes_property)
  //--- viasBezierPaths
    self.viasBezierPaths_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_viasBezierPaths (self.viasBezierPaths_property)
  //--- zoom
    self.zoom_property.mReadModelFunction = nil 
    self.zoom_property.mWriteModelFunction = nil 
    self.zoom_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_zoom (self.zoom_property)
  //---
    self.mModel = nil
  }

  //····················································································································
  //    Explorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mValueExplorer : NSButton?
    private var mExplorerWindow : NSWindow?
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
      let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
      let tf = NSTextField (frame:secondColumn (y))
      tf.isEnabled = true
      tf.isEditable = false
      tf.stringValue = name
      tf.font = font
      view.addSubview (tf)
      let valueExplorer = NSButton (frame:thirdColumn (y))
      valueExplorer.font = font
      valueExplorer.title = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
      valueExplorer.target = self
      valueExplorer.action = #selector(SelectionController_MergerDocument_mBoardModelSelection.showObjectWindowFromExplorerButton(_:))
      view.addSubview (valueExplorer)
      mValueExplorer = valueExplorer
      y += EXPLORER_ROW_HEIGHT
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func buildExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
      mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
    //-------------------------------------------------- Adding properties
      let view = NSView (frame:r)
      var y : CGFloat = 0.0
      createEntryForPropertyNamed (
        "artworkName",
        idx: self.artworkName_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.artworkName_property.mObserverExplorer,
        valueExplorer: &self.artworkName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelHeight",
        idx: self.modelHeight_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelHeight_property.mObserverExplorer,
        valueExplorer: &self.modelHeight_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelHeightUnit",
        idx: self.modelHeightUnit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelHeightUnit_property.mObserverExplorer,
        valueExplorer: &self.modelHeightUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelLimitWidth",
        idx: self.modelLimitWidth_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelLimitWidth_property.mObserverExplorer,
        valueExplorer: &self.modelLimitWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelLimitWidthUnit",
        idx: self.modelLimitWidthUnit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelLimitWidthUnit_property.mObserverExplorer,
        valueExplorer: &self.modelLimitWidthUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelWidth",
        idx: self.modelWidth_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelWidth_property.mObserverExplorer,
        valueExplorer: &self.modelWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "modelWidthUnit",
        idx: self.modelWidthUnit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.modelWidthUnit_property.mObserverExplorer,
        valueExplorer: &self.modelWidthUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "name",
        idx: self.name_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.name_property.mObserverExplorer,
        valueExplorer: &self.name_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "zoom",
        idx: self.zoom_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.zoom_property.mObserverExplorer,
        valueExplorer: &self.zoom_property.mValueExplorer
      )
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      view.frame = viewFrame
    //--- Set content size
      mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(SelectionController_MergerDocument_mBoardModelSelection.deleteSelectionControllerWindowAction(_:))
    //--- Set window title
      let windowTitle = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
      mExplorerWindow!.title = windowTitle
    //--- Add Scroll view
      let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      let sw = NSScrollView (frame:frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      mExplorerWindow!.contentView = sw
    }
  #endif
  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showObjectWindowFromExplorerButton (_ : Any) {
      if mExplorerWindow == nil {
        buildExplorerWindow ()
      }
      mExplorerWindow?.makeKeyAndOrderFront(nil)
    }
  #endif

  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteSelectionControllerWindowAction (_ : Any) {
      clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func clearObjectExplorer () {
      let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton!.target = nil
      mExplorerWindow?.orderOut (nil)
      mExplorerWindow = nil
    }
  #endif

  //···················································································································*

  private final func bind_property_artworkName (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_artworkName (self.artworkName_property)
    self.artworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.artworkName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.artworkName_property.setProp (inValue)
          }
        }
      }
    }
    self.artworkName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.artworkName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNameSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backComponentNameSegments (self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNamesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backComponentNamesBezierPaths (self.backComponentNamesBezierPaths_property)
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNamesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValueSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backComponentValueSegments (self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValueSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValuesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backComponentValuesBezierPaths (self.backComponentValuesBezierPaths_property)
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValuesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLayoutTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLayoutTextsBezierPaths (self.backLayoutTextsBezierPaths_property)
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLayoutTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLayoutTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLayoutTextsSegments (self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLayoutTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendLinesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLegendLinesBezierPaths (self.backLegendLinesBezierPaths_property)
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendLinesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendLinesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLegendLinesSegments (self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendLinesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLegendTextsBezierPaths (self.backLegendTextsBezierPaths_property)
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backLegendTextsSegments (self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backPackagesBezierPaths (self.backPackagesBezierPaths_property)
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backPackagesSegments (self.backPackagesSegments_property)
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPadArray (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backPadArray (self.backPadArray_property)
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPadsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backPadsBezierPaths (self.backPadsBezierPaths_property)
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPadsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTrackSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backTrackSegments (self.backTrackSegments_property)
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTrackSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_backTracksBezierPaths (self.backTracksBezierPaths_property)
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimits (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_boardLimits (self.boardLimits_property)
    self.boardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerBoardLimits> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimits_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_boardLimitsBezierPaths (self.boardLimitsBezierPaths_property)
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_drillSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_drillSegments (self.drillSegments_property)
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drillSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontComponentNameSegments (self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNamesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontComponentNamesBezierPaths (self.frontComponentNamesBezierPaths_property)
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNamesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValueSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontComponentValueSegments (self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValueSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValuesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontComponentValuesBezierPaths (self.frontComponentValuesBezierPaths_property)
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValuesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLayoutTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLayoutTextsBezierPaths (self.frontLayoutTextsBezierPaths_property)
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLayoutTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLayoutTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLayoutTextsSegments (self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLayoutTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendLinesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLegendLinesBezierPaths (self.frontLegendLinesBezierPaths_property)
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendLinesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendLinesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLegendLinesSegments (self.frontLegendLinesSegments_property)
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendLinesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendTextsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLegendTextsBezierPaths (self.frontLegendTextsBezierPaths_property)
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendTextsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendTextsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontLegendTextsSegments (self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendTextsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontPackagesBezierPaths (self.frontPackagesBezierPaths_property)
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontPackagesSegments (self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadArray (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontPadArray (self.frontPadArray_property)
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontPadsBezierPaths (self.frontPadsBezierPaths_property)
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTrackSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontTrackSegments (self.frontTrackSegments_property)
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTrackSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTracksBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_frontTracksBezierPaths (self.frontTracksBezierPaths_property)
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTracksBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_holesBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_holesBezierPaths (self.holesBezierPaths_property)
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holesBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_imageForInstances (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_imageForInstances (self.imageForInstances_property)
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.imageForInstances_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_imageForModel (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_imageForModel (self.imageForModel_property)
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.imageForModel_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceCount (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_instanceCount (self.instanceCount_property)
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_internalBoardsLimitsBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_internalBoardsLimitsBezierPaths (self.internalBoardsLimitsBezierPaths_property)
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.internalBoardsLimitsBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_internalBoardsLimitsSegments (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_internalBoardsLimitsSegments (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.internalBoardsLimitsSegments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelHeight (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelHeight (self.modelHeight_property)
    self.modelHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelHeight_property.setProp (inValue)
          }
        }
      }
    }
    self.modelHeight_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelHeight_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelHeightUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelHeightUnit (self.modelHeightUnit_property)
    self.modelHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.modelHeightUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelHeightUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelLimitWidth (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelLimitWidth (self.modelLimitWidth_property)
    self.modelLimitWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelLimitWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLimitWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelLimitWidth_property.setProp (inValue)
          }
        }
      }
    }
    self.modelLimitWidth_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelLimitWidth_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelLimitWidthUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelLimitWidthUnit (self.modelLimitWidthUnit_property)
    self.modelLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelLimitWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLimitWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelLimitWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.modelLimitWidthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelLimitWidthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelWidth (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelWidth (self.modelWidth_property)
    self.modelWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelWidth_property.setProp (inValue)
          }
        }
      }
    }
    self.modelWidth_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelWidth_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_modelWidthUnit (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_modelWidthUnit (self.modelWidthUnit_property)
    self.modelWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.modelWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.modelWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.modelWidthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.modelWidthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_name (self.name_property)
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.name_property.setProp (inValue)
          }
        }
      }
    }
    self.name_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.name_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaShapes (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_viaShapes (self.viaShapes_property)
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <MergerViaShapeArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaShapes_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_viasBezierPaths (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_viasBezierPaths (self.viasBezierPaths_property)
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPathArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viasBezierPaths_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoom (model : ReadOnlyArrayOf_BoardModel) {
    model.addEBObserverOf_zoom (self.zoom_property)
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoom_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoom_property.setProp (inValue)
          }
        }
      }
    }
    self.zoom_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.zoom_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

