//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyArrayOf_BoardModel
//--------------------------------------------------------------------------------------------------

class ReadOnlyArrayOf_BoardModel : EBReadOnlyAbstractArrayProperty <BoardModel> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModel>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardModel>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelWidth { // Stored property
        managedObject.modelWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelWidthUnit { // Stored property
        managedObject.modelWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelHeight { // Stored property
        managedObject.modelHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelHeightUnit { // Stored property
        managedObject.modelHeightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoom { // Stored property
        managedObject.zoom_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelVersion { // Stored property
        managedObject.modelVersion_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_ignoreModelVersionError { // Stored property
        managedObject.ignoreModelVersionError_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_layerConfiguration { // Stored property
        managedObject.layerConfiguration_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelLimitWidth { // Stored property
        managedObject.modelLimitWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelLimitWidthUnit { // Stored property
        managedObject.modelLimitWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_artworkName { // Stored property
        managedObject.artworkName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelData { // Stored property
        managedObject.modelData_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveVersionMessage { // Transient property
        managedObject.errorArchiveVersionMessage_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveLabelSize { // Transient property
        managedObject.errorArchiveLabelSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveLabelColor { // Transient property
        managedObject.errorArchiveLabelColor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveVersionMessageIsHidden { // Transient property
        managedObject.errorArchiveVersionMessageIsHidden_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendBoardImageRectangles { // Transient property
        managedObject.frontLegendBoardImageRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendBoardImageRectangles { // Transient property
        managedObject.backLegendBoardImageRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendQRCodeRectangles { // Transient property
        managedObject.frontLegendQRCodeRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendQRCodeRectangles { // Transient property
        managedObject.backLegendQRCodeRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_layerConfigurationString { // Transient property
        managedObject.layerConfigurationString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendLinesSegments { // Transient property
        managedObject.frontLegendLinesSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLinesSegments { // Transient property
        managedObject.backLegendLinesSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLinesBezierPaths { // Transient property
        managedObject.backLegendLinesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTextsSegments { // Transient property
        managedObject.frontLegendTextsSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTextsBezierPaths { // Transient property
        managedObject.frontLegendTextsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTextsSegments { // Transient property
        managedObject.frontLayoutTextsSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTextsBezierPaths { // Transient property
        managedObject.frontLayoutTextsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTextsSegments { // Transient property
        managedObject.backLegendTextsSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTextsBezierPaths { // Transient property
        managedObject.backLegendTextsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTextsSegments { // Transient property
        managedObject.backLayoutTextsSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTextsBezierPaths { // Transient property
        managedObject.backLayoutTextsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimitsSegments { // Transient property
        managedObject.internalBoardsLimitsSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimitsBezierPaths { // Transient property
        managedObject.internalBoardsLimitsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drillSegments { // Transient property
        managedObject.drillSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holesBezierPaths { // Transient property
        managedObject.holesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaShapes { // Transient property
        managedObject.viaShapes_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viasBezierPaths { // Transient property
        managedObject.viasBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPadArray { // Transient property
        managedObject.frontPadArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPadsBezierPaths { // Transient property
        managedObject.frontPadsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPadArray { // Transient property
        managedObject.backPadArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPadsBezierPaths { // Transient property
        managedObject.backPadsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPadArray { // Transient property
        managedObject.traversingPadArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPadsBezierPaths { // Transient property
        managedObject.traversingPadsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardLimitsBezierPaths { // Transient property
        managedObject.boardLimitsBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNameSegments { // Transient property
        managedObject.backComponentNameSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNamesBezierPaths { // Transient property
        managedObject.backComponentNamesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNameSegments { // Transient property
        managedObject.frontComponentNameSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNamesBezierPaths { // Transient property
        managedObject.frontComponentNamesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValueSegments { // Transient property
        managedObject.frontComponentValueSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValuesBezierPaths { // Transient property
        managedObject.frontComponentValuesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValueSegments { // Transient property
        managedObject.backComponentValueSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValuesBezierPaths { // Transient property
        managedObject.backComponentValuesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTrackSegments { // Transient property
        managedObject.backTrackSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTracksBezierPaths { // Transient property
        managedObject.backTracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTrackSegments { // Transient property
        managedObject.frontTrackSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTracksBezierPaths { // Transient property
        managedObject.frontTracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1TracksSegments { // Transient property
        managedObject.inner1TracksSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1TracksBezierPaths { // Transient property
        managedObject.inner1TracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2TracksSegments { // Transient property
        managedObject.inner2TracksSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2TracksBezierPaths { // Transient property
        managedObject.inner2TracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3TracksSegments { // Transient property
        managedObject.inner3TracksSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3TracksBezierPaths { // Transient property
        managedObject.inner3TracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4TracksSegments { // Transient property
        managedObject.inner4TracksSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4TracksBezierPaths { // Transient property
        managedObject.inner4TracksBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackagesSegments { // Transient property
        managedObject.frontPackagesSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackagesBezierPaths { // Transient property
        managedObject.frontPackagesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackagesSegments { // Transient property
        managedObject.backPackagesSegments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackagesBezierPaths { // Transient property
        managedObject.backPackagesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceCount { // Transient property
        managedObject.instanceCount_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendLinesBezierPaths { // Transient property
        managedObject.frontLegendLinesBezierPaths_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageForModel { // Transient property
        managedObject.imageForModel_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageForInstances { // Transient property
        managedObject.imageForInstances_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelWidth { // Stored property
        managedObject.modelWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelWidthUnit { // Stored property
        managedObject.modelWidthUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelHeight { // Stored property
        managedObject.modelHeight_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelHeightUnit { // Stored property
        managedObject.modelHeightUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoom { // Stored property
        managedObject.zoom_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelVersion { // Stored property
        managedObject.modelVersion_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_ignoreModelVersionError { // Stored property
        managedObject.ignoreModelVersionError_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_layerConfiguration { // Stored property
        managedObject.layerConfiguration_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelLimitWidth { // Stored property
        managedObject.modelLimitWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelLimitWidthUnit { // Stored property
        managedObject.modelLimitWidthUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_artworkName { // Stored property
        managedObject.artworkName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelData { // Stored property
        managedObject.modelData_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveVersionMessage { // Transient property
        managedObject.errorArchiveVersionMessage_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveLabelSize { // Transient property
        managedObject.errorArchiveLabelSize_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveLabelColor { // Transient property
        managedObject.errorArchiveLabelColor_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorArchiveVersionMessageIsHidden { // Transient property
        managedObject.errorArchiveVersionMessageIsHidden_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendBoardImageRectangles { // Transient property
        managedObject.frontLegendBoardImageRectangles_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendBoardImageRectangles { // Transient property
        managedObject.backLegendBoardImageRectangles_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendQRCodeRectangles { // Transient property
        managedObject.frontLegendQRCodeRectangles_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendQRCodeRectangles { // Transient property
        managedObject.backLegendQRCodeRectangles_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_layerConfigurationString { // Transient property
        managedObject.layerConfigurationString_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendLinesSegments { // Transient property
        managedObject.frontLegendLinesSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLinesSegments { // Transient property
        managedObject.backLegendLinesSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLinesBezierPaths { // Transient property
        managedObject.backLegendLinesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTextsSegments { // Transient property
        managedObject.frontLegendTextsSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTextsBezierPaths { // Transient property
        managedObject.frontLegendTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTextsSegments { // Transient property
        managedObject.frontLayoutTextsSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTextsBezierPaths { // Transient property
        managedObject.frontLayoutTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTextsSegments { // Transient property
        managedObject.backLegendTextsSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTextsBezierPaths { // Transient property
        managedObject.backLegendTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTextsSegments { // Transient property
        managedObject.backLayoutTextsSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTextsBezierPaths { // Transient property
        managedObject.backLayoutTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimitsSegments { // Transient property
        managedObject.internalBoardsLimitsSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimitsBezierPaths { // Transient property
        managedObject.internalBoardsLimitsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drillSegments { // Transient property
        managedObject.drillSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holesBezierPaths { // Transient property
        managedObject.holesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaShapes { // Transient property
        managedObject.viaShapes_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viasBezierPaths { // Transient property
        managedObject.viasBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPadArray { // Transient property
        managedObject.frontPadArray_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPadsBezierPaths { // Transient property
        managedObject.frontPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPadArray { // Transient property
        managedObject.backPadArray_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPadsBezierPaths { // Transient property
        managedObject.backPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPadArray { // Transient property
        managedObject.traversingPadArray_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPadsBezierPaths { // Transient property
        managedObject.traversingPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardLimitsBezierPaths { // Transient property
        managedObject.boardLimitsBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNameSegments { // Transient property
        managedObject.backComponentNameSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNamesBezierPaths { // Transient property
        managedObject.backComponentNamesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNameSegments { // Transient property
        managedObject.frontComponentNameSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNamesBezierPaths { // Transient property
        managedObject.frontComponentNamesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValueSegments { // Transient property
        managedObject.frontComponentValueSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValuesBezierPaths { // Transient property
        managedObject.frontComponentValuesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValueSegments { // Transient property
        managedObject.backComponentValueSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValuesBezierPaths { // Transient property
        managedObject.backComponentValuesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTrackSegments { // Transient property
        managedObject.backTrackSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTracksBezierPaths { // Transient property
        managedObject.backTracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTrackSegments { // Transient property
        managedObject.frontTrackSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTracksBezierPaths { // Transient property
        managedObject.frontTracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1TracksSegments { // Transient property
        managedObject.inner1TracksSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1TracksBezierPaths { // Transient property
        managedObject.inner1TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2TracksSegments { // Transient property
        managedObject.inner2TracksSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2TracksBezierPaths { // Transient property
        managedObject.inner2TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3TracksSegments { // Transient property
        managedObject.inner3TracksSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3TracksBezierPaths { // Transient property
        managedObject.inner3TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4TracksSegments { // Transient property
        managedObject.inner4TracksSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4TracksBezierPaths { // Transient property
        managedObject.inner4TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackagesSegments { // Transient property
        managedObject.frontPackagesSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackagesBezierPaths { // Transient property
        managedObject.frontPackagesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackagesSegments { // Transient property
        managedObject.backPackagesSegments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackagesBezierPaths { // Transient property
        managedObject.backPackagesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceCount { // Transient property
        managedObject.instanceCount_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendLinesBezierPaths { // Transient property
        managedObject.frontLegendLinesBezierPaths_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageForModel { // Transient property
        managedObject.imageForModel_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageForInstances { // Transient property
        managedObject.imageForInstances_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'name' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_name : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_name_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_name {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.name_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_name = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_name_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_name?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelWidth' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelWidth : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelWidth_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelWidth = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelWidth_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelWidth?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelWidthUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelWidthUnit : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelWidthUnit_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelWidthUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelWidthUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelWidthUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelWidthUnit_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelHeight' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelHeight : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelHeight_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelHeight {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelHeight_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelHeight = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelHeight_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelHeight?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelHeightUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelHeightUnit : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelHeightUnit_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelHeightUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelHeightUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelHeightUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelHeightUnit_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelHeightUnit?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'zoom' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_zoom : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_zoom_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_zoom {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.zoom_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_zoom = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_zoom_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_zoom?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelVersion' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelVersion : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelVersion_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelVersion {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelVersion_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelVersion = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelVersion_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelVersion?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'ignoreModelVersionError' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_ignoreModelVersionError : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_ignoreModelVersionError_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_ignoreModelVersionError {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.ignoreModelVersionError_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_ignoreModelVersionError = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_ignoreModelVersionError_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_ignoreModelVersionError?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'layerConfiguration' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_layerConfiguration : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_layerConfiguration_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_layerConfiguration {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.layerConfiguration_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_layerConfiguration = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_layerConfiguration_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_layerConfiguration?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelLimitWidth' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelLimitWidth : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelLimitWidth_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelLimitWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelLimitWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelLimitWidth = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelLimitWidth_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelLimitWidth?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelLimitWidthUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelLimitWidthUnit : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelLimitWidthUnit_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelLimitWidthUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelLimitWidthUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelLimitWidthUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelLimitWidthUnit_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelLimitWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'artworkName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_artworkName : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_artworkName_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_artworkName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.artworkName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_artworkName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_artworkName_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_artworkName?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelData' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_modelData : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelData_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelData {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelData_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelData = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_modelData_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_modelData?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'errorArchiveVersionMessage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_errorArchiveVersionMessage : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveVersionMessage_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_errorArchiveVersionMessage {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.errorArchiveVersionMessage_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_errorArchiveVersionMessage = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveVersionMessage_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_errorArchiveVersionMessage?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'errorArchiveLabelSize' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_errorArchiveLabelSize : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveLabelSize_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_errorArchiveLabelSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.errorArchiveLabelSize_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_errorArchiveLabelSize = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveLabelSize_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_errorArchiveLabelSize?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'errorArchiveLabelColor' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_errorArchiveLabelColor : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveLabelColor_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_errorArchiveLabelColor {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.errorArchiveLabelColor_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_errorArchiveLabelColor = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveLabelColor_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_errorArchiveLabelColor?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'errorArchiveVersionMessageIsHidden' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_errorArchiveVersionMessageIsHidden : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveVersionMessageIsHidden_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_errorArchiveVersionMessageIsHidden {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.errorArchiveVersionMessageIsHidden_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_errorArchiveVersionMessageIsHidden = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_errorArchiveVersionMessageIsHidden_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_errorArchiveVersionMessageIsHidden?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendBoardImageRectangles' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendBoardImageRectangles : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendBoardImageRectangles_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendBoardImageRectangles {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendBoardImageRectangles_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendBoardImageRectangles = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendBoardImageRectangles_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendBoardImageRectangles?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendBoardImageRectangles' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendBoardImageRectangles : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendBoardImageRectangles_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendBoardImageRectangles {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendBoardImageRectangles_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendBoardImageRectangles = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendBoardImageRectangles_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendBoardImageRectangles?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendQRCodeRectangles' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendQRCodeRectangles : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendQRCodeRectangles_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendQRCodeRectangles {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendQRCodeRectangles_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendQRCodeRectangles = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendQRCodeRectangles_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendQRCodeRectangles?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendQRCodeRectangles' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendQRCodeRectangles : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendQRCodeRectangles_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendQRCodeRectangles {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendQRCodeRectangles_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendQRCodeRectangles = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendQRCodeRectangles_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendQRCodeRectangles?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'layerConfigurationString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_layerConfigurationString : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_layerConfigurationString_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_layerConfigurationString {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.layerConfigurationString_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_layerConfigurationString = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_layerConfigurationString_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_layerConfigurationString?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendLinesSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendLinesSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendLinesSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendLinesSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendLinesSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendLinesSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendLinesSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendLinesSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendLinesSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendLinesSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendLinesSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendLinesSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendLinesSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendLinesSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendLinesSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendLinesSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendLinesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendLinesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendLinesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendLinesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendLinesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendLinesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendLinesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendLinesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendTextsSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendTextsSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendTextsSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendTextsSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendTextsSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendTextsSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendTextsSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendTextsSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendTextsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendTextsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendTextsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendTextsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendTextsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendTextsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLayoutTextsSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLayoutTextsSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLayoutTextsSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLayoutTextsSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLayoutTextsSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLayoutTextsSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLayoutTextsSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLayoutTextsSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLayoutTextsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLayoutTextsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLayoutTextsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLayoutTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLayoutTextsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLayoutTextsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLayoutTextsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendTextsSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendTextsSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendTextsSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendTextsSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendTextsSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendTextsSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendTextsSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendTextsSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLegendTextsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLegendTextsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendTextsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLegendTextsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLegendTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLegendTextsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLegendTextsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLegendTextsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLayoutTextsSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLayoutTextsSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLayoutTextsSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLayoutTextsSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLayoutTextsSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLayoutTextsSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLayoutTextsSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLayoutTextsSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backLayoutTextsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLayoutTextsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backLayoutTextsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backLayoutTextsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backLayoutTextsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backLayoutTextsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backLayoutTextsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'internalBoardsLimitsSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_internalBoardsLimitsSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_internalBoardsLimitsSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_internalBoardsLimitsSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.internalBoardsLimitsSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_internalBoardsLimitsSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_internalBoardsLimitsSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_internalBoardsLimitsSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'internalBoardsLimitsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_internalBoardsLimitsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_internalBoardsLimitsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_internalBoardsLimitsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.internalBoardsLimitsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_internalBoardsLimitsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_internalBoardsLimitsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_internalBoardsLimitsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'drillSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_drillSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_drillSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_drillSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.drillSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_drillSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_drillSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_drillSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'holesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_holesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_holesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_holesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.holesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_holesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_holesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_holesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'viaShapes' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_viaShapes : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_viaShapes_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_viaShapes {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.viaShapes_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_viaShapes = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_viaShapes_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_viaShapes?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'viasBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_viasBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_viasBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_viasBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.viasBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_viasBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_viasBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_viasBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontPadArray' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontPadArray : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPadArray_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontPadArray {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontPadArray_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontPadArray = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPadArray_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontPadArray?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontPadsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontPadsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPadsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontPadsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontPadsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPadsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontPadsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backPadArray' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backPadArray : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPadArray_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backPadArray {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backPadArray_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backPadArray = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPadArray_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backPadArray?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backPadsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backPadsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPadsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backPadsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backPadsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPadsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backPadsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'traversingPadArray' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_traversingPadArray : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_traversingPadArray_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_traversingPadArray {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.traversingPadArray_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_traversingPadArray = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_traversingPadArray_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_traversingPadArray?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'traversingPadsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_traversingPadsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_traversingPadsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_traversingPadsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.traversingPadsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_traversingPadsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_traversingPadsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_traversingPadsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardLimitsBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_boardLimitsBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardLimitsBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardLimitsBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardLimitsBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardLimitsBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardLimitsBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_boardLimitsBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backComponentNameSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backComponentNameSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentNameSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backComponentNameSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backComponentNameSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backComponentNameSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentNameSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backComponentNameSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backComponentNamesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backComponentNamesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentNamesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backComponentNamesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backComponentNamesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backComponentNamesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentNamesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backComponentNamesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontComponentNameSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontComponentNameSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentNameSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontComponentNameSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontComponentNameSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontComponentNameSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentNameSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontComponentNameSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontComponentNamesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentNamesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontComponentNamesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontComponentNamesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontComponentNamesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentNamesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontComponentNamesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontComponentValueSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontComponentValueSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentValueSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontComponentValueSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontComponentValueSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontComponentValueSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentValueSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontComponentValueSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontComponentValuesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentValuesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontComponentValuesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontComponentValuesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontComponentValuesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontComponentValuesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontComponentValuesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backComponentValueSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backComponentValueSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentValueSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backComponentValueSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backComponentValueSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backComponentValueSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentValueSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backComponentValueSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backComponentValuesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backComponentValuesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentValuesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backComponentValuesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backComponentValuesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backComponentValuesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backComponentValuesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backComponentValuesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backTrackSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backTrackSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backTrackSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backTrackSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backTrackSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backTrackSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backTrackSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backTrackSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backTracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backTracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backTracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backTracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backTracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backTracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backTracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backTracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontTrackSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontTrackSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontTrackSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontTrackSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontTrackSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontTrackSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontTrackSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontTrackSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontTracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontTracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontTracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontTracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontTracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontTracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontTracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontTracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner1TracksSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner1TracksSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner1TracksSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner1TracksSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner1TracksSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner1TracksSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner1TracksSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner1TracksSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner1TracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner1TracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner1TracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner1TracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner1TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner1TracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner1TracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner1TracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner2TracksSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner2TracksSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner2TracksSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner2TracksSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner2TracksSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner2TracksSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner2TracksSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner2TracksSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner2TracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner2TracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner2TracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner2TracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner2TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner2TracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner2TracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner2TracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner3TracksSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner3TracksSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner3TracksSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner3TracksSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner3TracksSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner3TracksSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner3TracksSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner3TracksSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner3TracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner3TracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner3TracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner3TracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner3TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner3TracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner3TracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner3TracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner4TracksSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner4TracksSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner4TracksSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner4TracksSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner4TracksSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner4TracksSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner4TracksSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner4TracksSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'inner4TracksBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_inner4TracksBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner4TracksBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_inner4TracksBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.inner4TracksBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_inner4TracksBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_inner4TracksBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_inner4TracksBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontPackagesSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontPackagesSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPackagesSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontPackagesSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontPackagesSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontPackagesSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPackagesSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontPackagesSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontPackagesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontPackagesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPackagesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontPackagesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontPackagesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontPackagesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontPackagesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontPackagesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backPackagesSegments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backPackagesSegments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPackagesSegments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backPackagesSegments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backPackagesSegments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backPackagesSegments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPackagesSegments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backPackagesSegments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'backPackagesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_backPackagesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPackagesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_backPackagesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.backPackagesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_backPackagesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_backPackagesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_backPackagesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'instanceCount' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_instanceCount : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_instanceCount_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_instanceCount {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.instanceCount_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_instanceCount = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_instanceCount_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_instanceCount?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_frontLegendLinesBezierPaths : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendLinesBezierPaths_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_frontLegendLinesBezierPaths {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.frontLegendLinesBezierPaths_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_frontLegendLinesBezierPaths = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_frontLegendLinesBezierPaths_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_frontLegendLinesBezierPaths?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'imageForModel' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_imageForModel : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_imageForModel_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_imageForModel {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.imageForModel_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_imageForModel = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_imageForModel_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_imageForModel?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'imageForInstances' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_imageForInstances : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_imageForInstances_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_imageForInstances {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.imageForInstances_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_imageForInstances = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_imageForInstances_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_imageForInstances?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    TransientArrayOf BoardModel
//--------------------------------------------------------------------------------------------------

final class TransientArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Sort
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mIsOrderedBefore : Optional < (_ left : BoardModel, _ right : BoardModel) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
//  private let mModelEvent = EBModelEvent ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/*  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  } */

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Data provider
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mDataProvider : ReadOnlyArrayOf_BoardModel? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BoardModel,
                        sortCallback inSortCallBack : Optional < (_ left : BoardModel, _ right : BoardModel) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/*  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  } */

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
    if !self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = true
      DispatchQueue.main.async {
        self.computeModelArray ()
      }
    }
//    self.mModelArrayShouldBeComputed = true
//    self.mModelEvent.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <BoardModel>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < [BoardModel] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.propval.values)
    case .multiple :
      return .multiple
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var propval : EBReferenceArray <BoardModel> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    TransientArrayOfSuperOf BoardModel
//--------------------------------------------------------------------------------------------------

// TransientArrayOfSuperOf_BoardModel is useless.

//--------------------------------------------------------------------------------------------------
//    To many relationship read write: BoardModel
//--------------------------------------------------------------------------------------------------

class ReadWriteArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ value :  EBReferenceArray <BoardModel>) { } // Abstract method

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    Proxy: ProxyArrayOf_BoardModel
//--------------------------------------------------------------------------------------------------

// ProxyArrayOf_BoardModel is useless.

//--------------------------------------------------------------------------------------------------
//    Stored Array: BoardModel
//--------------------------------------------------------------------------------------------------

class StoredArrayOf_BoardModel : ReadWriteArrayOf_BoardModel, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol, Sendable {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardModel> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardModel)
      }
      self.setProp (objectArray)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <BoardModel> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! BoardModel)
    }
    self.setProp (objectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardModel) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardModel) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : EBReferenceArray <BoardModel>

    init (_ inOldValue : EBReferenceArray <BoardModel>) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//  @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
//    self.setProp (inObject.mOldValue)
//  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardModel>) {
  //--- Register old value in undo manager
  //   self.undoManager?.registerUndo (  // For Swift 6
  //    withTarget: self,
  //    selector: #selector (Self.myPerformUndo (_:)),
  //    object: MyPrivateUndoer (inOldValue)
  //  )
    self.undoManager?.registerUndo (withTarget: self) { selfTarget in
      MainActor.assumeIsolated { selfTarget.setProp (inOldValue) }
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Update observers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModel>,
                                 addedSet inAddedSet : EBReferenceSet <BoardModel>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final var selection : EBSelection < [BoardModel] > {
    return .single (self.mInternalArrayValue.values)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func setProp (_ inValue : EBReferenceArray <BoardModel>) {
    self.mInternalArrayValue = inValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final override var propval : EBReferenceArray <BoardModel> {
    return self.mInternalArrayValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func remove (_ inObject : BoardModel) {
    if let idx = self.mInternalArrayValue.firstIndex (of: inObject) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func add (_ inObject : BoardModel) {
    if !self.internalSetValue.contains (inObject) {
      self.mInternalArrayValue.append (inObject)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak final var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    Preferences array: BoardModel
//--------------------------------------------------------------------------------------------------

// PreferencesArrayOf_BoardModel is useless.

//--------------------------------------------------------------------------------------------------

