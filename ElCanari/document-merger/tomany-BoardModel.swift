//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModel : ReadOnlyAbstractArrayProperty <BoardModel> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModel>,
                                          addedSet inAddedSet : EBReferenceSet <BoardModel>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_name_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelLimitWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_artworkName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_internalBoardsLimitsSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_internalBoardsLimitsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_drillSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_holesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_viaShapes_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_viasBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontPadArray_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backPadArray_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimits_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backTrackSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontTrackSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backPackagesSegments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_instanceCount_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_imageForModel_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_imageForInstances_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_name_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelHeightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelLimitWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_artworkName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLegendLinesSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLegendTextsSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_internalBoardsLimitsSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_internalBoardsLimitsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_drillSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_holesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_viaShapes_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_viasBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontPadArray_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backPadArray_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backPadsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimits_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backComponentNameSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontComponentNameSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontComponentValueSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backComponentValueSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backTrackSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backTracksBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontTrackSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontPackagesSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backPackagesSegments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_instanceCount_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_imageForModel_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_imageForInstances_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_name.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_name.apply { (_ observer : EBEvent) in
          managedObject.name_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_name.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  private final var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelWidth.apply { (_ observer : EBEvent) in
          managedObject.modelWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.modelWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  private final var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeight_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelHeight.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelHeight.apply { (_ observer : EBEvent) in
          managedObject.modelHeight_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeight_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelHeightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelHeightUnit.apply { (_ observer : EBEvent) in
          managedObject.modelHeightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_zoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
          managedObject.zoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidth' stored property
  //····················································································································

  private final var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelLimitWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelLimitWidth.apply { (_ observer : EBEvent) in
          managedObject.modelLimitWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelLimitWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelLimitWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_modelLimitWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_modelLimitWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.modelLimitWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_modelLimitWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private final var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    if !self.mObserversOf_artworkName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
          managedObject.artworkName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesSegments' transient property
  //····················································································································

  private final var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLegendLinesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLegendLinesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendLinesSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendLinesSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesSegments' transient property
  //····················································································································

  private final var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLegendLinesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLegendLinesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendLinesSegments.apply { (_ observer : EBEvent) in
        managedObject.backLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendLinesSegments.apply { (_ observer : EBEvent) in
        managedObject.backLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendLinesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendLinesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private final var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private final var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLayoutTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLayoutTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLayoutTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLayoutTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private final var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.backLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.backLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLegendTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private final var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLayoutTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.backLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLayoutTextsSegments.apply { (_ observer : EBEvent) in
        managedObject.backLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLayoutTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backLayoutTextsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsSegments' transient property
  //····················································································································

  private final var mObserversOf_internalBoardsLimitsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_internalBoardsLimitsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_internalBoardsLimitsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_internalBoardsLimitsSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_internalBoardsLimitsSegments.apply { (_ observer : EBEvent) in
        managedObject.internalBoardsLimitsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_internalBoardsLimitsSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_internalBoardsLimitsSegments.apply { (_ observer : EBEvent) in
        managedObject.internalBoardsLimitsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_internalBoardsLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_internalBoardsLimitsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_internalBoardsLimitsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_internalBoardsLimitsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_internalBoardsLimitsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.internalBoardsLimitsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_internalBoardsLimitsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_internalBoardsLimitsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.internalBoardsLimitsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillSegments' transient property
  //····················································································································

  private final var mObserversOf_drillSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_drillSegments.apply { (_ observer : EBEvent) in
        managedObject.drillSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_drillSegments.apply { (_ observer : EBEvent) in
        managedObject.drillSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_holesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.holesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_holesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.holesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private final var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaShapes.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaShapes.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaShapes.apply { (_ observer : EBEvent) in
        managedObject.viaShapes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaShapes.apply { (_ observer : EBEvent) in
        managedObject.viaShapes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viasBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viasBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_viasBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.viasBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_viasBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.viasBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadArray' transient property
  //····················································································································

  private final var mObserversOf_frontPadArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontPadArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontPadArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadArray_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPadArray.apply { (_ observer : EBEvent) in
        managedObject.frontPadArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadArray_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPadArray.apply { (_ observer : EBEvent) in
        managedObject.frontPadArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontPadsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontPadsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPadsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPadsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadArray' transient property
  //····················································································································

  private final var mObserversOf_backPadArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backPadArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backPadArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadArray_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPadArray.apply { (_ observer : EBEvent) in
        managedObject.backPadArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadArray_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPadArray.apply { (_ observer : EBEvent) in
        managedObject.backPadArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backPadsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backPadsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPadsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPadsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private final var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimits.apply { (_ observer : EBEvent) in
        managedObject.boardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimits.apply { (_ observer : EBEvent) in
        managedObject.boardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitsBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private final var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backComponentNameSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backComponentNameSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentNameSegments.apply { (_ observer : EBEvent) in
        managedObject.backComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentNameSegments.apply { (_ observer : EBEvent) in
        managedObject.backComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentNamesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentNamesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private final var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentNameSegments.apply { (_ observer : EBEvent) in
        managedObject.frontComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentNameSegments.apply { (_ observer : EBEvent) in
        managedObject.frontComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentNamesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentNamesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private final var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentValueSegments.apply { (_ observer : EBEvent) in
        managedObject.frontComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentValueSegments.apply { (_ observer : EBEvent) in
        managedObject.frontComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentValuesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontComponentValuesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private final var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backComponentValueSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backComponentValueSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentValueSegments.apply { (_ observer : EBEvent) in
        managedObject.backComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentValueSegments.apply { (_ observer : EBEvent) in
        managedObject.backComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentValuesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backComponentValuesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private final var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backTrackSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backTrackSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backTrackSegments.apply { (_ observer : EBEvent) in
        managedObject.backTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backTrackSegments.apply { (_ observer : EBEvent) in
        managedObject.backTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backTracksBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backTracksBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backTracksBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backTracksBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private final var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontTrackSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontTrackSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontTrackSegments.apply { (_ observer : EBEvent) in
        managedObject.frontTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontTrackSegments.apply { (_ observer : EBEvent) in
        managedObject.frontTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontTracksBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontTracksBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontTracksBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontTracksBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private final var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontPackagesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontPackagesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPackagesSegments.apply { (_ observer : EBEvent) in
        managedObject.frontPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPackagesSegments.apply { (_ observer : EBEvent) in
        managedObject.frontPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPackagesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontPackagesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private final var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backPackagesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backPackagesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPackagesSegments.apply { (_ observer : EBEvent) in
        managedObject.backPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPackagesSegments.apply { (_ observer : EBEvent) in
        managedObject.backPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backPackagesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backPackagesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPackagesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_backPackagesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.backPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private final var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_instanceCount.apply { (_ observer : EBEvent) in
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_instanceCount.apply { (_ observer : EBEvent) in
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  private final var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendLinesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_frontLegendLinesBezierPaths.apply { (_ observer : EBEvent) in
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageForModel' transient property
  //····················································································································

  private final var mObserversOf_imageForModel = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageForModel.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForModel_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageForModel.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForModel_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageForModel_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageForModel.apply { (_ observer : EBEvent) in
        managedObject.imageForModel_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageForModel_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageForModel.apply { (_ observer : EBEvent) in
        managedObject.imageForModel_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageForInstances' transient property
  //····················································································································

  private final var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageForInstances.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageForInstances.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageForInstances_toElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageForInstances.apply { (_ observer : EBEvent) in
        managedObject.imageForInstances_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageForInstances_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModel>) {
    for managedObject in inSet.values {
      self.mObserversOf_imageForInstances.apply { (_ observer : EBEvent) in
        managedObject.imageForInstances_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : BoardModel, _ right : BoardModel) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_BoardModel? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BoardModel,
                        sortCallback inSortCallBack : Optional < (_ left : BoardModel, _ right : BoardModel) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray  ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray  <BoardModel>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray  ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray  (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray  (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray  ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray  ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardModel] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <BoardModel> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardModel <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardModel {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray  <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray  ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray  (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray  ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray  ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray  <BoardModel> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardModel {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardModel] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <BoardModel> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  //····················································································································

  func setProp (_ value :  EBReferenceArray  <BoardModel>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_BoardModel : ReadWriteArrayOf_BoardModel {

  //····················································································································

  private var mModel : ReadWriteArrayOf_BoardModel? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_BoardModel?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray  <BoardModel>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray  ()
      case .single (let v) :
        newModelArray = EBReferenceArray  <BoardModel> (v)
      case .multiple :
        newModelArray = EBReferenceArray  ()
      }
    }else{
      newModelArray = EBReferenceArray  ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray  <BoardModel>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [BoardModel] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <BoardModel> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray  ()
      case .single (let v) :
        return EBReferenceArray  (v)
      }
    }else{
      return EBReferenceArray  ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardModel : ReadWriteArrayOf_BoardModel, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardModel) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardModel) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  final var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray  <BoardModel>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModel>,
                                 addedSet inAddedSet : EBReferenceSet <BoardModel>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardModel] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray  <BoardModel>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray  <BoardModel> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardModel) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardModel) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_BoardModel : ReadWriteArrayOf_BoardModel {

  //····················································································································

  override var selection : EBSelection < [BoardModel] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray  <BoardModel>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray  <BoardModel> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : BoardModel) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_BoardModel : StoredArrayOf_BoardModel {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray  <BoardModel> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "BoardModel") as? BoardModel {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_name (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelHeightUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_zoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelLimitWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_modelLimitWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_artworkName (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

