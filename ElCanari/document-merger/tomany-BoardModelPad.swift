//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelPad : ReadOnlyAbstractArrayProperty <BoardModelPad> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModelPad>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardModelPad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.y_property.stopsBeingObserved (by: self.mObserversOf_y) // Stored property
      managedObject.width_property.stopsBeingObserved (by: self.mObserversOf_width) // Stored property
      managedObject.height_property.stopsBeingObserved (by: self.mObserversOf_height) // Stored property
      managedObject.shape_property.stopsBeingObserved (by: self.mObserversOf_shape) // Stored property
      managedObject.rotation_property.stopsBeingObserved (by: self.mObserversOf_rotation) // Stored property
      managedObject.x_property.stopsBeingObserved (by: self.mObserversOf_x) // Stored property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.y_property.startsToBeObserved (by: self.mObserversOf_y) // Stored property
      managedObject.width_property.startsToBeObserved (by: self.mObserversOf_width) // Stored property
      managedObject.height_property.startsToBeObserved (by: self.mObserversOf_height) // Stored property
      managedObject.shape_property.startsToBeObserved (by: self.mObserversOf_shape) // Stored property
      managedObject.rotation_property.startsToBeObserved (by: self.mObserversOf_rotation) // Stored property
      managedObject.x_property.startsToBeObserved (by: self.mObserversOf_x) // Stored property
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_y.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_y.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_y_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.y_property.startsToBeObserved (by: self.mObserversOf_y)
    }*/
    /* if !self.mObserversOf_y.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_y.values () {
          if let observer = entry.possibleObserver {
            managedObject.y_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_y.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_y_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.y_property.stopsBeingObserved (by: self.mObserversOf_y)
    }
    for entry in self.mObserversOf_y.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.y_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_y.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_width_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_width.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_width_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_width.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_width_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.width_property.startsToBeObserved (by: self.mObserversOf_width)
    }*/
    /* if !self.mObserversOf_width.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_width.values () {
          if let observer = entry.possibleObserver {
            managedObject.width_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_width.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_width_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.width_property.stopsBeingObserved (by: self.mObserversOf_width)
    }
    for entry in self.mObserversOf_width.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.width_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_width.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_height_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_height.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_height_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_height.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_height_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.height_property.startsToBeObserved (by: self.mObserversOf_height)
    }*/
    /* if !self.mObserversOf_height.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_height.values () {
          if let observer = entry.possibleObserver {
            managedObject.height_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_height.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_height_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.height_property.stopsBeingObserved (by: self.mObserversOf_height)
    }
    for entry in self.mObserversOf_height.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.height_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_height.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'shape' stored property
  //····················································································································

  private final var mObserversOf_shape = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_shape_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_shape.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shape_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_shape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_shape.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shape_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_shape_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.shape_property.startsToBeObserved (by: self.mObserversOf_shape)
    }*/
    /* if !self.mObserversOf_shape.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_shape.values () {
          if let observer = entry.possibleObserver {
            managedObject.shape_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_shape.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_shape_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.shape_property.stopsBeingObserved (by: self.mObserversOf_shape)
    }
    for entry in self.mObserversOf_shape.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.shape_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_shape.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'rotation' stored property
  //····················································································································

  private final var mObserversOf_rotation = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_rotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_rotation.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rotation_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_rotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_rotation.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rotation_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_rotation_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.rotation_property.startsToBeObserved (by: self.mObserversOf_rotation)
    }*/
    /* if !self.mObserversOf_rotation.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_rotation.values () {
          if let observer = entry.possibleObserver {
            managedObject.rotation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_rotation.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_rotation_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.rotation_property.stopsBeingObserved (by: self.mObserversOf_rotation)
    }
    for entry in self.mObserversOf_rotation.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.rotation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_rotation.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_x_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_x.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_x_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_x.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_x_toElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    /* for managedObject in inSet.values {
      managedObject.x_property.startsToBeObserved (by: self.mObserversOf_x)
    }*/
    /* if !self.mObserversOf_x.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_x.values () {
          if let observer = entry.possibleObserver {
            managedObject.x_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_x.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_x_fromElementsOfSet (_ inSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inSet.values {
      managedObject.x_property.stopsBeingObserved (by: self.mObserversOf_x)
    }
    for entry in self.mObserversOf_x.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.x_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_x.triggerPacking ()
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardModelPad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_BoardModelPad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardModelPad : ReadOnlyArrayOf_BoardModelPad {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardModelPad>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardModelPad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardModelPad : ReadWriteArrayOf_BoardModelPad, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardModelPad> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardModelPad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BoardModelPad> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BoardModelPad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardModelPad>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardModelPad>,
                                 addedSet inAddedSet : EBReferenceSet <BoardModelPad>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardModelPad] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardModelPad>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardModelPad> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardModelPad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardModelPad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardModelPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardModelPad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

