//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerBoardInstance : EBReadOnlyAbstractArrayProperty <MergerBoardInstance> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <MergerBoardInstance>,                            
                                 addedSet inAddedSet : EBReferenceSet <MergerBoardInstance>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceRotation { // Stored property
        managedObject.instanceRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceRect { // Transient property
        managedObject.instanceRect_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelName { // Transient property
        managedObject.modelName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardLimitWidth { // Transient property
        managedObject.boardLimitWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceRotation { // Stored property
        managedObject.instanceRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_instanceRect { // Transient property
        managedObject.instanceRect_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_modelName { // Transient property
        managedObject.modelName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardLimitWidth { // Transient property
        managedObject.boardLimitWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_x = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_y = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'instanceRotation' stored property
  //····················································································································

  private final var mObserversOf_instanceRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_instanceRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_instanceRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.instanceRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_instanceRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_instanceRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_instanceRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'instanceRect' transient property
  //····················································································································

  private final var mObserversOf_instanceRect : EBObservedObserver? = nil

  //····················································································································

  final func toMany_instanceRect_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_instanceRect {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.instanceRect_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_instanceRect = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_instanceRect_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_instanceRect?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'modelName' transient property
  //····················································································································

  private final var mObserversOf_modelName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_modelName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_modelName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.modelName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_modelName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_modelName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_modelName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' transient property
  //····················································································································

  private final var mObserversOf_boardLimitWidth : EBObservedObserver? = nil

  //····················································································································

  final func toMany_boardLimitWidth_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardLimitWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardLimitWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardLimitWidth = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_boardLimitWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardLimitWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_MergerBoardInstance is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_MergerBoardInstance is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MergerBoardInstance : ReadOnlyArrayOf_MergerBoardInstance {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <MergerBoardInstance>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_MergerBoardInstance is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_MergerBoardInstance : ReadWriteArrayOf_MergerBoardInstance, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <MergerBoardInstance> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! MergerBoardInstance)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <MergerBoardInstance> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! MergerBoardInstance)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerBoardInstance) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerBoardInstance) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerBoardInstance) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : MergerBoardInstance) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <MergerBoardInstance>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <MergerBoardInstance>,
                                 addedSet inAddedSet : EBReferenceSet <MergerBoardInstance>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [MergerBoardInstance] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <MergerBoardInstance>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <MergerBoardInstance> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : MergerBoardInstance) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : MergerBoardInstance) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_MergerBoardInstance is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

