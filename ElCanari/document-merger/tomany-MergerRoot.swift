//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerRoot : ReadOnlyAbstractArrayProperty <MergerRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <MergerRoot>,
                                          addedSet inAddedSet : EBReferenceSet <MergerRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_automaticBoardSize_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardManualWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardManualHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_overlapingArrangment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardLimitWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_arrowMagnitude_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPDFBoardBackgroundColor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mArtworkName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mArtworkVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardRect_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardDisplayRect_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardWidth_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardHeight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_fileGenerationParameterArray_fromElementsOfSet (inAddedSet) // ToMany proxy
  //--- Add observers to added objects
    self.addEBObserversOf_selectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_automaticBoardSize_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardManualWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardManualHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardHeightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_overlapingArrangment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedBoardXUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedBoardYUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardLimitWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_arrowMagnitude_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPDFBoardBackgroundColor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mArtworkName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mArtworkVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardRect_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardDisplayRect_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardWidth_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardHeight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_fileGenerationParameterArray_toElementsOfSet (inAddedSet) // ToMany proxy
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private final var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_selectedPageIndex.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
          managedObject.selectedPageIndex_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_zoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
          managedObject.zoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  private final var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_automaticBoardSize_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_automaticBoardSize.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
          managedObject.automaticBoardSize_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_automaticBoardSize_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.automaticBoardSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  private final var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualWidth_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardManualWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
          managedObject.boardManualWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualWidth_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardManualWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  private final var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualHeight_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardManualHeight.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
          managedObject.boardManualHeight_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualHeight_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardManualHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.boardWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardHeightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
          managedObject.boardHeightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private final var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_overlapingArrangment.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
          managedObject.overlapingArrangment_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  private final var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardXUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_selectedBoardXUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
          managedObject.selectedBoardXUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.selectedBoardXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  private final var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardYUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_selectedBoardYUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
          managedObject.selectedBoardYUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.selectedBoardYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private final var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardLimitWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
          managedObject.boardLimitWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_boardLimitWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  private final var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitude_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_arrowMagnitude.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
          managedObject.arrowMagnitude_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitude_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.arrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  private final var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_arrowMagnitudeUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
          managedObject.arrowMagnitudeUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  private final var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_shiftArrowMagnitude.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
          managedObject.shiftArrowMagnitude_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  private final var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_shiftArrowMagnitudeUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
          managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  private final var mObserversOf_mPDFBoardBackgroundColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPDFBoardBackgroundColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPDFBoardBackgroundColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPDFBoardBackgroundColor_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_mPDFBoardBackgroundColor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPDFBoardBackgroundColor.apply { (_ observer : EBEvent) in
          managedObject.mPDFBoardBackgroundColor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPDFBoardBackgroundColor_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_mPDFBoardBackgroundColor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPDFBoardBackgroundColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  private final var mObserversOf_mArtworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mArtworkName_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_mArtworkName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
          managedObject.mArtworkName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mArtworkName_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mArtworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

  private final var mObserversOf_mArtworkVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mArtworkVersion_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    if !self.mObserversOf_mArtworkVersion.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mArtworkVersion.apply { (_ observer : EBEvent) in
          managedObject.mArtworkVersion_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mArtworkVersion_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_mArtworkVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mArtworkVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileGenerationParameterArray' toMany proxy
  //····················································································································

  private final var mObserversOf_fileGenerationParameterArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_fileGenerationParameterArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileGenerationParameterArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_fileGenerationParameterArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileGenerationParameterArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileGenerationParameterArray_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_fileGenerationParameterArray.apply { (_ observer : EBEvent) in
        managedObject.fileGenerationParameterArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileGenerationParameterArray_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_fileGenerationParameterArray.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.fileGenerationParameterArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' proxy property
  //····················································································································

  private final var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTW_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' proxy property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' proxy property
  //····················································································································

  private final var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' proxy property
  //····················································································································

  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private final var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private final var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardRect.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardRect.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private final var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardDisplayRect_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardDisplayRect_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private final var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private final var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private final var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : MergerRoot, _ right : MergerRoot) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_MergerRoot,
                        sortCallback inSortCallBack : Optional < (_ left : MergerRoot, _ right : MergerRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <MergerRoot>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [MergerRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <MergerRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_MergerRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <MergerRoot> ()
      for superObject in newModelArray.values {
        if let object = superObject as? MergerRoot {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [MergerRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <MergerRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <MergerRoot>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <MergerRoot>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <MergerRoot> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <MergerRoot>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [MergerRoot] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <MergerRoot> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  final var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <MergerRoot>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <MergerRoot>,
                                 addedSet inAddedSet : EBReferenceSet <MergerRoot>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [MergerRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <MergerRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <MergerRoot> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : MergerRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : MergerRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot {

  //····················································································································

  override var selection : EBSelection < [MergerRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <MergerRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <MergerRoot> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : MergerRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_MergerRoot : StoredArrayOf_MergerRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <MergerRoot> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "MergerRoot") as? MergerRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_selectedPageIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_zoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_automaticBoardSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardManualWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardManualHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardHeightUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_overlapingArrangment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_selectedBoardXUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_selectedBoardYUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardLimitWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_boardLimitWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_arrowMagnitude (self.mObserverForWritingPreferences)
    self.addEBObserverOf_arrowMagnitudeUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_shiftArrowMagnitude (self.mObserverForWritingPreferences)
    self.addEBObserverOf_shiftArrowMagnitudeUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPDFBoardBackgroundColor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mArtworkName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mArtworkVersion (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

