//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BoardModel : ReadOnlyAbstractObjectProperty <BoardModel> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.name_property.stopsBeingObserved (by: self.name_property) // Stored property
      oldValue.modelWidth_property.stopsBeingObserved (by: self.modelWidth_property) // Stored property
      oldValue.modelWidthUnit_property.stopsBeingObserved (by: self.modelWidthUnit_property) // Stored property
      oldValue.modelHeight_property.stopsBeingObserved (by: self.modelHeight_property) // Stored property
      oldValue.modelHeightUnit_property.stopsBeingObserved (by: self.modelHeightUnit_property) // Stored property
      oldValue.zoom_property.stopsBeingObserved (by: self.zoom_property) // Stored property
      oldValue.layerConfiguration_property.stopsBeingObserved (by: self.layerConfiguration_property) // Stored property
      oldValue.modelLimitWidth_property.stopsBeingObserved (by: self.modelLimitWidth_property) // Stored property
      oldValue.modelLimitWidthUnit_property.stopsBeingObserved (by: self.modelLimitWidthUnit_property) // Stored property
      oldValue.artworkName_property.stopsBeingObserved (by: self.artworkName_property) // Stored property
      oldValue.layerConfigurationString_property.stopsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      oldValue.frontLegendLinesSegments_property.stopsBeingObserved (by: self.frontLegendLinesSegments_property) // Transient property
      oldValue.backLegendLinesSegments_property.stopsBeingObserved (by: self.backLegendLinesSegments_property) // Transient property
      oldValue.backLegendLinesBezierPaths_property.stopsBeingObserved (by: self.backLegendLinesBezierPaths_property) // Transient property
      oldValue.frontLegendTextsSegments_property.stopsBeingObserved (by: self.frontLegendTextsSegments_property) // Transient property
      oldValue.frontLegendTextsBezierPaths_property.stopsBeingObserved (by: self.frontLegendTextsBezierPaths_property) // Transient property
      oldValue.frontLayoutTextsSegments_property.stopsBeingObserved (by: self.frontLayoutTextsSegments_property) // Transient property
      oldValue.frontLayoutTextsBezierPaths_property.stopsBeingObserved (by: self.frontLayoutTextsBezierPaths_property) // Transient property
      oldValue.backLegendTextsSegments_property.stopsBeingObserved (by: self.backLegendTextsSegments_property) // Transient property
      oldValue.backLegendTextsBezierPaths_property.stopsBeingObserved (by: self.backLegendTextsBezierPaths_property) // Transient property
      oldValue.backLayoutTextsSegments_property.stopsBeingObserved (by: self.backLayoutTextsSegments_property) // Transient property
      oldValue.backLayoutTextsBezierPaths_property.stopsBeingObserved (by: self.backLayoutTextsBezierPaths_property) // Transient property
      oldValue.internalBoardsLimitsSegments_property.stopsBeingObserved (by: self.internalBoardsLimitsSegments_property) // Transient property
      oldValue.internalBoardsLimitsBezierPaths_property.stopsBeingObserved (by: self.internalBoardsLimitsBezierPaths_property) // Transient property
      oldValue.drillSegments_property.stopsBeingObserved (by: self.drillSegments_property) // Transient property
      oldValue.holesBezierPaths_property.stopsBeingObserved (by: self.holesBezierPaths_property) // Transient property
      oldValue.viaShapes_property.stopsBeingObserved (by: self.viaShapes_property) // Transient property
      oldValue.viasBezierPaths_property.stopsBeingObserved (by: self.viasBezierPaths_property) // Transient property
      oldValue.frontPadArray_property.stopsBeingObserved (by: self.frontPadArray_property) // Transient property
      oldValue.frontPadsBezierPaths_property.stopsBeingObserved (by: self.frontPadsBezierPaths_property) // Transient property
      oldValue.backPadArray_property.stopsBeingObserved (by: self.backPadArray_property) // Transient property
      oldValue.backPadsBezierPaths_property.stopsBeingObserved (by: self.backPadsBezierPaths_property) // Transient property
      oldValue.traversingPadArray_property.stopsBeingObserved (by: self.traversingPadArray_property) // Transient property
      oldValue.traversingPadsBezierPaths_property.stopsBeingObserved (by: self.traversingPadsBezierPaths_property) // Transient property
      oldValue.boardLimitsBezierPaths_property.stopsBeingObserved (by: self.boardLimitsBezierPaths_property) // Transient property
      oldValue.backComponentNameSegments_property.stopsBeingObserved (by: self.backComponentNameSegments_property) // Transient property
      oldValue.backComponentNamesBezierPaths_property.stopsBeingObserved (by: self.backComponentNamesBezierPaths_property) // Transient property
      oldValue.frontComponentNameSegments_property.stopsBeingObserved (by: self.frontComponentNameSegments_property) // Transient property
      oldValue.frontComponentNamesBezierPaths_property.stopsBeingObserved (by: self.frontComponentNamesBezierPaths_property) // Transient property
      oldValue.frontComponentValueSegments_property.stopsBeingObserved (by: self.frontComponentValueSegments_property) // Transient property
      oldValue.frontComponentValuesBezierPaths_property.stopsBeingObserved (by: self.frontComponentValuesBezierPaths_property) // Transient property
      oldValue.backComponentValueSegments_property.stopsBeingObserved (by: self.backComponentValueSegments_property) // Transient property
      oldValue.backComponentValuesBezierPaths_property.stopsBeingObserved (by: self.backComponentValuesBezierPaths_property) // Transient property
      oldValue.backTrackSegments_property.stopsBeingObserved (by: self.backTrackSegments_property) // Transient property
      oldValue.backTracksBezierPaths_property.stopsBeingObserved (by: self.backTracksBezierPaths_property) // Transient property
      oldValue.frontTrackSegments_property.stopsBeingObserved (by: self.frontTrackSegments_property) // Transient property
      oldValue.frontTracksBezierPaths_property.stopsBeingObserved (by: self.frontTracksBezierPaths_property) // Transient property
      oldValue.inner1TracksSegments_property.stopsBeingObserved (by: self.inner1TracksSegments_property) // Transient property
      oldValue.inner1TracksBezierPaths_property.stopsBeingObserved (by: self.inner1TracksBezierPaths_property) // Transient property
      oldValue.inner2TracksSegments_property.stopsBeingObserved (by: self.inner2TracksSegments_property) // Transient property
      oldValue.inner2TracksBezierPaths_property.stopsBeingObserved (by: self.inner2TracksBezierPaths_property) // Transient property
      oldValue.inner3TracksSegments_property.stopsBeingObserved (by: self.inner3TracksSegments_property) // Transient property
      oldValue.inner3TracksBezierPaths_property.stopsBeingObserved (by: self.inner3TracksBezierPaths_property) // Transient property
      oldValue.inner4TracksSegments_property.stopsBeingObserved (by: self.inner4TracksSegments_property) // Transient property
      oldValue.inner4TracksBezierPaths_property.stopsBeingObserved (by: self.inner4TracksBezierPaths_property) // Transient property
      oldValue.frontPackagesSegments_property.stopsBeingObserved (by: self.frontPackagesSegments_property) // Transient property
      oldValue.frontPackagesBezierPaths_property.stopsBeingObserved (by: self.frontPackagesBezierPaths_property) // Transient property
      oldValue.backPackagesSegments_property.stopsBeingObserved (by: self.backPackagesSegments_property) // Transient property
      oldValue.backPackagesBezierPaths_property.stopsBeingObserved (by: self.backPackagesBezierPaths_property) // Transient property
      oldValue.instanceCount_property.stopsBeingObserved (by: self.instanceCount_property) // Transient property
      oldValue.frontLegendLinesBezierPaths_property.stopsBeingObserved (by: self.frontLegendLinesBezierPaths_property) // Transient property
      oldValue.imageForModel_property.stopsBeingObserved (by: self.imageForModel_property) // Transient property
      oldValue.imageForInstances_property.stopsBeingObserved (by: self.imageForInstances_property) // Transient property
      if let relay = self.mObserversOf_frontLegendLines { // to Many
        oldValue.frontLegendLines_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLines { // to Many
        oldValue.backLegendLines_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTexts { // to Many
        oldValue.frontLegendTexts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTexts { // to Many
        oldValue.frontLayoutTexts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTexts { // to Many
        oldValue.backLegendTexts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTexts { // to Many
        oldValue.backLayoutTexts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimits { // to Many
        oldValue.internalBoardsLimits_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_drills { // to Many
        oldValue.drills_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_vias { // to Many
        oldValue.vias_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPads { // to Many
        oldValue.frontPads_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPads { // to Many
        oldValue.backPads_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPads { // to Many
        oldValue.traversingPads_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNames { // to Many
        oldValue.backComponentNames_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNames { // to Many
        oldValue.frontComponentNames_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValues { // to Many
        oldValue.frontComponentValues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValues { // to Many
        oldValue.backComponentValues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTracks { // to Many
        oldValue.backTracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTracks { // to Many
        oldValue.frontTracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1Tracks { // to Many
        oldValue.inner1Tracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2Tracks { // to Many
        oldValue.inner2Tracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3Tracks { // to Many
        oldValue.inner3Tracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4Tracks { // to Many
        oldValue.inner4Tracks_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackages { // to Many
        oldValue.frontPackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackages { // to Many
        oldValue.backPackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_myInstances { // to Many
        oldValue.myInstances_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.name_property.startsToBeObserved (by: self.name_property) // Stored property
      newValue.modelWidth_property.startsToBeObserved (by: self.modelWidth_property) // Stored property
      newValue.modelWidthUnit_property.startsToBeObserved (by: self.modelWidthUnit_property) // Stored property
      newValue.modelHeight_property.startsToBeObserved (by: self.modelHeight_property) // Stored property
      newValue.modelHeightUnit_property.startsToBeObserved (by: self.modelHeightUnit_property) // Stored property
      newValue.zoom_property.startsToBeObserved (by: self.zoom_property) // Stored property
      newValue.layerConfiguration_property.startsToBeObserved (by: self.layerConfiguration_property) // Stored property
      newValue.modelLimitWidth_property.startsToBeObserved (by: self.modelLimitWidth_property) // Stored property
      newValue.modelLimitWidthUnit_property.startsToBeObserved (by: self.modelLimitWidthUnit_property) // Stored property
      newValue.artworkName_property.startsToBeObserved (by: self.artworkName_property) // Stored property
      newValue.layerConfigurationString_property.startsToBeObserved (by: self.layerConfigurationString_property) // Transient property
      newValue.frontLegendLinesSegments_property.startsToBeObserved (by: self.frontLegendLinesSegments_property) // Transient property
      newValue.backLegendLinesSegments_property.startsToBeObserved (by: self.backLegendLinesSegments_property) // Transient property
      newValue.backLegendLinesBezierPaths_property.startsToBeObserved (by: self.backLegendLinesBezierPaths_property) // Transient property
      newValue.frontLegendTextsSegments_property.startsToBeObserved (by: self.frontLegendTextsSegments_property) // Transient property
      newValue.frontLegendTextsBezierPaths_property.startsToBeObserved (by: self.frontLegendTextsBezierPaths_property) // Transient property
      newValue.frontLayoutTextsSegments_property.startsToBeObserved (by: self.frontLayoutTextsSegments_property) // Transient property
      newValue.frontLayoutTextsBezierPaths_property.startsToBeObserved (by: self.frontLayoutTextsBezierPaths_property) // Transient property
      newValue.backLegendTextsSegments_property.startsToBeObserved (by: self.backLegendTextsSegments_property) // Transient property
      newValue.backLegendTextsBezierPaths_property.startsToBeObserved (by: self.backLegendTextsBezierPaths_property) // Transient property
      newValue.backLayoutTextsSegments_property.startsToBeObserved (by: self.backLayoutTextsSegments_property) // Transient property
      newValue.backLayoutTextsBezierPaths_property.startsToBeObserved (by: self.backLayoutTextsBezierPaths_property) // Transient property
      newValue.internalBoardsLimitsSegments_property.startsToBeObserved (by: self.internalBoardsLimitsSegments_property) // Transient property
      newValue.internalBoardsLimitsBezierPaths_property.startsToBeObserved (by: self.internalBoardsLimitsBezierPaths_property) // Transient property
      newValue.drillSegments_property.startsToBeObserved (by: self.drillSegments_property) // Transient property
      newValue.holesBezierPaths_property.startsToBeObserved (by: self.holesBezierPaths_property) // Transient property
      newValue.viaShapes_property.startsToBeObserved (by: self.viaShapes_property) // Transient property
      newValue.viasBezierPaths_property.startsToBeObserved (by: self.viasBezierPaths_property) // Transient property
      newValue.frontPadArray_property.startsToBeObserved (by: self.frontPadArray_property) // Transient property
      newValue.frontPadsBezierPaths_property.startsToBeObserved (by: self.frontPadsBezierPaths_property) // Transient property
      newValue.backPadArray_property.startsToBeObserved (by: self.backPadArray_property) // Transient property
      newValue.backPadsBezierPaths_property.startsToBeObserved (by: self.backPadsBezierPaths_property) // Transient property
      newValue.traversingPadArray_property.startsToBeObserved (by: self.traversingPadArray_property) // Transient property
      newValue.traversingPadsBezierPaths_property.startsToBeObserved (by: self.traversingPadsBezierPaths_property) // Transient property
      newValue.boardLimitsBezierPaths_property.startsToBeObserved (by: self.boardLimitsBezierPaths_property) // Transient property
      newValue.backComponentNameSegments_property.startsToBeObserved (by: self.backComponentNameSegments_property) // Transient property
      newValue.backComponentNamesBezierPaths_property.startsToBeObserved (by: self.backComponentNamesBezierPaths_property) // Transient property
      newValue.frontComponentNameSegments_property.startsToBeObserved (by: self.frontComponentNameSegments_property) // Transient property
      newValue.frontComponentNamesBezierPaths_property.startsToBeObserved (by: self.frontComponentNamesBezierPaths_property) // Transient property
      newValue.frontComponentValueSegments_property.startsToBeObserved (by: self.frontComponentValueSegments_property) // Transient property
      newValue.frontComponentValuesBezierPaths_property.startsToBeObserved (by: self.frontComponentValuesBezierPaths_property) // Transient property
      newValue.backComponentValueSegments_property.startsToBeObserved (by: self.backComponentValueSegments_property) // Transient property
      newValue.backComponentValuesBezierPaths_property.startsToBeObserved (by: self.backComponentValuesBezierPaths_property) // Transient property
      newValue.backTrackSegments_property.startsToBeObserved (by: self.backTrackSegments_property) // Transient property
      newValue.backTracksBezierPaths_property.startsToBeObserved (by: self.backTracksBezierPaths_property) // Transient property
      newValue.frontTrackSegments_property.startsToBeObserved (by: self.frontTrackSegments_property) // Transient property
      newValue.frontTracksBezierPaths_property.startsToBeObserved (by: self.frontTracksBezierPaths_property) // Transient property
      newValue.inner1TracksSegments_property.startsToBeObserved (by: self.inner1TracksSegments_property) // Transient property
      newValue.inner1TracksBezierPaths_property.startsToBeObserved (by: self.inner1TracksBezierPaths_property) // Transient property
      newValue.inner2TracksSegments_property.startsToBeObserved (by: self.inner2TracksSegments_property) // Transient property
      newValue.inner2TracksBezierPaths_property.startsToBeObserved (by: self.inner2TracksBezierPaths_property) // Transient property
      newValue.inner3TracksSegments_property.startsToBeObserved (by: self.inner3TracksSegments_property) // Transient property
      newValue.inner3TracksBezierPaths_property.startsToBeObserved (by: self.inner3TracksBezierPaths_property) // Transient property
      newValue.inner4TracksSegments_property.startsToBeObserved (by: self.inner4TracksSegments_property) // Transient property
      newValue.inner4TracksBezierPaths_property.startsToBeObserved (by: self.inner4TracksBezierPaths_property) // Transient property
      newValue.frontPackagesSegments_property.startsToBeObserved (by: self.frontPackagesSegments_property) // Transient property
      newValue.frontPackagesBezierPaths_property.startsToBeObserved (by: self.frontPackagesBezierPaths_property) // Transient property
      newValue.backPackagesSegments_property.startsToBeObserved (by: self.backPackagesSegments_property) // Transient property
      newValue.backPackagesBezierPaths_property.startsToBeObserved (by: self.backPackagesBezierPaths_property) // Transient property
      newValue.instanceCount_property.startsToBeObserved (by: self.instanceCount_property) // Transient property
      newValue.frontLegendLinesBezierPaths_property.startsToBeObserved (by: self.frontLegendLinesBezierPaths_property) // Transient property
      newValue.imageForModel_property.startsToBeObserved (by: self.imageForModel_property) // Transient property
      newValue.imageForInstances_property.startsToBeObserved (by: self.imageForInstances_property) // Transient property
      if let relay = self.mObserversOf_frontLegendLines { // to Many
        newValue.frontLegendLines_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendLines { // to Many
        newValue.backLegendLines_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLegendTexts { // to Many
        newValue.frontLegendTexts_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontLayoutTexts { // to Many
        newValue.frontLayoutTexts_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLegendTexts { // to Many
        newValue.backLegendTexts_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backLayoutTexts { // to Many
        newValue.backLayoutTexts_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_internalBoardsLimits { // to Many
        newValue.internalBoardsLimits_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_drills { // to Many
        newValue.drills_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_vias { // to Many
        newValue.vias_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPads { // to Many
        newValue.frontPads_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPads { // to Many
        newValue.backPads_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_traversingPads { // to Many
        newValue.traversingPads_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentNames { // to Many
        newValue.backComponentNames_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentNames { // to Many
        newValue.frontComponentNames_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontComponentValues { // to Many
        newValue.frontComponentValues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backComponentValues { // to Many
        newValue.backComponentValues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backTracks { // to Many
        newValue.backTracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontTracks { // to Many
        newValue.frontTracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner1Tracks { // to Many
        newValue.inner1Tracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner2Tracks { // to Many
        newValue.inner2Tracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner3Tracks { // to Many
        newValue.inner3Tracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_inner4Tracks { // to Many
        newValue.inner4Tracks_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_frontPackages { // to Many
        newValue.frontPackages_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_backPackages { // to Many
        newValue.backPackages_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_myInstances { // to Many
        newValue.myInstances_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  final let name_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  final let modelWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  final let modelWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  final let modelHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  final let modelHeightUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  final let zoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'layerConfiguration' stored property
  //····················································································································

  final let layerConfiguration_property = EBGenericTransientProperty <LayerConfiguration?> ()

  //····················································································································
  //   Observers of 'modelLimitWidth' stored property
  //····················································································································

  final let modelLimitWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'modelLimitWidthUnit' stored property
  //····················································································································

  final let modelLimitWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  final let artworkName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'layerConfigurationString' transient property
  //····················································································································

  final let layerConfigurationString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'frontLegendLinesSegments' transient property
  //····················································································································

  final let frontLegendLinesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backLegendLinesSegments' transient property
  //····················································································································

  final let backLegendLinesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  final let backLegendLinesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  final let frontLegendTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  final let frontLegendTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  final let frontLayoutTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  final let frontLayoutTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  final let backLegendTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  final let backLegendTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  final let backLayoutTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  final let backLayoutTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'internalBoardsLimitsSegments' transient property
  //····················································································································

  final let internalBoardsLimitsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'internalBoardsLimitsBezierPaths' transient property
  //····················································································································

  final let internalBoardsLimitsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'drillSegments' transient property
  //····················································································································

  final let drillSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'holesBezierPaths' transient property
  //····················································································································

  final let holesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  final let viaShapes_property = EBGenericTransientProperty <MergerViaShapeArray?> ()

  //····················································································································
  //   Observers of 'viasBezierPaths' transient property
  //····················································································································

  final let viasBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontPadArray' transient property
  //····················································································································

  final let frontPadArray_property = EBGenericTransientProperty <MergerPadArray?> ()

  //····················································································································
  //   Observers of 'frontPadsBezierPaths' transient property
  //····················································································································

  final let frontPadsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backPadArray' transient property
  //····················································································································

  final let backPadArray_property = EBGenericTransientProperty <MergerPadArray?> ()

  //····················································································································
  //   Observers of 'backPadsBezierPaths' transient property
  //····················································································································

  final let backPadsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'traversingPadArray' transient property
  //····················································································································

  final let traversingPadArray_property = EBGenericTransientProperty <MergerPadArray?> ()

  //····················································································································
  //   Observers of 'traversingPadsBezierPaths' transient property
  //····················································································································

  final let traversingPadsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'boardLimitsBezierPaths' transient property
  //····················································································································

  final let boardLimitsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  final let backComponentNameSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  final let backComponentNamesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  final let frontComponentNameSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  final let frontComponentNamesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  final let frontComponentValueSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  final let frontComponentValuesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  final let backComponentValueSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  final let backComponentValuesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  final let backTrackSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backTracksBezierPaths' transient property
  //····················································································································

  final let backTracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  final let frontTrackSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontTracksBezierPaths' transient property
  //····················································································································

  final let frontTracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'inner1TracksSegments' transient property
  //····················································································································

  final let inner1TracksSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'inner1TracksBezierPaths' transient property
  //····················································································································

  final let inner1TracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'inner2TracksSegments' transient property
  //····················································································································

  final let inner2TracksSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'inner2TracksBezierPaths' transient property
  //····················································································································

  final let inner2TracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'inner3TracksSegments' transient property
  //····················································································································

  final let inner3TracksSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'inner3TracksBezierPaths' transient property
  //····················································································································

  final let inner3TracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'inner4TracksSegments' transient property
  //····················································································································

  final let inner4TracksSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'inner4TracksBezierPaths' transient property
  //····················································································································

  final let inner4TracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  final let frontPackagesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'frontPackagesBezierPaths' transient property
  //····················································································································

  final let frontPackagesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  final let backPackagesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()

  //····················································································································
  //   Observers of 'backPackagesBezierPaths' transient property
  //····················································································································

  final let backPackagesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  final let instanceCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  final let frontLegendLinesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()

  //····················································································································
  //   Observers of 'imageForModel' transient property
  //····················································································································

  final let imageForModel_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'imageForInstances' transient property
  //····················································································································

  final let imageForInstances_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observable toMany property: frontLegendLines
  //····················································································································

  private final var mObserversOf_frontLegendLines : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontLegendLines_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontLegendLines {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontLegendLines_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontLegendLines = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontLegendLines_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontLegendLines?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backLegendLines
  //····················································································································

  private final var mObserversOf_backLegendLines : EBObservedObject? = nil

  //····················································································································

  final func toMany_backLegendLines_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backLegendLines {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backLegendLines_property.startsToBeObserved (by: relay)
      self.mObserversOf_backLegendLines = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backLegendLines_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backLegendLines?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontLegendTexts
  //····················································································································

  private final var mObserversOf_frontLegendTexts : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontLegendTexts_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontLegendTexts {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontLegendTexts_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontLegendTexts = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontLegendTexts_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontLegendTexts?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontLayoutTexts
  //····················································································································

  private final var mObserversOf_frontLayoutTexts : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontLayoutTexts_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontLayoutTexts {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontLayoutTexts_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontLayoutTexts = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontLayoutTexts_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontLayoutTexts?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backLegendTexts
  //····················································································································

  private final var mObserversOf_backLegendTexts : EBObservedObject? = nil

  //····················································································································

  final func toMany_backLegendTexts_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backLegendTexts {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backLegendTexts_property.startsToBeObserved (by: relay)
      self.mObserversOf_backLegendTexts = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backLegendTexts_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backLegendTexts?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backLayoutTexts
  //····················································································································

  private final var mObserversOf_backLayoutTexts : EBObservedObject? = nil

  //····················································································································

  final func toMany_backLayoutTexts_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backLayoutTexts {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backLayoutTexts_property.startsToBeObserved (by: relay)
      self.mObserversOf_backLayoutTexts = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backLayoutTexts_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backLayoutTexts?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: internalBoardsLimits
  //····················································································································

  private final var mObserversOf_internalBoardsLimits : EBObservedObject? = nil

  //····················································································································

  final func toMany_internalBoardsLimits_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_internalBoardsLimits {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.internalBoardsLimits_property.startsToBeObserved (by: relay)
      self.mObserversOf_internalBoardsLimits = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_internalBoardsLimits_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_internalBoardsLimits?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: drills
  //····················································································································

  private final var mObserversOf_drills : EBObservedObject? = nil

  //····················································································································

  final func toMany_drills_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_drills {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.drills_property.startsToBeObserved (by: relay)
      self.mObserversOf_drills = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_drills_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_drills?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: vias
  //····················································································································

  private final var mObserversOf_vias : EBObservedObject? = nil

  //····················································································································

  final func toMany_vias_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_vias {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.vias_property.startsToBeObserved (by: relay)
      self.mObserversOf_vias = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_vias_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_vias?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontPads
  //····················································································································

  private final var mObserversOf_frontPads : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontPads {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontPads_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontPads = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontPads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backPads
  //····················································································································

  private final var mObserversOf_backPads : EBObservedObject? = nil

  //····················································································································

  final func toMany_backPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backPads {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backPads_property.startsToBeObserved (by: relay)
      self.mObserversOf_backPads = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backPads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: traversingPads
  //····················································································································

  private final var mObserversOf_traversingPads : EBObservedObject? = nil

  //····················································································································

  final func toMany_traversingPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_traversingPads {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.traversingPads_property.startsToBeObserved (by: relay)
      self.mObserversOf_traversingPads = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_traversingPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_traversingPads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backComponentNames
  //····················································································································

  private final var mObserversOf_backComponentNames : EBObservedObject? = nil

  //····················································································································

  final func toMany_backComponentNames_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backComponentNames {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backComponentNames_property.startsToBeObserved (by: relay)
      self.mObserversOf_backComponentNames = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backComponentNames_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backComponentNames?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontComponentNames
  //····················································································································

  private final var mObserversOf_frontComponentNames : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontComponentNames_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontComponentNames {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontComponentNames_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontComponentNames = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontComponentNames_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontComponentNames?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontComponentValues
  //····················································································································

  private final var mObserversOf_frontComponentValues : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontComponentValues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontComponentValues {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontComponentValues_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontComponentValues = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontComponentValues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontComponentValues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backComponentValues
  //····················································································································

  private final var mObserversOf_backComponentValues : EBObservedObject? = nil

  //····················································································································

  final func toMany_backComponentValues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backComponentValues {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backComponentValues_property.startsToBeObserved (by: relay)
      self.mObserversOf_backComponentValues = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backComponentValues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backComponentValues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backTracks
  //····················································································································

  private final var mObserversOf_backTracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_backTracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backTracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backTracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_backTracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backTracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backTracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontTracks
  //····················································································································

  private final var mObserversOf_frontTracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontTracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontTracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontTracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontTracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontTracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontTracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: inner1Tracks
  //····················································································································

  private final var mObserversOf_inner1Tracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_inner1Tracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_inner1Tracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.inner1Tracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_inner1Tracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_inner1Tracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_inner1Tracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: inner2Tracks
  //····················································································································

  private final var mObserversOf_inner2Tracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_inner2Tracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_inner2Tracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.inner2Tracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_inner2Tracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_inner2Tracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_inner2Tracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: inner3Tracks
  //····················································································································

  private final var mObserversOf_inner3Tracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_inner3Tracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_inner3Tracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.inner3Tracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_inner3Tracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_inner3Tracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_inner3Tracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: inner4Tracks
  //····················································································································

  private final var mObserversOf_inner4Tracks : EBObservedObject? = nil

  //····················································································································

  final func toMany_inner4Tracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_inner4Tracks {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.inner4Tracks_property.startsToBeObserved (by: relay)
      self.mObserversOf_inner4Tracks = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_inner4Tracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_inner4Tracks?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: frontPackages
  //····················································································································

  private final var mObserversOf_frontPackages : EBObservedObject? = nil

  //····················································································································

  final func toMany_frontPackages_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_frontPackages {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.frontPackages_property.startsToBeObserved (by: relay)
      self.mObserversOf_frontPackages = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_frontPackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_frontPackages?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: backPackages
  //····················································································································

  private final var mObserversOf_backPackages : EBObservedObject? = nil

  //····················································································································

  final func toMany_backPackages_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_backPackages {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.backPackages_property.startsToBeObserved (by: relay)
      self.mObserversOf_backPackages = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_backPackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_backPackages?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: myInstances
  //····················································································································

  private final var mObserversOf_myInstances : EBObservedObject? = nil

  //····················································································································

  final func toMany_myInstances_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_myInstances {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.myInstances_property.startsToBeObserved (by: relay)
      self.mObserversOf_myInstances = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_myInstances_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_myInstances?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure name simple stored property
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.name_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelWidth simple stored property
    self.modelWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelWidthUnit simple stored property
    self.modelWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelHeight simple stored property
    self.modelHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelHeightUnit simple stored property
    self.modelHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure layerConfiguration simple stored property
    self.layerConfiguration_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.layerConfiguration_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelLimitWidth simple stored property
    self.modelLimitWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelLimitWidthUnit simple stored property
    self.modelLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelLimitWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure artworkName simple stored property
    self.artworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.artworkName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure layerConfigurationString transient property
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.layerConfigurationString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLegendLinesSegments transient property
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLegendLinesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLegendLinesSegments transient property
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLegendLinesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLegendLinesBezierPaths transient property
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLegendLinesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLegendTextsSegments transient property
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLegendTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLegendTextsBezierPaths transient property
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLegendTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLayoutTextsSegments transient property
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLayoutTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLayoutTextsBezierPaths transient property
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLayoutTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLegendTextsSegments transient property
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLegendTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLegendTextsBezierPaths transient property
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLegendTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLayoutTextsSegments transient property
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLayoutTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backLayoutTextsBezierPaths transient property
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backLayoutTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure internalBoardsLimitsSegments transient property
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.internalBoardsLimitsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure internalBoardsLimitsBezierPaths transient property
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.internalBoardsLimitsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drillSegments transient property
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.drillSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure holesBezierPaths transient property
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.holesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaShapes transient property
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viaShapes_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viasBezierPaths transient property
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viasBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontPadArray transient property
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontPadArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontPadsBezierPaths transient property
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontPadsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backPadArray transient property
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backPadArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backPadsBezierPaths transient property
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backPadsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure traversingPadArray transient property
    self.traversingPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.traversingPadArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure traversingPadsBezierPaths transient property
    self.traversingPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.traversingPadsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitsBezierPaths transient property
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.boardLimitsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backComponentNameSegments transient property
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backComponentNameSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backComponentNamesBezierPaths transient property
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backComponentNamesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontComponentNameSegments transient property
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontComponentNameSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontComponentNamesBezierPaths transient property
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontComponentNamesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontComponentValueSegments transient property
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontComponentValueSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontComponentValuesBezierPaths transient property
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontComponentValuesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backComponentValueSegments transient property
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backComponentValueSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backComponentValuesBezierPaths transient property
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backComponentValuesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backTrackSegments transient property
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backTrackSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backTracksBezierPaths transient property
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backTracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontTrackSegments transient property
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontTrackSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontTracksBezierPaths transient property
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontTracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner1TracksSegments transient property
    self.inner1TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner1TracksSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner1TracksBezierPaths transient property
    self.inner1TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner1TracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner2TracksSegments transient property
    self.inner2TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner2TracksSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner2TracksBezierPaths transient property
    self.inner2TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner2TracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner3TracksSegments transient property
    self.inner3TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner3TracksSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner3TracksBezierPaths transient property
    self.inner3TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner3TracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner4TracksSegments transient property
    self.inner4TracksSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner4TracksSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner4TracksBezierPaths transient property
    self.inner4TracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.inner4TracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontPackagesSegments transient property
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontPackagesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontPackagesBezierPaths transient property
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontPackagesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backPackagesSegments transient property
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backPackagesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backPackagesBezierPaths transient property
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backPackagesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure instanceCount transient property
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.instanceCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure frontLegendLinesBezierPaths transient property
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.frontLegendLinesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure imageForModel transient property
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.imageForModel_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure imageForInstances transient property
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.imageForInstances_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BoardModel : ReadOnlyObject_BoardModel, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! BoardModel
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! BoardModel
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardModel) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardModel) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardModel? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardModel? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : BoardModel?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

