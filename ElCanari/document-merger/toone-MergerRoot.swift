//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_MergerRoot : ReadOnlyAbstractObjectProperty <MergerRoot> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.selectedPageIndex_property.stopsBeingObserved (by: self.selectedPageIndex_property) // Stored property
      oldValue.zoom_property.stopsBeingObserved (by: self.zoom_property) // Stored property
      oldValue.showDisplaySettingView_property.stopsBeingObserved (by: self.showDisplaySettingView_property) // Stored property
      oldValue.modelInsertionRotation_property.stopsBeingObserved (by: self.modelInsertionRotation_property) // Stored property
      oldValue.automaticBoardSize_property.stopsBeingObserved (by: self.automaticBoardSize_property) // Stored property
      oldValue.boardManualWidth_property.stopsBeingObserved (by: self.boardManualWidth_property) // Stored property
      oldValue.boardManualHeight_property.stopsBeingObserved (by: self.boardManualHeight_property) // Stored property
      oldValue.boardWidthUnit_property.stopsBeingObserved (by: self.boardWidthUnit_property) // Stored property
      oldValue.boardHeightUnit_property.stopsBeingObserved (by: self.boardHeightUnit_property) // Stored property
      oldValue.overlapingArrangment_property.stopsBeingObserved (by: self.overlapingArrangment_property) // Stored property
      oldValue.selectedBoardXUnit_property.stopsBeingObserved (by: self.selectedBoardXUnit_property) // Stored property
      oldValue.selectedBoardYUnit_property.stopsBeingObserved (by: self.selectedBoardYUnit_property) // Stored property
      oldValue.boardLimitWidth_property.stopsBeingObserved (by: self.boardLimitWidth_property) // Stored property
      oldValue.boardLimitWidthUnit_property.stopsBeingObserved (by: self.boardLimitWidthUnit_property) // Stored property
      oldValue.arrowMagnitude_property.stopsBeingObserved (by: self.arrowMagnitude_property) // Stored property
      oldValue.arrowMagnitudeUnit_property.stopsBeingObserved (by: self.arrowMagnitudeUnit_property) // Stored property
      oldValue.shiftArrowMagnitude_property.stopsBeingObserved (by: self.shiftArrowMagnitude_property) // Stored property
      oldValue.shiftArrowMagnitudeUnit_property.stopsBeingObserved (by: self.shiftArrowMagnitudeUnit_property) // Stored property
      oldValue.mPDFBoardBackgroundColor_property.stopsBeingObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      oldValue.mArtworkName_property.stopsBeingObserved (by: self.mArtworkName_property) // Stored property
      oldValue.mArtworkVersion_property.stopsBeingObserved (by: self.mArtworkVersion_property) // Stored property
      oldValue.modelNames_property.stopsBeingObserved (by: self.modelNames_property) // Transient property
      oldValue.boardRect_property.stopsBeingObserved (by: self.boardRect_property) // Transient property
      oldValue.boardLimitWidthErrorMessage_property.stopsBeingObserved (by: self.boardLimitWidthErrorMessage_property) // Transient property
      oldValue.boardLimitWidthOk_property.stopsBeingObserved (by: self.boardLimitWidthOk_property) // Transient property
      oldValue.boardWidth_property.stopsBeingObserved (by: self.boardWidth_property) // Transient property
      oldValue.boardHeight_property.stopsBeingObserved (by: self.boardHeight_property) // Transient property
      oldValue.comments_property.stopsBeingObserved (by: self.comments_property) // Transient property
      oldValue.layoutLayerWarningMessage_property.stopsBeingObserved (by: self.layoutLayerWarningMessage_property) // Transient property
      oldValue.layerConfigurationString_property.stopsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      oldValue.emptyDrillFileExtension_property.stopsBeingObserved (by: self.emptyDrillFileExtension_property) // Transient property
      oldValue.hasInnerElements_property.stopsBeingObserved (by: self.hasInnerElements_property) // Transient property
      oldValue.hasSixLayers_property.stopsBeingObserved (by: self.hasSixLayers_property) // Transient property
      oldValue.boardOutlineRectDisplay_property.stopsBeingObserved (by: self.boardOutlineRectDisplay_property) // Transient property
      if let relay = self.mObserversOf_boardModels { // to Many
        oldValue.boardModels_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardInstances { // to Many
        oldValue.boardInstances_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.selectedPageIndex_property.startsToBeObserved (by: self.selectedPageIndex_property) // Stored property
      newValue.zoom_property.startsToBeObserved (by: self.zoom_property) // Stored property
      newValue.showDisplaySettingView_property.startsToBeObserved (by: self.showDisplaySettingView_property) // Stored property
      newValue.modelInsertionRotation_property.startsToBeObserved (by: self.modelInsertionRotation_property) // Stored property
      newValue.automaticBoardSize_property.startsToBeObserved (by: self.automaticBoardSize_property) // Stored property
      newValue.boardManualWidth_property.startsToBeObserved (by: self.boardManualWidth_property) // Stored property
      newValue.boardManualHeight_property.startsToBeObserved (by: self.boardManualHeight_property) // Stored property
      newValue.boardWidthUnit_property.startsToBeObserved (by: self.boardWidthUnit_property) // Stored property
      newValue.boardHeightUnit_property.startsToBeObserved (by: self.boardHeightUnit_property) // Stored property
      newValue.overlapingArrangment_property.startsToBeObserved (by: self.overlapingArrangment_property) // Stored property
      newValue.selectedBoardXUnit_property.startsToBeObserved (by: self.selectedBoardXUnit_property) // Stored property
      newValue.selectedBoardYUnit_property.startsToBeObserved (by: self.selectedBoardYUnit_property) // Stored property
      newValue.boardLimitWidth_property.startsToBeObserved (by: self.boardLimitWidth_property) // Stored property
      newValue.boardLimitWidthUnit_property.startsToBeObserved (by: self.boardLimitWidthUnit_property) // Stored property
      newValue.arrowMagnitude_property.startsToBeObserved (by: self.arrowMagnitude_property) // Stored property
      newValue.arrowMagnitudeUnit_property.startsToBeObserved (by: self.arrowMagnitudeUnit_property) // Stored property
      newValue.shiftArrowMagnitude_property.startsToBeObserved (by: self.shiftArrowMagnitude_property) // Stored property
      newValue.shiftArrowMagnitudeUnit_property.startsToBeObserved (by: self.shiftArrowMagnitudeUnit_property) // Stored property
      newValue.mPDFBoardBackgroundColor_property.startsToBeObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      newValue.mArtworkName_property.startsToBeObserved (by: self.mArtworkName_property) // Stored property
      newValue.mArtworkVersion_property.startsToBeObserved (by: self.mArtworkVersion_property) // Stored property
      newValue.modelNames_property.startsToBeObserved (by: self.modelNames_property) // Transient property
      newValue.boardRect_property.startsToBeObserved (by: self.boardRect_property) // Transient property
      newValue.boardLimitWidthErrorMessage_property.startsToBeObserved (by: self.boardLimitWidthErrorMessage_property) // Transient property
      newValue.boardLimitWidthOk_property.startsToBeObserved (by: self.boardLimitWidthOk_property) // Transient property
      newValue.boardWidth_property.startsToBeObserved (by: self.boardWidth_property) // Transient property
      newValue.boardHeight_property.startsToBeObserved (by: self.boardHeight_property) // Transient property
      newValue.comments_property.startsToBeObserved (by: self.comments_property) // Transient property
      newValue.layoutLayerWarningMessage_property.startsToBeObserved (by: self.layoutLayerWarningMessage_property) // Transient property
      newValue.layerConfigurationString_property.startsToBeObserved (by: self.layerConfigurationString_property) // Transient property
      newValue.emptyDrillFileExtension_property.startsToBeObserved (by: self.emptyDrillFileExtension_property) // Transient property
      newValue.hasInnerElements_property.startsToBeObserved (by: self.hasInnerElements_property) // Transient property
      newValue.hasSixLayers_property.startsToBeObserved (by: self.hasSixLayers_property) // Transient property
      newValue.boardOutlineRectDisplay_property.startsToBeObserved (by: self.boardOutlineRectDisplay_property) // Transient property
      if let relay = self.mObserversOf_boardModels { // to Many
        newValue.boardModels_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardInstances { // to Many
        newValue.boardInstances_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  final let selectedPageIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  final let zoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'showDisplaySettingView' stored property
  //····················································································································

  final let showDisplaySettingView_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'modelInsertionRotation' stored property
  //····················································································································

  final let modelInsertionRotation_property = EBGenericTransientProperty <QuadrantRotation?> ()

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  final let automaticBoardSize_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  final let boardManualWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  final let boardManualHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  final let boardWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  final let boardHeightUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  final let overlapingArrangment_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  final let selectedBoardXUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  final let selectedBoardYUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  final let boardLimitWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  final let boardLimitWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  final let arrowMagnitude_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  final let arrowMagnitudeUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  final let shiftArrowMagnitude_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  final let shiftArrowMagnitudeUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  final let mPDFBoardBackgroundColor_property = EBGenericTransientProperty <NSColor?> ()

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  final let mArtworkName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

  final let mArtworkVersion_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  final let modelNames_property = EBGenericTransientProperty <StringTagArray?> ()

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  final let boardRect_property = EBGenericTransientProperty <CanariRect?> ()

  //····················································································································
  //   Observers of 'boardLimitWidthErrorMessage' transient property
  //····················································································································

  final let boardLimitWidthErrorMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardLimitWidthOk' transient property
  //····················································································································

  final let boardLimitWidthOk_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  final let boardWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  final let boardHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'comments' transient property
  //····················································································································

  final let comments_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'layoutLayerWarningMessage' transient property
  //····················································································································

  final let layoutLayerWarningMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'layerConfigurationString' transient property
  //····················································································································

  final let layerConfigurationString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'emptyDrillFileExtension' transient property
  //····················································································································

  final let emptyDrillFileExtension_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'hasInnerElements' transient property
  //····················································································································

  final let hasInnerElements_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'hasSixLayers' transient property
  //····················································································································

  final let hasSixLayers_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  final let boardOutlineRectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observable toMany property: boardModels
  //····················································································································

  private final var mObserversOf_boardModels : EBObservedObserver? = nil

  //····················································································································

  final func toMany_boardModels_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardModels {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.boardModels_property.startsToBeObserved (by: relay)
      self.mObserversOf_boardModels = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_boardModels_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardModels?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: boardInstances
  //····················································································································

  private final var mObserversOf_boardInstances : EBObservedObserver? = nil

  //····················································································································

  final func toMany_boardInstances_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardInstances {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.boardInstances_property.startsToBeObserved (by: relay)
      self.mObserversOf_boardInstances = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_boardInstances_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardInstances?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure selectedPageIndex simple stored property
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedPageIndex_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.zoom_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure showDisplaySettingView simple stored property
    self.showDisplaySettingView_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.showDisplaySettingView_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.showDisplaySettingView_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure modelInsertionRotation simple stored property
    self.modelInsertionRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.modelInsertionRotation_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.modelInsertionRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure automaticBoardSize simple stored property
    self.automaticBoardSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.automaticBoardSize_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.automaticBoardSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardManualWidth simple stored property
    self.boardManualWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardManualWidth_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardManualWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardManualHeight simple stored property
    self.boardManualHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardManualHeight_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardManualHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardWidthUnit simple stored property
    self.boardWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardWidthUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardHeightUnit simple stored property
    self.boardHeightUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardHeightUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure overlapingArrangment simple stored property
    self.overlapingArrangment_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.overlapingArrangment_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.overlapingArrangment_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure selectedBoardXUnit simple stored property
    self.selectedBoardXUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedBoardXUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectedBoardXUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure selectedBoardYUnit simple stored property
    self.selectedBoardYUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedBoardYUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectedBoardYUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardLimitWidth simple stored property
    self.boardLimitWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidth_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardLimitWidthUnit simple stored property
    self.boardLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidthUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardLimitWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure arrowMagnitude simple stored property
    self.arrowMagnitude_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.arrowMagnitude_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.arrowMagnitude_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure arrowMagnitudeUnit simple stored property
    self.arrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.arrowMagnitudeUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.arrowMagnitudeUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure shiftArrowMagnitude simple stored property
    self.shiftArrowMagnitude_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.shiftArrowMagnitude_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.shiftArrowMagnitude_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure shiftArrowMagnitudeUnit simple stored property
    self.shiftArrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.shiftArrowMagnitudeUnit_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.shiftArrowMagnitudeUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mPDFBoardBackgroundColor simple stored property
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPDFBoardBackgroundColor_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mPDFBoardBackgroundColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mArtworkName simple stored property
    self.mArtworkName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mArtworkName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mArtworkVersion simple stored property
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkVersion_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mArtworkVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure modelNames transient property
    self.modelNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.modelNames_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.modelNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardRect transient property
    self.boardRect_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardRect_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardRect_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardLimitWidthErrorMessage transient property
    self.boardLimitWidthErrorMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidthErrorMessage_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardLimitWidthErrorMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardLimitWidthOk transient property
    self.boardLimitWidthOk_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidthOk_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardLimitWidthOk_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardWidth transient property
    self.boardWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardWidth_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardHeight transient property
    self.boardHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardHeight_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure comments transient property
    self.comments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.comments_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure layoutLayerWarningMessage transient property
    self.layoutLayerWarningMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layoutLayerWarningMessage_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.layoutLayerWarningMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure layerConfigurationString transient property
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layerConfigurationString_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.layerConfigurationString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure emptyDrillFileExtension transient property
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.emptyDrillFileExtension_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.emptyDrillFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasInnerElements transient property
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasInnerElements_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasInnerElements_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasSixLayers transient property
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSixLayers_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasSixLayers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure boardOutlineRectDisplay transient property
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardOutlineRectDisplay_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.boardOutlineRectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_MergerRoot : ReadOnlyObject_MergerRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! MergerRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! MergerRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < MergerRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MergerRoot? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : MergerRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

