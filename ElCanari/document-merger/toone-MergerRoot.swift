//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_MergerRoot
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_MergerRoot : EBReadOnlyAbstractObjectProperty <MergerRoot> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.selectedPageIndex_property.stopsBeingObserved (by: self.selectedPageIndex_property) // Stored property
      oldValue.zoom_property.stopsBeingObserved (by: self.zoom_property) // Stored property
      oldValue.showDisplaySettingView_property.stopsBeingObserved (by: self.showDisplaySettingView_property) // Stored property
      oldValue.modelInsertionRotation_property.stopsBeingObserved (by: self.modelInsertionRotation_property) // Stored property
      oldValue.automaticBoardSize_property.stopsBeingObserved (by: self.automaticBoardSize_property) // Stored property
      oldValue.boardManualWidth_property.stopsBeingObserved (by: self.boardManualWidth_property) // Stored property
      oldValue.boardManualHeight_property.stopsBeingObserved (by: self.boardManualHeight_property) // Stored property
      oldValue.boardWidthUnit_property.stopsBeingObserved (by: self.boardWidthUnit_property) // Stored property
      oldValue.boardHeightUnit_property.stopsBeingObserved (by: self.boardHeightUnit_property) // Stored property
      oldValue.overlapingArrangment_property.stopsBeingObserved (by: self.overlapingArrangment_property) // Stored property
      oldValue.selectedBoardXUnit_property.stopsBeingObserved (by: self.selectedBoardXUnit_property) // Stored property
      oldValue.selectedBoardYUnit_property.stopsBeingObserved (by: self.selectedBoardYUnit_property) // Stored property
      oldValue.boardLimitWidth_property.stopsBeingObserved (by: self.boardLimitWidth_property) // Stored property
      oldValue.boardLimitWidthUnit_property.stopsBeingObserved (by: self.boardLimitWidthUnit_property) // Stored property
      oldValue.mPDFBoardBackgroundColor_property.stopsBeingObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      oldValue.mGenerateMergerArchive_property.stopsBeingObserved (by: self.mGenerateMergerArchive_property) // Stored property
      oldValue.mGenerateGerberAndPDF_property.stopsBeingObserved (by: self.mGenerateGerberAndPDF_property) // Stored property
      oldValue.mPDFProductGrid_property.stopsBeingObserved (by: self.mPDFProductGrid_property) // Stored property
      oldValue.mGerberProductUnit_property.stopsBeingObserved (by: self.mGerberProductUnit_property) // Stored property
      oldValue.mArtworkName_property.stopsBeingObserved (by: self.mArtworkName_property) // Stored property
      oldValue.mArtworkVersion_property.stopsBeingObserved (by: self.mArtworkVersion_property) // Stored property
      oldValue.mArtworkFileSystemLibraryStatus_property.stopsBeingObserved (by: self.mArtworkFileSystemLibraryStatus_property) // Stored property
      oldValue.mArtworkFileSystemLibraryRequiresAttention_property.stopsBeingObserved (by: self.mArtworkFileSystemLibraryRequiresAttention_property) // Stored property
      oldValue.mArtworkIsUpdatable_property.stopsBeingObserved (by: self.mArtworkIsUpdatable_property) // Stored property
      oldValue.modelNames_property.stopsBeingObserved (by: self.modelNames_property) // Transient property
      oldValue.boardRect_property.stopsBeingObserved (by: self.boardRect_property) // Transient property
      oldValue.boardWidth_property.stopsBeingObserved (by: self.boardWidth_property) // Transient property
      oldValue.boardHeight_property.stopsBeingObserved (by: self.boardHeight_property) // Transient property
      oldValue.segmentedControlArtworkAttentionImage_property.stopsBeingObserved (by: self.segmentedControlArtworkAttentionImage_property) // Transient property
      oldValue.comments_property.stopsBeingObserved (by: self.comments_property) // Transient property
      oldValue.layoutLayerWarningMessage_property.stopsBeingObserved (by: self.layoutLayerWarningMessage_property) // Transient property
      oldValue.layerConfigurationString_property.stopsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      oldValue.emptyDrillFileExtension_property.stopsBeingObserved (by: self.emptyDrillFileExtension_property) // Transient property
      oldValue.hasInnerElements_property.stopsBeingObserved (by: self.hasInnerElements_property) // Transient property
      oldValue.hasSixLayers_property.stopsBeingObserved (by: self.hasSixLayers_property) // Transient property
      oldValue.boardOutlineRectDisplay_property.stopsBeingObserved (by: self.boardOutlineRectDisplay_property) // Transient property
      if let relay = self.mObserversOf_boardModels { // to Many
        oldValue.boardModels_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardInstances { // to Many
        oldValue.boardInstances_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.selectedPageIndex_property.startsBeingObserved (by: self.selectedPageIndex_property) // Stored property
      newValue.zoom_property.startsBeingObserved (by: self.zoom_property) // Stored property
      newValue.showDisplaySettingView_property.startsBeingObserved (by: self.showDisplaySettingView_property) // Stored property
      newValue.modelInsertionRotation_property.startsBeingObserved (by: self.modelInsertionRotation_property) // Stored property
      newValue.automaticBoardSize_property.startsBeingObserved (by: self.automaticBoardSize_property) // Stored property
      newValue.boardManualWidth_property.startsBeingObserved (by: self.boardManualWidth_property) // Stored property
      newValue.boardManualHeight_property.startsBeingObserved (by: self.boardManualHeight_property) // Stored property
      newValue.boardWidthUnit_property.startsBeingObserved (by: self.boardWidthUnit_property) // Stored property
      newValue.boardHeightUnit_property.startsBeingObserved (by: self.boardHeightUnit_property) // Stored property
      newValue.overlapingArrangment_property.startsBeingObserved (by: self.overlapingArrangment_property) // Stored property
      newValue.selectedBoardXUnit_property.startsBeingObserved (by: self.selectedBoardXUnit_property) // Stored property
      newValue.selectedBoardYUnit_property.startsBeingObserved (by: self.selectedBoardYUnit_property) // Stored property
      newValue.boardLimitWidth_property.startsBeingObserved (by: self.boardLimitWidth_property) // Stored property
      newValue.boardLimitWidthUnit_property.startsBeingObserved (by: self.boardLimitWidthUnit_property) // Stored property
      newValue.mPDFBoardBackgroundColor_property.startsBeingObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      newValue.mGenerateMergerArchive_property.startsBeingObserved (by: self.mGenerateMergerArchive_property) // Stored property
      newValue.mGenerateGerberAndPDF_property.startsBeingObserved (by: self.mGenerateGerberAndPDF_property) // Stored property
      newValue.mPDFProductGrid_property.startsBeingObserved (by: self.mPDFProductGrid_property) // Stored property
      newValue.mGerberProductUnit_property.startsBeingObserved (by: self.mGerberProductUnit_property) // Stored property
      newValue.mArtworkName_property.startsBeingObserved (by: self.mArtworkName_property) // Stored property
      newValue.mArtworkVersion_property.startsBeingObserved (by: self.mArtworkVersion_property) // Stored property
      newValue.mArtworkFileSystemLibraryStatus_property.startsBeingObserved (by: self.mArtworkFileSystemLibraryStatus_property) // Stored property
      newValue.mArtworkFileSystemLibraryRequiresAttention_property.startsBeingObserved (by: self.mArtworkFileSystemLibraryRequiresAttention_property) // Stored property
      newValue.mArtworkIsUpdatable_property.startsBeingObserved (by: self.mArtworkIsUpdatable_property) // Stored property
      newValue.modelNames_property.startsBeingObserved (by: self.modelNames_property) // Transient property
      newValue.boardRect_property.startsBeingObserved (by: self.boardRect_property) // Transient property
      newValue.boardWidth_property.startsBeingObserved (by: self.boardWidth_property) // Transient property
      newValue.boardHeight_property.startsBeingObserved (by: self.boardHeight_property) // Transient property
      newValue.segmentedControlArtworkAttentionImage_property.startsBeingObserved (by: self.segmentedControlArtworkAttentionImage_property) // Transient property
      newValue.comments_property.startsBeingObserved (by: self.comments_property) // Transient property
      newValue.layoutLayerWarningMessage_property.startsBeingObserved (by: self.layoutLayerWarningMessage_property) // Transient property
      newValue.layerConfigurationString_property.startsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      newValue.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtension_property) // Transient property
      newValue.hasInnerElements_property.startsBeingObserved (by: self.hasInnerElements_property) // Transient property
      newValue.hasSixLayers_property.startsBeingObserved (by: self.hasSixLayers_property) // Transient property
      newValue.boardOutlineRectDisplay_property.startsBeingObserved (by: self.boardOutlineRectDisplay_property) // Transient property
      if let relay = self.mObserversOf_boardModels { // to Many
        newValue.boardModels_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardInstances { // to Many
        newValue.boardInstances_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectedPageIndex' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let selectedPageIndex_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'zoom' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let zoom_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'showDisplaySettingView' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let showDisplaySettingView_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelInsertionRotation' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let modelInsertionRotation_property = EBTransientProperty <QuadrantRotation?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'automaticBoardSize' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let automaticBoardSize_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardManualWidth' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardManualWidth_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardManualHeight' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardManualHeight_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardWidthUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardWidthUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardHeightUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardHeightUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'overlapingArrangment' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let overlapingArrangment_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectedBoardXUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let selectedBoardXUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectedBoardYUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let selectedBoardYUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardLimitWidth' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardLimitWidth_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardLimitWidthUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardLimitWidthUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPDFBoardBackgroundColor_property = EBTransientProperty <NSColor?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mGenerateMergerArchive' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mGenerateMergerArchive_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mGenerateGerberAndPDF' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mGenerateGerberAndPDF_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPDFProductGrid' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPDFProductGrid_property = EBTransientProperty <PDFProductGrid?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mGerberProductUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mGerberProductUnit_property = EBTransientProperty <GerberUnit?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mArtworkName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mArtworkName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mArtworkVersion' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mArtworkVersion_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mArtworkFileSystemLibraryStatus' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mArtworkFileSystemLibraryStatus_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mArtworkFileSystemLibraryRequiresAttention' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mArtworkFileSystemLibraryRequiresAttention_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mArtworkIsUpdatable' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mArtworkIsUpdatable_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'modelNames' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let modelNames_property = EBTransientProperty <StringTagArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardRect' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardRect_property = EBTransientProperty <CanariRect?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardWidth' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardWidth_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardHeight' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardHeight_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'segmentedControlArtworkAttentionImage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let segmentedControlArtworkAttentionImage_property = EBTransientProperty <NSImage?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'comments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let comments_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'layoutLayerWarningMessage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let layoutLayerWarningMessage_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'layerConfigurationString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let layerConfigurationString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'emptyDrillFileExtension' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let emptyDrillFileExtension_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'hasInnerElements' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let hasInnerElements_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'hasSixLayers' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let hasSixLayers_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'boardOutlineRectDisplay' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let boardOutlineRectDisplay_property = EBTransientProperty <EBShape?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: boardModels
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_boardModels : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardModels_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardModels {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.boardModels_property.startsBeingObserved (by: relay)
      self.mObserversOf_boardModels = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardModels_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_boardModels?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: boardInstances
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_boardInstances : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardInstances_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardInstances {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.boardInstances_property.startsBeingObserved (by: relay)
      self.mObserversOf_boardInstances = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_boardInstances_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_boardInstances?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure selectedPageIndex simple stored property
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedPageIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.zoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure showDisplaySettingView simple stored property
    self.showDisplaySettingView_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.showDisplaySettingView_property.optionalSelection ?? .single (nil)
    }
  //--- Configure modelInsertionRotation simple stored property
    self.modelInsertionRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.modelInsertionRotation_property.optionalSelection ?? .single (nil)
    }
  //--- Configure automaticBoardSize simple stored property
    self.automaticBoardSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.automaticBoardSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardManualWidth simple stored property
    self.boardManualWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardManualWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardManualHeight simple stored property
    self.boardManualHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardManualHeight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardWidthUnit simple stored property
    self.boardWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardWidthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardHeightUnit simple stored property
    self.boardHeightUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardHeightUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure overlapingArrangment simple stored property
    self.overlapingArrangment_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.overlapingArrangment_property.optionalSelection ?? .single (nil)
    }
  //--- Configure selectedBoardXUnit simple stored property
    self.selectedBoardXUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedBoardXUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure selectedBoardYUnit simple stored property
    self.selectedBoardYUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedBoardYUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitWidth simple stored property
    self.boardLimitWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitWidthUnit simple stored property
    self.boardLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitWidthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPDFBoardBackgroundColor simple stored property
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPDFBoardBackgroundColor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mGenerateMergerArchive simple stored property
    self.mGenerateMergerArchive_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mGenerateMergerArchive_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mGenerateGerberAndPDF simple stored property
    self.mGenerateGerberAndPDF_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mGenerateGerberAndPDF_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPDFProductGrid simple stored property
    self.mPDFProductGrid_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPDFProductGrid_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mGerberProductUnit simple stored property
    self.mGerberProductUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mGerberProductUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkName simple stored property
    self.mArtworkName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkVersion simple stored property
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkFileSystemLibraryStatus simple stored property
    self.mArtworkFileSystemLibraryStatus_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkFileSystemLibraryStatus_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkFileSystemLibraryRequiresAttention simple stored property
    self.mArtworkFileSystemLibraryRequiresAttention_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkFileSystemLibraryRequiresAttention_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkIsUpdatable simple stored property
    self.mArtworkIsUpdatable_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkIsUpdatable_property.optionalSelection ?? .single (nil)
    }
  //--- Configure modelNames transient property
    self.modelNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.modelNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardRect transient property
    self.boardRect_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardRect_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardWidth transient property
    self.boardWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardHeight transient property
    self.boardHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardHeight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure segmentedControlArtworkAttentionImage transient property
    self.segmentedControlArtworkAttentionImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.segmentedControlArtworkAttentionImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure comments transient property
    self.comments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.comments_property.optionalSelection ?? .single (nil)
    }
  //--- Configure layoutLayerWarningMessage transient property
    self.layoutLayerWarningMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layoutLayerWarningMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure layerConfigurationString transient property
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layerConfigurationString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure emptyDrillFileExtension transient property
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.emptyDrillFileExtension_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasInnerElements transient property
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasInnerElements_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasSixLayers transient property
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSixLayers_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardOutlineRectDisplay transient property
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardOutlineRectDisplay_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_MergerRoot
//--------------------------------------------------------------------------------------------------

final class StoredObject_MergerRoot : ReadOnlyObject_MergerRoot, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String?
  var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! MergerRoot
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! MergerRoot
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : MergerRoot?

    init (_ inOldValue : MergerRoot?) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
  //  self.mWeakInternalValue = inObject.mOldValue
    self.setProp (inObject.mOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
     self.undoManager?.registerUndo (  // For Swift 6
      withTarget: self,
      selector: #selector (Self.myPerformUndo (_:)),
      object: MyPrivateUndoer (inOldValue)
    )
//    self.undoManager?.registerUndo (withTarget: self) { $0.setProp (inOldValue) }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < MergerRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : MergerRoot? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : MergerRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

