//--- START OF USER ZONE 1

extension AutoLayoutPackageDocument : NSTextFieldDelegate {

  func proposedPadNumberDidChange (_ padNumberProperty : EBGenericStoredProperty <Int>,
                                   _ errorMessage_property : EBGenericStoredProperty <String>,
                                   _ okButton : AutoLayoutSheetDefaultOkButton) {
    let proposedValue = padNumberProperty.propval
    let selectedZone = self.mPackageZoneSelectionController.selectedArray [0]
  //--- Current forbidden pad numbers
    var currentForbiddenPadNumberSet = Set <Int> ()
    for f in selectedZone.forbiddenPadNumbers.values {
      currentForbiddenPadNumberSet.insert (f.padNumber)
    }
    if currentForbiddenPadNumberSet.contains (proposedValue) {
      errorMessage_property.setProp ("Duplicate Pad Number")
      okButton.isEnabled = false
    }else{
      errorMessage_property.setProp ("")
      okButton.isEnabled = true
    }
  }
}

//--- END OF USER ZONE 1
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension AutoLayoutPackageDocument {
  @objc func addZoneForbiddenPadNumberAction (_ sender : NSObject?) {
//--- START OF USER ZONE 2
    if self.mPackageZoneSelectionController.selectedArray.count == 1, let window = self.windowForSheet {
      let selectedZone = self.mPackageZoneSelectionController.selectedArray [0]
    //-------------------------- Current forbidden pad numbers
      var currentForbiddenPadNumberSet = Set <Int> ()
      for f in selectedZone.forbiddenPadNumbers.values {
        currentForbiddenPadNumberSet.insert (f.padNumber)
      }
   //-------------------------- Propose an initial value for new forbidden pad number
      var initialValue = 1
      while currentForbiddenPadNumberSet.contains (initialValue) {
        initialValue += 1
      }
    //-------------------------- Models
      let newFordiddenPadNumber_property = EBGenericStoredProperty <Int> (defaultValue: initialValue, undoManager: nil)
      let errorMessage_property = EBGenericStoredProperty <String> (defaultValue: "", undoManager: nil)
    //-------------------------- Build Panel
      let panel = NSPanel ()
      let okButton = AutoLayoutSheetDefaultOkButton (title: "Add", size: .small, sheet: panel, isInitialFirstResponder: true)
      let intField = AutoLayoutIntField (width: 48, size: .small)
        .bind_value (newFordiddenPadNumber_property, sendContinously: true)
        .set (min: 1)
   //-------------------------- Add Observer for new forbidden pad number
      let observer = EBReadOnlyPropertyController (
        observedObjects: [newFordiddenPadNumber_property],
        callBack: { [weak self] in
          self?.proposedPadNumberDidChange (newFordiddenPadNumber_property, errorMessage_property, okButton)
        }
      )
    //---
      let mainVStack = AutoLayoutVerticalStackView ().set (margins: 20)
    //--- Title
      do{
        let hStack = AutoLayoutHorizontalStackView ()
        hStack.appendFlexibleSpace ()
        let label = AutoLayoutStaticLabel (title: "Add a forbidden Pad Number to '\(selectedZone.zoneName)' Zone", bold: true, size: .regular)
        hStack.appendView (label)
        hStack.appendFlexibleSpace ()
        mainVStack.appendView (hStack)
      }
    //--- Horizontal Stack, app image -- contents
      do{
        let hStack = AutoLayoutHorizontalStackView ()
        hStack.appendView (AutoLayoutApplicationImage ())
        let contentsVStack = AutoLayoutVerticalStackView () ;
        hStack.appendView (contentsVStack)
        mainVStack.appendView (hStack)
      //--- Forbidden Pad Number
        do {
          let hStack = AutoLayoutHorizontalStackView ()
          let label = AutoLayoutStaticLabel (title: "New Forbidden Pad Number:", bold: false, size: .regular)
          hStack.appendView (label)
          panel.initialFirstResponder = intField
          hStack.appendView (intField)
          contentsVStack.appendView (hStack)
        }
      //--- Error message
        do{
          let errorMessage = AutoLayoutLabel (bold: false, size: .regular)
            .bind_title (errorMessage_property)
            .setRedTextColor ()
          contentsVStack.appendView (errorMessage)
        }
        contentsVStack.appendFlexibleSpace()
      //--- Buttons
        do {
          let hStack = AutoLayoutHorizontalStackView ()
          hStack.appendFlexibleSpace()
          let cancelButton = AutoLayoutSheetCancelButton (title: "Cancel", size: .regular, sheet: panel, isInitialFirstResponder: false)
          hStack.appendView (cancelButton)
          hStack.appendView (okButton)
          contentsVStack.appendView (hStack)
        }
      }
      panel.setContentSize (mainVStack.fittingSize)
//      panel.contentView = mainVStack
      mainVStack.frame.size = panel.frame.size
      panel.contentViewController = EBViewController (mainVStack)
   //-------------------------- Dialog
      window.beginSheet (panel) { (_ inResponse : NSApplication.ModalResponse) in
        observer.unregister ()
        intField.autoLayoutCleanUp ()
        if inResponse == .stop {
          let newForbiddenPadNumber = newFordiddenPadNumber_property.propval
          let fpn = ForbiddenPadNumber (self.ebUndoManager)
          fpn.padNumber = newForbiddenPadNumber
          selectedZone.forbiddenPadNumbers.append (fpn)
        //---- Adjust pad number
          var pads = [PackagePad] ()
          for candidatePad in self.rootObject.packagePads.values {
            if candidatePad.zone === selectedZone {
              pads.append (candidatePad)
            }
          }
          pads.sort { $0.padNumber < $1.padNumber }
          var forbiddenPadNumberSet = Set <Int> ()
          for forbiddenPadNumber in selectedZone.forbiddenPadNumbers.values {
            forbiddenPadNumberSet.insert (forbiddenPadNumber.padNumber)
          }
          var newPadNumber = 1
          for pad in pads {
            while forbiddenPadNumberSet.contains (newPadNumber) {
              newPadNumber += 1
            }
            pad.padNumber = newPadNumber
            newPadNumber += 1
          }
        }
      }
    }
//--- END OF USER ZONE 2
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
