//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutPackageDocument) class AutoLayoutPackageDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: mModelImageObjectsController
  //································································································

  final var mModelImageObjectsController = Controller_AutoLayoutPackageDocument_mModelImageObjectsController ()

  //································································································
  //   Array controller: mPackageObjectsController
  //································································································

  final var mPackageObjectsController = Controller_AutoLayoutPackageDocument_mPackageObjectsController ()

  //································································································
  //   Selection controller: mPackageSegmentSelectionController
  //································································································

  final var mPackageSegmentSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageSegmentSelectionController ()

  //································································································
  //   Selection controller: mPackageBezierCurveSelectionController
  //································································································

  final var mPackageBezierCurveSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageBezierCurveSelectionController ()

  //································································································
  //   Selection controller: mPackageOvalSelectionController
  //································································································

  final var mPackageOvalSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageOvalSelectionController ()

  //································································································
  //   Selection controller: mPackageArcSelectionController
  //································································································

  final var mPackageArcSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageArcSelectionController ()

  //································································································
  //   Selection controller: mPackageGuideSelectionController
  //································································································

  final var mPackageGuideSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageGuideSelectionController ()

  //································································································
  //   Selection controller: mPackageDimensionSelectionController
  //································································································

  final var mPackageDimensionSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageDimensionSelectionController ()

  //································································································
  //   Selection controller: mPackageZoneSelectionController
  //································································································

  final var mPackageZoneSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageZoneSelectionController ()

  //································································································
  //   Selection controller: mPackagePadSelectionController
  //································································································

  final var mPackagePadSelectionController = SelectionController_AutoLayoutPackageDocument_mPackagePadSelectionController ()

  //································································································
  //   Selection controller: mPackageSlavePadSelectionController
  //································································································

  final var mPackageSlavePadSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageSlavePadSelectionController ()

  //································································································
  //   Transient property: addSegmentButtonImage
  //································································································

  final let addSegmentButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addSegmentButtonImage : NSImage? {
    return self.addSegmentButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addBezierButtonImage
  //································································································

  final let addBezierButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addBezierButtonImage : NSImage? {
    return self.addBezierButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addOvalButtonImage
  //································································································

  final let addOvalButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addOvalButtonImage : NSImage? {
    return self.addOvalButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addArcButtonImage
  //································································································

  final let addArcButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addArcButtonImage : NSImage? {
    return self.addArcButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addMasterPadButtonImage
  //································································································

  final let addMasterPadButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addMasterPadButtonImage : NSImage? {
    return self.addMasterPadButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addSlavePadButtonImage
  //································································································

  final let addSlavePadButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addSlavePadButtonImage : NSImage? {
    return self.addSlavePadButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addGuideButtonImage
  //································································································

  final let addGuideButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addGuideButtonImage : NSImage? {
    return self.addGuideButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addDimensionButtonImage
  //································································································

  final let addDimensionButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addDimensionButtonImage : NSImage? {
    return self.addDimensionButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addZoneButtonImage
  //································································································

  final let addZoneButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addZoneButtonImage : NSImage? {
    return self.addZoneButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: metadataStatus
  //································································································

  final let metadataStatus_property = EBTransientProperty <MetadataStatus> ()

  //································································································

  final var metadataStatus : MetadataStatus? {
    return self.metadataStatus_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlPackageIssueImage
  //································································································

  final let segmentedControlPackageIssueImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var segmentedControlPackageIssueImage : NSImage? {
    return self.segmentedControlPackageIssueImage_property.optionalValue
  }

  //································································································
  //   Transient property: noIssue
  //································································································

  final let noIssue_property = EBTransientProperty <Bool> ()

  //································································································

  final var noIssue : Bool? {
    return self.noIssue_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlSegmentIssueImage
  //································································································

  final let segmentedControlSegmentIssueImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var segmentedControlSegmentIssueImage : NSImage? {
    return self.segmentedControlSegmentIssueImage_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlSegmentIssueString
  //································································································

  final let segmentedControlSegmentIssueString_property = EBTransientProperty <String> ()

  //································································································

  final var segmentedControlSegmentIssueString : String? {
    return self.segmentedControlSegmentIssueString_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mPackageGraphicView : AutoLayoutGraphicView? = nil
  weak final var mPackageIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mProgramErrorTextField : AutoLayoutLabel? = nil
  weak final var mProgramTextView : AutoLayoutTextView? = nil
  weak final var mZoneForbiddenPadNumberTableView : AutoLayoutOneStringArrayTableView? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "PackageRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : PackageRoot { return self.mRootObject as! PackageRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let pageMasterView = self.PageMasterView ()
    let modelImagePage = self.ModelImagePage ()
    let packagePage = self.PackagePage ()
    let programPage = self.ProgramPage ()
    let infosPage = self.InfosPage ()
    let view_0 = AutoLayoutToolBar ()
      .add (title: "Page", item: { () -> NSView in let item = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
  .addPage (title: "Model Image", tooltip: "Model Image Editor", pageView: modelImagePage)
  .addPage (title: "Package", tooltip: "Package Editor", pageView: packagePage)
  .addPage (title: "Program", tooltip: "Program Editor", pageView: programPage)
  .addPage (title: "Infos", tooltip: "Package Informations", pageView: infosPage)
  .bind_selectedPage (self.rootObject.selectedPageIndex_property)
  .bind_segmentImage (self.segmentedControlPackageIssueImage_property, segmentIndex:1)
 ; return item } ())
      .add (title: "Signature", item: { () -> NSView in let item = AutoLayoutSignatureField (size: .regular)
  .bind_signature (self.signatureObserver_property)
 ; return item } ())
      .add (title: "Version", item: { () -> NSView in let item = AutoLayoutVersionField (size: .regular)
  .bind_version (self.versionObserver_property)
  .bind_versionShouldChange (self.versionShouldChangeObserver_property)
 ; return item } ())
      .addFlexibleSpace ()
      .add (title: "Status", item: { () -> NSView in let item = AutoLayoutStatusBadgeView ()
  .bind_tooltip (self.statusMessage_property)
  .bind_errorCount (self.statusErrorCount_property)
  .bind_warningCount (self.statusWarningCount_property)
 ; return item } ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ModelImagePage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ModelImagePage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let view_0 = AutoLayoutVerticalStackView ()
    do{
      let view_0_0 = AutoLayoutGridView2 ()
        .set (width: 250)
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (topMargin: .regular)
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Style", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
  .bind_selectedIndex (self.rootObject.mModelImagePageGridStyle_property)
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "1 Step", withTag: 1)
  .add (title: "2 Steps", withTag: 2)
  .add (title: "4 Steps", withTag: 4)
  .add (title: "5 Steps", withTag: 5)
  .add (title: "8 Steps", withTag: 8)
  .add (title: "10 Steps", withTag: 10)
  .add (title: "12 Steps", withTag: 12)
  .add (title: "15 Steps", withTag: 15)
  .add (title: "20 Steps", withTag: 20)
  .add (title: "25 Steps", withTag: 25)
  .add (title: "50 Steps", withTag: 50)
  .add (title: "100 Steps", withTag: 100)
  .add (title: "200 Steps", withTag: 200)
  .bind_selectedTag (self.rootObject.mModelImagePageGridDisplayFactor_property)
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.mModelImagePageGridStep_property, self.rootObject.mModelImagePageGridStepUnit_property)
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Horizontal", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mModelImagePageHorizontalFlip_property)
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Vertical", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.mModelImagePageVerticalFlip_property)
 ; return right } ())
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutGridView2 ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.mModelImagePageXPlacardUnit_property)
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.mModelImagePageYPlacardUnit_property)
 ; return right } ())
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutGridView2 ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .add (left: { () -> NSView in let left = AutoLayoutPullDownButton (title: "Action", size: .small)
  .add (item: AutoLayoutMenuItemDescriptor (title: "Paste Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.loadModelImageFromPasteboardAction (_:)), enableBinding: .not (.prop (self.rootObject.hasModelImage_property))))
  .add (item: AutoLayoutMenuItemDescriptor (title: "Load DIL16 Embedded Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.loadDIL16ModelImageFromResourcesAction (_:)), enableBinding: .not (.prop (self.rootObject.hasModelImage_property))))
  .add (item: AutoLayoutMenuItemDescriptor (title: "Copy Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.copyModelImageAction (_:)), enableBinding: .prop (self.rootObject.hasModelImage_property)))
  .add (item: AutoLayoutMenuItemDescriptor (title: "Remove Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.removeModelImageAction (_:)), enableBinding: .prop (self.rootObject.hasModelImage_property)))
  .add (item: AutoLayoutMenuItemDescriptor (title: "Reset Green and Brown Points", target: self, selector: #selector (AutoLayoutPackageDocument.resetModelImagePointsAction (_:)), enableBinding: .prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutLabel (bold: false, size: .small)
  .bind_title (self.rootObject.modelImageSizeString_property)
 ; return right } ())
        .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .expandableWidth ()
  .bind_setter6 (self.rootObject.mDimensionUnitFirstModelPointX_property, self.rootObject.mDimensionUnitFirstModelPointY_property, self.rootObject.mDimensionUnitSecondModelPointDx_property, self.rootObject.mDimensionUnitSecondModelPointDy_property, self.rootObject.mModelImageSecondPointXUnit_property, self.rootObject.mModelImageSecondPointYUnit_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return single } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Green", right: "X", bold: false, size: .small)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.mModelImageFirstPointX_property, self.rootObject.mDimensionUnitFirstModelPointX_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.mModelImageFirstPointY_property, self.rootObject.mDimensionUnitFirstModelPointY_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "∆X", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.mModelImageSecondPointDx_property, self.rootObject.mDimensionUnitSecondModelPointDx_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "∆Y", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.mModelImageSecondPointDy_property, self.rootObject.mDimensionUnitSecondModelPointDy_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Brown", right: "X", bold: false, size: .small)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.secondPointX_property, self.rootObject.mModelImageSecondPointXUnit_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.secondPointY_property, self.rootObject.mModelImageSecondPointYUnit_property)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "PointSize", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutLinearSlider (min: 1, max: 61, ticks: 19)
  .bind_intValue (self.rootObject.mModelPointsCircleRadius_property, sendContinously:true)
  .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
 ; return right } ())
        .add (single: { () -> NSView in let single = AutoLayoutHorizontalStackView ()
do{
  let single_0 = AutoLayoutButton (title: "Lock Points to Model Image", size: .small)
    .bind_enabled (.boolcmp (.not (.prop (self.rootObject.mPointsAreLocked_property)), .and, .prop (self.rootObject.hasModelImage_property)))
    .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
    .bind_run (
      target: self,
      selector: #selector (AutoLayoutPackageDocument.lockImagePointsAction (_:))
    )
  _ = single.appendView (single_0)
  let single_1 = AutoLayoutFlexibleSpace ()
  _ = single.appendView (single_1)
  let single_2 = AutoLayoutImageObserverView (size: .small)
    .bind_image (self.rootObject.lockImageView_property)
    .bind_hidden (.not (.prop (self.rootObject.hasModelImage_property)))
  _ = single.appendView (single_2)
}
 ; return single } ())
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_5)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 12000)
      .bind_backgroundImageData (self.rootObject.mModelImageData_property)
      .bind_underObjectsDisplay (self.rootObject.backgroundImagePageBackgroundDisplay_property)
      .bind_horizontalFlip (self.rootObject.mModelImagePageHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mModelImagePageVerticalFlip_property)
      .bind_mouseGrid (self.rootObject.mModelImagePageGridStep_property)
      .bind_gridStep (self.rootObject.mModelImagePageGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mModelImagePageGridStep_property)
      .bind_gridStyle (self.rootObject.mModelImagePageGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mModelImagePageGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorOfPackageGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfPackageGrid_property)
      .bind_zoom (self.rootObject.mModelImagePageZoom_property)
      .bind_backColor (preferences_packageBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.mModelImagePageXPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.mModelImagePageYPlacardUnit_property)
      .bind_graphic_controller (self.mModelImageObjectsController)
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePageInspectorMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePageInspectorMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PackagePage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PackagePage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let packagePageInspectorMasterView = self.PackagePageInspectorMasterView ()
    let selectedObjectsInspectorView = self.SelectedObjectsInspectorView ()
    let gridZoomInspectorView = self.GridZoomInspectorView ()
    let displayInspectorView = self.DisplayInspectorView ()
    let issuesInspectorView = self.IssuesInspectorView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (topMargin: .regular)
        .set (spacing: .large)
      do{
        let view_0_0_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_0_0 = AutoLayoutDragSourceButton (tooltip: "Add Segment")
            .bind_image (self.addSegmentButtonImage_property)
          self.configure_addPackageSegment (view_0_0_0_0) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_0)
          let view_0_0_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_1)
          let view_0_0_0_2 = AutoLayoutDragSourceButton (tooltip: "Add Bezier")
            .bind_image (self.addBezierButtonImage_property)
          self.configure_addPackageBezier (view_0_0_0_2) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_2)
          let view_0_0_0_3 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_3)
          let view_0_0_0_4 = AutoLayoutDragSourceButton (tooltip: "Add Oval")
            .bind_image (self.addOvalButtonImage_property)
          self.configure_addPackageOval (view_0_0_0_4) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_4)
          let view_0_0_0_5 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_5)
          let view_0_0_0_6 = AutoLayoutDragSourceButton (tooltip: "Add Arc")
            .bind_image (self.addArcButtonImage_property)
          self.configure_addPackageArc (view_0_0_0_6) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_6)
          let view_0_0_0_7 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_7)
          let view_0_0_0_8 = AutoLayoutDragSourceButton (tooltip: "Add Master Pad")
            .bind_image (self.addMasterPadButtonImage_property)
          self.configure_addPackageMasterPad (view_0_0_0_8) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_8)
          let view_0_0_0_9 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_9)
          let view_0_0_0_10 = AutoLayoutDragSourceButton (tooltip: "Add Slave Pad")
            .bind_image (self.addSlavePadButtonImage_property)
            .bind_enabled (.intcmp (.prop (self.rootObject.packagePads_property.count_property), .gt, .literalInt (0)))
          self.configure_addPackageSlavePad (view_0_0_0_10) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_10)
          let view_0_0_0_11 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_11)
          let view_0_0_0_12 = AutoLayoutDragSourceButton (tooltip: "Add Zone")
            .bind_image (self.addZoneButtonImage_property)
          self.configure_addPackageZone (view_0_0_0_12) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_12)
          let view_0_0_0_13 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_13)
          let view_0_0_0_14 = AutoLayoutDragSourceButton (tooltip: "Add Guide")
            .bind_image (self.addGuideButtonImage_property)
          self.configure_addPackageGuide (view_0_0_0_14) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_14)
          let view_0_0_0_15 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_15)
          let view_0_0_0_16 = AutoLayoutDragSourceButton (tooltip: "Add Dimension")
            .bind_image (self.addDimensionButtonImage_property)
          self.configure_addPackageDimension (view_0_0_0_16) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_16)
        }
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutGridView2 ()
          .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Model Image Opacity", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutLinearSlider (min: 0, max: 1, ticks: 11)
  .bind_doubleValue (self.rootObject.mModelImageOpacity_property, sendContinously:true)
  .bind_enabled (.prop (self.rootObject.hasModelImage_property))
 ; return right } ())
          .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Auto Numbering", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: PadNumbering.popupTitles (), size: .small)
  .bind_selectedIndex (self.rootObject.padNumbering_property)
 ; return right } ())
          .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutStaticLabel (title: "From", bold: false, size: .small, alignment: .center)
    .bind_hidden (.not (.prop (self.rootObject.counterClockNumbering_property)))
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutIntField (minWidth: 45, size: .small)
    .set (min: 0)
    .set (max: 360)
    .set (format: "##0°")
    .bind_value (self.rootObject.counterClockNumberingStartAngle_property, sendContinously:true)
    .bind_hidden (.not (.prop (self.rootObject.counterClockNumbering_property)))
  _ = right.appendView (right_1)
}
 ; return right } ())
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
      do{
        let view_0_2_0 = AutoLayoutSegmentedControlWithPages (documentView: packagePageInspectorMasterView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "🛠", tooltip: "Selected Object Inspector", pageView: selectedObjectsInspectorView)
          .addPage (title: "🔍", tooltip: "Grid / Zoom Inspector", pageView: gridZoomInspectorView)
          .addPage (title: "🔍P", tooltip: "Display Inspector (values stored in Application Preferences)", pageView: displayInspectorView)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: issuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
          .bind_segmentImage (self.segmentedControlSegmentIssueImage_property, segmentIndex:3)
          .bind_segmentTitle (self.segmentedControlSegmentIssueString_property, segmentIndex:3)
        self.configure_packagePageSegmentedControl (view_0_2_0) // Configurator
        _ = view_0_2.appendView (view_0_2_0)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (spacing: .large)
      do{
        let view_0_3_0 = packagePageInspectorMasterView
        _ = view_0_3.appendView (view_0_3_0)
      }
      _ = view_0.appendView (view_0_3)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 12000)
      .bind_foregroundImageData (self.rootObject.mModelImageData_property)
      .bind_foregroundImageOpacity (self.rootObject.mModelImageOpacity_property)
      .bind_horizontalFlip (self.rootObject.horizontalFlip_property)
      .bind_verticalFlip (self.rootObject.verticalFlip_property)
      .bind_overObjectsDisplay (self.rootObject.padNumberDisplay_property)
      .bind_mouseGrid (self.rootObject.gridStep_property)
      .bind_gridStep (self.rootObject.gridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.gridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.gridStepMultipliedByDisplayFactor_property)
      .bind_gridStyle (self.rootObject.gridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.gridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorOfPackageGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfPackageGrid_property)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_backColor (preferences_packageBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.xPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.yPlacardUnit_property)
      .bind_graphic_controller (self.mPackageObjectsController)
    self.mPackageGraphicView = view_2 // Outlet
    self.configure_packageGraphicView (view_2) // Configurator
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW IssuesInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func IssuesInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.statusMessage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      .bind_issues (self.issues_property)
    self.mPackageIssueTableView = view_1 // Outlet
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SelectedObjectsInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SelectedObjectsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let segmentInspectorView = self.SegmentInspectorView ()
    let bezierCurveInspectorView = self.BezierCurveInspectorView ()
    let ovalInspectorView = self.OvalInspectorView ()
    let arcInspectorView = self.ArcInspectorView ()
    let masterPadInspectorView = self.MasterPadInspectorView ()
    let slavePadInspectorView = self.SlavePadInspectorView ()
    let guideInspectorView = self.GuideInspectorView ()
    let dimensionInspectorView = self.DimensionInspectorView ()
    let zoneInspectorView = self.ZoneInspectorView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: PackageSegment.self, inspectorView: segmentInspectorView)
      .addObjectInspector (forEntity: PackageBezier.self, inspectorView: bezierCurveInspectorView)
      .addObjectInspector (forEntity: PackageOval.self, inspectorView: ovalInspectorView)
      .addObjectInspector (forEntity: PackageArc.self, inspectorView: arcInspectorView)
      .addObjectInspector (forEntity: PackagePad.self, inspectorView: masterPadInspectorView)
      .addObjectInspector (forEntity: PackageSlavePad.self, inspectorView: slavePadInspectorView)
      .addObjectInspector (forEntity: PackageGuide.self, inspectorView: guideInspectorView)
      .addObjectInspector (forEntity: PackageDimension.self, inspectorView: dimensionInspectorView)
      .addObjectInspector (forEntity: PackageZone.self, inspectorView: zoneInspectorView)
      .bind_graphic_controller (self.mPackageObjectsController)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SegmentInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SegmentInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Segment Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter5 (self.mPackageSegmentSelectionController.x1Unit_property, self.mPackageSegmentSelectionController.y1Unit_property, self.mPackageSegmentSelectionController.x2Unit_property, self.mPackageSegmentSelectionController.y2Unit_property, self.mPackageSegmentSelectionController.lengthUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "First", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x1_property, self.mPackageSegmentSelectionController.x1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y1_property, self.mPackageSegmentSelectionController.y1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Second", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x2_property, self.mPackageSegmentSelectionController.x2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y2_property, self.mPackageSegmentSelectionController.y2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Length", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.lengthInCanariUnit_property, self.mPackageSegmentSelectionController.lengthUnit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BezierCurveInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BezierCurveInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Bezier Curve Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter8 (self.mPackageBezierCurveSelectionController.x1Unit_property, self.mPackageBezierCurveSelectionController.y1Unit_property, self.mPackageBezierCurveSelectionController.x2Unit_property, self.mPackageBezierCurveSelectionController.y2Unit_property, self.mPackageBezierCurveSelectionController.cpx1Unit_property, self.mPackageBezierCurveSelectionController.cpy1Unit_property, self.mPackageBezierCurveSelectionController.cpx2Unit_property, self.mPackageBezierCurveSelectionController.cpy2Unit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "First", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x1_property, self.mPackageBezierCurveSelectionController.x1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y1_property, self.mPackageBezierCurveSelectionController.y1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Second", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x2_property, self.mPackageBezierCurveSelectionController.x2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y2_property, self.mPackageBezierCurveSelectionController.y2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "First Ctrl", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx1_property, self.mPackageBezierCurveSelectionController.cpx1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy1_property, self.mPackageBezierCurveSelectionController.cpy1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Second Ctrl", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx2_property, self.mPackageBezierCurveSelectionController.cpx2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy2_property, self.mPackageBezierCurveSelectionController.cpy2Unit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW OvalInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func OvalInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Oval Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter4 (self.mPackageOvalSelectionController.xUnit_property, self.mPackageOvalSelectionController.yUnit_property, self.mPackageOvalSelectionController.widthUnit_property, self.mPackageOvalSelectionController.heightUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Bottom Left", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageOvalSelectionController.x_property, self.mPackageOvalSelectionController.xUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageOvalSelectionController.y_property, self.mPackageOvalSelectionController.yUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageOvalSelectionController.width_property, self.mPackageOvalSelectionController.widthUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageOvalSelectionController.height_property, self.mPackageOvalSelectionController.heightUnit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArcInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArcInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Arc Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter5 (self.mPackageArcSelectionController.xCenterUnit_property, self.mPackageArcSelectionController.yCenterUnit_property, self.mPackageArcSelectionController.radiusUnit_property, self.mPackageArcSelectionController.startTangentUnit_property, self.mPackageArcSelectionController.endTangentUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Center", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageArcSelectionController.xCenter_property, self.mPackageArcSelectionController.xCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageArcSelectionController.yCenter_property, self.mPackageArcSelectionController.yCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Radius", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageArcSelectionController.radius_property, self.mPackageArcSelectionController.radiusUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Start Angle", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
  .bind_angle (self.mPackageArcSelectionController.startAngle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Angle", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariAngleField (minWidth: 64, size: .small)
  .bind_angle (self.mPackageArcSelectionController.arcAngle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Start Tangent", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageArcSelectionController.startTangent_property, self.mPackageArcSelectionController.startTangentUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "End Tangent", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageArcSelectionController.endTangent_property, self.mPackageArcSelectionController.endTangentUnit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutCheckbox (title: "Path is Closed", size: .small)
        .bind_value (self.mPackageArcSelectionController.pathIsClosed_property)
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW GuideInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func GuideInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Guide Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter4 (self.mPackageGuideSelectionController.x1Unit_property, self.mPackageGuideSelectionController.y1Unit_property, self.mPackageGuideSelectionController.x2Unit_property, self.mPackageGuideSelectionController.y2Unit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "First", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageGuideSelectionController.x1_property, self.mPackageGuideSelectionController.x1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageGuideSelectionController.y1_property, self.mPackageGuideSelectionController.y1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Second", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageGuideSelectionController.x2_property, self.mPackageGuideSelectionController.x2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageGuideSelectionController.y2_property, self.mPackageGuideSelectionController.y2Unit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DimensionInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DimensionInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Dimension Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter7 (self.mPackageDimensionSelectionController.x1Unit_property, self.mPackageDimensionSelectionController.y1Unit_property, self.mPackageDimensionSelectionController.x2Unit_property, self.mPackageDimensionSelectionController.y2Unit_property, self.mPackageDimensionSelectionController.distanceUnit_property, self.mPackageDimensionSelectionController.xDimensionUnit_property, self.mPackageDimensionSelectionController.yDimensionUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "First", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.x1_property, self.mPackageDimensionSelectionController.x1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.y1_property, self.mPackageDimensionSelectionController.y1Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Second", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.x2_property, self.mPackageDimensionSelectionController.x2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.y2_property, self.mPackageDimensionSelectionController.y2Unit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Distance", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.distanceInCanariUnit_property, self.mPackageDimensionSelectionController.distanceUnit_property)
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Label", right: "∆X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.xDimension_property, self.mPackageDimensionSelectionController.xDimensionUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "∆Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.yDimension_property, self.mPackageDimensionSelectionController.yDimensionUnit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutCheckbox (title: "Draw Label Background", size: .small)
        .bind_value (self.mPackageDimensionSelectionController.drawDimensionBackground_property)
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutButton (title: "Set Label at Mid X", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutPackageDocument.setDimensionTextOriginAtMidXAction (_:))
      )
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutButton (title: "Set Label at Mid Y", size: .small)
      .expandableWidth ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutPackageDocument.setDimensionTextOriginAtMidYAction (_:))
      )
    _ = vStackView.appendView (view_4)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ZoneInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ZoneInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Zone Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter6 (self.mPackageZoneSelectionController.xUnit_property, self.mPackageZoneSelectionController.yUnit_property, self.mPackageZoneSelectionController.widthUnit_property, self.mPackageZoneSelectionController.heightUnit_property, self.mPackageZoneSelectionController.xNameUnit_property, self.mPackageZoneSelectionController.yNameUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Bottom Left", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.x_property, self.mPackageZoneSelectionController.xUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.y_property, self.mPackageZoneSelectionController.yUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.width_property, self.mPackageZoneSelectionController.widthUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.height_property, self.mPackageZoneSelectionController.heightUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Label", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.xName_property, self.mPackageZoneSelectionController.xNameUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageZoneSelectionController.yName_property, self.mPackageZoneSelectionController.yNameUnit_property)
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Name", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTextField (minWidth: 56, size: .small)
  .bind_value (self.mPackageZoneSelectionController.zoneName_property, sendContinously:true)
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutCheckbox (title: "Show Zone Name", size: .small)
  .expandableWidth ()
  .bind_value (self.mPackageZoneSelectionController.displayZoneName_property)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutCheckbox (title: "Show Zone Name with Pad Numbers", size: .small)
  .expandableWidth ()
  .bind_value (self.mPackageZoneSelectionController.displayZoneNameWithPadNumbers_property)
 ; return single } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Auto Numbering", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: PadNumbering.popupTitles (), size: .small)
  .bind_selectedIndex (self.mPackageZoneSelectionController.zoneNumbering_property)
 ; return right } ())
      .addSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutVerticalStackView ()
      do{
        let view_2_0_0 = AutoLayoutButton (title: "+", size: .small)
          .set (width: 32)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutPackageDocument.addZoneForbiddenPadNumberAction (_:))
          )
        _ = view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutButton (title: "-", size: .small)
          .set (width: 32)
          .bind_enabled (.not (.prop (self.mPackageZoneSelectionController.emptyForbiddenPadArray_property)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutPackageDocument.removeZoneForbiddenPadNumberAction (_:))
          )
        _ = view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_2)
      }
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutOneStringArrayTableView ()
        .bind_array (self.mPackageZoneSelectionController.forbiddenPadArray_property)
      self.mZoneForbiddenPadNumberTableView = view_2_1 // Outlet
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW MasterPadInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func MasterPadInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Master Pad Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter7 (self.mPackagePadSelectionController.xCenterUnit_property, self.mPackagePadSelectionController.yCenterUnit_property, self.mPackagePadSelectionController.widthUnit_property, self.mPackagePadSelectionController.heightUnit_property, self.mPackagePadSelectionController.holeWidthUnit_property, self.mPackagePadSelectionController.holeHeightUnit_property, self.mPackagePadSelectionController.annularRingUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Center", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.xCenter_property, self.mPackagePadSelectionController.xCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.yCenter_property, self.mPackagePadSelectionController.yCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.width_property, self.mPackagePadSelectionController.widthUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.height_property, self.mPackagePadSelectionController.heightUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Shape", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: PadShape.popupTitles (), size: .small)
  .bind_selectedIndex (self.mPackagePadSelectionController.padShape_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Style", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: PadStyle.popupTitles (), size: .small)
  .bind_selectedIndex (self.mPackagePadSelectionController.padStyle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Hole Width", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.holeWidth_property, self.mPackagePadSelectionController.holeWidthUnit_property)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Hole Height", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.holeHeight_property, self.mPackagePadSelectionController.holeHeightUnit_property)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Annular Ring", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackagePadSelectionController.annularRing_property, self.mPackagePadSelectionController.annularRingUnit_property)
  .bind_hidden (.not (.prop (self.mPackagePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Zone", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutLabel (bold: true, size: .small)
  .bind_title (self.mPackagePadSelectionController.zoneName_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Pad Number", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutIntObserverField (bold: true, size: .small)
  .bind_observedValue (self.mPackagePadSelectionController.padNumber_property)
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Slave Pads", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutIntObserverField (bold: true, size: .small)
  .bind_observedValue (self.mPackagePadSelectionController.slavePadCount_property)
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutCanariPadRenumberPullDownButton ()
  .bind_currentNumber (self.mPackagePadSelectionController.padNumber_property)
  .bind_currentZoneName (self.mPackagePadSelectionController.zoneName_property)
  .bind_enabled (.boolcmp (.boolcmp (.prop (self.mPackagePadSelectionController.noZone_property), .and, .prop (self.rootObject.freePadNumbering_property)), .or, .prop (self.mPackagePadSelectionController.zoneAllowsManualRenumbering_property)))
self.configure_configurePadRenumberPullDownButton (single) // Configurator
 ; return single } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SlavePadInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SlavePadInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Slave Pad Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (single: { () -> NSView in let single = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
  .bind_setter7 (self.mPackageSlavePadSelectionController.xCenterUnit_property, self.mPackageSlavePadSelectionController.yCenterUnit_property, self.mPackageSlavePadSelectionController.widthUnit_property, self.mPackageSlavePadSelectionController.heightUnit_property, self.mPackageSlavePadSelectionController.holeWidthUnit_property, self.mPackageSlavePadSelectionController.holeHeightUnit_property, self.mPackageSlavePadSelectionController.annularRingUnit_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Center", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.xCenter_property, self.mPackageSlavePadSelectionController.xCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.yCenter_property, self.mPackageSlavePadSelectionController.yCenterUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.width_property, self.mPackageSlavePadSelectionController.widthUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.height_property, self.mPackageSlavePadSelectionController.heightUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Shape", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: PadShape.popupTitles (), size: .small)
  .bind_selectedIndex (self.mPackageSlavePadSelectionController.padShape_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Style", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: SlavePadStyle.popupTitles (), size: .small)
  .bind_selectedIndex (self.mPackageSlavePadSelectionController.padStyle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Hole Width", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.holeWidth_property, self.mPackageSlavePadSelectionController.holeWidthUnit_property)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Hole Height", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.holeHeight_property, self.mPackageSlavePadSelectionController.holeHeightUnit_property)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Annular Ring", bold: false, size: .small, alignment: .right)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.annularRing_property, self.mPackageSlavePadSelectionController.annularRingUnit_property)
  .bind_hidden (.not (.prop (self.mPackageSlavePadSelectionController.padIsTraversing_property)))
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Linked to Pad", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariSlavePadAssignPopUpButton ()
  .bind_masterPadName (self.mPackageSlavePadSelectionController.masterPadNameWithZoneName_property)
  .bind_masterPadObjectIndexArray (self.rootObject.masterPadObjectIndexArray_property)
self.configure_configureSlavePadAssignPopUpButton (right) // Configurator
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW GridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func GridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "(Stored in Document Preferences)", bold: false, size: .mini, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Style", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
  .bind_selectedIndex (self.rootObject.gridStyle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "1 Step", withTag: 1)
  .add (title: "2 Steps", withTag: 2)
  .add (title: "4 Steps", withTag: 4)
  .add (title: "5 Steps", withTag: 5)
  .add (title: "8 Steps", withTag: 8)
  .add (title: "10 Steps", withTag: 10)
  .bind_selectedTag (self.rootObject.gridDisplayFactor_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariDimensionAndPopUp (size: .small)
  .bind_dimensionAndUnit (self.rootObject.gridStep_property, self.rootObject.gridStepUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Horizontal", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.horizontalFlip_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Vertical", size: .small)
  .expandableWidth ()
  .bind_value (self.rootObject.verticalFlip_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.xPlacardUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.yPlacardUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Knob Size", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutLinearSlider (min: 7, max: 41, ticks: 18)
  .expandableWidth ()
  .bind_intValue (self.rootObject.knobSizeMultpliedByTen_property, sendContinously:true)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DisplayInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "(Stored in Application Preferences)", bold: false, size: .mini, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_packageBackgroundColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_crossColorOfPackageGrid_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Line Grid", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_lineColorOfPackageGrid_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Package", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_packageColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Line Width", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "0.5 Point", withTag: 5)
  .add (title: "1.0 Point", withTag: 10)
  .add (title: "1.5 Point", withTag: 15)
  .add (title: "2.0 Points", withTag: 20)
  .add (title: "2.5 Points", withTag: 25)
  .bind_selectedTag (preferences_packageDrawingWidthMultipliedByTen_property)
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Pad Numbering", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_padNumberColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutCheckbox (title: "Show", size: .small)
    .expandableHeight ()
    .bind_value (preferences_showPadNumber_property)
  _ = right.appendView (right_1)
  let right_2 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_2)
}
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Pad Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_padNumberFont_property)
 ; return single } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Top Side Pads", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_frontSidePadColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutCheckbox (title: "Show", size: .small)
    .expandableHeight ()
    .bind_value (preferences_displayPackageFrontSidePads_property)
  _ = right.appendView (right_1)
  let right_2 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_2)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Back Side Pads", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_backSidePadColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutCheckbox (title: "Show", size: .small)
    .expandableHeight ()
    .bind_value (preferences_displayPackageBackSidePads_property)
  _ = right.appendView (right_1)
  let right_2 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_2)
}
 ; return right } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Guide Color", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_packageGuideColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Dimension Color", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_packageDimensionColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutStaticLabel (title: "Dimension Font", bold: false, size: .small, alignment: .left)
 ; return single } ())
      .add (single: { () -> NSView in let single = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_dimensionFont_property)
 ; return single } ())
      .addSeparator ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Zone Color", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_padZoneColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ProgramPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ProgramPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: .large)
      .set (rightMargin: .large)
      .set (bottomMargin: .large)
      .set (topMargin: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Load from Design", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.loadFromDesignAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Run", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.runProgramAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Clear Error", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.clearProgramErrorAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutLabel (bold: false, size: .small)
        .setRedTextColor ()
      self.mProgramErrorTextField = view_0_3 // Outlet
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutHelpButton (size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.programHelpAction (_:))
        )
      _ = view_0.appendView (view_0_5)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTextView ()
      .bind_value (self.rootObject.program_property)
    self.mProgramTextView = view_1 // Outlet
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW InfosPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func InfosPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: .large)
      .set (rightMargin: .large)
      .set (bottomMargin: .large)
      .set (topMargin: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.resetVersionAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .regular, alignment: .center)
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mPackageIssueTableView, self.mPackageGraphicView)
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: mModelImageObjectsController
    self.mModelImageObjectsController.bind_model (self.rootObject.mModelImageObjects_property, self.undoManager)

  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.bind_model (self.rootObject.packageObjects_property, self.undoManager)

  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageGuideSelectionController
    self.mPackageGuideSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageDimensionSelectionController
    self.mPackageDimensionSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageZoneSelectionController
    self.mPackageZoneSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Selection controller property: mPackageSlavePadSelectionController
    self.mPackageSlavePadSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)

  //--- Atomic property: addSegmentButtonImage
    self.addSegmentButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addSegmentButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageColor_property.startsBeingObserved (by: self.addSegmentButtonImage_property)

  //--- Atomic property: addBezierButtonImage
    self.addBezierButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addBezierButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageColor_property.startsBeingObserved (by: self.addBezierButtonImage_property)

  //--- Atomic property: addOvalButtonImage
    self.addOvalButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addOvalButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageColor_property.startsBeingObserved (by: self.addOvalButtonImage_property)

  //--- Atomic property: addArcButtonImage
    self.addArcButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addArcButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageColor_property.startsBeingObserved (by: self.addArcButtonImage_property)

  //--- Atomic property: addMasterPadButtonImage
    self.addMasterPadButtonImage_property.mReadModelFunction = {
        let s0 = preferences_frontSidePadColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addMasterPadButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_frontSidePadColor_property.startsBeingObserved (by: self.addMasterPadButtonImage_property)

  //--- Atomic property: addSlavePadButtonImage
    self.addSlavePadButtonImage_property.mReadModelFunction = {
        let s0 = preferences_frontSidePadColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addSlavePadButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_frontSidePadColor_property.startsBeingObserved (by: self.addSlavePadButtonImage_property)

  //--- Atomic property: addGuideButtonImage
    self.addGuideButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageGuideColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addGuideButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageGuideColor_property.startsBeingObserved (by: self.addGuideButtonImage_property)

  //--- Atomic property: addDimensionButtonImage
    self.addDimensionButtonImage_property.mReadModelFunction = {
        let s0 = preferences_packageDimensionColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addDimensionButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_packageDimensionColor_property.startsBeingObserved (by: self.addDimensionButtonImage_property)

  //--- Atomic property: addZoneButtonImage
    self.addZoneButtonImage_property.mReadModelFunction = {
        let s0 = preferences_padZoneColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_addZoneButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_padZoneColor_property.startsBeingObserved (by: self.addZoneButtonImage_property)


  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        let s1 = unwSelf.documentFileName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutPackageDocument_issues (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.issues_property)
    self.documentFileName_property.startsBeingObserved (by: self.issues_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_statusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.metadataStatus_property)

  //--- Atomic property: segmentedControlPackageIssueImage
    self.segmentedControlPackageIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_segmentedControlPackageIssueImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.segmentedControlPackageIssueImage_property)

  //--- Atomic property: noIssue
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_noIssue (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.noIssue_property)

  //--- Atomic property: segmentedControlSegmentIssueImage
    self.segmentedControlSegmentIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_segmentedControlSegmentIssueImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.segmentedControlSegmentIssueImage_property)

  //--- Atomic property: segmentedControlSegmentIssueString
    self.segmentedControlSegmentIssueString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_segmentedControlSegmentIssueString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.segmentedControlSegmentIssueString_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutPackageDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsBeingObserved (by: self.statusMessage_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

