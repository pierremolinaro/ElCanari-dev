//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_yCenter : AnyObject {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_radius : AnyObject {
  var radius : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_startAngle : AnyObject {
  var startAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_arcAngle : AnyObject {
  var arcAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_startTangent : AnyObject {
  var startTangent : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_endTangent : AnyObject {
  var endTangent : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_pathIsClosed : AnyObject {
  var pathIsClosed : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_xCenterUnit : AnyObject {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_yCenterUnit : AnyObject {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_radiusUnit : AnyObject {
  var radiusUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_startTangentUnit : AnyObject {
  var startTangentUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_endTangentUnit : AnyObject {
  var endTangentUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_xCenter : AnyObject {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_strokeBezierPath : AnyObject {
  var strokeBezierPath : EBBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageArc_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageArc : PackageObject,
         PackageArc_yCenter,
         PackageArc_radius,
         PackageArc_startAngle,
         PackageArc_arcAngle,
         PackageArc_startTangent,
         PackageArc_endTangent,
         PackageArc_pathIsClosed,
         PackageArc_xCenterUnit,
         PackageArc_yCenterUnit,
         PackageArc_radiusUnit,
         PackageArc_startTangentUnit,
         PackageArc_endTangentUnit,
         PackageArc_xCenter,
         PackageArc_strokeBezierPath,
         PackageArc_objectDisplay,
         PackageArc_selectionDisplay,
         PackageArc_issues {

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  final let yCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenter_toDefaultValue () {
    self.yCenter = 342900
  }

  //····················································································································

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: radius
  //····················································································································

  final let radius_property : EBStoredProperty_Int

  //····················································································································

  final func reset_radius_toDefaultValue () {
    self.radius = 342900
  }

  //····················································································································

  final var radius : Int {
    get { return self.radius_property.propval }
    set { self.radius_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: startAngle
  //····················································································································

  final let startAngle_property : EBStoredProperty_Int

  //····················································································································

  final func reset_startAngle_toDefaultValue () {
    self.startAngle = 45000
  }

  //····················································································································

  final var startAngle : Int {
    get { return self.startAngle_property.propval }
    set { self.startAngle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: arcAngle
  //····················································································································

  final let arcAngle_property : EBStoredProperty_Int

  //····················································································································

  final func reset_arcAngle_toDefaultValue () {
    self.arcAngle = 270000
  }

  //····················································································································

  final var arcAngle : Int {
    get { return self.arcAngle_property.propval }
    set { self.arcAngle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: startTangent
  //····················································································································

  final let startTangent_property : EBStoredProperty_Int

  //····················································································································

  final func reset_startTangent_toDefaultValue () {
    self.startTangent = 0
  }

  //····················································································································

  final var startTangent : Int {
    get { return self.startTangent_property.propval }
    set { self.startTangent_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: endTangent
  //····················································································································

  final let endTangent_property : EBStoredProperty_Int

  //····················································································································

  final func reset_endTangent_toDefaultValue () {
    self.endTangent = 0
  }

  //····················································································································

  final var endTangent : Int {
    get { return self.endTangent_property.propval }
    set { self.endTangent_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: pathIsClosed
  //····················································································································

  final let pathIsClosed_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_pathIsClosed_toDefaultValue () {
    self.pathIsClosed = false
  }

  //····················································································································

  final var pathIsClosed : Bool {
    get { return self.pathIsClosed_property.propval }
    set { self.pathIsClosed_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenterUnit_toDefaultValue () {
    self.xCenterUnit = 2286
  }

  //····················································································································

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenterUnit_toDefaultValue () {
    self.yCenterUnit = 2286
  }

  //····················································································································

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: radiusUnit
  //····················································································································

  final let radiusUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_radiusUnit_toDefaultValue () {
    self.radiusUnit = 2286
  }

  //····················································································································

  final var radiusUnit : Int {
    get { return self.radiusUnit_property.propval }
    set { self.radiusUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: startTangentUnit
  //····················································································································

  final let startTangentUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_startTangentUnit_toDefaultValue () {
    self.startTangentUnit = 2286
  }

  //····················································································································

  final var startTangentUnit : Int {
    get { return self.startTangentUnit_property.propval }
    set { self.startTangentUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: endTangentUnit
  //····················································································································

  final let endTangentUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_endTangentUnit_toDefaultValue () {
    self.endTangentUnit = 2286
  }

  //····················································································································

  final var endTangentUnit : Int {
    get { return self.endTangentUnit_property.propval }
    set { self.endTangentUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  final let xCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenter_toDefaultValue () {
    self.xCenter = 342900
  }

  //····················································································································

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var strokeBezierPath : EBBezierPath? {
    switch self.strokeBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager)
    self.radius_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager)
    self.startAngle_property = EBStoredProperty_Int (defaultValue: 45000, undoManager: inUndoManager)
    self.arcAngle_property = EBStoredProperty_Int (defaultValue: 270000, undoManager: inUndoManager)
    self.startTangent_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.endTangent_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.pathIsClosed_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager)
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.radiusUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.startTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.endTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.radius_property.selection
        let s3 = unwSelf.startAngle_property.selection
        let s4 = unwSelf.arcAngle_property.selection
        let s5 = unwSelf.pathIsClosed_property.selection
        let s6 = unwSelf.startTangent_property.selection
        let s7 = unwSelf.endTangent_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageArc_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.yCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.radius_property.addEBObserver (self.strokeBezierPath_property)
    self.startAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.arcAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.pathIsClosed_property.addEBObserver (self.strokeBezierPath_property)
    self.startTangent_property.addEBObserver (self.strokeBezierPath_property)
    self.endTangent_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.strokeBezierPath_property.selection
        let s1 = preferences_packageColor_property.selection
        let s2 = preferences_packageDrawingWidthMultipliedByTen_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_PackageArc_objectDisplay (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    preferences_packageColor_property.addEBObserver (self.objectDisplay_property)
    preferences_packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.radius_property.selection
        let s3 = unwSelf.startAngle_property.selection
        let s4 = unwSelf.arcAngle_property.selection
        let s5 = unwSelf.startTangent_property.selection
        let s6 = unwSelf.endTangent_property.selection
        let s7 = unwSelf.pathIsClosed_property.selection
        let s8 = unwSelf.knobSize_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_PackageArc_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.radius_property.addEBObserver (self.selectionDisplay_property)
    self.startAngle_property.addEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.addEBObserver (self.selectionDisplay_property)
    self.startTangent_property.addEBObserver (self.selectionDisplay_property)
    self.endTangent_property.addEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.radius_property.selection
        let s3 = unwSelf.startAngle_property.selection
        let s4 = unwSelf.arcAngle_property.selection
        let s5 = unwSelf.pathIsClosed_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageArc_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.radius_property.addEBObserver (self.issues_property)
    self.startAngle_property.addEBObserver (self.issues_property)
    self.arcAngle_property.addEBObserver (self.issues_property)
    self.pathIsClosed_property.addEBObserver (self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: self)
    self.endTangent_property.setSignatureObserver (observer: self)
    self.endTangentUnit_property.setSignatureObserver (observer: self)
    self.pathIsClosed_property.setSignatureObserver (observer: self)
    self.radius_property.setSignatureObserver (observer: self)
    self.radiusUnit_property.setSignatureObserver (observer: self)
    self.startAngle_property.setSignatureObserver (observer: self)
    self.startTangent_property.setSignatureObserver (observer: self)
    self.startTangentUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: yCenter
      self.yCenter_property.storeIn (dictionary: ioDictionary, forKey: "yCenter")
    //--- Atomic property: radius
      self.radius_property.storeIn (dictionary: ioDictionary, forKey: "radius")
    //--- Atomic property: startAngle
      self.startAngle_property.storeIn (dictionary: ioDictionary, forKey: "startAngle")
    //--- Atomic property: arcAngle
      self.arcAngle_property.storeIn (dictionary: ioDictionary, forKey: "arcAngle")
    //--- Atomic property: startTangent
      self.startTangent_property.storeIn (dictionary: ioDictionary, forKey: "startTangent")
    //--- Atomic property: endTangent
      self.endTangent_property.storeIn (dictionary: ioDictionary, forKey: "endTangent")
    //--- Atomic property: pathIsClosed
      self.pathIsClosed_property.storeIn (dictionary: ioDictionary, forKey: "pathIsClosed")
    //--- Atomic property: xCenterUnit
      self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "xCenterUnit")
    //--- Atomic property: yCenterUnit
      self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "yCenterUnit")
    //--- Atomic property: radiusUnit
      self.radiusUnit_property.storeIn (dictionary: ioDictionary, forKey: "radiusUnit")
    //--- Atomic property: startTangentUnit
      self.startTangentUnit_property.storeIn (dictionary: ioDictionary, forKey: "startTangentUnit")
    //--- Atomic property: endTangentUnit
      self.endTangentUnit_property.storeIn (dictionary: ioDictionary, forKey: "endTangentUnit")
    //--- Atomic property: xCenter
      self.xCenter_property.storeIn (dictionary: ioDictionary, forKey: "xCenter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey: "yCenter")
  //--- Atomic property: radius
    self.radius_property.readFrom (dictionary: inDictionary, forKey: "radius")
  //--- Atomic property: startAngle
    self.startAngle_property.readFrom (dictionary: inDictionary, forKey: "startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.readFrom (dictionary: inDictionary, forKey: "arcAngle")
  //--- Atomic property: startTangent
    self.startTangent_property.readFrom (dictionary: inDictionary, forKey: "startTangent")
  //--- Atomic property: endTangent
    self.endTangent_property.readFrom (dictionary: inDictionary, forKey: "endTangent")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.readFrom (dictionary: inDictionary, forKey: "pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.readFrom (dictionary: inDictionary, forKey: "radiusUnit")
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.readFrom (dictionary: inDictionary, forKey: "startTangentUnit")
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.readFrom (dictionary: inDictionary, forKey: "endTangentUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey: "xCenter")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "yCenter\n"
    ioString += "radius\n"
    ioString += "startAngle\n"
    ioString += "arcAngle\n"
    ioString += "startTangent\n"
    ioString += "endTangent\n"
    ioString += "pathIsClosed\n"
    ioString += "xCenterUnit\n"
    ioString += "yCenterUnit\n"
    ioString += "radiusUnit\n"
    ioString += "startTangentUnit\n"
    ioString += "endTangentUnit\n"
    ioString += "xCenter\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.yCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.radius.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.arcAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startTangent.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.endTangent.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.pathIsClosed.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.radiusUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startTangentUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.endTangentUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["yCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yCenter = value
    }
    if let range = inDictionary ["radius"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.radius = value
    }
    if let range = inDictionary ["startAngle"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.startAngle = value
    }
    if let range = inDictionary ["arcAngle"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.arcAngle = value
    }
    if let range = inDictionary ["startTangent"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.startTangent = value
    }
    if let range = inDictionary ["endTangent"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.endTangent = value
    }
    if let range = inDictionary ["pathIsClosed"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.pathIsClosed = value
    }
    if let range = inDictionary ["xCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xCenterUnit = value
    }
    if let range = inDictionary ["yCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yCenterUnit = value
    }
    if let range = inDictionary ["radiusUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.radiusUnit = value
    }
    if let range = inDictionary ["startTangentUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.startTangentUnit = value
    }
    if let range = inDictionary ["endTangentUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.endTangentUnit = value
    }
    if let range = inDictionary ["xCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xCenter = value
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.arcAngle_property.signature ())
    crc.accumulate (u32: self.endTangent_property.signature ())
    crc.accumulate (u32: self.endTangentUnit_property.signature ())
    crc.accumulate (u32: self.pathIsClosed_property.signature ())
    crc.accumulate (u32: self.radius_property.signature ())
    crc.accumulate (u32: self.radiusUnit_property.signature ())
    crc.accumulate (u32: self.startAngle_property.signature ())
    crc.accumulate (u32: self.startTangent_property.signature ())
    crc.accumulate (u32: self.startTangentUnit_property.signature ())
    crc.accumulate (u32: self.xCenter_property.signature ())
    crc.accumulate (u32: self.xCenterUnit_property.signature ())
    crc.accumulate (u32: self.yCenter_property.signature ())
    crc.accumulate (u32: self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageArc (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageArc (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageArc (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageArc (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageArc (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageArc (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageArc (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageArc (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_PackageArc ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageArc ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_PackageArc ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageArc ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageArc (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageArc (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageArc (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    self.saveIntoAdditionalDictionary_PackageArc (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageArc (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageArc ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageArc ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

