//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_yCenter : AnyObject {
  var yCenter : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_radius : AnyObject {
  var radius : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_startAngle : AnyObject {
  var startAngle : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_arcAngle : AnyObject {
  var arcAngle : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_startTangent : AnyObject {
  var startTangent : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_endTangent : AnyObject {
  var endTangent : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_pathIsClosed : AnyObject {
  var pathIsClosed : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_xCenterUnit : AnyObject {
  var xCenterUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_yCenterUnit : AnyObject {
  var yCenterUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_radiusUnit : AnyObject {
  var radiusUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_startTangentUnit : AnyObject {
  var startTangentUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_endTangentUnit : AnyObject {
  var endTangentUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_xCenter : AnyObject {
  var xCenter : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_strokeBezierPath : AnyObject {
  var strokeBezierPath : BÃ©zierPath? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageArc_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: PackageArc
//--------------------------------------------------------------------------------------------------

final class PackageArc : PackageObject,
         PackageArc_yCenter,
         PackageArc_radius,
         PackageArc_startAngle,
         PackageArc_arcAngle,
         PackageArc_startTangent,
         PackageArc_endTangent,
         PackageArc_pathIsClosed,
         PackageArc_xCenterUnit,
         PackageArc_yCenterUnit,
         PackageArc_radiusUnit,
         PackageArc_startTangentUnit,
         PackageArc_endTangentUnit,
         PackageArc_xCenter,
         PackageArc_strokeBezierPath,
         PackageArc_objectDisplay,
         PackageArc_selectionDisplay,
         PackageArc_issues {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yCenter
  //------------------------------------------------------------------------------------------------

  final let yCenter_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: radius
  //------------------------------------------------------------------------------------------------

  final let radius_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var radius : Int {
    get { return self.radius_property.propval }
    set { self.radius_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: startAngle
  //------------------------------------------------------------------------------------------------

  final let startAngle_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var startAngle : Int {
    get { return self.startAngle_property.propval }
    set { self.startAngle_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: arcAngle
  //------------------------------------------------------------------------------------------------

  final let arcAngle_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var arcAngle : Int {
    get { return self.arcAngle_property.propval }
    set { self.arcAngle_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: startTangent
  //------------------------------------------------------------------------------------------------

  final let startTangent_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var startTangent : Int {
    get { return self.startTangent_property.propval }
    set { self.startTangent_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: endTangent
  //------------------------------------------------------------------------------------------------

  final let endTangent_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var endTangent : Int {
    get { return self.endTangent_property.propval }
    set { self.endTangent_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: pathIsClosed
  //------------------------------------------------------------------------------------------------

  final let pathIsClosed_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var pathIsClosed : Bool {
    get { return self.pathIsClosed_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xCenterUnit
  //------------------------------------------------------------------------------------------------

  final let xCenterUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yCenterUnit
  //------------------------------------------------------------------------------------------------

  final let yCenterUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: radiusUnit
  //------------------------------------------------------------------------------------------------

  final let radiusUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var radiusUnit : Int {
    get { return self.radiusUnit_property.propval }
    set { self.radiusUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: startTangentUnit
  //------------------------------------------------------------------------------------------------

  final let startTangentUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var startTangentUnit : Int {
    get { return self.startTangentUnit_property.propval }
    set { self.startTangentUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: endTangentUnit
  //------------------------------------------------------------------------------------------------

  final let endTangentUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var endTangentUnit : Int {
    get { return self.endTangentUnit_property.propval }
    set { self.endTangentUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xCenter
  //------------------------------------------------------------------------------------------------

  final let xCenter_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: strokeBezierPath
  //------------------------------------------------------------------------------------------------

  final let strokeBezierPath_property = EBTransientProperty <BÃ©zierPath> ()

  //------------------------------------------------------------------------------------------------

  final var strokeBezierPath : BÃ©zierPath? {
    return self.strokeBezierPath_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager, key: "yCenter")
    self.radius_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager, key: "radius")
    self.startAngle_property = EBStoredProperty_Int (defaultValue: 45000, undoManager: inUndoManager, key: "startAngle")
    self.arcAngle_property = EBStoredProperty_Int (defaultValue: 270000, undoManager: inUndoManager, key: "arcAngle")
    self.startTangent_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "startTangent")
    self.endTangent_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "endTangent")
    self.pathIsClosed_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "pathIsClosed")
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xCenterUnit")
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yCenterUnit")
    self.radiusUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "radiusUnit")
    self.startTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "startTangentUnit")
    self.endTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "endTangentUnit")
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 342900, undoManager: inUndoManager, key: "xCenter")
    super.init (inUndoManager)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.radius_property.selection
        let s3 = unwSelf.startAngle_property.selection
        let s4 = unwSelf.arcAngle_property.selection
        let s5 = unwSelf.pathIsClosed_property.selection
        let s6 = unwSelf.startTangent_property.selection
        let s7 = unwSelf.endTangent_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageArc_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.yCenter_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.radius_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.startAngle_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.arcAngle_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.pathIsClosed_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.startTangent_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.endTangent_property.startsBeingObserved (by: self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.strokeBezierPath_property.selection
        let s1 = preferences_packageColor_property.selection
        let s2 = preferences_packageDrawingWidthMultipliedByTen_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_PackageArc_objectDisplay (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageColor_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageDrawingWidthMultipliedByTen_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.xCenter_property.selection
        let s2 = unwSelf.yCenter_property.selection
        let s3 = unwSelf.radius_property.selection
        let s4 = unwSelf.startAngle_property.selection
        let s5 = unwSelf.arcAngle_property.selection
        let s6 = unwSelf.startTangent_property.selection
        let s7 = unwSelf.endTangent_property.selection
        let s8 = unwSelf.pathIsClosed_property.selection
        let s9 = unwSelf.knobSize_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_PackageArc_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.xCenter_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.yCenter_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.radius_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.startAngle_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.arcAngle_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.startTangent_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.endTangent_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.pathIsClosed_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.knobSize_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.radius_property.selection
        let s3 = unwSelf.startAngle_property.selection
        let s4 = unwSelf.arcAngle_property.selection
        let s5 = unwSelf.pathIsClosed_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageArc_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.startsBeingObserved (by: self.issues_property)
    self.yCenter_property.startsBeingObserved (by: self.issues_property)
    self.radius_property.startsBeingObserved (by: self.issues_property)
    self.startAngle_property.startsBeingObserved (by: self.issues_property)
    self.arcAngle_property.startsBeingObserved (by: self.issues_property)
    self.pathIsClosed_property.startsBeingObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: self)
    self.endTangent_property.setSignatureObserver (observer: self)
    self.endTangentUnit_property.setSignatureObserver (observer: self)
    self.pathIsClosed_property.setSignatureObserver (observer: self)
    self.radius_property.setSignatureObserver (observer: self)
    self.radiusUnit_property.setSignatureObserver (observer: self)
    self.startAngle_property.setSignatureObserver (observer: self)
    self.startTangent_property.setSignatureObserver (observer: self)
    self.startTangentUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.arcAngle_property.signature ())
    crc.accumulate (u32: self.endTangent_property.signature ())
    crc.accumulate (u32: self.endTangentUnit_property.signature ())
    crc.accumulate (u32: self.pathIsClosed_property.signature ())
    crc.accumulate (u32: self.radius_property.signature ())
    crc.accumulate (u32: self.radiusUnit_property.signature ())
    crc.accumulate (u32: self.startAngle_property.signature ())
    crc.accumulate (u32: self.startTangent_property.signature ())
    crc.accumulate (u32: self.startTangentUnit_property.signature ())
    crc.accumulate (u32: self.xCenter_property.signature ())
    crc.accumulate (u32: self.xCenterUnit_property.signature ())
    crc.accumulate (u32: self.yCenter_property.signature ())
    crc.accumulate (u32: self.yCenterUnit_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageArc (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageArc (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageArc (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageArc (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageArc (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageArc (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageArc (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageArc (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageArc (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageArc (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageArc (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageArc (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageArc (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageArc ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

