//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_y1 : AnyObject {
  var y1 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_x2 : AnyObject {
  var x2 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_y2 : AnyObject {
  var y2 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpx1 : AnyObject {
  var cpx1 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpy1 : AnyObject {
  var cpy1 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpx2 : AnyObject {
  var cpx2 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpy2 : AnyObject {
  var cpy2 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_x1Unit : AnyObject {
  var x1Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_y1Unit : AnyObject {
  var y1Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_x2Unit : AnyObject {
  var x2Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_y2Unit : AnyObject {
  var y2Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpx1Unit : AnyObject {
  var cpx1Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpy1Unit : AnyObject {
  var cpy1Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpx2Unit : AnyObject {
  var cpx2Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_cpy2Unit : AnyObject {
  var cpy2Unit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_x1 : AnyObject {
  var x1 : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_strokeBezierPath : AnyObject {
  var strokeBezierPath : NSBezierPath? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageBezier_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: PackageBezier
//--------------------------------------------------------------------------------------------------

final class PackageBezier : PackageObject,
         PackageBezier_y1,
         PackageBezier_x2,
         PackageBezier_y2,
         PackageBezier_cpx1,
         PackageBezier_cpy1,
         PackageBezier_cpx2,
         PackageBezier_cpy2,
         PackageBezier_x1Unit,
         PackageBezier_y1Unit,
         PackageBezier_x2Unit,
         PackageBezier_y2Unit,
         PackageBezier_cpx1Unit,
         PackageBezier_cpy1Unit,
         PackageBezier_cpx2Unit,
         PackageBezier_cpy2Unit,
         PackageBezier_x1,
         PackageBezier_strokeBezierPath,
         PackageBezier_objectDisplay,
         PackageBezier_selectionDisplay,
         PackageBezier_issues {

  //································································································
  //   Atomic property: y1
  //································································································

  final let y1_property : EBStoredProperty_Int

  //································································································

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: x2
  //································································································

  final let x2_property : EBStoredProperty_Int

  //································································································

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: y2
  //································································································

  final let y2_property : EBStoredProperty_Int

  //································································································

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpx1
  //································································································

  final let cpx1_property : EBStoredProperty_Int

  //································································································

  final var cpx1 : Int {
    get { return self.cpx1_property.propval }
    set { self.cpx1_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpy1
  //································································································

  final let cpy1_property : EBStoredProperty_Int

  //································································································

  final var cpy1 : Int {
    get { return self.cpy1_property.propval }
    set { self.cpy1_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpx2
  //································································································

  final let cpx2_property : EBStoredProperty_Int

  //································································································

  final var cpx2 : Int {
    get { return self.cpx2_property.propval }
    set { self.cpx2_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpy2
  //································································································

  final let cpy2_property : EBStoredProperty_Int

  //································································································

  final var cpy2 : Int {
    get { return self.cpy2_property.propval }
    set { self.cpy2_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: x1Unit
  //································································································

  final let x1Unit_property : EBStoredProperty_Int

  //································································································

  final var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: y1Unit
  //································································································

  final let y1Unit_property : EBStoredProperty_Int

  //································································································

  final var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: x2Unit
  //································································································

  final let x2Unit_property : EBStoredProperty_Int

  //································································································

  final var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: y2Unit
  //································································································

  final let y2Unit_property : EBStoredProperty_Int

  //································································································

  final var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpx1Unit
  //································································································

  final let cpx1Unit_property : EBStoredProperty_Int

  //································································································

  final var cpx1Unit : Int {
    get { return self.cpx1Unit_property.propval }
    set { self.cpx1Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpy1Unit
  //································································································

  final let cpy1Unit_property : EBStoredProperty_Int

  //································································································

  final var cpy1Unit : Int {
    get { return self.cpy1Unit_property.propval }
    set { self.cpy1Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpx2Unit
  //································································································

  final let cpx2Unit_property : EBStoredProperty_Int

  //································································································

  final var cpx2Unit : Int {
    get { return self.cpx2Unit_property.propval }
    set { self.cpx2Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: cpy2Unit
  //································································································

  final let cpy2Unit_property : EBStoredProperty_Int

  //································································································

  final var cpy2Unit : Int {
    get { return self.cpy2Unit_property.propval }
    set { self.cpy2Unit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: x1
  //································································································

  final let x1_property : EBStoredProperty_Int

  //································································································

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //································································································
  //   Transient property: strokeBezierPath
  //································································································

  final let strokeBezierPath_property = EBTransientProperty <NSBezierPath> ()

  //································································································

  final var strokeBezierPath : NSBezierPath? {
    return self.strokeBezierPath_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.y1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager, key: "y1")
    self.x2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "x2")
    self.y2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "y2")
    self.cpx1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager, key: "cpx1")
    self.cpy1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager, key: "cpy1")
    self.cpx2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager, key: "cpx2")
    self.cpy2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "cpy2")
    self.x1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "x1Unit")
    self.y1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "y1Unit")
    self.x2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "x2Unit")
    self.y2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "y2Unit")
    self.cpx1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "cpx1Unit")
    self.cpy1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "cpy1Unit")
    self.cpx2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "cpx2Unit")
    self.cpy2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "cpy2Unit")
    self.x1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "x1")
    super.init (inUndoManager)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        let s4 = unwSelf.cpx1_property.selection
        let s5 = unwSelf.cpy1_property.selection
        let s6 = unwSelf.cpx2_property.selection
        let s7 = unwSelf.cpy2_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageBezier_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.y1_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.x2_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.y2_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.cpx1_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.cpy1_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.cpx2_property.startsBeingObserved (by: self.strokeBezierPath_property)
    self.cpy2_property.startsBeingObserved (by: self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.strokeBezierPath_property.selection
        let s1 = preferences_packageColor_property.selection
        let s2 = preferences_packageDrawingWidthMultipliedByTen_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_PackageBezier_objectDisplay (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageColor_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageDrawingWidthMultipliedByTen_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.x1_property.selection
        let s2 = unwSelf.y1_property.selection
        let s3 = unwSelf.x2_property.selection
        let s4 = unwSelf.y2_property.selection
        let s5 = unwSelf.cpx1_property.selection
        let s6 = unwSelf.cpy1_property.selection
        let s7 = unwSelf.cpx2_property.selection
        let s8 = unwSelf.cpy2_property.selection
        let s9 = unwSelf.knobSize_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_PackageBezier_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.x1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.y1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.x2_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.y2_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.cpx1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.cpy1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.cpx2_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.cpy2_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.knobSize_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        let s4 = unwSelf.cpx1_property.selection
        let s5 = unwSelf.cpy1_property.selection
        let s6 = unwSelf.cpx2_property.selection
        let s7 = unwSelf.cpy2_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageBezier_issues (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.startsBeingObserved (by: self.issues_property)
    self.y1_property.startsBeingObserved (by: self.issues_property)
    self.x2_property.startsBeingObserved (by: self.issues_property)
    self.y2_property.startsBeingObserved (by: self.issues_property)
    self.cpx1_property.startsBeingObserved (by: self.issues_property)
    self.cpy1_property.startsBeingObserved (by: self.issues_property)
    self.cpx2_property.startsBeingObserved (by: self.issues_property)
    self.cpy2_property.startsBeingObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.cpx1_property.setSignatureObserver (observer: self)
    self.cpx1Unit_property.setSignatureObserver (observer: self)
    self.cpx2_property.setSignatureObserver (observer: self)
    self.cpx2Unit_property.setSignatureObserver (observer: self)
    self.cpy1_property.setSignatureObserver (observer: self)
    self.cpy1Unit_property.setSignatureObserver (observer: self)
    self.cpy2_property.setSignatureObserver (observer: self)
    self.cpy2Unit_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.cpx1_property.signature ())
    crc.accumulate (u32: self.cpx1Unit_property.signature ())
    crc.accumulate (u32: self.cpx2_property.signature ())
    crc.accumulate (u32: self.cpx2Unit_property.signature ())
    crc.accumulate (u32: self.cpy1_property.signature ())
    crc.accumulate (u32: self.cpy1Unit_property.signature ())
    crc.accumulate (u32: self.cpy2_property.signature ())
    crc.accumulate (u32: self.cpy2Unit_property.signature ())
    crc.accumulate (u32: self.x1_property.signature ())
    crc.accumulate (u32: self.x1Unit_property.signature ())
    crc.accumulate (u32: self.x2_property.signature ())
    crc.accumulate (u32: self.x2Unit_property.signature ())
    crc.accumulate (u32: self.y1_property.signature ())
    crc.accumulate (u32: self.y1Unit_property.signature ())
    crc.accumulate (u32: self.y2_property.signature ())
    crc.accumulate (u32: self.y2Unit_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageBezier (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageBezier (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageBezier (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageBezier (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageBezier (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageBezier (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageBezier (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageBezier (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageBezier (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageBezier (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageBezier (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageBezier (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageBezier (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageBezier ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

