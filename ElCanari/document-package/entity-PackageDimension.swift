//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_y1 : AnyObject {
//   var y1 : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_x2 : AnyObject {
//   var x2 : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_y2 : AnyObject {
//   var y2 : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_xDimension : AnyObject {
//   var xDimension : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_yDimension : AnyObject {
//   var yDimension : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_x1Unit : AnyObject {
//   var x1Unit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_y1Unit : AnyObject {
//   var y1Unit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_x2Unit : AnyObject {
//   var x2Unit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_y2Unit : AnyObject {
//   var y2Unit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_xDimensionUnit : AnyObject {
//   var xDimensionUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_yDimensionUnit : AnyObject {
//   var yDimensionUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_distanceUnit : AnyObject {
//   var distanceUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_drawDimensionBackground : AnyObject {
//   var drawDimensionBackground : Bool { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_x1 : AnyObject {
//   var x1 : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_distanceInCanariUnit : AnyObject {
//   var distanceInCanariUnit : Int? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_objectDisplay : AnyObject {
//   var objectDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_selectionDisplay : AnyObject {
//   var selectionDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageDimension_issues : AnyObject {
//   var issues : CanariIssueArray? { get }
// }

//--------------------------------------------------------------------------------------------------
//    Entity: PackageDimension
//--------------------------------------------------------------------------------------------------

final class PackageDimension : PackageObject
    // PackageDimension_y1 // Commented out, not used
    // PackageDimension_x2 // Commented out, not used
    // PackageDimension_y2 // Commented out, not used
    // PackageDimension_xDimension // Commented out, not used
    // PackageDimension_yDimension // Commented out, not used
    // PackageDimension_x1Unit // Commented out, not used
    // PackageDimension_y1Unit // Commented out, not used
    // PackageDimension_x2Unit // Commented out, not used
    // PackageDimension_y2Unit // Commented out, not used
    // PackageDimension_xDimensionUnit // Commented out, not used
    // PackageDimension_yDimensionUnit // Commented out, not used
    // PackageDimension_distanceUnit // Commented out, not used
    // PackageDimension_drawDimensionBackground // Commented out, not used
    // PackageDimension_x1 // Commented out, not used
    // PackageDimension_distanceInCanariUnit // Commented out, not used
    // PackageDimension_objectDisplay // Commented out, not used
    // PackageDimension_selectionDisplay // Commented out, not used
    // PackageDimension_issues // Commented out, not used
    {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: y1
  //------------------------------------------------------------------------------------------------

  final let y1_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: x2
  //------------------------------------------------------------------------------------------------

  final let x2_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: y2
  //------------------------------------------------------------------------------------------------

  final let y2_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xDimension
  //------------------------------------------------------------------------------------------------

  final let xDimension_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xDimension : Int {
    get { return self.xDimension_property.propval }
    set { self.xDimension_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yDimension
  //------------------------------------------------------------------------------------------------

  final let yDimension_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yDimension : Int {
    get { return self.yDimension_property.propval }
    set { self.yDimension_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: x1Unit
  //------------------------------------------------------------------------------------------------

  final let x1Unit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: y1Unit
  //------------------------------------------------------------------------------------------------

  final let y1Unit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: x2Unit
  //------------------------------------------------------------------------------------------------

  final let x2Unit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: y2Unit
  //------------------------------------------------------------------------------------------------

  final let y2Unit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xDimensionUnit
  //------------------------------------------------------------------------------------------------

  final let xDimensionUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xDimensionUnit : Int {
    get { return self.xDimensionUnit_property.propval }
    set { self.xDimensionUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yDimensionUnit
  //------------------------------------------------------------------------------------------------

  final let yDimensionUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yDimensionUnit : Int {
    get { return self.yDimensionUnit_property.propval }
    set { self.yDimensionUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: distanceUnit
  //------------------------------------------------------------------------------------------------

  final let distanceUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var distanceUnit : Int {
    get { return self.distanceUnit_property.propval }
    set { self.distanceUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: drawDimensionBackground
  //------------------------------------------------------------------------------------------------

  final let drawDimensionBackground_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var drawDimensionBackground : Bool {
    get { return self.drawDimensionBackground_property.propval }
    set { self.drawDimensionBackground_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: x1
  //------------------------------------------------------------------------------------------------

  final let x1_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: distanceInCanariUnit
  //------------------------------------------------------------------------------------------------

  final let distanceInCanariUnit_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var distanceInCanariUnit : Int? {
    return self.distanceInCanariUnit_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.y1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "y1")
    self.x2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager, key: "x2")
    self.y2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "y2")
    self.xDimension_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xDimension")
    self.yDimension_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "yDimension")
    self.x1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "x1Unit")
    self.y1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "y1Unit")
    self.x2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "x2Unit")
    self.y2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "y2Unit")
    self.xDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xDimensionUnit")
    self.yDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yDimensionUnit")
    self.distanceUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "distanceUnit")
    self.drawDimensionBackground_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "drawDimensionBackground")
    self.x1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "x1")
    super.init (inUndoManager)
    self.accumulateProperty (self.y1_property)
    self.accumulateProperty (self.x2_property)
    self.accumulateProperty (self.y2_property)
    self.accumulateProperty (self.xDimension_property)
    self.accumulateProperty (self.yDimension_property)
    self.accumulateProperty (self.x1Unit_property)
    self.accumulateProperty (self.y1Unit_property)
    self.accumulateProperty (self.x2Unit_property)
    self.accumulateProperty (self.y2Unit_property)
    self.accumulateProperty (self.xDimensionUnit_property)
    self.accumulateProperty (self.yDimensionUnit_property)
    self.accumulateProperty (self.distanceUnit_property)
    self.accumulateProperty (self.drawDimensionBackground_property)
    self.accumulateProperty (self.x1_property)
  //--- Atomic property: distanceInCanariUnit
    self.distanceInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageDimension_distanceInCanariUnit (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.startsBeingObserved (by: self.distanceInCanariUnit_property)
    self.y1_property.startsBeingObserved (by: self.distanceInCanariUnit_property)
    self.x2_property.startsBeingObserved (by: self.distanceInCanariUnit_property)
    self.y2_property.startsBeingObserved (by: self.distanceInCanariUnit_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        let s4 = unwSelf.xDimension_property.selection
        let s5 = unwSelf.yDimension_property.selection
        let s6 = unwSelf.distanceInCanariUnit_property.selection
        let s7 = unwSelf.distanceUnit_property.selection
        let s8 = preferences_dimensionFont_property.selection
        let s9 = unwSelf.drawDimensionBackground_property.selection
        let s10 = preferences_packageBackgroundColor_property.selection
        let s11 = preferences_packageDimensionColor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackageDimension_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.startsBeingObserved (by: self.objectDisplay_property)
    self.y1_property.startsBeingObserved (by: self.objectDisplay_property)
    self.x2_property.startsBeingObserved (by: self.objectDisplay_property)
    self.y2_property.startsBeingObserved (by: self.objectDisplay_property)
    self.xDimension_property.startsBeingObserved (by: self.objectDisplay_property)
    self.yDimension_property.startsBeingObserved (by: self.objectDisplay_property)
    self.distanceInCanariUnit_property.startsBeingObserved (by: self.objectDisplay_property)
    self.distanceUnit_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_dimensionFont_property.startsBeingObserved (by: self.objectDisplay_property)
    self.drawDimensionBackground_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageBackgroundColor_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_packageDimensionColor_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.x1_property.selection
        let s2 = unwSelf.y1_property.selection
        let s3 = unwSelf.x2_property.selection
        let s4 = unwSelf.y2_property.selection
        let s5 = preferences_packageBackgroundColor_property.selection
        let s6 = preferences_packageDimensionColor_property.selection
        let s7 = unwSelf.drawDimensionBackground_property.selection
        let s8 = unwSelf.xDimension_property.selection
        let s9 = unwSelf.yDimension_property.selection
        let s10 = unwSelf.distanceInCanariUnit_property.selection
        let s11 = unwSelf.distanceUnit_property.selection
        let s12 = preferences_dimensionFont_property.selection
        let s13 = unwSelf.knobSize_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13)) :
          return .single (transient_PackageDimension_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.x1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.y1_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.x2_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.y2_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_packageBackgroundColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_packageDimensionColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.drawDimensionBackground_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.xDimension_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.yDimension_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.distanceInCanariUnit_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.distanceUnit_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_dimensionFont_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.knobSize_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageDimension_issues (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.startsBeingObserved (by: self.issues_property)
    self.y1_property.startsBeingObserved (by: self.issues_property)
    self.x2_property.startsBeingObserved (by: self.issues_property)
    self.y2_property.startsBeingObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.distanceUnit_property.setSignatureObserver (observer: self)
    self.drawDimensionBackground_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.xDimension_property.setSignatureObserver (observer: self)
    self.xDimensionUnit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
    self.yDimension_property.setSignatureObserver (observer: self)
    self.yDimensionUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.distanceUnit_property.signature ())
    crc.accumulate (u32: self.drawDimensionBackground_property.signature ())
    crc.accumulate (u32: self.x1_property.signature ())
    crc.accumulate (u32: self.x1Unit_property.signature ())
    crc.accumulate (u32: self.x2_property.signature ())
    crc.accumulate (u32: self.x2Unit_property.signature ())
    crc.accumulate (u32: self.xDimension_property.signature ())
    crc.accumulate (u32: self.xDimensionUnit_property.signature ())
    crc.accumulate (u32: self.y1_property.signature ())
    crc.accumulate (u32: self.y1Unit_property.signature ())
    crc.accumulate (u32: self.y2_property.signature ())
    crc.accumulate (u32: self.y2Unit_property.signature ())
    crc.accumulate (u32: self.yDimension_property.signature ())
    crc.accumulate (u32: self.yDimensionUnit_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageDimension (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageDimension (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageDimension (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageDimension (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageDimension (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageDimension (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageDimension (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageDimension (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageDimension (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageDimension (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageDimension (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageDimension (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageDimension (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageDimension ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

