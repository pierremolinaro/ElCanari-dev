//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_y1 : AnyObject {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_x2 : AnyObject {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_y2 : AnyObject {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_xDimension : AnyObject {
  var xDimension : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_yDimension : AnyObject {
  var yDimension : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_x1Unit : AnyObject {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_y1Unit : AnyObject {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_x2Unit : AnyObject {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_y2Unit : AnyObject {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_xDimensionUnit : AnyObject {
  var xDimensionUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_yDimensionUnit : AnyObject {
  var yDimensionUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_distanceUnit : AnyObject {
  var distanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_drawDimensionBackground : AnyObject {
  var drawDimensionBackground : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_x1 : AnyObject {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_distanceInCanariUnit : AnyObject {
  var distanceInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageDimension_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageDimension : PackageObject,
         PackageDimension_y1,
         PackageDimension_x2,
         PackageDimension_y2,
         PackageDimension_xDimension,
         PackageDimension_yDimension,
         PackageDimension_x1Unit,
         PackageDimension_y1Unit,
         PackageDimension_x2Unit,
         PackageDimension_y2Unit,
         PackageDimension_xDimensionUnit,
         PackageDimension_yDimensionUnit,
         PackageDimension_distanceUnit,
         PackageDimension_drawDimensionBackground,
         PackageDimension_x1,
         PackageDimension_distanceInCanariUnit,
         PackageDimension_objectDisplay,
         PackageDimension_selectionDisplay,
         PackageDimension_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  final let y1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y1_toDefaultValue () {
    self.y1 = 0
  }

  //····················································································································

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  final let x2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x2_toDefaultValue () {
    self.x2 = 685800
  }

  //····················································································································

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  final let y2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y2_toDefaultValue () {
    self.y2 = 0
  }

  //····················································································································

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xDimension
  //····················································································································

  final let xDimension_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xDimension_toDefaultValue () {
    self.xDimension = 0
  }

  //····················································································································

  final var xDimension : Int {
    get { return self.xDimension_property.propval }
    set { self.xDimension_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yDimension
  //····················································································································

  final let yDimension_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yDimension_toDefaultValue () {
    self.yDimension = 0
  }

  //····················································································································

  final var yDimension : Int {
    get { return self.yDimension_property.propval }
    set { self.yDimension_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  final let x1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x1Unit_toDefaultValue () {
    self.x1Unit = 2286
  }

  //····················································································································

  final var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  final let y1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y1Unit_toDefaultValue () {
    self.y1Unit = 2286
  }

  //····················································································································

  final var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  final let x2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x2Unit_toDefaultValue () {
    self.x2Unit = 2286
  }

  //····················································································································

  final var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  final let y2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y2Unit_toDefaultValue () {
    self.y2Unit = 2286
  }

  //····················································································································

  final var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xDimensionUnit
  //····················································································································

  final let xDimensionUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xDimensionUnit_toDefaultValue () {
    self.xDimensionUnit = 2286
  }

  //····················································································································

  final var xDimensionUnit : Int {
    get { return self.xDimensionUnit_property.propval }
    set { self.xDimensionUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yDimensionUnit
  //····················································································································

  final let yDimensionUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yDimensionUnit_toDefaultValue () {
    self.yDimensionUnit = 2286
  }

  //····················································································································

  final var yDimensionUnit : Int {
    get { return self.yDimensionUnit_property.propval }
    set { self.yDimensionUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: distanceUnit
  //····················································································································

  final let distanceUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_distanceUnit_toDefaultValue () {
    self.distanceUnit = 2286
  }

  //····················································································································

  final var distanceUnit : Int {
    get { return self.distanceUnit_property.propval }
    set { self.distanceUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawDimensionBackground
  //····················································································································

  final let drawDimensionBackground_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawDimensionBackground_toDefaultValue () {
    self.drawDimensionBackground = true
  }

  //····················································································································

  final var drawDimensionBackground : Bool {
    get { return self.drawDimensionBackground_property.propval }
    set { self.drawDimensionBackground_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  final let x1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x1_toDefaultValue () {
    self.x1 = 0
  }

  //····················································································································

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: distanceInCanariUnit
  //····················································································································

  final let distanceInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  final var distanceInCanariUnit : Int? {
    switch self.distanceInCanariUnit_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.y1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.x2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager)
    self.y2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.xDimension_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.yDimension_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.x1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.y1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.x2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.y2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.xDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.yDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.distanceUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.drawDimensionBackground_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.x1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- Atomic property: distanceInCanariUnit
    self.distanceInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageDimension_distanceInCanariUnit (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.x2_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y2_property.addEBObserver (self.distanceInCanariUnit_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        let s4 = unwSelf.xDimension_property.selection
        let s5 = unwSelf.yDimension_property.selection
        let s6 = unwSelf.distanceInCanariUnit_property.selection
        let s7 = unwSelf.distanceUnit_property.selection
        let s8 = preferences_dimensionFont_property.selection
        let s9 = unwSelf.drawDimensionBackground_property.selection
        let s10 = preferences_packageBackgroundColor_property.selection
        let s11 = preferences_packageDimensionColor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackageDimension_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.xDimension_property.addEBObserver (self.objectDisplay_property)
    self.yDimension_property.addEBObserver (self.objectDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.objectDisplay_property)
    self.distanceUnit_property.addEBObserver (self.objectDisplay_property)
    preferences_dimensionFont_property.addEBObserver (self.objectDisplay_property)
    self.drawDimensionBackground_property.addEBObserver (self.objectDisplay_property)
    preferences_packageBackgroundColor_property.addEBObserver (self.objectDisplay_property)
    preferences_packageDimensionColor_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        let s4 = preferences_packageBackgroundColor_property.selection
        let s5 = preferences_packageDimensionColor_property.selection
        let s6 = unwSelf.drawDimensionBackground_property.selection
        let s7 = unwSelf.xDimension_property.selection
        let s8 = unwSelf.yDimension_property.selection
        let s9 = unwSelf.distanceInCanariUnit_property.selection
        let s10 = unwSelf.distanceUnit_property.selection
        let s11 = preferences_dimensionFont_property.selection
        let s12 = unwSelf.knobSize_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12)) :
          return .single (transient_PackageDimension_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    preferences_packageBackgroundColor_property.addEBObserver (self.selectionDisplay_property)
    preferences_packageDimensionColor_property.addEBObserver (self.selectionDisplay_property)
    self.drawDimensionBackground_property.addEBObserver (self.selectionDisplay_property)
    self.xDimension_property.addEBObserver (self.selectionDisplay_property)
    self.yDimension_property.addEBObserver (self.selectionDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.selectionDisplay_property)
    self.distanceUnit_property.addEBObserver (self.selectionDisplay_property)
    preferences_dimensionFont_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x1_property.selection
        let s1 = unwSelf.y1_property.selection
        let s2 = unwSelf.x2_property.selection
        let s3 = unwSelf.y2_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageDimension_issues (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.distanceUnit_property.setSignatureObserver (observer: self)
    self.drawDimensionBackground_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.xDimension_property.setSignatureObserver (observer: self)
    self.xDimensionUnit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
    self.yDimension_property.setSignatureObserver (observer: self)
    self.yDimensionUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: y1
      self.y1_property.storeIn (dictionary: ioDictionary, forKey: "y1")
    //--- Atomic property: x2
      self.x2_property.storeIn (dictionary: ioDictionary, forKey: "x2")
    //--- Atomic property: y2
      self.y2_property.storeIn (dictionary: ioDictionary, forKey: "y2")
    //--- Atomic property: xDimension
      self.xDimension_property.storeIn (dictionary: ioDictionary, forKey: "xDimension")
    //--- Atomic property: yDimension
      self.yDimension_property.storeIn (dictionary: ioDictionary, forKey: "yDimension")
    //--- Atomic property: x1Unit
      self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey: "x1Unit")
    //--- Atomic property: y1Unit
      self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey: "y1Unit")
    //--- Atomic property: x2Unit
      self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey: "x2Unit")
    //--- Atomic property: y2Unit
      self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey: "y2Unit")
    //--- Atomic property: xDimensionUnit
      self.xDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey: "xDimensionUnit")
    //--- Atomic property: yDimensionUnit
      self.yDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey: "yDimensionUnit")
    //--- Atomic property: distanceUnit
      self.distanceUnit_property.storeIn (dictionary: ioDictionary, forKey: "distanceUnit")
    //--- Atomic property: drawDimensionBackground
      self.drawDimensionBackground_property.storeIn (dictionary: ioDictionary, forKey: "drawDimensionBackground")
    //--- Atomic property: x1
      self.x1_property.storeIn (dictionary: ioDictionary, forKey: "x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey: "y2")
  //--- Atomic property: xDimension
    self.xDimension_property.readFrom (dictionary: inDictionary, forKey: "xDimension")
  //--- Atomic property: yDimension
    self.yDimension_property.readFrom (dictionary: inDictionary, forKey: "yDimension")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey: "x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey: "y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey: "x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey: "y2Unit")
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.readFrom (dictionary: inDictionary, forKey: "xDimensionUnit")
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.readFrom (dictionary: inDictionary, forKey: "yDimensionUnit")
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.readFrom (dictionary: inDictionary, forKey: "distanceUnit")
  //--- Atomic property: drawDimensionBackground
    self.drawDimensionBackground_property.readFrom (dictionary: inDictionary, forKey: "drawDimensionBackground")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey: "x1")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "y1\n"
    ioString += "x2\n"
    ioString += "y2\n"
    ioString += "xDimension\n"
    ioString += "yDimension\n"
    ioString += "x1Unit\n"
    ioString += "y1Unit\n"
    ioString += "x2Unit\n"
    ioString += "y2Unit\n"
    ioString += "xDimensionUnit\n"
    ioString += "yDimensionUnit\n"
    ioString += "distanceUnit\n"
    ioString += "drawDimensionBackground\n"
    ioString += "x1\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.y1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xDimension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yDimension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xDimensionUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yDimensionUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.distanceUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.drawDimensionBackground.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["y1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y1 = value
    }
    if let range = inDictionary ["x2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x2 = value
    }
    if let range = inDictionary ["y2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y2 = value
    }
    if let range = inDictionary ["xDimension"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xDimension = value
    }
    if let range = inDictionary ["yDimension"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yDimension = value
    }
    if let range = inDictionary ["x1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x1Unit = value
    }
    if let range = inDictionary ["y1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y1Unit = value
    }
    if let range = inDictionary ["x2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x2Unit = value
    }
    if let range = inDictionary ["y2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y2Unit = value
    }
    if let range = inDictionary ["xDimensionUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xDimensionUnit = value
    }
    if let range = inDictionary ["yDimensionUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yDimensionUnit = value
    }
    if let range = inDictionary ["distanceUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.distanceUnit = value
    }
    if let range = inDictionary ["drawDimensionBackground"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.drawDimensionBackground = value
    }
    if let range = inDictionary ["x1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x1 = value
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.distanceUnit_property.signature ())
    crc.accumulateUInt32 (self.drawDimensionBackground_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.xDimension_property.signature ())
    crc.accumulateUInt32 (self.xDimensionUnit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    crc.accumulateUInt32 (self.yDimension_property.signature ())
    crc.accumulateUInt32 (self.yDimensionUnit_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageDimension (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageDimension (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageDimension (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageDimension (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageDimension (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageDimension (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageDimension (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageDimension (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_PackageDimension ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageDimension ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_PackageDimension ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageDimension ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageDimension (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageDimension (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageDimension (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    self.saveIntoAdditionalDictionary_PackageDimension (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageDimension (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageDimension ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageDimension ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

