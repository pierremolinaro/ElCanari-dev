//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mFirstX : AnyObject {
  var mFirstX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mFirstY : AnyObject {
  var mFirstY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mFirstColor : AnyObject {
  var mFirstColor : NSColor { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mSecondDx : AnyObject {
  var mSecondDx : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mSecondDy : AnyObject {
  var mSecondDy : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_mSecondColor : AnyObject {
  var mSecondColor : NSColor { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageModelImageDoublePoint_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: PackageModelImageDoublePoint
//--------------------------------------------------------------------------------------------------

final class PackageModelImageDoublePoint : EBGraphicManagedObject,
         PackageModelImageDoublePoint_mFirstX,
         PackageModelImageDoublePoint_mFirstY,
         PackageModelImageDoublePoint_mFirstColor,
         PackageModelImageDoublePoint_mSecondDx,
         PackageModelImageDoublePoint_mSecondDy,
         PackageModelImageDoublePoint_mSecondColor,
         PackageModelImageDoublePoint_objectDisplay,
         PackageModelImageDoublePoint_selectionDisplay {

  //································································································
  //   Atomic property: mFirstX
  //································································································

  final let mFirstX_property : EBStoredProperty_Int

  //································································································

  final var mFirstX : Int {
    get { return self.mFirstX_property.propval }
    set { self.mFirstX_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mFirstY
  //································································································

  final let mFirstY_property : EBStoredProperty_Int

  //································································································

  final var mFirstY : Int {
    get { return self.mFirstY_property.propval }
    set { self.mFirstY_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mFirstColor
  //································································································

  final let mFirstColor_property : EBStoredProperty_NSColor

  //································································································

  final var mFirstColor : NSColor {
    get { return self.mFirstColor_property.propval }
  }

  //································································································
  //   Atomic property: mSecondDx
  //································································································

  final let mSecondDx_property : EBStoredProperty_Int

  //································································································

  final var mSecondDx : Int {
    get { return self.mSecondDx_property.propval }
    set { self.mSecondDx_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mSecondDy
  //································································································

  final let mSecondDy_property : EBStoredProperty_Int

  //································································································

  final var mSecondDy : Int {
    get { return self.mSecondDy_property.propval }
    set { self.mSecondDy_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mSecondColor
  //································································································

  final let mSecondColor_property : EBStoredProperty_NSColor

  //································································································

  final var mSecondColor : NSColor {
    get { return self.mSecondColor_property.propval }
  }

  //································································································
  //   To one property: mRoot
  //································································································

  final let mRoot_property = StoredObject_PackageRoot (usedForSignature: false, strongRef: false, key: "mRoot")

  //································································································

  final var mRoot : PackageRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      // self.mRoot_property.setProp (newValue)
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //································································································

  final let mRoot_none = EBTransientProperty <Bool> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mFirstX_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mFirstX")
    self.mFirstY_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mFirstY")
    self.mFirstColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.green, undoManager: inUndoManager, key: "mFirstColor")
    self.mSecondDx_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mSecondDx")
    self.mSecondDy_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mSecondDy")
    self.mSecondColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.brown, undoManager: inUndoManager, key: "mSecondColor")
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.startsBeingObserved (by: self.mRoot_none)
  //--- To one property: mRoot (has opposite to many relationship: mModelImageObjects)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFirstX_property.selection
        let s1 = unwSelf.mFirstY_property.selection
        let s2 = unwSelf.mFirstColor_property.selection
        let s3 = unwSelf.mSecondDx_property.selection
        let s4 = unwSelf.mSecondDy_property.selection
        let s5 = unwSelf.mSecondColor_property.selection
        let s6 = unwSelf.mRoot_property.mModelPointsCircleRadius_property.selection
        let s7 = unwSelf.mRoot_property.mPointsAreLocked_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageModelImageDoublePoint_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFirstX_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mFirstY_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mFirstColor_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mSecondDx_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mSecondDy_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mSecondColor_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mRoot_property.mModelPointsCircleRadius_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mRoot_property.mPointsAreLocked_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.mFirstX_property.selection
        let s2 = unwSelf.mFirstY_property.selection
        let s3 = unwSelf.mSecondDx_property.selection
        let s4 = unwSelf.mSecondDy_property.selection
        let s5 = unwSelf.mRoot_property.mModelPointsCircleRadius_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageModelImageDoublePoint_selectionDisplay (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mFirstX_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mFirstY_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mSecondDx_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mSecondDy_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mRoot_property.mModelPointsCircleRadius_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageModelImageDoublePoint (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageModelImageDoublePoint (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageModelImageDoublePoint (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageModelImageDoublePoint (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageModelImageDoublePoint (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageModelImageDoublePoint (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageModelImageDoublePoint (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageModelImageDoublePoint (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageModelImageDoublePoint (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageModelImageDoublePoint (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageModelImageDoublePoint ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

