//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mFirstX : AnyObject {
  var mFirstX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mFirstY : AnyObject {
  var mFirstY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mFirstColor : AnyObject {
  var mFirstColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mSecondDx : AnyObject {
  var mSecondDx : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mSecondDy : AnyObject {
  var mSecondDy : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_mSecondColor : AnyObject {
  var mSecondColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageModelImageDoublePoint_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageModelImageDoublePoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageModelImageDoublePoint : EBGraphicManagedObject,
         PackageModelImageDoublePoint_mFirstX,
         PackageModelImageDoublePoint_mFirstY,
         PackageModelImageDoublePoint_mFirstColor,
         PackageModelImageDoublePoint_mSecondDx,
         PackageModelImageDoublePoint_mSecondDy,
         PackageModelImageDoublePoint_mSecondColor,
         PackageModelImageDoublePoint_objectDisplay,
         PackageModelImageDoublePoint_selectionDisplay {

  //····················································································································
  //   Atomic property: mFirstX
  //····················································································································

  final let mFirstX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mFirstX_toDefaultValue () {
    self.mFirstX = 457200
  }

  //····················································································································

  final var mFirstX : Int {
    get { return self.mFirstX_property.propval }
    set { self.mFirstX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFirstY
  //····················································································································

  final let mFirstY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mFirstY_toDefaultValue () {
    self.mFirstY = 457200
  }

  //····················································································································

  final var mFirstY : Int {
    get { return self.mFirstY_property.propval }
    set { self.mFirstY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFirstColor
  //····················································································································

  final let mFirstColor_property : EBStoredProperty_NSColor

  //····················································································································

  final func reset_mFirstColor_toDefaultValue () {
    self.mFirstColor = NSColor.green
  }

  //····················································································································

  final var mFirstColor : NSColor {
    get { return self.mFirstColor_property.propval }
    set { self.mFirstColor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSecondDx
  //····················································································································

  final let mSecondDx_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSecondDx_toDefaultValue () {
    self.mSecondDx = 457200
  }

  //····················································································································

  final var mSecondDx : Int {
    get { return self.mSecondDx_property.propval }
    set { self.mSecondDx_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSecondDy
  //····················································································································

  final let mSecondDy_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSecondDy_toDefaultValue () {
    self.mSecondDy = 457200
  }

  //····················································································································

  final var mSecondDy : Int {
    get { return self.mSecondDy_property.propval }
    set { self.mSecondDy_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSecondColor
  //····················································································································

  final let mSecondColor_property : EBStoredProperty_NSColor

  //····················································································································

  final func reset_mSecondColor_toDefaultValue () {
    self.mSecondColor = NSColor.brown
  }

  //····················································································································

  final var mSecondColor : NSColor {
    get { return self.mSecondColor_property.propval }
    set { self.mSecondColor_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_PackageRoot (usedForSignature: false, strongRef: false, key: "mRoot")

  //····················································································································

  final var mRoot : PackageRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mFirstX_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mFirstX")
    self.mFirstY_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mFirstY")
    self.mFirstColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.green, undoManager: inUndoManager, key: "mFirstColor")
    self.mSecondDx_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mSecondDx")
    self.mSecondDy_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mSecondDy")
    self.mSecondColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.brown, undoManager: inUndoManager, key: "mSecondColor")
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.mRoot_none)
//    gInitSemaphore.wait ()
  //--- To one property: mRoot (has opposite to many relationship: mModelImageObjects)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFirstX_property.selection
        let s1 = unwSelf.mFirstY_property.selection
        let s2 = unwSelf.mFirstColor_property.selection
        let s3 = unwSelf.mSecondDx_property.selection
        let s4 = unwSelf.mSecondDy_property.selection
        let s5 = unwSelf.mSecondColor_property.selection
        let s6 = unwSelf.mRoot_property.mModelPointsCircleRadius_property.selection
        let s7 = unwSelf.mRoot_property.mPointsAreLocked_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_PackageModelImageDoublePoint_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFirstX_property.addEBObserver (self.objectDisplay_property)
    self.mFirstY_property.addEBObserver (self.objectDisplay_property)
    self.mFirstColor_property.addEBObserver (self.objectDisplay_property)
    self.mSecondDx_property.addEBObserver (self.objectDisplay_property)
    self.mSecondDy_property.addEBObserver (self.objectDisplay_property)
    self.mSecondColor_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mModelPointsCircleRadius_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mPointsAreLocked_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFirstX_property.selection
        let s1 = unwSelf.mFirstY_property.selection
        let s2 = unwSelf.mSecondDx_property.selection
        let s3 = unwSelf.mSecondDy_property.selection
        let s4 = unwSelf.mRoot_property.mModelPointsCircleRadius_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackageModelImageDoublePoint_selectionDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFirstX_property.addEBObserver (self.selectionDisplay_property)
    self.mFirstY_property.addEBObserver (self.selectionDisplay_property)
    self.mSecondDx_property.addEBObserver (self.selectionDisplay_property)
    self.mSecondDy_property.addEBObserver (self.selectionDisplay_property)
    self.mRoot_property.mModelPointsCircleRadius_property.addEBObserver (self.selectionDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: mFirstX
      self.mFirstX_property.storeIn (dictionary: &ioDictionary, forKey: "mFirstX")
    //--- Atomic property: mFirstY
      self.mFirstY_property.storeIn (dictionary: &ioDictionary, forKey: "mFirstY")
    //--- Atomic property: mFirstColor
      self.mFirstColor_property.storeIn (dictionary: &ioDictionary, forKey: "mFirstColor")
    //--- Atomic property: mSecondDx
      self.mSecondDx_property.storeIn (dictionary: &ioDictionary, forKey: "mSecondDx")
    //--- Atomic property: mSecondDy
      self.mSecondDy_property.storeIn (dictionary: &ioDictionary, forKey: "mSecondDy")
    //--- Atomic property: mSecondColor
      self.mSecondColor_property.storeIn (dictionary: &ioDictionary, forKey: "mSecondColor")
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "mRoot",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? PackageRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFirstX
    self.mFirstX_property.readFrom (dictionary: inDictionary, forKey: "mFirstX")
  //--- Atomic property: mFirstY
    self.mFirstY_property.readFrom (dictionary: inDictionary, forKey: "mFirstY")
  //--- Atomic property: mFirstColor
    self.mFirstColor_property.readFrom (dictionary: inDictionary, forKey: "mFirstColor")
  //--- Atomic property: mSecondDx
    self.mSecondDx_property.readFrom (dictionary: inDictionary, forKey: "mSecondDx")
  //--- Atomic property: mSecondDy
    self.mSecondDy_property.readFrom (dictionary: inDictionary, forKey: "mSecondDy")
  //--- Atomic property: mSecondColor
    self.mSecondColor_property.readFrom (dictionary: inDictionary, forKey: "mSecondColor")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mFirstX\n"
    ioString += "mFirstY\n"
    ioString += "mFirstColor\n"
    ioString += "mSecondDx\n"
    ioString += "mSecondDy\n"
    ioString += "mSecondColor\n"
  //--- To one relationships
    ioString += "mRoot\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mFirstX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFirstY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFirstColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSecondDx.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSecondDy.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSecondColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mFirstX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mFirstX = value
    }
    if let range = inDictionary ["mFirstY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mFirstY = value
    }
    if let range = inDictionary ["mFirstColor"], let value = NSColor.unarchiveFromDataRange (inData, range) {
      self.mFirstColor = value
    }
    if let range = inDictionary ["mSecondDx"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSecondDx = value
    }
    if let range = inDictionary ["mSecondDy"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mSecondDy = value
    }
    if let range = inDictionary ["mSecondColor"], let value = NSColor.unarchiveFromDataRange (inData, range) {
      self.mSecondColor = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mRoot"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! PackageRoot
      self.mRoot = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: mRoot
    if let object = self.mRoot {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageModelImageDoublePoint (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageModelImageDoublePoint (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageModelImageDoublePoint (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageModelImageDoublePoint (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageModelImageDoublePoint (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageModelImageDoublePoint (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_PackageModelImageDoublePoint ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageModelImageDoublePoint ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_PackageModelImageDoublePoint ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageModelImageDoublePoint ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageModelImageDoublePoint (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageModelImageDoublePoint (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageModelImageDoublePoint (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageModelImageDoublePoint (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageModelImageDoublePoint (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageModelImageDoublePoint ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageModelImageDoublePoint ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

