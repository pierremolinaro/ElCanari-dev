//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageObject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageObject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageObject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageObject_knobSize : AnyObject {
  var knobSize : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageObject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class PackageObject : EBGraphicManagedObject,
         PackageObject_issues,
         PackageObject_selectionDisplay,
         PackageObject_objectDisplay,
         PackageObject_knobSize {

  //································································································
  //   Transient property: issues
  //································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //································································································
  //   To one property: mRoot
  //································································································

  final let mRoot_property = StoredObject_PackageRoot (usedForSignature: false, strongRef: false, key: "mRoot")

  //································································································

  final var mRoot : PackageRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //································································································

  final let mRoot_none = EBTransientProperty <Bool> ()

  //································································································
  //   Transient property: knobSize
  //································································································

  final let knobSize_property = EBTransientProperty <Double> ()

  //································································································

  final var knobSize : Double? {
    return self.knobSize_property.optionalValue
  }

  //································································································
  //    init
  //································································································

  required init (_ inUndoManager : UndoManager?) {
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.startsBeingObserved (by: self.mRoot_none)
  //--- To one property: mRoot (has opposite to many relationship: packageObjects)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.packageObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.packageObjects_property.remove (me) } }
    )
  //--- Atomic property: knobSize
    self.knobSize_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.knobSizeMultpliedByTen_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageObject_knobSize (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.knobSizeMultpliedByTen_property.startsBeingObserved (by: self.knobSize_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //································································································
  //    Extern delegates
  //································································································


  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

