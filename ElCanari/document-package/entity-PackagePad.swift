//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_xCenter : AnyObject {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_yCenter : AnyObject {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_width : AnyObject {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_height : AnyObject {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_holeWidth : AnyObject {
  var holeWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_holeHeight : AnyObject {
  var holeHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padShape : AnyObject {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padStyle : AnyObject {
  var padStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padNumber : AnyObject {
  var padNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_xCenterUnit : AnyObject {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_yCenterUnit : AnyObject {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_widthUnit : AnyObject {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_heightUnit : AnyObject {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_holeWidthUnit : AnyObject {
  var holeWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_holeHeightUnit : AnyObject {
  var holeHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_annularRingUnit : AnyObject {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padNameForDisplay : AnyObject {
  var padNameForDisplay : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padIsTraversing : AnyObject {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_annularRing : AnyObject {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padNameWithZoneName : AnyObject {
  var padNameWithZoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_zoneName : AnyObject {
  var zoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_noZone : AnyObject {
  var noZone : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_zoneAllowsManualRenumbering : AnyObject {
  var zoneAllowsManualRenumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_slavePadCount : AnyObject {
  var slavePadCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_masterPadObjectIndex : AnyObject {
  var masterPadObjectIndex : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackagePad_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackagePad : PackageObject,
         PackagePad_xCenter,
         PackagePad_yCenter,
         PackagePad_width,
         PackagePad_height,
         PackagePad_holeWidth,
         PackagePad_holeHeight,
         PackagePad_padShape,
         PackagePad_padStyle,
         PackagePad_padNumber,
         PackagePad_xCenterUnit,
         PackagePad_yCenterUnit,
         PackagePad_widthUnit,
         PackagePad_heightUnit,
         PackagePad_holeWidthUnit,
         PackagePad_holeHeightUnit,
         PackagePad_annularRingUnit,
         PackagePad_objectDisplay,
         PackagePad_selectionDisplay,
         PackagePad_padNameForDisplay,
         PackagePad_issues,
         PackagePad_padIsTraversing,
         PackagePad_annularRing,
         PackagePad_padNameWithZoneName,
         PackagePad_zoneName,
         PackagePad_noZone,
         PackagePad_zoneAllowsManualRenumbering,
         PackagePad_slavePadCount,
         PackagePad_masterPadObjectIndex,
         PackagePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  final let xCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenter_toDefaultValue () {
    self.xCenter = 0
  }

  //····················································································································

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  final let yCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenter_toDefaultValue () {
    self.yCenter = 0
  }

  //····················································································································

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  final let width_property : EBStoredProperty_Int

  //····················································································································

  final func reset_width_toDefaultValue () {
    self.width = 114300
  }

  //····················································································································

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  final let height_property : EBStoredProperty_Int

  //····················································································································

  final func reset_height_toDefaultValue () {
    self.height = 228600
  }

  //····················································································································

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidth
  //····················································································································

  final let holeWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidth_toDefaultValue () {
    self.holeWidth = 57150
  }

  //····················································································································

  final var holeWidth : Int {
    get { return self.holeWidth_property.propval }
    set { self.holeWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeight
  //····················································································································

  final let holeHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeight_toDefaultValue () {
    self.holeHeight = 57150
  }

  //····················································································································

  final var holeHeight : Int {
    get { return self.holeHeight_property.propval }
    set { self.holeHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  final let padShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_padShape_toDefaultValue () {
    self.padShape = PadShape.octo
  }

  //····················································································································

  final var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  final let padStyle_property : EBStoredProperty_PadStyle

  //····················································································································

  final func reset_padStyle_toDefaultValue () {
    self.padStyle = PadStyle.traversing
  }

  //····················································································································

  final var padStyle : PadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padNumber
  //····················································································································

  final let padNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_padNumber_toDefaultValue () {
    self.padNumber = 0
  }

  //····················································································································

  final var padNumber : Int {
    get { return self.padNumber_property.propval }
    set { self.padNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenterUnit_toDefaultValue () {
    self.xCenterUnit = 2286
  }

  //····················································································································

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenterUnit_toDefaultValue () {
    self.yCenterUnit = 2286
  }

  //····················································································································

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  final let widthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_widthUnit_toDefaultValue () {
    self.widthUnit = 2286
  }

  //····················································································································

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  final let heightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_heightUnit_toDefaultValue () {
    self.heightUnit = 2286
  }

  //····················································································································

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidthUnit
  //····················································································································

  final let holeWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidthUnit_toDefaultValue () {
    self.holeWidthUnit = 2286
  }

  //····················································································································

  final var holeWidthUnit : Int {
    get { return self.holeWidthUnit_property.propval }
    set { self.holeWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeightUnit
  //····················································································································

  final let holeHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeightUnit_toDefaultValue () {
    self.holeHeightUnit = 2286
  }

  //····················································································································

  final var holeHeightUnit : Int {
    get { return self.holeHeightUnit_property.propval }
    set { self.holeHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  final let annularRingUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_annularRingUnit_toDefaultValue () {
    self.annularRingUnit = 2286
  }

  //····················································································································

  final var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: slaves
  //····················································································································

  final let slaves_property = StoredArrayOf_PackageSlavePad (usedForSignature: true, key: "slaves")

  //····················································································································

  //····················································································································

  final var slaves : EBReferenceArray <PackageSlavePad> {
    get { return self.slaves_property.propval }
    set { self.slaves_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: zone
  //····················································································································

  final let zone_property = StoredObject_PackageZone (usedForSignature: false, strongRef: true, key: "zone")

  //····················································································································

  final var zone : PackageZone? {
    get {
      return self.zone_property.propval
    }
    set {
      if self.zone_property.propval !== newValue {
        if self.zone_property.propval != nil {
          self.zone_property.setProp (nil)
        }
        if newValue != nil {
          self.zone_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let zone_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: padNameForDisplay
  //····················································································································

  final let padNameForDisplay_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameForDisplay : String? {
    switch self.padNameForDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  final let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  final var padIsTraversing : Bool? {
    switch self.padIsTraversing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  final let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  final var annularRing : Int? {
    switch self.annularRing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameWithZoneName
  //····················································································································

  final let padNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameWithZoneName : String? {
    switch self.padNameWithZoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneName
  //····················································································································

  final let zoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var zoneName : String? {
    switch self.zoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noZone
  //····················································································································

  final let noZone_property = EBTransientProperty_Bool ()

  //····················································································································

  final var noZone : Bool? {
    switch self.noZone_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneAllowsManualRenumbering
  //····················································································································

  final let zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  final var zoneAllowsManualRenumbering : Bool? {
    switch self.zoneAllowsManualRenumbering_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: slavePadCount
  //····················································································································

  final let slavePadCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var slavePadCount : Int? {
    switch self.slavePadCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: masterPadObjectIndex
  //····················································································································

  final let masterPadObjectIndex_property = EBTransientProperty_Int ()

  //····················································································································

  final var masterPadObjectIndex : Int? {
    switch self.masterPadObjectIndex_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xCenter")
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "yCenter")
    self.width_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "width")
    self.height_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "height")
    self.holeWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeWidth")
    self.holeHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeHeight")
    self.padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "padShape")
    self.padStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing, undoManager: inUndoManager, key: "padStyle")
    self.padNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "padNumber")
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xCenterUnit")
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yCenterUnit")
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "widthUnit")
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "heightUnit")
    self.holeWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeWidthUnit")
    self.holeHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeHeightUnit")
    self.annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "annularRingUnit")
    super.init (inUndoManager)
    self.zone_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.zone_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserver (self.zone_none)
//    gInitSemaphore.wait ()
  //--- To many property: slaves (has opposite relationship)
    self.slaves_property.undoManager = inUndoManager
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- To one property: zone
    self.zone_property.undoManager = inUndoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        let s6 = unwSelf.padShape_property.selection
        let s7 = unwSelf.padStyle_property.selection
        let s8 = preferences_frontSidePadColor_property.selection
        let s9 = preferences_displayPackageFrontSidePads_property.selection
        let s10 = preferences_backSidePadColor_property.selection
        let s11 = preferences_displayPackageBackSidePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackagePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeWidth_property.addEBObserver (self.objectDisplay_property)
    self.holeHeight_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    preferences_backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.padShape_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackagePad_selectionDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padNumber_property.selection
        let s1 = unwSelf.zone_property.zoneName_property.selection
        let s2 = unwSelf.zone_property.displayZoneNameWithPadNumbers_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_PackagePad_padNameForDisplay (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.addEBObserver (self.padNameForDisplay_property)
    self.zone_property.zoneName_property.addEBObserver (self.padNameForDisplay_property)
    self.zone_property.displayZoneNameWithPadNumbers_property.addEBObserver (self.padNameForDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackagePad_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeWidth_property.addEBObserver (self.issues_property)
    self.holeHeight_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padStyle_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_padIsTraversing (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.width_property.selection
        let s1 = unwSelf.height_property.selection
        let s2 = unwSelf.holeWidth_property.selection
        let s3 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackagePad_annularRing (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeWidth_property.addEBObserver (self.annularRing_property)
    self.holeHeight_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padNumber_property.selection
        let s1 = unwSelf.zone_property.zoneName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PackagePad_padNameWithZoneName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.addEBObserver (self.padNameWithZoneName_property)
    self.zone_property.zoneName_property.addEBObserver (self.padNameWithZoneName_property)
  //--- Atomic property: zoneName
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.zone_property.zoneName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_zoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.zone_property.zoneName_property.addEBObserver (self.zoneName_property)
  //--- Atomic property: noZone
    self.noZone_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.zone_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_noZone (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserver (self.noZone_property)
  //--- Atomic property: zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.zone_property.zoneNumbering_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_zoneAllowsManualRenumbering (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.zone_property.zoneNumbering_property.addEBObserver (self.zoneAllowsManualRenumbering_property)
  //--- Atomic property: slavePadCount
    self.slavePadCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.slaves_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_slavePadCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.slaves_property.addEBObserver (self.slavePadCount_property)
  //--- Atomic property: masterPadObjectIndex
    self.masterPadObjectIndex_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.objectIndex.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackagePad_masterPadObjectIndex (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = preferences_padNumberFont_property.selection
        let s3 = preferences_padNumberColor_property.selection
        let s4 = unwSelf.padNameForDisplay_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackagePad_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padNameForDisplay_property.addEBObserver (self.padNumberDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeHeight_property.setSignatureObserver (observer: self)
    self.holeHeightUnit_property.setSignatureObserver (observer: self)
    self.holeWidth_property.setSignatureObserver (observer: self)
    self.holeWidthUnit_property.setSignatureObserver (observer: self)
    self.padNumber_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.slaves_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.annularRingUnit_property.signature ())
    crc.accumulate (u32: self.height_property.signature ())
    crc.accumulate (u32: self.heightUnit_property.signature ())
    crc.accumulate (u32: self.holeHeight_property.signature ())
    crc.accumulate (u32: self.holeHeightUnit_property.signature ())
    crc.accumulate (u32: self.holeWidth_property.signature ())
    crc.accumulate (u32: self.holeWidthUnit_property.signature ())
    crc.accumulate (u32: self.padNumber_property.signature ())
    crc.accumulate (u32: self.padShape_property.signature ())
    crc.accumulate (u32: self.padStyle_property.signature ())
    crc.accumulate (u32: self.slaves_property.signature ())
    crc.accumulate (u32: self.width_property.signature ())
    crc.accumulate (u32: self.widthUnit_property.signature ())
    crc.accumulate (u32: self.xCenter_property.signature ())
    crc.accumulate (u32: self.xCenterUnit_property.signature ())
    crc.accumulate (u32: self.yCenter_property.signature ())
    crc.accumulate (u32: self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackagePad (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackagePad (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackagePad (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackagePad (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackagePad (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackagePad (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackagePad (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackagePad (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_PackagePad ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackagePad ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_PackagePad ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackagePad ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackagePad (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackagePad (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackagePad (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackagePad (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackagePad (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackagePad ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackagePad ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

