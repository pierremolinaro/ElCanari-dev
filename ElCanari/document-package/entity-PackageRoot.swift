//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_selectedPageIndex : AnyObject {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_selectedInspector : AnyObject {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_comments : AnyObject {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_program : AnyObject {
  var program : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_horizontalFlip : AnyObject {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_verticalFlip : AnyObject {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_gridStyle : AnyObject {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_gridStep : AnyObject {
  var gridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_gridStepUnit : AnyObject {
  var gridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_gridDisplayFactor : AnyObject {
  var gridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_zoom : AnyObject {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageOpacity : AnyObject {
  var mModelImageOpacity : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageHorizontalFlip : AnyObject {
  var mModelImagePageHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageVerticalFlip : AnyObject {
  var mModelImagePageVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageGridStyle : AnyObject {
  var mModelImagePageGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageGridStep : AnyObject {
  var mModelImagePageGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageGridStepUnit : AnyObject {
  var mModelImagePageGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageGridDisplayFactor : AnyObject {
  var mModelImagePageGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageZoom : AnyObject {
  var mModelImagePageZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageXPlacardUnit : AnyObject {
  var mModelImagePageXPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePageYPlacardUnit : AnyObject {
  var mModelImagePageYPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageSecondPointXUnit : AnyObject {
  var mModelImageSecondPointXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageSecondPointYUnit : AnyObject {
  var mModelImageSecondPointYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageFirstPointXOnLock : AnyObject {
  var mModelImageFirstPointXOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageFirstPointYOnLock : AnyObject {
  var mModelImageFirstPointYOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePointsDxOnLock : AnyObject {
  var mModelImagePointsDxOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImagePointsDyOnLock : AnyObject {
  var mModelImagePointsDyOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageScale : AnyObject {
  var mModelImageScale : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageRotationInRadians : AnyObject {
  var mModelImageRotationInRadians : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mDimensionUnitFirstModelPointX : AnyObject {
  var mDimensionUnitFirstModelPointX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mDimensionUnitFirstModelPointY : AnyObject {
  var mDimensionUnitFirstModelPointY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mDimensionUnitSecondModelPointDx : AnyObject {
  var mDimensionUnitSecondModelPointDx : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mDimensionUnitSecondModelPointDy : AnyObject {
  var mDimensionUnitSecondModelPointDy : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelPointsCircleRadius : AnyObject {
  var mModelPointsCircleRadius : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mPointsAreLocked : AnyObject {
  var mPointsAreLocked : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_knobSizeMultpliedByTen : AnyObject {
  var knobSizeMultpliedByTen : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_padNumbering : AnyObject {
  var padNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_counterClockNumberingStartAngle : AnyObject {
  var counterClockNumberingStartAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_xPlacardUnit : AnyObject {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_yPlacardUnit : AnyObject {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageData : AnyObject {
  var mModelImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageFirstPointX : AnyObject {
  var mModelImageFirstPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageFirstPointY : AnyObject {
  var mModelImageFirstPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageSecondPointDx : AnyObject {
  var mModelImageSecondPointDx : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_mModelImageSecondPointDy : AnyObject {
  var mModelImageSecondPointDy : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_freePadNumbering : AnyObject {
  var freePadNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_counterClockNumbering : AnyObject {
  var counterClockNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_gridStepMultipliedByDisplayFactor : AnyObject {
  var gridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_secondPointX : AnyObject {
  var secondPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_secondPointY : AnyObject {
  var secondPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_lockImageView : AnyObject {
  var lockImageView : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_backgroundImagePageBackgroundDisplay : AnyObject {
  var backgroundImagePageBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_modelImageSizeString : AnyObject {
  var modelImageSizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_hasModelImage : AnyObject {
  var hasModelImage : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_masterPadObjectIndexArray : AnyObject {
  var masterPadObjectIndexArray : IntArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageRoot : EBManagedObject,
         PackageRoot_selectedPageIndex,
         PackageRoot_selectedInspector,
         PackageRoot_comments,
         PackageRoot_program,
         PackageRoot_horizontalFlip,
         PackageRoot_verticalFlip,
         PackageRoot_gridStyle,
         PackageRoot_gridStep,
         PackageRoot_gridStepUnit,
         PackageRoot_gridDisplayFactor,
         PackageRoot_zoom,
         PackageRoot_mModelImageOpacity,
         PackageRoot_mModelImagePageHorizontalFlip,
         PackageRoot_mModelImagePageVerticalFlip,
         PackageRoot_mModelImagePageGridStyle,
         PackageRoot_mModelImagePageGridStep,
         PackageRoot_mModelImagePageGridStepUnit,
         PackageRoot_mModelImagePageGridDisplayFactor,
         PackageRoot_mModelImagePageZoom,
         PackageRoot_mModelImagePageXPlacardUnit,
         PackageRoot_mModelImagePageYPlacardUnit,
         PackageRoot_mModelImageSecondPointXUnit,
         PackageRoot_mModelImageSecondPointYUnit,
         PackageRoot_mModelImageFirstPointXOnLock,
         PackageRoot_mModelImageFirstPointYOnLock,
         PackageRoot_mModelImagePointsDxOnLock,
         PackageRoot_mModelImagePointsDyOnLock,
         PackageRoot_mModelImageScale,
         PackageRoot_mModelImageRotationInRadians,
         PackageRoot_mDimensionUnitFirstModelPointX,
         PackageRoot_mDimensionUnitFirstModelPointY,
         PackageRoot_mDimensionUnitSecondModelPointDx,
         PackageRoot_mDimensionUnitSecondModelPointDy,
         PackageRoot_mModelPointsCircleRadius,
         PackageRoot_mPointsAreLocked,
         PackageRoot_knobSizeMultpliedByTen,
         PackageRoot_padNumbering,
         PackageRoot_counterClockNumberingStartAngle,
         PackageRoot_xPlacardUnit,
         PackageRoot_yPlacardUnit,
         PackageRoot_mModelImageData,
         PackageRoot_mModelImageFirstPointX,
         PackageRoot_mModelImageFirstPointY,
         PackageRoot_mModelImageSecondPointDx,
         PackageRoot_mModelImageSecondPointDy,
         PackageRoot_freePadNumbering,
         PackageRoot_counterClockNumbering,
         PackageRoot_gridStepMultipliedByDisplayFactor,
         PackageRoot_secondPointX,
         PackageRoot_secondPointY,
         PackageRoot_lockImageView,
         PackageRoot_padNumberDisplay,
         PackageRoot_backgroundImagePageBackgroundDisplay,
         PackageRoot_modelImageSizeString,
         PackageRoot_hasModelImage,
         PackageRoot_masterPadObjectIndexArray,
         PackageRoot_issues {

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  final let selectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedPageIndex_toDefaultValue () {
    self.selectedPageIndex = 1
  }

  //····················································································································

  final var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  final let selectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedInspector_toDefaultValue () {
    self.selectedInspector = 0
  }

  //····················································································································

  final var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  final let comments_property : EBStoredProperty_String

  //····················································································································

  final func reset_comments_toDefaultValue () {
    self.comments = ""
  }

  //····················································································································

  final var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: program
  //····················································································································

  final let program_property : EBStoredProperty_String

  //····················································································································

  final func reset_program_toDefaultValue () {
    self.program = ""
  }

  //····················································································································

  final var program : String {
    get { return self.program_property.propval }
    set { self.program_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  final let horizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_horizontalFlip_toDefaultValue () {
    self.horizontalFlip = false
  }

  //····················································································································

  final var horizontalFlip : Bool {
    get { return self.horizontalFlip_property.propval }
    set { self.horizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  final let verticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_verticalFlip_toDefaultValue () {
    self.verticalFlip = false
  }

  //····················································································································

  final var verticalFlip : Bool {
    get { return self.verticalFlip_property.propval }
    set { self.verticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  final let gridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_gridStyle_toDefaultValue () {
    self.gridStyle = GridStyle.line
  }

  //····················································································································

  final var gridStyle : GridStyle {
    get { return self.gridStyle_property.propval }
    set { self.gridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStep
  //····················································································································

  final let gridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridStep_toDefaultValue () {
    self.gridStep = 57150
  }

  //····················································································································

  final var gridStep : Int {
    get { return self.gridStep_property.propval }
    set { self.gridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStepUnit
  //····················································································································

  final let gridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridStepUnit_toDefaultValue () {
    self.gridStepUnit = 2286
  }

  //····················································································································

  final var gridStepUnit : Int {
    get { return self.gridStepUnit_property.propval }
    set { self.gridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridDisplayFactor
  //····················································································································

  final let gridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridDisplayFactor_toDefaultValue () {
    self.gridDisplayFactor = 4
  }

  //····················································································································

  final var gridDisplayFactor : Int {
    get { return self.gridDisplayFactor_property.propval }
    set { self.gridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  final let zoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_zoom_toDefaultValue () {
    self.zoom = 600
  }

  //····················································································································

  final var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageOpacity
  //····················································································································

  final let mModelImageOpacity_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageOpacity_toDefaultValue () {
    self.mModelImageOpacity = 0.5
  }

  //····················································································································

  final var mModelImageOpacity : Double {
    get { return self.mModelImageOpacity_property.propval }
    set { self.mModelImageOpacity_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageHorizontalFlip
  //····················································································································

  final let mModelImagePageHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mModelImagePageHorizontalFlip_toDefaultValue () {
    self.mModelImagePageHorizontalFlip = false
  }

  //····················································································································

  final var mModelImagePageHorizontalFlip : Bool {
    get { return self.mModelImagePageHorizontalFlip_property.propval }
    set { self.mModelImagePageHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageVerticalFlip
  //····················································································································

  final let mModelImagePageVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mModelImagePageVerticalFlip_toDefaultValue () {
    self.mModelImagePageVerticalFlip = false
  }

  //····················································································································

  final var mModelImagePageVerticalFlip : Bool {
    get { return self.mModelImagePageVerticalFlip_property.propval }
    set { self.mModelImagePageVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStyle
  //····················································································································

  final let mModelImagePageGridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_mModelImagePageGridStyle_toDefaultValue () {
    self.mModelImagePageGridStyle = GridStyle.noGrid
  }

  //····················································································································

  final var mModelImagePageGridStyle : GridStyle {
    get { return self.mModelImagePageGridStyle_property.propval }
    set { self.mModelImagePageGridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStep
  //····················································································································

  final let mModelImagePageGridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridStep_toDefaultValue () {
    self.mModelImagePageGridStep = 2286
  }

  //····················································································································

  final var mModelImagePageGridStep : Int {
    get { return self.mModelImagePageGridStep_property.propval }
    set { self.mModelImagePageGridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStepUnit
  //····················································································································

  final let mModelImagePageGridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridStepUnit_toDefaultValue () {
    self.mModelImagePageGridStepUnit = 2286
  }

  //····················································································································

  final var mModelImagePageGridStepUnit : Int {
    get { return self.mModelImagePageGridStepUnit_property.propval }
    set { self.mModelImagePageGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridDisplayFactor
  //····················································································································

  final let mModelImagePageGridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridDisplayFactor_toDefaultValue () {
    self.mModelImagePageGridDisplayFactor = 100
  }

  //····················································································································

  final var mModelImagePageGridDisplayFactor : Int {
    get { return self.mModelImagePageGridDisplayFactor_property.propval }
    set { self.mModelImagePageGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageZoom
  //····················································································································

  final let mModelImagePageZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageZoom_toDefaultValue () {
    self.mModelImagePageZoom = 200
  }

  //····················································································································

  final var mModelImagePageZoom : Int {
    get { return self.mModelImagePageZoom_property.propval }
    set { self.mModelImagePageZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageXPlacardUnit
  //····················································································································

  final let mModelImagePageXPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageXPlacardUnit_toDefaultValue () {
    self.mModelImagePageXPlacardUnit = 2286
  }

  //····················································································································

  final var mModelImagePageXPlacardUnit : Int {
    get { return self.mModelImagePageXPlacardUnit_property.propval }
    set { self.mModelImagePageXPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageYPlacardUnit
  //····················································································································

  final let mModelImagePageYPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageYPlacardUnit_toDefaultValue () {
    self.mModelImagePageYPlacardUnit = 2286
  }

  //····················································································································

  final var mModelImagePageYPlacardUnit : Int {
    get { return self.mModelImagePageYPlacardUnit_property.propval }
    set { self.mModelImagePageYPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageSecondPointXUnit
  //····················································································································

  final let mModelImageSecondPointXUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageSecondPointXUnit_toDefaultValue () {
    self.mModelImageSecondPointXUnit = 2286
  }

  //····················································································································

  final var mModelImageSecondPointXUnit : Int {
    get { return self.mModelImageSecondPointXUnit_property.propval }
    set { self.mModelImageSecondPointXUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageSecondPointYUnit
  //····················································································································

  final let mModelImageSecondPointYUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageSecondPointYUnit_toDefaultValue () {
    self.mModelImageSecondPointYUnit = 2286
  }

  //····················································································································

  final var mModelImageSecondPointYUnit : Int {
    get { return self.mModelImageSecondPointYUnit_property.propval }
    set { self.mModelImageSecondPointYUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageFirstPointXOnLock
  //····················································································································

  final let mModelImageFirstPointXOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageFirstPointXOnLock_toDefaultValue () {
    self.mModelImageFirstPointXOnLock = 0
  }

  //····················································································································

  final var mModelImageFirstPointXOnLock : Int {
    get { return self.mModelImageFirstPointXOnLock_property.propval }
    set { self.mModelImageFirstPointXOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageFirstPointYOnLock
  //····················································································································

  final let mModelImageFirstPointYOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageFirstPointYOnLock_toDefaultValue () {
    self.mModelImageFirstPointYOnLock = 0
  }

  //····················································································································

  final var mModelImageFirstPointYOnLock : Int {
    get { return self.mModelImageFirstPointYOnLock_property.propval }
    set { self.mModelImageFirstPointYOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePointsDxOnLock
  //····················································································································

  final let mModelImagePointsDxOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePointsDxOnLock_toDefaultValue () {
    self.mModelImagePointsDxOnLock = 0
  }

  //····················································································································

  final var mModelImagePointsDxOnLock : Int {
    get { return self.mModelImagePointsDxOnLock_property.propval }
    set { self.mModelImagePointsDxOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePointsDyOnLock
  //····················································································································

  final let mModelImagePointsDyOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePointsDyOnLock_toDefaultValue () {
    self.mModelImagePointsDyOnLock = 0
  }

  //····················································································································

  final var mModelImagePointsDyOnLock : Int {
    get { return self.mModelImagePointsDyOnLock_property.propval }
    set { self.mModelImagePointsDyOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageScale
  //····················································································································

  final let mModelImageScale_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageScale_toDefaultValue () {
    self.mModelImageScale = 1
  }

  //····················································································································

  final var mModelImageScale : Double {
    get { return self.mModelImageScale_property.propval }
    set { self.mModelImageScale_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageRotationInRadians
  //····················································································································

  final let mModelImageRotationInRadians_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageRotationInRadians_toDefaultValue () {
    self.mModelImageRotationInRadians = 0
  }

  //····················································································································

  final var mModelImageRotationInRadians : Double {
    get { return self.mModelImageRotationInRadians_property.propval }
    set { self.mModelImageRotationInRadians_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitFirstModelPointX
  //····················································································································

  final let mDimensionUnitFirstModelPointX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitFirstModelPointX_toDefaultValue () {
    self.mDimensionUnitFirstModelPointX = 2286
  }

  //····················································································································

  final var mDimensionUnitFirstModelPointX : Int {
    get { return self.mDimensionUnitFirstModelPointX_property.propval }
    set { self.mDimensionUnitFirstModelPointX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitFirstModelPointY
  //····················································································································

  final let mDimensionUnitFirstModelPointY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitFirstModelPointY_toDefaultValue () {
    self.mDimensionUnitFirstModelPointY = 2286
  }

  //····················································································································

  final var mDimensionUnitFirstModelPointY : Int {
    get { return self.mDimensionUnitFirstModelPointY_property.propval }
    set { self.mDimensionUnitFirstModelPointY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitSecondModelPointDx
  //····················································································································

  final let mDimensionUnitSecondModelPointDx_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitSecondModelPointDx_toDefaultValue () {
    self.mDimensionUnitSecondModelPointDx = 2286
  }

  //····················································································································

  final var mDimensionUnitSecondModelPointDx : Int {
    get { return self.mDimensionUnitSecondModelPointDx_property.propval }
    set { self.mDimensionUnitSecondModelPointDx_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitSecondModelPointDy
  //····················································································································

  final let mDimensionUnitSecondModelPointDy_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitSecondModelPointDy_toDefaultValue () {
    self.mDimensionUnitSecondModelPointDy = 2286
  }

  //····················································································································

  final var mDimensionUnitSecondModelPointDy : Int {
    get { return self.mDimensionUnitSecondModelPointDy_property.propval }
    set { self.mDimensionUnitSecondModelPointDy_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelPointsCircleRadius
  //····················································································································

  final let mModelPointsCircleRadius_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelPointsCircleRadius_toDefaultValue () {
    self.mModelPointsCircleRadius = 10
  }

  //····················································································································

  final var mModelPointsCircleRadius : Int {
    get { return self.mModelPointsCircleRadius_property.propval }
    set { self.mModelPointsCircleRadius_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPointsAreLocked
  //····················································································································

  final let mPointsAreLocked_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPointsAreLocked_toDefaultValue () {
    self.mPointsAreLocked = false
  }

  //····················································································································

  final var mPointsAreLocked : Bool {
    get { return self.mPointsAreLocked_property.propval }
    set { self.mPointsAreLocked_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: knobSizeMultpliedByTen
  //····················································································································

  final let knobSizeMultpliedByTen_property : EBStoredProperty_Int

  //····················································································································

  final func reset_knobSizeMultpliedByTen_toDefaultValue () {
    self.knobSizeMultpliedByTen = 20
  }

  //····················································································································

  final var knobSizeMultpliedByTen : Int {
    get { return self.knobSizeMultpliedByTen_property.propval }
    set { self.knobSizeMultpliedByTen_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padNumbering
  //····················································································································

  final let padNumbering_property : EBStoredProperty_PadNumbering

  //····················································································································

  final func reset_padNumbering_toDefaultValue () {
    self.padNumbering = PadNumbering.noNumbering
  }

  //····················································································································

  final var padNumbering : PadNumbering {
    get { return self.padNumbering_property.propval }
    set { self.padNumbering_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: counterClockNumberingStartAngle
  //····················································································································

  final let counterClockNumberingStartAngle_property : EBStoredProperty_Int

  //····················································································································

  final func reset_counterClockNumberingStartAngle_toDefaultValue () {
    self.counterClockNumberingStartAngle = 90
  }

  //····················································································································

  final var counterClockNumberingStartAngle : Int {
    get { return self.counterClockNumberingStartAngle_property.propval }
    set { self.counterClockNumberingStartAngle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  final let xPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xPlacardUnit_toDefaultValue () {
    self.xPlacardUnit = 2286
  }

  //····················································································································

  final var xPlacardUnit : Int {
    get { return self.xPlacardUnit_property.propval }
    set { self.xPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  final let yPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yPlacardUnit_toDefaultValue () {
    self.yPlacardUnit = 2286
  }

  //····················································································································

  final var yPlacardUnit : Int {
    get { return self.yPlacardUnit_property.propval }
    set { self.yPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mModelImageObjects
  //····················································································································

  final let mModelImageObjects_property = StoredArrayOf_PackageModelImageDoublePoint (usedForSignature: false, key: "mModelImageObjects")

  //····················································································································

  //····················································································································

  final var mModelImageObjects : EBReferenceArray <PackageModelImageDoublePoint> {
    get { return self.mModelImageObjects_property.propval }
    set { self.mModelImageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: packageObjects
  //····················································································································

  final let packageObjects_property = StoredArrayOf_PackageObject (usedForSignature: true, key: "packageObjects")

  //····················································································································

  //····················································································································

  final var packageObjects : EBReferenceArray <PackageObject> {
    get { return self.packageObjects_property.propval }
    set { self.packageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: packagePads
  //····················································································································

  final let packagePads_property = TransientArrayOfSuperOf_PackagePad <PackageObject> ()

  //····················································································································

  final var packagePads : EBReferenceArray <PackagePad> {
    get { return self.packagePads_property.propval }
  }

  //····················································································································
  //   To many property: packageSlavePads
  //····················································································································

  final let packageSlavePads_property = TransientArrayOfSuperOf_PackageSlavePad <PackageObject> ()

  //····················································································································

  final var packageSlavePads : EBReferenceArray <PackageSlavePad> {
    get { return self.packageSlavePads_property.propval }
  }

  //····················································································································
  //   To many property: packageZones
  //····················································································································

  final let packageZones_property = TransientArrayOfSuperOf_PackageZone <PackageObject> ()

  //····················································································································

  final var packageZones : EBReferenceArray <PackageZone> {
    get { return self.packageZones_property.propval }
  }

  //····················································································································
  //   Atomic property: mModelImageData
  //····················································································································

  final let mModelImageData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mModelImageData_toDefaultValue () {
    self.mModelImageData = Data ()
  }

  //····················································································································

  final var mModelImageData : Data {
    get { return self.mModelImageData_property.propval }
    set { self.mModelImageData_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointX
  //····················································································································

  final let mModelImageFirstPointX_property = EBComputedProperty_Int ()

  //····················································································································

  var mModelImageFirstPointX : Int? {
    get {
      return self.mModelImageFirstPointX_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointY
  //····················································································································

  final let mModelImageFirstPointY_property = EBComputedProperty_Int ()

  //····················································································································

  var mModelImageFirstPointY : Int? {
    get {
      return self.mModelImageFirstPointY_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDx
  //····················································································································

  final let mModelImageSecondPointDx_property = EBComputedProperty_Int ()

  //····················································································································

  var mModelImageSecondPointDx : Int? {
    get {
      return self.mModelImageSecondPointDx_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDx_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDy
  //····················································································································

  final let mModelImageSecondPointDy_property = EBComputedProperty_Int ()

  //····················································································································

  var mModelImageSecondPointDy : Int? {
    get {
      return self.mModelImageSecondPointDy_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Transient property: freePadNumbering
  //····················································································································

  final let freePadNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  final var freePadNumbering : Bool? {
    return self.freePadNumbering_property.optionalValue
  }

  //····················································································································
  //   Transient property: counterClockNumbering
  //····················································································································

  final let counterClockNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  final var counterClockNumbering : Bool? {
    return self.counterClockNumbering_property.optionalValue
  }

  //····················································································································
  //   Transient property: gridStepMultipliedByDisplayFactor
  //····················································································································

  final let gridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  final var gridStepMultipliedByDisplayFactor : Int? {
    return self.gridStepMultipliedByDisplayFactor_property.optionalValue
  }

  //····················································································································
  //   Transient property: secondPointX
  //····················································································································

  final let secondPointX_property = EBTransientProperty_Int ()

  //····················································································································

  final var secondPointX : Int? {
    return self.secondPointX_property.optionalValue
  }

  //····················································································································
  //   Transient property: secondPointY
  //····················································································································

  final let secondPointY_property = EBTransientProperty_Int ()

  //····················································································································

  final var secondPointY : Int? {
    return self.secondPointY_property.optionalValue
  }

  //····················································································································
  //   Transient property: lockImageView
  //····················································································································

  final let lockImageView_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var lockImageView : NSImage? {
    return self.lockImageView_property.optionalValue
  }

  //····················································································································
  //   To one property: mModelImageDoublePoint
  //····················································································································

  final let mModelImageDoublePoint_property = StoredObject_PackageModelImageDoublePoint (usedForSignature: false, strongRef: true, key: "mModelImageDoublePoint")

  //····················································································································

  final var mModelImageDoublePoint : PackageModelImageDoublePoint? {
    get {
      return self.mModelImageDoublePoint_property.propval
    }
    set {
      if self.mModelImageDoublePoint_property.propval !== newValue {
        if self.mModelImageDoublePoint_property.propval != nil {
          self.mModelImageDoublePoint_property.setProp (nil)
        }
        if newValue != nil {
          self.mModelImageDoublePoint_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mModelImageDoublePoint_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    return self.padNumberDisplay_property.optionalValue
  }

  //····················································································································
  //   Transient property: backgroundImagePageBackgroundDisplay
  //····················································································································

  final let backgroundImagePageBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var backgroundImagePageBackgroundDisplay : EBShape? {
    return self.backgroundImagePageBackgroundDisplay_property.optionalValue
  }

  //····················································································································
  //   Transient property: modelImageSizeString
  //····················································································································

  final let modelImageSizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var modelImageSizeString : String? {
    return self.modelImageSizeString_property.optionalValue
  }

  //····················································································································
  //   Transient property: hasModelImage
  //····················································································································

  final let hasModelImage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasModelImage : Bool? {
    return self.hasModelImage_property.optionalValue
  }

  //····················································································································
  //   Transient property: masterPadObjectIndexArray
  //····················································································································

  final let masterPadObjectIndexArray_property = EBTransientProperty_IntArray ()

  //····················································································································

  final var masterPadObjectIndexArray : IntArray? {
    return self.masterPadObjectIndexArray_property.optionalValue
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 1, undoManager: inUndoManager, key: "selectedPageIndex")
    self.selectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedInspector")
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "comments")
    self.program_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "program")
    self.horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "horizontalFlip")
    self.verticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "verticalFlip")
    self.gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "gridStyle")
    self.gridStep_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "gridStep")
    self.gridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "gridStepUnit")
    self.gridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "gridDisplayFactor")
    self.zoom_property = EBStoredProperty_Int (defaultValue: 600, undoManager: inUndoManager, key: "zoom")
    self.mModelImageOpacity_property = EBStoredProperty_Double (defaultValue: 0.5, undoManager: inUndoManager, key: "mModelImageOpacity")
    self.mModelImagePageHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mModelImagePageHorizontalFlip")
    self.mModelImagePageVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mModelImagePageVerticalFlip")
    self.mModelImagePageGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.noGrid, undoManager: inUndoManager, key: "mModelImagePageGridStyle")
    self.mModelImagePageGridStep_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImagePageGridStep")
    self.mModelImagePageGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImagePageGridStepUnit")
    self.mModelImagePageGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 100, undoManager: inUndoManager, key: "mModelImagePageGridDisplayFactor")
    self.mModelImagePageZoom_property = EBStoredProperty_Int (defaultValue: 200, undoManager: inUndoManager, key: "mModelImagePageZoom")
    self.mModelImagePageXPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImagePageXPlacardUnit")
    self.mModelImagePageYPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImagePageYPlacardUnit")
    self.mModelImageSecondPointXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImageSecondPointXUnit")
    self.mModelImageSecondPointYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mModelImageSecondPointYUnit")
    self.mModelImageFirstPointXOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mModelImageFirstPointXOnLock")
    self.mModelImageFirstPointYOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mModelImageFirstPointYOnLock")
    self.mModelImagePointsDxOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mModelImagePointsDxOnLock")
    self.mModelImagePointsDyOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mModelImagePointsDyOnLock")
    self.mModelImageScale_property = EBStoredProperty_Double (defaultValue: 1, undoManager: inUndoManager, key: "mModelImageScale")
    self.mModelImageRotationInRadians_property = EBStoredProperty_Double (defaultValue: 0, undoManager: inUndoManager, key: "mModelImageRotationInRadians")
    self.mDimensionUnitFirstModelPointX_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDimensionUnitFirstModelPointX")
    self.mDimensionUnitFirstModelPointY_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDimensionUnitFirstModelPointY")
    self.mDimensionUnitSecondModelPointDx_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDimensionUnitSecondModelPointDx")
    self.mDimensionUnitSecondModelPointDy_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDimensionUnitSecondModelPointDy")
    self.mModelPointsCircleRadius_property = EBStoredProperty_Int (defaultValue: 10, undoManager: inUndoManager, key: "mModelPointsCircleRadius")
    self.mPointsAreLocked_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mPointsAreLocked")
    self.knobSizeMultpliedByTen_property = EBStoredProperty_Int (defaultValue: 20, undoManager: inUndoManager, key: "knobSizeMultpliedByTen")
    self.padNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering, undoManager: inUndoManager, key: "padNumbering")
    self.counterClockNumberingStartAngle_property = EBStoredProperty_Int (defaultValue: 90, undoManager: inUndoManager, key: "counterClockNumberingStartAngle")
    self.xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xPlacardUnit")
    self.yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yPlacardUnit")
    self.mModelImageData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: inUndoManager, key: "mModelImageData")
    super.init (inUndoManager)
    self.mModelImageDoublePoint_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mModelImageDoublePoint_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mModelImageDoublePoint_property.startsToBeObserved (by: self.mModelImageDoublePoint_none)
//    gInitSemaphore.wait ()
  //--- To many property: mModelImageObjects (has opposite relationship)
    self.mModelImageObjects_property.undoManager = inUndoManager
    self.mModelImageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: packageObjects (has opposite relationship)
    self.packageObjects_property.undoManager = inUndoManager
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mFirstX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mFirstX = inValue
    }
    self.mModelImageDoublePoint_property.mFirstX_property.startsToBeObserved (by: self.mModelImageFirstPointX_property)
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mFirstY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mFirstY = inValue
    }
    self.mModelImageDoublePoint_property.mFirstY_property.startsToBeObserved (by: self.mModelImageFirstPointY_property)
  //--- Atomic proxy property: mModelImageSecondPointDx
    self.mModelImageSecondPointDx_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mSecondDx_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDx_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mSecondDx = inValue
    }
    self.mModelImageDoublePoint_property.mSecondDx_property.startsToBeObserved (by: self.mModelImageSecondPointDx_property)
  //--- Atomic proxy property: mModelImageSecondPointDy
    self.mModelImageSecondPointDy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mSecondDy_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDy_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mSecondDy = inValue
    }
    self.mModelImageDoublePoint_property.mSecondDy_property.startsToBeObserved (by: self.mModelImageSecondPointDy_property)
  //--- Atomic property: freePadNumbering
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padNumbering_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_freePadNumbering (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.startsToBeObserved (by: self.freePadNumbering_property)
  //--- Atomic property: counterClockNumbering
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padNumbering_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_counterClockNumbering (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.startsToBeObserved (by: self.counterClockNumbering_property)
  //--- Atomic property: gridStepMultipliedByDisplayFactor
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.gridStep_property.selection
        let s1 = unwSelf.gridDisplayFactor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PackageRoot_gridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.gridStep_property.startsToBeObserved (by: self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.startsToBeObserved (by: self.gridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: secondPointX
    self.secondPointX_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mModelImageFirstPointX_property.selection
        let s1 = unwSelf.mModelImageSecondPointDx_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PackageRoot_secondPointX (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointX_property.startsToBeObserved (by: self.secondPointX_property)
    self.mModelImageSecondPointDx_property.startsToBeObserved (by: self.secondPointX_property)
  //--- Atomic property: secondPointY
    self.secondPointY_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mModelImageFirstPointY_property.selection
        let s1 = unwSelf.mModelImageSecondPointDy_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PackageRoot_secondPointY (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointY_property.startsToBeObserved (by: self.secondPointY_property)
    self.mModelImageSecondPointDy_property.startsToBeObserved (by: self.secondPointY_property)
  //--- Atomic property: lockImageView
    self.lockImageView_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPointsAreLocked_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_lockImageView (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPointsAreLocked_property.startsToBeObserved (by: self.lockImageView_property)
  //--- To one property: mModelImageDoublePoint
    self.mModelImageDoublePoint_property.undoManager = inUndoManager
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_showPadNumber_property.selection
        let s1 = unwSelf.packagePads_property.selection
        let s2 = unwSelf.packageSlavePads_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_PackageRoot_padNumberDisplay (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_showPadNumber_property.startsToBeObserved (by: self.padNumberDisplay_property)
    self.packagePads_property.toMany_padNumberDisplay_StartsToBeObserved (by: self.padNumberDisplay_property)
    self.packageSlavePads_property.toMany_padNumberDisplay_StartsToBeObserved (by: self.padNumberDisplay_property)
  //--- Atomic property: backgroundImagePageBackgroundDisplay
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.packageObjects_property.selection
        let s1 = unwSelf.mModelImageData_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PackageRoot_backgroundImagePageBackgroundDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.toMany_objectDisplay_StartsToBeObserved (by: self.backgroundImagePageBackgroundDisplay_property)
    self.mModelImageData_property.startsToBeObserved (by: self.backgroundImagePageBackgroundDisplay_property)
  //--- Atomic property: modelImageSizeString
    self.modelImageSizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mModelImageData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_modelImageSizeString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageData_property.startsToBeObserved (by: self.modelImageSizeString_property)
  //--- Atomic property: hasModelImage
    self.hasModelImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mModelImageData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_hasModelImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageData_property.startsToBeObserved (by: self.hasModelImage_property)
  //--- Atomic property: masterPadObjectIndexArray
    self.masterPadObjectIndexArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.packagePads_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_masterPadObjectIndexArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packagePads_property.toMany_masterPadObjectIndex_StartsToBeObserved (by: self.masterPadObjectIndexArray_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.packageObjects_property.selection
        let s1 = unwSelf.packageZones_property.selection
        let s2 = unwSelf.packageZones_property.selection
        let s3 = unwSelf.packageZones_property.selection
        let s4 = unwSelf.packageZones_property.selection
        let s5 = preferences_padZoneFont_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageRoot_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.toMany_issues_StartsToBeObserved (by: self.issues_property)
    self.packageZones_property.toMany_rect_StartsToBeObserved (by: self.issues_property)
    self.packageZones_property.toMany_zoneName_StartsToBeObserved (by: self.issues_property)
    self.packageZones_property.toMany_xName_StartsToBeObserved (by: self.issues_property)
    self.packageZones_property.toMany_yName_StartsToBeObserved (by: self.issues_property)
    preferences_padZoneFont_property.startsToBeObserved (by: self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mModelImageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.packagePads_property.setDataProvider (self.packageObjects_property)
    self.packageSlavePads_property.setDataProvider (self.packageObjects_property)
    self.packageZones_property.setDataProvider (self.packageObjects_property)
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.counterClockNumberingStartAngle_property.setSignatureObserver (observer: self)
    self.packageObjects_property.setSignatureObserver (observer: self)
    self.program_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.comments_property.signature ())
    crc.accumulate (u32: self.counterClockNumberingStartAngle_property.signature ())
    crc.accumulate (u32: self.packageObjects_property.signature ())
    crc.accumulate (u32: self.program_property.signature ())
    crc.accumulate (u32: self.xPlacardUnit_property.signature ())
    crc.accumulate (u32: self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

