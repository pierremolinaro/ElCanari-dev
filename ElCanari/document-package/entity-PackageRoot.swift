//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedPageIndex : AnyObject {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedInspector : AnyObject {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_comments : AnyObject {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_program : AnyObject {
  var program : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_horizontalFlip : AnyObject {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_verticalFlip : AnyObject {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStyle : AnyObject {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStep : AnyObject {
  var gridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepUnit : AnyObject {
  var gridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridDisplayFactor : AnyObject {
  var gridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_zoom : AnyObject {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageOpacity : AnyObject {
  var mModelImageOpacity : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageHorizontalFlip : AnyObject {
  var mModelImagePageHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageVerticalFlip : AnyObject {
  var mModelImagePageVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStyle : AnyObject {
  var mModelImagePageGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStep : AnyObject {
  var mModelImagePageGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStepUnit : AnyObject {
  var mModelImagePageGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridDisplayFactor : AnyObject {
  var mModelImagePageGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageZoom : AnyObject {
  var mModelImagePageZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageXPlacardUnit : AnyObject {
  var mModelImagePageXPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageYPlacardUnit : AnyObject {
  var mModelImagePageYPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointXUnit : AnyObject {
  var mModelImageSecondPointXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointYUnit : AnyObject {
  var mModelImageSecondPointYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointXOnLock : AnyObject {
  var mModelImageFirstPointXOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointYOnLock : AnyObject {
  var mModelImageFirstPointYOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePointsDxOnLock : AnyObject {
  var mModelImagePointsDxOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePointsDyOnLock : AnyObject {
  var mModelImagePointsDyOnLock : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageScale : AnyObject {
  var mModelImageScale : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageRotationInRadians : AnyObject {
  var mModelImageRotationInRadians : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mDimensionUnitFirstModelPointX : AnyObject {
  var mDimensionUnitFirstModelPointX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mDimensionUnitFirstModelPointY : AnyObject {
  var mDimensionUnitFirstModelPointY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mDimensionUnitSecondModelPointDx : AnyObject {
  var mDimensionUnitSecondModelPointDx : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mDimensionUnitSecondModelPointDy : AnyObject {
  var mDimensionUnitSecondModelPointDy : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelPointsCircleRadius : AnyObject {
  var mModelPointsCircleRadius : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mPointsAreLocked : AnyObject {
  var mPointsAreLocked : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_knobSizeMultpliedByTen : AnyObject {
  var knobSizeMultpliedByTen : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumbering : AnyObject {
  var padNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_counterClockNumberingStartAngle : AnyObject {
  var counterClockNumberingStartAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_xPlacardUnit : AnyObject {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_yPlacardUnit : AnyObject {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageData : AnyObject {
  var mModelImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointX : AnyObject {
  var mModelImageFirstPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointY : AnyObject {
  var mModelImageFirstPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointDx : AnyObject {
  var mModelImageSecondPointDx : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointDy : AnyObject {
  var mModelImageSecondPointDy : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_freePadNumbering : AnyObject {
  var freePadNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_counterClockNumbering : AnyObject {
  var counterClockNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepMultipliedByDisplayFactor : AnyObject {
  var gridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_secondPointX : AnyObject {
  var secondPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_secondPointY : AnyObject {
  var secondPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_lockImageView : AnyObject {
  var lockImageView : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_backgroundImagePageBackgroundDisplay : AnyObject {
  var backgroundImagePageBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_modelImageSizeString : AnyObject {
  var modelImageSizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_hasModelImage : AnyObject {
  var hasModelImage : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_masterPadObjectIndexArray : AnyObject {
  var masterPadObjectIndexArray : IntArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageRoot : EBGraphicManagedObject,
         PackageRoot_selectedPageIndex,
         PackageRoot_selectedInspector,
         PackageRoot_comments,
         PackageRoot_program,
         PackageRoot_horizontalFlip,
         PackageRoot_verticalFlip,
         PackageRoot_gridStyle,
         PackageRoot_gridStep,
         PackageRoot_gridStepUnit,
         PackageRoot_gridDisplayFactor,
         PackageRoot_zoom,
         PackageRoot_mModelImageOpacity,
         PackageRoot_mModelImagePageHorizontalFlip,
         PackageRoot_mModelImagePageVerticalFlip,
         PackageRoot_mModelImagePageGridStyle,
         PackageRoot_mModelImagePageGridStep,
         PackageRoot_mModelImagePageGridStepUnit,
         PackageRoot_mModelImagePageGridDisplayFactor,
         PackageRoot_mModelImagePageZoom,
         PackageRoot_mModelImagePageXPlacardUnit,
         PackageRoot_mModelImagePageYPlacardUnit,
         PackageRoot_mModelImageSecondPointXUnit,
         PackageRoot_mModelImageSecondPointYUnit,
         PackageRoot_mModelImageFirstPointXOnLock,
         PackageRoot_mModelImageFirstPointYOnLock,
         PackageRoot_mModelImagePointsDxOnLock,
         PackageRoot_mModelImagePointsDyOnLock,
         PackageRoot_mModelImageScale,
         PackageRoot_mModelImageRotationInRadians,
         PackageRoot_mDimensionUnitFirstModelPointX,
         PackageRoot_mDimensionUnitFirstModelPointY,
         PackageRoot_mDimensionUnitSecondModelPointDx,
         PackageRoot_mDimensionUnitSecondModelPointDy,
         PackageRoot_mModelPointsCircleRadius,
         PackageRoot_mPointsAreLocked,
         PackageRoot_knobSizeMultpliedByTen,
         PackageRoot_padNumbering,
         PackageRoot_counterClockNumberingStartAngle,
         PackageRoot_xPlacardUnit,
         PackageRoot_yPlacardUnit,
         PackageRoot_mModelImageData,
         PackageRoot_mModelImageFirstPointX,
         PackageRoot_mModelImageFirstPointY,
         PackageRoot_mModelImageSecondPointDx,
         PackageRoot_mModelImageSecondPointDy,
         PackageRoot_freePadNumbering,
         PackageRoot_counterClockNumbering,
         PackageRoot_gridStepMultipliedByDisplayFactor,
         PackageRoot_secondPointX,
         PackageRoot_secondPointY,
         PackageRoot_lockImageView,
         PackageRoot_padNumberDisplay,
         PackageRoot_backgroundImagePageBackgroundDisplay,
         PackageRoot_modelImageSizeString,
         PackageRoot_hasModelImage,
         PackageRoot_masterPadObjectIndexArray,
         PackageRoot_issues {

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  final let selectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedPageIndex_toDefaultValue () {
    self.selectedPageIndex = 1
  }

  //····················································································································

  final var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  final let selectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedInspector_toDefaultValue () {
    self.selectedInspector = 0
  }

  //····················································································································

  final var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  final let comments_property : EBStoredProperty_String

  //····················································································································

  final func reset_comments_toDefaultValue () {
    self.comments = ""
  }

  //····················································································································

  final var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: program
  //····················································································································

  final let program_property : EBStoredProperty_String

  //····················································································································

  final func reset_program_toDefaultValue () {
    self.program = ""
  }

  //····················································································································

  final var program : String {
    get { return self.program_property.propval }
    set { self.program_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  final let horizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_horizontalFlip_toDefaultValue () {
    self.horizontalFlip = false
  }

  //····················································································································

  final var horizontalFlip : Bool {
    get { return self.horizontalFlip_property.propval }
    set { self.horizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  final let verticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_verticalFlip_toDefaultValue () {
    self.verticalFlip = false
  }

  //····················································································································

  final var verticalFlip : Bool {
    get { return self.verticalFlip_property.propval }
    set { self.verticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  final let gridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_gridStyle_toDefaultValue () {
    self.gridStyle = GridStyle.line
  }

  //····················································································································

  final var gridStyle : GridStyle {
    get { return self.gridStyle_property.propval }
    set { self.gridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStep
  //····················································································································

  final let gridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridStep_toDefaultValue () {
    self.gridStep = 57150
  }

  //····················································································································

  final var gridStep : Int {
    get { return self.gridStep_property.propval }
    set { self.gridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStepUnit
  //····················································································································

  final let gridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridStepUnit_toDefaultValue () {
    self.gridStepUnit = 2286
  }

  //····················································································································

  final var gridStepUnit : Int {
    get { return self.gridStepUnit_property.propval }
    set { self.gridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridDisplayFactor
  //····················································································································

  final let gridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridDisplayFactor_toDefaultValue () {
    self.gridDisplayFactor = 4
  }

  //····················································································································

  final var gridDisplayFactor : Int {
    get { return self.gridDisplayFactor_property.propval }
    set { self.gridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  final let zoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_zoom_toDefaultValue () {
    self.zoom = 600
  }

  //····················································································································

  final var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageOpacity
  //····················································································································

  final let mModelImageOpacity_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageOpacity_toDefaultValue () {
    self.mModelImageOpacity = 0.5
  }

  //····················································································································

  final var mModelImageOpacity : Double {
    get { return self.mModelImageOpacity_property.propval }
    set { self.mModelImageOpacity_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageHorizontalFlip
  //····················································································································

  final let mModelImagePageHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mModelImagePageHorizontalFlip_toDefaultValue () {
    self.mModelImagePageHorizontalFlip = false
  }

  //····················································································································

  final var mModelImagePageHorizontalFlip : Bool {
    get { return self.mModelImagePageHorizontalFlip_property.propval }
    set { self.mModelImagePageHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageVerticalFlip
  //····················································································································

  final let mModelImagePageVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mModelImagePageVerticalFlip_toDefaultValue () {
    self.mModelImagePageVerticalFlip = false
  }

  //····················································································································

  final var mModelImagePageVerticalFlip : Bool {
    get { return self.mModelImagePageVerticalFlip_property.propval }
    set { self.mModelImagePageVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStyle
  //····················································································································

  final let mModelImagePageGridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_mModelImagePageGridStyle_toDefaultValue () {
    self.mModelImagePageGridStyle = GridStyle.noGrid
  }

  //····················································································································

  final var mModelImagePageGridStyle : GridStyle {
    get { return self.mModelImagePageGridStyle_property.propval }
    set { self.mModelImagePageGridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStep
  //····················································································································

  final let mModelImagePageGridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridStep_toDefaultValue () {
    self.mModelImagePageGridStep = 2286
  }

  //····················································································································

  final var mModelImagePageGridStep : Int {
    get { return self.mModelImagePageGridStep_property.propval }
    set { self.mModelImagePageGridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridStepUnit
  //····················································································································

  final let mModelImagePageGridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridStepUnit_toDefaultValue () {
    self.mModelImagePageGridStepUnit = 2286
  }

  //····················································································································

  final var mModelImagePageGridStepUnit : Int {
    get { return self.mModelImagePageGridStepUnit_property.propval }
    set { self.mModelImagePageGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageGridDisplayFactor
  //····················································································································

  final let mModelImagePageGridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageGridDisplayFactor_toDefaultValue () {
    self.mModelImagePageGridDisplayFactor = 100
  }

  //····················································································································

  final var mModelImagePageGridDisplayFactor : Int {
    get { return self.mModelImagePageGridDisplayFactor_property.propval }
    set { self.mModelImagePageGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageZoom
  //····················································································································

  final let mModelImagePageZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageZoom_toDefaultValue () {
    self.mModelImagePageZoom = 200
  }

  //····················································································································

  final var mModelImagePageZoom : Int {
    get { return self.mModelImagePageZoom_property.propval }
    set { self.mModelImagePageZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageXPlacardUnit
  //····················································································································

  final let mModelImagePageXPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageXPlacardUnit_toDefaultValue () {
    self.mModelImagePageXPlacardUnit = 2286
  }

  //····················································································································

  final var mModelImagePageXPlacardUnit : Int {
    get { return self.mModelImagePageXPlacardUnit_property.propval }
    set { self.mModelImagePageXPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePageYPlacardUnit
  //····················································································································

  final let mModelImagePageYPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePageYPlacardUnit_toDefaultValue () {
    self.mModelImagePageYPlacardUnit = 2286
  }

  //····················································································································

  final var mModelImagePageYPlacardUnit : Int {
    get { return self.mModelImagePageYPlacardUnit_property.propval }
    set { self.mModelImagePageYPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageSecondPointXUnit
  //····················································································································

  final let mModelImageSecondPointXUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageSecondPointXUnit_toDefaultValue () {
    self.mModelImageSecondPointXUnit = 2286
  }

  //····················································································································

  final var mModelImageSecondPointXUnit : Int {
    get { return self.mModelImageSecondPointXUnit_property.propval }
    set { self.mModelImageSecondPointXUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageSecondPointYUnit
  //····················································································································

  final let mModelImageSecondPointYUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageSecondPointYUnit_toDefaultValue () {
    self.mModelImageSecondPointYUnit = 2286
  }

  //····················································································································

  final var mModelImageSecondPointYUnit : Int {
    get { return self.mModelImageSecondPointYUnit_property.propval }
    set { self.mModelImageSecondPointYUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageFirstPointXOnLock
  //····················································································································

  final let mModelImageFirstPointXOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageFirstPointXOnLock_toDefaultValue () {
    self.mModelImageFirstPointXOnLock = 0
  }

  //····················································································································

  final var mModelImageFirstPointXOnLock : Int {
    get { return self.mModelImageFirstPointXOnLock_property.propval }
    set { self.mModelImageFirstPointXOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageFirstPointYOnLock
  //····················································································································

  final let mModelImageFirstPointYOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImageFirstPointYOnLock_toDefaultValue () {
    self.mModelImageFirstPointYOnLock = 0
  }

  //····················································································································

  final var mModelImageFirstPointYOnLock : Int {
    get { return self.mModelImageFirstPointYOnLock_property.propval }
    set { self.mModelImageFirstPointYOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePointsDxOnLock
  //····················································································································

  final let mModelImagePointsDxOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePointsDxOnLock_toDefaultValue () {
    self.mModelImagePointsDxOnLock = 0
  }

  //····················································································································

  final var mModelImagePointsDxOnLock : Int {
    get { return self.mModelImagePointsDxOnLock_property.propval }
    set { self.mModelImagePointsDxOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImagePointsDyOnLock
  //····················································································································

  final let mModelImagePointsDyOnLock_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelImagePointsDyOnLock_toDefaultValue () {
    self.mModelImagePointsDyOnLock = 0
  }

  //····················································································································

  final var mModelImagePointsDyOnLock : Int {
    get { return self.mModelImagePointsDyOnLock_property.propval }
    set { self.mModelImagePointsDyOnLock_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageScale
  //····················································································································

  final let mModelImageScale_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageScale_toDefaultValue () {
    self.mModelImageScale = 1
  }

  //····················································································································

  final var mModelImageScale : Double {
    get { return self.mModelImageScale_property.propval }
    set { self.mModelImageScale_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelImageRotationInRadians
  //····················································································································

  final let mModelImageRotationInRadians_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mModelImageRotationInRadians_toDefaultValue () {
    self.mModelImageRotationInRadians = 0
  }

  //····················································································································

  final var mModelImageRotationInRadians : Double {
    get { return self.mModelImageRotationInRadians_property.propval }
    set { self.mModelImageRotationInRadians_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitFirstModelPointX
  //····················································································································

  final let mDimensionUnitFirstModelPointX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitFirstModelPointX_toDefaultValue () {
    self.mDimensionUnitFirstModelPointX = 2286
  }

  //····················································································································

  final var mDimensionUnitFirstModelPointX : Int {
    get { return self.mDimensionUnitFirstModelPointX_property.propval }
    set { self.mDimensionUnitFirstModelPointX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitFirstModelPointY
  //····················································································································

  final let mDimensionUnitFirstModelPointY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitFirstModelPointY_toDefaultValue () {
    self.mDimensionUnitFirstModelPointY = 2286
  }

  //····················································································································

  final var mDimensionUnitFirstModelPointY : Int {
    get { return self.mDimensionUnitFirstModelPointY_property.propval }
    set { self.mDimensionUnitFirstModelPointY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitSecondModelPointDx
  //····················································································································

  final let mDimensionUnitSecondModelPointDx_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitSecondModelPointDx_toDefaultValue () {
    self.mDimensionUnitSecondModelPointDx = 2286
  }

  //····················································································································

  final var mDimensionUnitSecondModelPointDx : Int {
    get { return self.mDimensionUnitSecondModelPointDx_property.propval }
    set { self.mDimensionUnitSecondModelPointDx_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDimensionUnitSecondModelPointDy
  //····················································································································

  final let mDimensionUnitSecondModelPointDy_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDimensionUnitSecondModelPointDy_toDefaultValue () {
    self.mDimensionUnitSecondModelPointDy = 2286
  }

  //····················································································································

  final var mDimensionUnitSecondModelPointDy : Int {
    get { return self.mDimensionUnitSecondModelPointDy_property.propval }
    set { self.mDimensionUnitSecondModelPointDy_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mModelPointsCircleRadius
  //····················································································································

  final let mModelPointsCircleRadius_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mModelPointsCircleRadius_toDefaultValue () {
    self.mModelPointsCircleRadius = 10
  }

  //····················································································································

  final var mModelPointsCircleRadius : Int {
    get { return self.mModelPointsCircleRadius_property.propval }
    set { self.mModelPointsCircleRadius_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPointsAreLocked
  //····················································································································

  final let mPointsAreLocked_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPointsAreLocked_toDefaultValue () {
    self.mPointsAreLocked = false
  }

  //····················································································································

  final var mPointsAreLocked : Bool {
    get { return self.mPointsAreLocked_property.propval }
    set { self.mPointsAreLocked_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: knobSizeMultpliedByTen
  //····················································································································

  final let knobSizeMultpliedByTen_property : EBStoredProperty_Int

  //····················································································································

  final func reset_knobSizeMultpliedByTen_toDefaultValue () {
    self.knobSizeMultpliedByTen = 20
  }

  //····················································································································

  final var knobSizeMultpliedByTen : Int {
    get { return self.knobSizeMultpliedByTen_property.propval }
    set { self.knobSizeMultpliedByTen_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padNumbering
  //····················································································································

  final let padNumbering_property : EBStoredProperty_PadNumbering

  //····················································································································

  final func reset_padNumbering_toDefaultValue () {
    self.padNumbering = PadNumbering.noNumbering
  }

  //····················································································································

  final var padNumbering : PadNumbering {
    get { return self.padNumbering_property.propval }
    set { self.padNumbering_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: counterClockNumberingStartAngle
  //····················································································································

  final let counterClockNumberingStartAngle_property : EBStoredProperty_Int

  //····················································································································

  final func reset_counterClockNumberingStartAngle_toDefaultValue () {
    self.counterClockNumberingStartAngle = 90
  }

  //····················································································································

  final var counterClockNumberingStartAngle : Int {
    get { return self.counterClockNumberingStartAngle_property.propval }
    set { self.counterClockNumberingStartAngle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  final let xPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xPlacardUnit_toDefaultValue () {
    self.xPlacardUnit = 2286
  }

  //····················································································································

  final var xPlacardUnit : Int {
    get { return self.xPlacardUnit_property.propval }
    set { self.xPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  final let yPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yPlacardUnit_toDefaultValue () {
    self.yPlacardUnit = 2286
  }

  //····················································································································

  final var yPlacardUnit : Int {
    get { return self.yPlacardUnit_property.propval }
    set { self.yPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mModelImageObjects
  //····················································································································

  final let mModelImageObjects_property = StoredArrayOf_PackageModelImageDoublePoint (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mModelImageObjects : EBReferenceArray <PackageModelImageDoublePoint> {
    get { return self.mModelImageObjects_property.propval }
    set { self.mModelImageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: packageObjects
  //····················································································································

  final let packageObjects_property = StoredArrayOf_PackageObject (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var packageObjects : EBReferenceArray <PackageObject> {
    get { return self.packageObjects_property.propval }
    set { self.packageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: packagePads
  //····················································································································

  final let packagePads_property = TransientArrayOfSuperOf_PackagePad <PackageObject> ()

  //····················································································································

  final var packagePads : EBReferenceArray <PackagePad> {
    get { return self.packagePads_property.propval }
  }

  //····················································································································
  //   To many property: packageSlavePads
  //····················································································································

  final let packageSlavePads_property = TransientArrayOfSuperOf_PackageSlavePad <PackageObject> ()

  //····················································································································

  final var packageSlavePads : EBReferenceArray <PackageSlavePad> {
    get { return self.packageSlavePads_property.propval }
  }

  //····················································································································
  //   To many property: packageZones
  //····················································································································

  final let packageZones_property = TransientArrayOfSuperOf_PackageZone <PackageObject> ()

  //····················································································································

  final var packageZones : EBReferenceArray <PackageZone> {
    get { return self.packageZones_property.propval }
  }

  //····················································································································
  //   Atomic property: mModelImageData
  //····················································································································

  final let mModelImageData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mModelImageData_toDefaultValue () {
    self.mModelImageData = Data ()
  }

  //····················································································································

  final var mModelImageData : Data {
    get { return self.mModelImageData_property.propval }
    set { self.mModelImageData_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointX
  //····················································································································

  let mModelImageFirstPointX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointX : Int? {
    get {
      switch self.mModelImageFirstPointX_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointY
  //····················································································································

  let mModelImageFirstPointY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointY : Int? {
    get {
      switch self.mModelImageFirstPointY_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDx
  //····················································································································

  let mModelImageSecondPointDx_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointDx : Int? {
    get {
      switch self.mModelImageSecondPointDx_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDx_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDy
  //····················································································································

  let mModelImageSecondPointDy_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointDy : Int? {
    get {
      switch self.mModelImageSecondPointDy_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Transient property: freePadNumbering
  //····················································································································

  final let freePadNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  final var freePadNumbering : Bool? {
    switch self.freePadNumbering_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: counterClockNumbering
  //····················································································································

  final let counterClockNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  final var counterClockNumbering : Bool? {
    switch self.counterClockNumbering_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gridStepMultipliedByDisplayFactor
  //····················································································································

  final let gridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  final var gridStepMultipliedByDisplayFactor : Int? {
    switch self.gridStepMultipliedByDisplayFactor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: secondPointX
  //····················································································································

  final let secondPointX_property = EBTransientProperty_Int ()

  //····················································································································

  final var secondPointX : Int? {
    switch self.secondPointX_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: secondPointY
  //····················································································································

  final let secondPointY_property = EBTransientProperty_Int ()

  //····················································································································

  final var secondPointY : Int? {
    switch self.secondPointY_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: lockImageView
  //····················································································································

  final let lockImageView_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var lockImageView : NSImage? {
    switch self.lockImageView_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mModelImageDoublePoint
  //····················································································································

  final let mModelImageDoublePoint_property = StoredObject_PackageModelImageDoublePoint (usedForSignature: false)

  //····················································································································

  final var mModelImageDoublePoint : PackageModelImageDoublePoint? {
    get {
      return self.mModelImageDoublePoint_property.propval
    }
    set {
      if self.mModelImageDoublePoint_property.propval != nil {
        self.mModelImageDoublePoint_property.setProp (nil)
      }
      if newValue != nil {
        self.mModelImageDoublePoint_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mModelImageDoublePoint_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backgroundImagePageBackgroundDisplay
  //····················································································································

  final let backgroundImagePageBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var backgroundImagePageBackgroundDisplay : EBShape? {
    switch self.backgroundImagePageBackgroundDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: modelImageSizeString
  //····················································································································

  final let modelImageSizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var modelImageSizeString : String? {
    switch self.modelImageSizeString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasModelImage
  //····················································································································

  final let hasModelImage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasModelImage : Bool? {
    switch self.hasModelImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: masterPadObjectIndexArray
  //····················································································································

  final let masterPadObjectIndexArray_property = EBTransientProperty_IntArray ()

  //····················································································································

  final var masterPadObjectIndexArray : IntArray? {
    switch self.masterPadObjectIndexArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 1, undoManager: ebUndoManager)
    self.selectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.program_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.verticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: ebUndoManager)
    self.gridStep_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.gridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.gridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: ebUndoManager)
    self.zoom_property = EBStoredProperty_Int (defaultValue: 600, undoManager: ebUndoManager)
    self.mModelImageOpacity_property = EBStoredProperty_Double (defaultValue: 0.5, undoManager: ebUndoManager)
    self.mModelImagePageHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mModelImagePageVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mModelImagePageGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.noGrid, undoManager: ebUndoManager)
    self.mModelImagePageGridStep_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImagePageGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImagePageGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 100, undoManager: ebUndoManager)
    self.mModelImagePageZoom_property = EBStoredProperty_Int (defaultValue: 200, undoManager: ebUndoManager)
    self.mModelImagePageXPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImagePageYPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImageSecondPointXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImageSecondPointYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImageFirstPointXOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mModelImageFirstPointYOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mModelImagePointsDxOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mModelImagePointsDyOnLock_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mModelImageScale_property = EBStoredProperty_Double (defaultValue: 1, undoManager: ebUndoManager)
    self.mModelImageRotationInRadians_property = EBStoredProperty_Double (defaultValue: 0, undoManager: ebUndoManager)
    self.mDimensionUnitFirstModelPointX_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mDimensionUnitFirstModelPointY_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mDimensionUnitSecondModelPointDx_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mDimensionUnitSecondModelPointDy_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelPointsCircleRadius_property = EBStoredProperty_Int (defaultValue: 10, undoManager: ebUndoManager)
    self.mPointsAreLocked_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.knobSizeMultpliedByTen_property = EBStoredProperty_Int (defaultValue: 20, undoManager: ebUndoManager)
    self.padNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering, undoManager: ebUndoManager)
    self.counterClockNumberingStartAngle_property = EBStoredProperty_Int (defaultValue: 90, undoManager: ebUndoManager)
    self.xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mModelImageData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.mModelImageDoublePoint_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mModelImageDoublePoint_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mModelImageDoublePoint_property.addEBObserver (self.mModelImageDoublePoint_none)
  //--- To many property: mModelImageObjects (has opposite relationship)
    self.mModelImageObjects_property.ebUndoManager = self.ebUndoManager
    self.mModelImageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: packageObjects (has opposite relationship)
    self.packageObjects_property.ebUndoManager = self.ebUndoManager
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mFirstX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mFirstX = inValue
    }
    self.mModelImageFirstPointX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageDoublePoint?.mFirstX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageDoublePoint_property.mFirstX_property.addEBObserver (self.mModelImageFirstPointX_property)
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mFirstY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mFirstY = inValue
    }
    self.mModelImageFirstPointY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageDoublePoint?.mFirstY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageDoublePoint_property.mFirstY_property.addEBObserver (self.mModelImageFirstPointY_property)
  //--- Atomic proxy property: mModelImageSecondPointDx
    self.mModelImageSecondPointDx_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mSecondDx_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDx_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mSecondDx = inValue
    }
    self.mModelImageSecondPointDx_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageDoublePoint?.mSecondDx_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageDoublePoint_property.mSecondDx_property.addEBObserver (self.mModelImageSecondPointDx_property)
  //--- Atomic proxy property: mModelImageSecondPointDy
    self.mModelImageSecondPointDy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageDoublePoint_property {
        switch object.mSecondDy_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDy_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageDoublePoint?.mSecondDy = inValue
    }
    self.mModelImageSecondPointDy_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageDoublePoint?.mSecondDy_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageDoublePoint_property.mSecondDy_property.addEBObserver (self.mModelImageSecondPointDy_property)
  //--- Atomic property: freePadNumbering
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.padNumbering_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_freePadNumbering (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.addEBObserver (self.freePadNumbering_property)
  //--- Atomic property: counterClockNumbering
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.padNumbering_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_counterClockNumbering (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.addEBObserver (self.counterClockNumbering_property)
  //--- Atomic property: gridStepMultipliedByDisplayFactor
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.gridStep_property.selection, unwSelf.gridDisplayFactor_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_PackageRoot_gridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.gridStep_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: secondPointX
    self.secondPointX_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mModelImageFirstPointX_property.selection, unwSelf.mModelImageSecondPointDx_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_PackageRoot_secondPointX (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointX_property.addEBObserver (self.secondPointX_property)
    self.mModelImageSecondPointDx_property.addEBObserver (self.secondPointX_property)
  //--- Atomic property: secondPointY
    self.secondPointY_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mModelImageFirstPointY_property.selection, unwSelf.mModelImageSecondPointDy_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_PackageRoot_secondPointY (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointY_property.addEBObserver (self.secondPointY_property)
    self.mModelImageSecondPointDy_property.addEBObserver (self.secondPointY_property)
  //--- Atomic property: lockImageView
    self.lockImageView_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPointsAreLocked_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_lockImageView (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPointsAreLocked_property.addEBObserver (self.lockImageView_property)
  //--- To one property: mModelImageDoublePoint
    self.mModelImageDoublePoint_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (preferences_showPadNumber_property.selection, unwSelf.packagePads_property.selection, unwSelf.packageSlavePads_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_PackageRoot_padNumberDisplay (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_showPadNumber_property.addEBObserver (self.padNumberDisplay_property)
    self.packagePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageSlavePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
  //--- Atomic property: backgroundImagePageBackgroundDisplay
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.packageObjects_property.selection, unwSelf.mModelImageData_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_PackageRoot_backgroundImagePageBackgroundDisplay (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserverOf_objectDisplay (self.backgroundImagePageBackgroundDisplay_property)
    self.mModelImageData_property.addEBObserver (self.backgroundImagePageBackgroundDisplay_property)
  //--- Atomic property: modelImageSizeString
    self.modelImageSizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mModelImageData_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_modelImageSizeString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageData_property.addEBObserver (self.modelImageSizeString_property)
  //--- Atomic property: hasModelImage
    self.hasModelImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mModelImageData_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_hasModelImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mModelImageData_property.addEBObserver (self.hasModelImage_property)
  //--- Atomic property: masterPadObjectIndexArray
    self.masterPadObjectIndexArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.packagePads_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageRoot_masterPadObjectIndexArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packagePads_property.addEBObserverOf_masterPadObjectIndex (self.masterPadObjectIndexArray_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.packageObjects_property.selection, unwSelf.packageZones_property.selection, unwSelf.packageZones_property.selection, unwSelf.packageZones_property.selection, unwSelf.packageZones_property.selection, preferences_padZoneFont_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
          return .single (transient_PackageRoot_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserverOf_issues (self.issues_property)
    self.packageZones_property.addEBObserverOf_rect (self.issues_property)
    self.packageZones_property.addEBObserverOf_zoneName (self.issues_property)
    self.packageZones_property.addEBObserverOf_xName (self.issues_property)
    self.packageZones_property.addEBObserverOf_yName (self.issues_property)
    preferences_padZoneFont_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
    self.mModelImageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.packagePads_property.setDataProvider (self.packageObjects_property)
    self.packageSlavePads_property.setDataProvider (self.packageObjects_property)
    self.packageZones_property.setDataProvider (self.packageObjects_property)
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.counterClockNumberingStartAngle_property.setSignatureObserver (observer: self)
    self.packageObjects_property.setSignatureObserver (observer: self)
    self.program_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- To many property: packagePads
    self.packageObjects_property.removeEBObserver (self.packagePads_property)
  //--- To many property: packageSlavePads
    self.packageObjects_property.removeEBObserver (self.packageSlavePads_property)
  //--- To many property: packageZones
    self.packageObjects_property.removeEBObserver (self.packageZones_property)
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mReadModelFunction = nil
    self.mModelImageFirstPointX_property.mWriteModelFunction = nil
    self.mModelImageFirstPointX_property.mValidateAndWriteModelFunction = nil
    self.mModelImageDoublePoint_property.mFirstX_property.removeEBObserver (self.mModelImageFirstPointX_property)
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mReadModelFunction = nil
    self.mModelImageFirstPointY_property.mWriteModelFunction = nil
    self.mModelImageFirstPointY_property.mValidateAndWriteModelFunction = nil
    self.mModelImageDoublePoint_property.mFirstY_property.removeEBObserver (self.mModelImageFirstPointY_property)
  //--- Atomic proxy property: mModelImageSecondPointDx
    self.mModelImageSecondPointDx_property.mReadModelFunction = nil
    self.mModelImageSecondPointDx_property.mWriteModelFunction = nil
    self.mModelImageSecondPointDx_property.mValidateAndWriteModelFunction = nil
    self.mModelImageDoublePoint_property.mSecondDx_property.removeEBObserver (self.mModelImageSecondPointDx_property)
  //--- Atomic proxy property: mModelImageSecondPointDy
    self.mModelImageSecondPointDy_property.mReadModelFunction = nil
    self.mModelImageSecondPointDy_property.mWriteModelFunction = nil
    self.mModelImageSecondPointDy_property.mValidateAndWriteModelFunction = nil
    self.mModelImageDoublePoint_property.mSecondDy_property.removeEBObserver (self.mModelImageSecondPointDy_property)
    // self.padNumbering_property.removeEBObserver (self.freePadNumbering_property)
    // self.padNumbering_property.removeEBObserver (self.counterClockNumbering_property)
    // self.gridStep_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    // self.gridDisplayFactor_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    // self.mModelImageFirstPointX_property.removeEBObserver (self.secondPointX_property)
    // self.mModelImageSecondPointDx_property.removeEBObserver (self.secondPointX_property)
    // self.mModelImageFirstPointY_property.removeEBObserver (self.secondPointY_property)
    // self.mModelImageSecondPointDy_property.removeEBObserver (self.secondPointY_property)
    // self.mPointsAreLocked_property.removeEBObserver (self.lockImageView_property)
    // preferences_showPadNumber_property.removeEBObserver (self.padNumberDisplay_property)
    // self.packagePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    // self.packageSlavePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    // self.packageObjects_property.removeEBObserverOf_objectDisplay (self.backgroundImagePageBackgroundDisplay_property)
    // self.mModelImageData_property.removeEBObserver (self.backgroundImagePageBackgroundDisplay_property)
    // self.mModelImageData_property.removeEBObserver (self.modelImageSizeString_property)
    // self.mModelImageData_property.removeEBObserver (self.hasModelImage_property)
    // self.packagePads_property.removeEBObserverOf_masterPadObjectIndex (self.masterPadObjectIndexArray_property)
    // self.packageObjects_property.removeEBObserverOf_issues (self.issues_property)
    // self.packageZones_property.removeEBObserverOf_rect (self.issues_property)
    // self.packageZones_property.removeEBObserverOf_zoneName (self.issues_property)
    // self.packageZones_property.removeEBObserverOf_xName (self.issues_property)
    // self.packageZones_property.removeEBObserverOf_yName (self.issues_property)
    // preferences_padZoneFont_property.removeEBObserver (self.issues_property)
    self.packagePads_property.setDataProvider (nil)
    self.packageSlavePads_property.setDataProvider (nil)
    self.packageZones_property.setDataProvider (nil)
  //--- Unregister properties for handling signature
    self.comments_property.setSignatureObserver (observer: nil)
    self.counterClockNumberingStartAngle_property.setSignatureObserver (observer: nil)
    self.packageObjects_property.setSignatureObserver (observer: nil)
    self.program_property.setSignatureObserver (observer: nil)
    self.xPlacardUnit_property.setSignatureObserver (observer: nil)
    self.yPlacardUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx: self.selectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx: self.selectedInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedInspector_property.mObserverExplorer,
      valueExplorer: &self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx: self.comments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.comments_property.mObserverExplorer,
      valueExplorer: &self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "program",
      idx: self.program_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.program_property.mObserverExplorer,
      valueExplorer: &self.program_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx: self.horizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.horizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.horizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx: self.verticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.verticalFlip_property.mObserverExplorer,
      valueExplorer: &self.verticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStyle",
      idx: self.gridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStyle_property.mObserverExplorer,
      valueExplorer: &self.gridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStep",
      idx: self.gridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStep_property.mObserverExplorer,
      valueExplorer: &self.gridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepUnit",
      idx: self.gridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.gridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridDisplayFactor",
      idx: self.gridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.gridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx: self.zoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoom_property.mObserverExplorer,
      valueExplorer: &self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageOpacity",
      idx: self.mModelImageOpacity_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageOpacity_property.mObserverExplorer,
      valueExplorer: &self.mModelImageOpacity_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageHorizontalFlip",
      idx: self.mModelImagePageHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageVerticalFlip",
      idx: self.mModelImagePageVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStyle",
      idx: self.mModelImagePageGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStep",
      idx: self.mModelImagePageGridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStep_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStepUnit",
      idx: self.mModelImagePageGridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridDisplayFactor",
      idx: self.mModelImagePageGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageZoom",
      idx: self.mModelImagePageZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageZoom_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageXPlacardUnit",
      idx: self.mModelImagePageXPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageXPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageXPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageYPlacardUnit",
      idx: self.mModelImagePageYPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageYPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageYPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageSecondPointXUnit",
      idx: self.mModelImageSecondPointXUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageSecondPointXUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImageSecondPointXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageSecondPointYUnit",
      idx: self.mModelImageSecondPointYUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageSecondPointYUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImageSecondPointYUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageFirstPointXOnLock",
      idx: self.mModelImageFirstPointXOnLock_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageFirstPointXOnLock_property.mObserverExplorer,
      valueExplorer: &self.mModelImageFirstPointXOnLock_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageFirstPointYOnLock",
      idx: self.mModelImageFirstPointYOnLock_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageFirstPointYOnLock_property.mObserverExplorer,
      valueExplorer: &self.mModelImageFirstPointYOnLock_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePointsDxOnLock",
      idx: self.mModelImagePointsDxOnLock_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePointsDxOnLock_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePointsDxOnLock_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePointsDyOnLock",
      idx: self.mModelImagePointsDyOnLock_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePointsDyOnLock_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePointsDyOnLock_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageScale",
      idx: self.mModelImageScale_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageScale_property.mObserverExplorer,
      valueExplorer: &self.mModelImageScale_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageRotationInRadians",
      idx: self.mModelImageRotationInRadians_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageRotationInRadians_property.mObserverExplorer,
      valueExplorer: &self.mModelImageRotationInRadians_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitFirstModelPointX",
      idx: self.mDimensionUnitFirstModelPointX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitFirstModelPointX_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitFirstModelPointX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitFirstModelPointY",
      idx: self.mDimensionUnitFirstModelPointY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitFirstModelPointY_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitFirstModelPointY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitSecondModelPointDx",
      idx: self.mDimensionUnitSecondModelPointDx_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitSecondModelPointDx_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitSecondModelPointDx_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitSecondModelPointDy",
      idx: self.mDimensionUnitSecondModelPointDy_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitSecondModelPointDy_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitSecondModelPointDy_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelPointsCircleRadius",
      idx: self.mModelPointsCircleRadius_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelPointsCircleRadius_property.mObserverExplorer,
      valueExplorer: &self.mModelPointsCircleRadius_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPointsAreLocked",
      idx: self.mPointsAreLocked_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPointsAreLocked_property.mObserverExplorer,
      valueExplorer: &self.mPointsAreLocked_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "knobSizeMultpliedByTen",
      idx: self.knobSizeMultpliedByTen_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.knobSizeMultpliedByTen_property.mObserverExplorer,
      valueExplorer: &self.knobSizeMultpliedByTen_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumbering",
      idx: self.padNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumbering_property.mObserverExplorer,
      valueExplorer: &self.padNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "counterClockNumberingStartAngle",
      idx: self.counterClockNumberingStartAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.counterClockNumberingStartAngle_property.mObserverExplorer,
      valueExplorer: &self.counterClockNumberingStartAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPlacardUnit",
      idx: self.xPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.xPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yPlacardUnit",
      idx: self.yPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.yPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageData",
      idx: self.mModelImageData_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageData_property.mObserverExplorer,
      valueExplorer: &self.mModelImageData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "freePadNumbering",
      idx: self.freePadNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.freePadNumbering_property.mObserverExplorer,
      valueExplorer: &self.freePadNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "counterClockNumbering",
      idx: self.counterClockNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.counterClockNumbering_property.mObserverExplorer,
      valueExplorer: &self.counterClockNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepMultipliedByDisplayFactor",
      idx: self.gridStepMultipliedByDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStepMultipliedByDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.gridStepMultipliedByDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "secondPointX",
      idx: self.secondPointX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.secondPointX_property.mObserverExplorer,
      valueExplorer: &self.secondPointX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "secondPointY",
      idx: self.secondPointY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.secondPointY_property.mObserverExplorer,
      valueExplorer: &self.secondPointY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "lockImageView",
      idx: self.lockImageView_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.lockImageView_property.mObserverExplorer,
      valueExplorer: &self.lockImageView_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx: self.padNumberDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer: &self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backgroundImagePageBackgroundDisplay",
      idx: self.backgroundImagePageBackgroundDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backgroundImagePageBackgroundDisplay_property.mObserverExplorer,
      valueExplorer: &self.backgroundImagePageBackgroundDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelImageSizeString",
      idx: self.modelImageSizeString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelImageSizeString_property.mObserverExplorer,
      valueExplorer: &self.modelImageSizeString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "hasModelImage",
      idx: self.hasModelImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.hasModelImage_property.mObserverExplorer,
      valueExplorer: &self.hasModelImage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "masterPadObjectIndexArray",
      idx: self.masterPadObjectIndexArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.masterPadObjectIndexArray_property.mObserverExplorer,
      valueExplorer: &self.masterPadObjectIndexArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mModelImageObjects",
      idx:mModelImageObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mModelImageObjects_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "packageObjects",
      idx:packageObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packageObjects_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mModelImageDoublePoint",
      idx:self.mModelImageDoublePoint_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mModelImageDoublePoint_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: program
    self.program_property.mObserverExplorer = nil
    self.program_property.mValueExplorer = nil
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.mObserverExplorer = nil
    self.horizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.mObserverExplorer = nil
    self.verticalFlip_property.mValueExplorer = nil
  //--- Atomic property: gridStyle
    self.gridStyle_property.mObserverExplorer = nil
    self.gridStyle_property.mValueExplorer = nil
  //--- Atomic property: gridStep
    self.gridStep_property.mObserverExplorer = nil
    self.gridStep_property.mValueExplorer = nil
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.mObserverExplorer = nil
    self.gridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.mObserverExplorer = nil
    self.gridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: mModelImageOpacity
    self.mModelImageOpacity_property.mObserverExplorer = nil
    self.mModelImageOpacity_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.mObserverExplorer = nil
    self.mModelImagePageHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.mObserverExplorer = nil
    self.mModelImagePageVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.mObserverExplorer = nil
    self.mModelImagePageGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.mObserverExplorer = nil
    self.mModelImagePageGridStep_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.mObserverExplorer = nil
    self.mModelImagePageGridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.mObserverExplorer = nil
    self.mModelImagePageGridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.mObserverExplorer = nil
    self.mModelImagePageZoom_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.mObserverExplorer = nil
    self.mModelImagePageXPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.mObserverExplorer = nil
    self.mModelImagePageYPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImageSecondPointXUnit
    self.mModelImageSecondPointXUnit_property.mObserverExplorer = nil
    self.mModelImageSecondPointXUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImageSecondPointYUnit
    self.mModelImageSecondPointYUnit_property.mObserverExplorer = nil
    self.mModelImageSecondPointYUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImageFirstPointXOnLock
    self.mModelImageFirstPointXOnLock_property.mObserverExplorer = nil
    self.mModelImageFirstPointXOnLock_property.mValueExplorer = nil
  //--- Atomic property: mModelImageFirstPointYOnLock
    self.mModelImageFirstPointYOnLock_property.mObserverExplorer = nil
    self.mModelImageFirstPointYOnLock_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePointsDxOnLock
    self.mModelImagePointsDxOnLock_property.mObserverExplorer = nil
    self.mModelImagePointsDxOnLock_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePointsDyOnLock
    self.mModelImagePointsDyOnLock_property.mObserverExplorer = nil
    self.mModelImagePointsDyOnLock_property.mValueExplorer = nil
  //--- Atomic property: mModelImageScale
    self.mModelImageScale_property.mObserverExplorer = nil
    self.mModelImageScale_property.mValueExplorer = nil
  //--- Atomic property: mModelImageRotationInRadians
    self.mModelImageRotationInRadians_property.mObserverExplorer = nil
    self.mModelImageRotationInRadians_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitFirstModelPointX
    self.mDimensionUnitFirstModelPointX_property.mObserverExplorer = nil
    self.mDimensionUnitFirstModelPointX_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitFirstModelPointY
    self.mDimensionUnitFirstModelPointY_property.mObserverExplorer = nil
    self.mDimensionUnitFirstModelPointY_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitSecondModelPointDx
    self.mDimensionUnitSecondModelPointDx_property.mObserverExplorer = nil
    self.mDimensionUnitSecondModelPointDx_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitSecondModelPointDy
    self.mDimensionUnitSecondModelPointDy_property.mObserverExplorer = nil
    self.mDimensionUnitSecondModelPointDy_property.mValueExplorer = nil
  //--- Atomic property: mModelPointsCircleRadius
    self.mModelPointsCircleRadius_property.mObserverExplorer = nil
    self.mModelPointsCircleRadius_property.mValueExplorer = nil
  //--- Atomic property: mPointsAreLocked
    self.mPointsAreLocked_property.mObserverExplorer = nil
    self.mPointsAreLocked_property.mValueExplorer = nil
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.mObserverExplorer = nil
    self.knobSizeMultpliedByTen_property.mValueExplorer = nil
  //--- Atomic property: padNumbering
    self.padNumbering_property.mObserverExplorer = nil
    self.padNumbering_property.mValueExplorer = nil
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.mObserverExplorer = nil
    self.counterClockNumberingStartAngle_property.mValueExplorer = nil
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.mObserverExplorer = nil
    self.xPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.mObserverExplorer = nil
    self.yPlacardUnit_property.mValueExplorer = nil
  //--- To many property: mModelImageObjects
    self.mModelImageObjects_property.mValueExplorer = nil
  //--- To many property: packageObjects
    self.packageObjects_property.mValueExplorer = nil
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.mObserverExplorer = nil
    self.mModelImageData_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mObserverExplorer = nil
    self.mModelImageFirstPointX_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mObserverExplorer = nil
    self.mModelImageFirstPointY_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointDx
    self.mModelImageSecondPointDx_property.mObserverExplorer = nil
    self.mModelImageSecondPointDx_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointDy
    self.mModelImageSecondPointDy_property.mObserverExplorer = nil
    self.mModelImageSecondPointDy_property.mValueExplorer = nil
  //--- To one property: mModelImageDoublePoint
    self.mModelImageDoublePoint_property.mObserverExplorer = nil
    self.mModelImageDoublePoint_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mModelImageObjects.removeAll ()
    self.packageObjects.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mModelImageDoublePoint = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey: "selectedInspector")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey: "comments")
  //--- Atomic property: program
    self.program_property.storeIn (dictionary: ioDictionary, forKey: "program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey: "gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.storeIn (dictionary: ioDictionary, forKey: "gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.storeIn (dictionary: ioDictionary, forKey: "gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey: "gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
  //--- Atomic property: mModelImageOpacity
    self.mModelImageOpacity_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageOpacity")
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageHorizontalFlip")
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageVerticalFlip")
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageGridStyle")
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageGridStep")
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageGridStepUnit")
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageGridDisplayFactor")
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageZoom")
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageXPlacardUnit")
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePageYPlacardUnit")
  //--- Atomic property: mModelImageSecondPointXUnit
    self.mModelImageSecondPointXUnit_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageSecondPointXUnit")
  //--- Atomic property: mModelImageSecondPointYUnit
    self.mModelImageSecondPointYUnit_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageSecondPointYUnit")
  //--- Atomic property: mModelImageFirstPointXOnLock
    self.mModelImageFirstPointXOnLock_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageFirstPointXOnLock")
  //--- Atomic property: mModelImageFirstPointYOnLock
    self.mModelImageFirstPointYOnLock_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageFirstPointYOnLock")
  //--- Atomic property: mModelImagePointsDxOnLock
    self.mModelImagePointsDxOnLock_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePointsDxOnLock")
  //--- Atomic property: mModelImagePointsDyOnLock
    self.mModelImagePointsDyOnLock_property.storeIn (dictionary: ioDictionary, forKey: "mModelImagePointsDyOnLock")
  //--- Atomic property: mModelImageScale
    self.mModelImageScale_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageScale")
  //--- Atomic property: mModelImageRotationInRadians
    self.mModelImageRotationInRadians_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageRotationInRadians")
  //--- Atomic property: mDimensionUnitFirstModelPointX
    self.mDimensionUnitFirstModelPointX_property.storeIn (dictionary: ioDictionary, forKey: "mDimensionUnitFirstModelPointX")
  //--- Atomic property: mDimensionUnitFirstModelPointY
    self.mDimensionUnitFirstModelPointY_property.storeIn (dictionary: ioDictionary, forKey: "mDimensionUnitFirstModelPointY")
  //--- Atomic property: mDimensionUnitSecondModelPointDx
    self.mDimensionUnitSecondModelPointDx_property.storeIn (dictionary: ioDictionary, forKey: "mDimensionUnitSecondModelPointDx")
  //--- Atomic property: mDimensionUnitSecondModelPointDy
    self.mDimensionUnitSecondModelPointDy_property.storeIn (dictionary: ioDictionary, forKey: "mDimensionUnitSecondModelPointDy")
  //--- Atomic property: mModelPointsCircleRadius
    self.mModelPointsCircleRadius_property.storeIn (dictionary: ioDictionary, forKey: "mModelPointsCircleRadius")
  //--- Atomic property: mPointsAreLocked
    self.mPointsAreLocked_property.storeIn (dictionary: ioDictionary, forKey: "mPointsAreLocked")
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.storeIn (dictionary: ioDictionary, forKey: "knobSizeMultpliedByTen")
  //--- Atomic property: padNumbering
    self.padNumbering_property.storeIn (dictionary: ioDictionary, forKey: "padNumbering")
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.storeIn (dictionary: ioDictionary, forKey: "counterClockNumberingStartAngle")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "yPlacardUnit")
  //--- To many property: mModelImageObjects
    self.store (
      managedObjectArray: self.mModelImageObjects_property.propval.values,
      relationshipName: "mModelImageObjects",
      intoDictionary: ioDictionary
    )
  //--- To many property: packageObjects
    self.store (
      managedObjectArray: self.packageObjects_property.propval.values,
      relationshipName: "packageObjects",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.storeIn (dictionary: ioDictionary, forKey: "mModelImageData")
  //--- To one property: mModelImageDoublePoint
    self.store (managedObject:self.mModelImageDoublePoint_property.propval,
      relationshipName: "mModelImageDoublePoint",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mModelImageObjects
/*    self.mModelImageObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mModelImageObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageModelImageDoublePoint]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mModelImageObjects",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [PackageModelImageDoublePoint]
      self.mModelImageObjects_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: packageObjects
/*    self.packageObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packageObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageObject]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "packageObjects",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [PackageObject]
      self.packageObjects_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mModelImageDoublePoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mModelImageDoublePoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageModelImageDoublePoint {
        self.mModelImageDoublePoint_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey: "selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey: "selectedInspector")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey: "comments")
  //--- Atomic property: program
    self.program_property.readFrom (dictionary: inDictionary, forKey: "program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey: "verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey: "gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.readFrom (dictionary: inDictionary, forKey: "gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.readFrom (dictionary: inDictionary, forKey: "gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey: "gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey: "zoom")
  //--- Atomic property: mModelImageOpacity
    self.mModelImageOpacity_property.readFrom (dictionary: inDictionary, forKey: "mModelImageOpacity")
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageHorizontalFlip")
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageVerticalFlip")
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageGridStyle")
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageGridStep")
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageGridStepUnit")
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageGridDisplayFactor")
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageZoom")
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageXPlacardUnit")
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePageYPlacardUnit")
  //--- Atomic property: mModelImageSecondPointXUnit
    self.mModelImageSecondPointXUnit_property.readFrom (dictionary: inDictionary, forKey: "mModelImageSecondPointXUnit")
  //--- Atomic property: mModelImageSecondPointYUnit
    self.mModelImageSecondPointYUnit_property.readFrom (dictionary: inDictionary, forKey: "mModelImageSecondPointYUnit")
  //--- Atomic property: mModelImageFirstPointXOnLock
    self.mModelImageFirstPointXOnLock_property.readFrom (dictionary: inDictionary, forKey: "mModelImageFirstPointXOnLock")
  //--- Atomic property: mModelImageFirstPointYOnLock
    self.mModelImageFirstPointYOnLock_property.readFrom (dictionary: inDictionary, forKey: "mModelImageFirstPointYOnLock")
  //--- Atomic property: mModelImagePointsDxOnLock
    self.mModelImagePointsDxOnLock_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePointsDxOnLock")
  //--- Atomic property: mModelImagePointsDyOnLock
    self.mModelImagePointsDyOnLock_property.readFrom (dictionary: inDictionary, forKey: "mModelImagePointsDyOnLock")
  //--- Atomic property: mModelImageScale
    self.mModelImageScale_property.readFrom (dictionary: inDictionary, forKey: "mModelImageScale")
  //--- Atomic property: mModelImageRotationInRadians
    self.mModelImageRotationInRadians_property.readFrom (dictionary: inDictionary, forKey: "mModelImageRotationInRadians")
  //--- Atomic property: mDimensionUnitFirstModelPointX
    self.mDimensionUnitFirstModelPointX_property.readFrom (dictionary: inDictionary, forKey: "mDimensionUnitFirstModelPointX")
  //--- Atomic property: mDimensionUnitFirstModelPointY
    self.mDimensionUnitFirstModelPointY_property.readFrom (dictionary: inDictionary, forKey: "mDimensionUnitFirstModelPointY")
  //--- Atomic property: mDimensionUnitSecondModelPointDx
    self.mDimensionUnitSecondModelPointDx_property.readFrom (dictionary: inDictionary, forKey: "mDimensionUnitSecondModelPointDx")
  //--- Atomic property: mDimensionUnitSecondModelPointDy
    self.mDimensionUnitSecondModelPointDy_property.readFrom (dictionary: inDictionary, forKey: "mDimensionUnitSecondModelPointDy")
  //--- Atomic property: mModelPointsCircleRadius
    self.mModelPointsCircleRadius_property.readFrom (dictionary: inDictionary, forKey: "mModelPointsCircleRadius")
  //--- Atomic property: mPointsAreLocked
    self.mPointsAreLocked_property.readFrom (dictionary: inDictionary, forKey: "mPointsAreLocked")
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.readFrom (dictionary: inDictionary, forKey: "knobSizeMultpliedByTen")
  //--- Atomic property: padNumbering
    self.padNumbering_property.readFrom (dictionary: inDictionary, forKey: "padNumbering")
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.readFrom (dictionary: inDictionary, forKey: "counterClockNumberingStartAngle")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "yPlacardUnit")
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.readFrom (dictionary: inDictionary, forKey: "mModelImageData")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "selectedPageIndex\n"
    ioString += "selectedInspector\n"
    ioString += "comments\n"
    ioString += "program\n"
    ioString += "horizontalFlip\n"
    ioString += "verticalFlip\n"
    ioString += "gridStyle\n"
    ioString += "gridStep\n"
    ioString += "gridStepUnit\n"
    ioString += "gridDisplayFactor\n"
    ioString += "zoom\n"
    ioString += "mModelImageOpacity\n"
    ioString += "mModelImagePageHorizontalFlip\n"
    ioString += "mModelImagePageVerticalFlip\n"
    ioString += "mModelImagePageGridStyle\n"
    ioString += "mModelImagePageGridStep\n"
    ioString += "mModelImagePageGridStepUnit\n"
    ioString += "mModelImagePageGridDisplayFactor\n"
    ioString += "mModelImagePageZoom\n"
    ioString += "mModelImagePageXPlacardUnit\n"
    ioString += "mModelImagePageYPlacardUnit\n"
    ioString += "mModelImageSecondPointXUnit\n"
    ioString += "mModelImageSecondPointYUnit\n"
    ioString += "mModelImageFirstPointXOnLock\n"
    ioString += "mModelImageFirstPointYOnLock\n"
    ioString += "mModelImagePointsDxOnLock\n"
    ioString += "mModelImagePointsDyOnLock\n"
    ioString += "mModelImageScale\n"
    ioString += "mModelImageRotationInRadians\n"
    ioString += "mDimensionUnitFirstModelPointX\n"
    ioString += "mDimensionUnitFirstModelPointY\n"
    ioString += "mDimensionUnitSecondModelPointDx\n"
    ioString += "mDimensionUnitSecondModelPointDy\n"
    ioString += "mModelPointsCircleRadius\n"
    ioString += "mPointsAreLocked\n"
    ioString += "knobSizeMultpliedByTen\n"
    ioString += "padNumbering\n"
    ioString += "counterClockNumberingStartAngle\n"
    ioString += "xPlacardUnit\n"
    ioString += "yPlacardUnit\n"
    ioString += "mModelImageData\n"
  //--- To one relationships
    ioString += "mModelImageDoublePoint\n"
  //--- To many relationships
    ioString += "mModelImageObjects\n"
    ioString += "packageObjects\n"
    ioString += "packagePads\n"
    ioString += "packageSlavePads\n"
    ioString += "packageZones\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.selectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.selectedInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.comments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.program.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.horizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.verticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageOpacity.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageXPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageYPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageSecondPointXUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageSecondPointYUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageFirstPointXOnLock.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageFirstPointYOnLock.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePointsDxOnLock.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePointsDyOnLock.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageScale.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageRotationInRadians.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitFirstModelPointX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitFirstModelPointY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitSecondModelPointDx.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitSecondModelPointDy.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelPointsCircleRadius.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPointsAreLocked.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.knobSizeMultpliedByTen.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padNumbering.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.counterClockNumberingStartAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mModelImageDoublePoint {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mModelImageObjects.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.packageObjects.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["selectedPageIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.selectedPageIndex = value
      }
      if let range = inDictionary ["selectedInspector"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.selectedInspector = value
      }
      if let range = inDictionary ["comments"], let value = String.unarchiveFromDataRange (inData, range) {
        self.comments = value
      }
      if let range = inDictionary ["program"], let value = String.unarchiveFromDataRange (inData, range) {
        self.program = value
      }
      if let range = inDictionary ["horizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.horizontalFlip = value
      }
      if let range = inDictionary ["verticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.verticalFlip = value
      }
      if let range = inDictionary ["gridStyle"], let value = GridStyle.unarchiveFromDataRange (inData, range) {
        self.gridStyle = value
      }
      if let range = inDictionary ["gridStep"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.gridStep = value
      }
      if let range = inDictionary ["gridStepUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.gridStepUnit = value
      }
      if let range = inDictionary ["gridDisplayFactor"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.gridDisplayFactor = value
      }
      if let range = inDictionary ["zoom"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.zoom = value
      }
      if let range = inDictionary ["mModelImageOpacity"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mModelImageOpacity = value
      }
      if let range = inDictionary ["mModelImagePageHorizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageHorizontalFlip = value
      }
      if let range = inDictionary ["mModelImagePageVerticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageVerticalFlip = value
      }
      if let range = inDictionary ["mModelImagePageGridStyle"], let value = GridStyle.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageGridStyle = value
      }
      if let range = inDictionary ["mModelImagePageGridStep"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageGridStep = value
      }
      if let range = inDictionary ["mModelImagePageGridStepUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageGridStepUnit = value
      }
      if let range = inDictionary ["mModelImagePageGridDisplayFactor"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageGridDisplayFactor = value
      }
      if let range = inDictionary ["mModelImagePageZoom"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageZoom = value
      }
      if let range = inDictionary ["mModelImagePageXPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageXPlacardUnit = value
      }
      if let range = inDictionary ["mModelImagePageYPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePageYPlacardUnit = value
      }
      if let range = inDictionary ["mModelImageSecondPointXUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImageSecondPointXUnit = value
      }
      if let range = inDictionary ["mModelImageSecondPointYUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImageSecondPointYUnit = value
      }
      if let range = inDictionary ["mModelImageFirstPointXOnLock"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImageFirstPointXOnLock = value
      }
      if let range = inDictionary ["mModelImageFirstPointYOnLock"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImageFirstPointYOnLock = value
      }
      if let range = inDictionary ["mModelImagePointsDxOnLock"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePointsDxOnLock = value
      }
      if let range = inDictionary ["mModelImagePointsDyOnLock"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelImagePointsDyOnLock = value
      }
      if let range = inDictionary ["mModelImageScale"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mModelImageScale = value
      }
      if let range = inDictionary ["mModelImageRotationInRadians"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mModelImageRotationInRadians = value
      }
      if let range = inDictionary ["mDimensionUnitFirstModelPointX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDimensionUnitFirstModelPointX = value
      }
      if let range = inDictionary ["mDimensionUnitFirstModelPointY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDimensionUnitFirstModelPointY = value
      }
      if let range = inDictionary ["mDimensionUnitSecondModelPointDx"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDimensionUnitSecondModelPointDx = value
      }
      if let range = inDictionary ["mDimensionUnitSecondModelPointDy"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDimensionUnitSecondModelPointDy = value
      }
      if let range = inDictionary ["mModelPointsCircleRadius"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mModelPointsCircleRadius = value
      }
      if let range = inDictionary ["mPointsAreLocked"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mPointsAreLocked = value
      }
      if let range = inDictionary ["knobSizeMultpliedByTen"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.knobSizeMultpliedByTen = value
      }
      if let range = inDictionary ["padNumbering"], let value = PadNumbering.unarchiveFromDataRange (inData, range) {
        self.padNumbering = value
      }
      if let range = inDictionary ["counterClockNumberingStartAngle"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.counterClockNumberingStartAngle = value
      }
      if let range = inDictionary ["xPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xPlacardUnit = value
      }
      if let range = inDictionary ["yPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yPlacardUnit = value
      }
      if let range = inDictionary ["mModelImageData"], let value = Data.unarchiveFromDataRange (inData, range) {
        self.mModelImageData = value
      }
    //--- To one relationships
      if let range = inDictionary ["mModelImageDoublePoint"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! PackageModelImageDoublePoint
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mModelImageDoublePoint = object }
      }
    //--- To many relationships
      if let range = inDictionary ["mModelImageObjects"], range.length > 0 {
        var relationshipArray = EBReferenceArray <PackageModelImageDoublePoint> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! PackageModelImageDoublePoint)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mModelImageObjects = relationshipArray }
      }
      if let range = inDictionary ["packageObjects"], range.length > 0 {
        var relationshipArray = EBReferenceArray <PackageObject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! PackageObject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.packageObjects = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mModelImageObjects
    for managedObject in self.mModelImageObjects.values {
      objects.append (managedObject)
    }
  //--- To many property: packageObjects
    for managedObject in self.packageObjects.values {
      objects.append (managedObject)
    }
  //--- To many property: packagePads
    for managedObject in self.packagePads.values {
      objects.append (managedObject)
    }
  //--- To many property: packageSlavePads
    for managedObject in self.packageSlavePads.values {
      objects.append (managedObject)
    }
  //--- To many property: packageZones
    for managedObject in self.packageZones.values {
      objects.append (managedObject)
    }
  //--- To one property: mModelImageDoublePoint
    if let object = self.mModelImageDoublePoint {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mModelImageObjects
    for managedObject in self.mModelImageObjects.values {
      objects.append (managedObject)
    }
  //--- To many property: packageObjects
    for managedObject in self.packageObjects.values {
      objects.append (managedObject)
    }
  //--- To many property: packagePads
    for managedObject in self.packagePads.values {
      objects.append (managedObject)
    }
  //--- To many property: packageSlavePads
    for managedObject in self.packageSlavePads.values {
      objects.append (managedObject)
    }
  //--- To many property: packageZones
    for managedObject in self.packageZones.values {
      objects.append (managedObject)
    }
  //--- To one property: mModelImageDoublePoint
    if let object = self.mModelImageDoublePoint {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.counterClockNumberingStartAngle_property.signature ())
    crc.accumulateUInt32 (self.packageObjects_property.signature ())
    crc.accumulateUInt32 (self.program_property.signature ())
    crc.accumulateUInt32 (self.xPlacardUnit_property.signature ())
    crc.accumulateUInt32 (self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

