//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y1 : AnyObject {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x2 : AnyObject {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y2 : AnyObject {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x1Unit : AnyObject {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y1Unit : AnyObject {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x2Unit : AnyObject {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y2Unit : AnyObject {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_lengthUnit : AnyObject {
  var lengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x1 : AnyObject {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_strokeBezierPath : AnyObject {
  var strokeBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_lengthInCanariUnit : AnyObject {
  var lengthInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageSegment : PackageObject,
         PackageSegment_y1,
         PackageSegment_x2,
         PackageSegment_y2,
         PackageSegment_x1Unit,
         PackageSegment_y1Unit,
         PackageSegment_x2Unit,
         PackageSegment_y2Unit,
         PackageSegment_lengthUnit,
         PackageSegment_x1,
         PackageSegment_strokeBezierPath,
         PackageSegment_objectDisplay,
         PackageSegment_selectionDisplay,
         PackageSegment_issues,
         PackageSegment_lengthInCanariUnit {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  final let y1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y1_toDefaultValue () {
    self.y1 = 0
  }

  //····················································································································

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  final let x2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x2_toDefaultValue () {
    self.x2 = 685800
  }

  //····················································································································

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  final let y2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y2_toDefaultValue () {
    self.y2 = 685800
  }

  //····················································································································

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  final let x1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x1Unit_toDefaultValue () {
    self.x1Unit = 2286
  }

  //····················································································································

  final var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  final let y1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y1Unit_toDefaultValue () {
    self.y1Unit = 2286
  }

  //····················································································································

  final var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  final let x2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x2Unit_toDefaultValue () {
    self.x2Unit = 2286
  }

  //····················································································································

  final var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  final let y2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y2Unit_toDefaultValue () {
    self.y2Unit = 2286
  }

  //····················································································································

  final var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: lengthUnit
  //····················································································································

  final let lengthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_lengthUnit_toDefaultValue () {
    self.lengthUnit = 2286
  }

  //····················································································································

  final var lengthUnit : Int {
    get { return self.lengthUnit_property.propval }
    set { self.lengthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  final let x1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x1_toDefaultValue () {
    self.x1 = 0
  }

  //····················································································································

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  final var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: lengthInCanariUnit
  //····················································································································

  final let lengthInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  final var lengthInCanariUnit : Int? {
    switch self.lengthInCanariUnit_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.y1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.x2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.y2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.x1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.y1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.x2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.y2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.lengthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.x1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.x1_property.selection, unwSelf.y1_property.selection, unwSelf.x2_property.selection, unwSelf.y2_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_PackageSegment_strokeBezierPath (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.strokeBezierPath_property)
    self.y1_property.addEBObserver (self.strokeBezierPath_property)
    self.x2_property.addEBObserver (self.strokeBezierPath_property)
    self.y2_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.strokeBezierPath_property.selection, preferences_packageColor_property.selection, preferences_packageDrawingWidthMultipliedByTen_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2)) :
          return .single (transient_PackageSegment_objectDisplay (v0, v1, v2))
        case (.multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    preferences_packageColor_property.addEBObserver (self.objectDisplay_property)
    preferences_packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.x1_property.selection, unwSelf.y1_property.selection, unwSelf.x2_property.selection, unwSelf.y2_property.selection, unwSelf.knobSize_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_PackageSegment_selectionDisplay (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.x1_property.selection, unwSelf.y1_property.selection, unwSelf.x2_property.selection, unwSelf.y2_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_PackageSegment_issues (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
  //--- Atomic property: lengthInCanariUnit
    self.lengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.x1_property.selection, unwSelf.y1_property.selection, unwSelf.x2_property.selection, unwSelf.y2_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_PackageSegment_lengthInCanariUnit (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.lengthInCanariUnit_property)
    self.y1_property.addEBObserver (self.lengthInCanariUnit_property)
    self.x2_property.addEBObserver (self.lengthInCanariUnit_property)
    self.y2_property.addEBObserver (self.lengthInCanariUnit_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.lengthUnit_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.x1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.y1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.x2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.y2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    // preferences_packageColor_property.removeEBObserver (self.objectDisplay_property)
    // preferences_packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    // self.x1_property.removeEBObserver (self.selectionDisplay_property)
    // self.y1_property.removeEBObserver (self.selectionDisplay_property)
    // self.x2_property.removeEBObserver (self.selectionDisplay_property)
    // self.y2_property.removeEBObserver (self.selectionDisplay_property)
    // self.knobSize_property.removeEBObserver (self.selectionDisplay_property)
    // self.x1_property.removeEBObserver (self.issues_property)
    // self.y1_property.removeEBObserver (self.issues_property)
    // self.x2_property.removeEBObserver (self.issues_property)
    // self.y2_property.removeEBObserver (self.issues_property)
    // self.x1_property.removeEBObserver (self.lengthInCanariUnit_property)
    // self.y1_property.removeEBObserver (self.lengthInCanariUnit_property)
    // self.x2_property.removeEBObserver (self.lengthInCanariUnit_property)
    // self.y2_property.removeEBObserver (self.lengthInCanariUnit_property)
  //--- Unregister properties for handling signature
    self.lengthUnit_property.setSignatureObserver (observer: nil)
    self.x1_property.setSignatureObserver (observer: nil)
    self.x1Unit_property.setSignatureObserver (observer: nil)
    self.x2_property.setSignatureObserver (observer: nil)
    self.x2Unit_property.setSignatureObserver (observer: nil)
    self.y1_property.setSignatureObserver (observer: nil)
    self.y1Unit_property.setSignatureObserver (observer: nil)
    self.y2_property.setSignatureObserver (observer: nil)
    self.y2Unit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "y1",
        idx: self.y1_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.y1_property.mObserverExplorer,
        valueExplorer: &self.y1_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "x2",
        idx: self.x2_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.x2_property.mObserverExplorer,
        valueExplorer: &self.x2_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "y2",
        idx: self.y2_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.y2_property.mObserverExplorer,
        valueExplorer: &self.y2_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "x1Unit",
        idx: self.x1Unit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.x1Unit_property.mObserverExplorer,
        valueExplorer: &self.x1Unit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "y1Unit",
        idx: self.y1Unit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.y1Unit_property.mObserverExplorer,
        valueExplorer: &self.y1Unit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "x2Unit",
        idx: self.x2Unit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.x2Unit_property.mObserverExplorer,
        valueExplorer: &self.x2Unit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "y2Unit",
        idx: self.y2Unit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.y2Unit_property.mObserverExplorer,
        valueExplorer: &self.y2Unit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "lengthUnit",
        idx: self.lengthUnit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.lengthUnit_property.mObserverExplorer,
        valueExplorer: &self.lengthUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "x1",
        idx: self.x1_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.x1_property.mObserverExplorer,
        valueExplorer: &self.x1_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "strokeBezierPath",
        idx: self.strokeBezierPath_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
        valueExplorer: &self.strokeBezierPath_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "objectDisplay",
        idx: self.objectDisplay_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        idx: self.selectionDisplay_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        idx: self.issues_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "lengthInCanariUnit",
        idx: self.lengthInCanariUnit_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.lengthInCanariUnit_property.mObserverExplorer,
        valueExplorer: &self.lengthInCanariUnit_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.mObserverExplorer = nil
    self.lengthUnit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: y1
      self.y1_property.storeIn (dictionary: ioDictionary, forKey: "y1")
    //--- Atomic property: x2
      self.x2_property.storeIn (dictionary: ioDictionary, forKey: "x2")
    //--- Atomic property: y2
      self.y2_property.storeIn (dictionary: ioDictionary, forKey: "y2")
    //--- Atomic property: x1Unit
      self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey: "x1Unit")
    //--- Atomic property: y1Unit
      self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey: "y1Unit")
    //--- Atomic property: x2Unit
      self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey: "x2Unit")
    //--- Atomic property: y2Unit
      self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey: "y2Unit")
    //--- Atomic property: lengthUnit
      self.lengthUnit_property.storeIn (dictionary: ioDictionary, forKey: "lengthUnit")
    //--- Atomic property: x1
      self.x1_property.storeIn (dictionary: ioDictionary, forKey: "x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey: "y2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey: "x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey: "y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey: "x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey: "y2Unit")
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.readFrom (dictionary: inDictionary, forKey: "lengthUnit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey: "x1")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "y1\n"
    ioString += "x2\n"
    ioString += "y2\n"
    ioString += "x1Unit\n"
    ioString += "y1Unit\n"
    ioString += "x2Unit\n"
    ioString += "y2Unit\n"
    ioString += "lengthUnit\n"
    ioString += "x1\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.y1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.lengthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["y1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y1 = value
      }
      if let range = inDictionary ["x2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x2 = value
      }
      if let range = inDictionary ["y2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y2 = value
      }
      if let range = inDictionary ["x1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x1Unit = value
      }
      if let range = inDictionary ["y1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y1Unit = value
      }
      if let range = inDictionary ["x2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x2Unit = value
      }
      if let range = inDictionary ["y2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y2Unit = value
      }
      if let range = inDictionary ["lengthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.lengthUnit = value
      }
      if let range = inDictionary ["x1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x1 = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.lengthUnit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

