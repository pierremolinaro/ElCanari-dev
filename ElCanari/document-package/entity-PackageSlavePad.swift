//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_xCenter : AnyObject {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_yCenter : AnyObject {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_width : AnyObject {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_height : AnyObject {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_holeWidth : AnyObject {
  var holeWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_holeHeight : AnyObject {
  var holeHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padShape : AnyObject {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padStyle : AnyObject {
  var padStyle : SlavePadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_xCenterUnit : AnyObject {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_yCenterUnit : AnyObject {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_widthUnit : AnyObject {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_heightUnit : AnyObject {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_holeWidthUnit : AnyObject {
  var holeWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_holeHeightUnit : AnyObject {
  var holeHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_annularRingUnit : AnyObject {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padIsTraversing : AnyObject {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_annularRing : AnyObject {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padNameWithZoneName : AnyObject {
  var padNameWithZoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_masterPadNameWithZoneName : AnyObject {
  var masterPadNameWithZoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padNameForDisplay : AnyObject {
  var padNameForDisplay : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PackageSlavePad_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageSlavePad : PackageObject,
         PackageSlavePad_xCenter,
         PackageSlavePad_yCenter,
         PackageSlavePad_width,
         PackageSlavePad_height,
         PackageSlavePad_holeWidth,
         PackageSlavePad_holeHeight,
         PackageSlavePad_padShape,
         PackageSlavePad_padStyle,
         PackageSlavePad_xCenterUnit,
         PackageSlavePad_yCenterUnit,
         PackageSlavePad_widthUnit,
         PackageSlavePad_heightUnit,
         PackageSlavePad_holeWidthUnit,
         PackageSlavePad_holeHeightUnit,
         PackageSlavePad_annularRingUnit,
         PackageSlavePad_objectDisplay,
         PackageSlavePad_selectionDisplay,
         PackageSlavePad_issues,
         PackageSlavePad_padIsTraversing,
         PackageSlavePad_annularRing,
         PackageSlavePad_padNameWithZoneName,
         PackageSlavePad_masterPadNameWithZoneName,
         PackageSlavePad_padNameForDisplay,
         PackageSlavePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  final let xCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenter_toDefaultValue () {
    self.xCenter = 0
  }

  //····················································································································

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  final let yCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenter_toDefaultValue () {
    self.yCenter = 0
  }

  //····················································································································

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  final let width_property : EBStoredProperty_Int

  //····················································································································

  final func reset_width_toDefaultValue () {
    self.width = 114300
  }

  //····················································································································

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  final let height_property : EBStoredProperty_Int

  //····················································································································

  final func reset_height_toDefaultValue () {
    self.height = 228600
  }

  //····················································································································

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidth
  //····················································································································

  final let holeWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidth_toDefaultValue () {
    self.holeWidth = 57150
  }

  //····················································································································

  final var holeWidth : Int {
    get { return self.holeWidth_property.propval }
    set { self.holeWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeight
  //····················································································································

  final let holeHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeight_toDefaultValue () {
    self.holeHeight = 57150
  }

  //····················································································································

  final var holeHeight : Int {
    get { return self.holeHeight_property.propval }
    set { self.holeHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  final let padShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_padShape_toDefaultValue () {
    self.padShape = PadShape.octo
  }

  //····················································································································

  final var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  final let padStyle_property : EBStoredProperty_SlavePadStyle

  //····················································································································

  final func reset_padStyle_toDefaultValue () {
    self.padStyle = SlavePadStyle.traversing
  }

  //····················································································································

  final var padStyle : SlavePadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenterUnit_toDefaultValue () {
    self.xCenterUnit = 2286
  }

  //····················································································································

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenterUnit_toDefaultValue () {
    self.yCenterUnit = 2286
  }

  //····················································································································

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  final let widthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_widthUnit_toDefaultValue () {
    self.widthUnit = 2286
  }

  //····················································································································

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  final let heightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_heightUnit_toDefaultValue () {
    self.heightUnit = 2286
  }

  //····················································································································

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidthUnit
  //····················································································································

  final let holeWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidthUnit_toDefaultValue () {
    self.holeWidthUnit = 2286
  }

  //····················································································································

  final var holeWidthUnit : Int {
    get { return self.holeWidthUnit_property.propval }
    set { self.holeWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeightUnit
  //····················································································································

  final let holeHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeightUnit_toDefaultValue () {
    self.holeHeightUnit = 2286
  }

  //····················································································································

  final var holeHeightUnit : Int {
    get { return self.holeHeightUnit_property.propval }
    set { self.holeHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  final let annularRingUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_annularRingUnit_toDefaultValue () {
    self.annularRingUnit = 2286
  }

  //····················································································································

  final var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: master
  //····················································································································

  final let master_property = StoredObject_PackagePad (usedForSignature: false, strongRef: false, key: "master")

  //····················································································································

  final var master : PackagePad? {
    get {
      return self.master_property.propval
    }
    set {
      if self.master_property.propval !== newValue {
        if self.master_property.propval != nil {
          self.master_property.setProp (nil)
        }
        if newValue != nil {
          self.master_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let master_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  final let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  final var padIsTraversing : Bool? {
    switch self.padIsTraversing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  final let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  final var annularRing : Int? {
    switch self.annularRing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameWithZoneName
  //····················································································································

  final let padNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameWithZoneName : String? {
    switch self.padNameWithZoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: masterPadNameWithZoneName
  //····················································································································

  final let masterPadNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var masterPadNameWithZoneName : String? {
    switch self.masterPadNameWithZoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameForDisplay
  //····················································································································

  final let padNameForDisplay_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameForDisplay : String? {
    switch self.padNameForDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xCenter")
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "yCenter")
    self.width_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "width")
    self.height_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "height")
    self.holeWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeWidth")
    self.holeHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeHeight")
    self.padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "padShape")
    self.padStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: inUndoManager, key: "padStyle")
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xCenterUnit")
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yCenterUnit")
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "widthUnit")
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "heightUnit")
    self.holeWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeWidthUnit")
    self.holeHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeHeightUnit")
    self.annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "annularRingUnit")
    super.init (inUndoManager)
    self.master_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.master_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.master_property.addEBObserver (self.master_none)
//    gInitSemaphore.wait ()
  //--- To one property: master (has opposite to many relationship: slaves)
    self.master_property.undoManager = inUndoManager
    self.master_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.slaves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.slaves_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        let s6 = unwSelf.padShape_property.selection
        let s7 = unwSelf.padStyle_property.selection
        let s8 = preferences_frontSidePadColor_property.selection
        let s9 = preferences_displayPackageFrontSidePads_property.selection
        let s10 = preferences_backSidePadColor_property.selection
        let s11 = preferences_displayPackageBackSidePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackageSlavePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeWidth_property.addEBObserver (self.objectDisplay_property)
    self.holeHeight_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    preferences_backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.padShape_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackageSlavePad_selectionDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageSlavePad_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeWidth_property.addEBObserver (self.issues_property)
    self.holeHeight_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padStyle_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padIsTraversing (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.width_property.selection
        let s1 = unwSelf.height_property.selection
        let s2 = unwSelf.holeWidth_property.selection
        let s3 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageSlavePad_annularRing (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeWidth_property.addEBObserver (self.annularRing_property)
    self.holeHeight_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameWithZoneName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.addEBObserver (self.padNameWithZoneName_property)
  //--- Atomic property: masterPadNameWithZoneName
    self.masterPadNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameWithZoneName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_masterPadNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.addEBObserver (self.masterPadNameWithZoneName_property)
  //--- Atomic property: padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameForDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameForDisplay (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameForDisplay_property.addEBObserver (self.padNameForDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = preferences_padNumberFont_property.selection
        let s3 = preferences_padNumberColor_property.selection
        let s4 = unwSelf.padNameForDisplay_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackageSlavePad_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padNameForDisplay_property.addEBObserver (self.padNumberDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeHeight_property.setSignatureObserver (observer: self)
    self.holeHeightUnit_property.setSignatureObserver (observer: self)
    self.holeWidth_property.setSignatureObserver (observer: self)
    self.holeWidthUnit_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: xCenter
      self.xCenter_property.storeIn (dictionary: &ioDictionary, forKey: "xCenter")
    //--- Atomic property: yCenter
      self.yCenter_property.storeIn (dictionary: &ioDictionary, forKey: "yCenter")
    //--- Atomic property: width
      self.width_property.storeIn (dictionary: &ioDictionary, forKey: "width")
    //--- Atomic property: height
      self.height_property.storeIn (dictionary: &ioDictionary, forKey: "height")
    //--- Atomic property: holeWidth
      self.holeWidth_property.storeIn (dictionary: &ioDictionary, forKey: "holeWidth")
    //--- Atomic property: holeHeight
      self.holeHeight_property.storeIn (dictionary: &ioDictionary, forKey: "holeHeight")
    //--- Atomic property: padShape
      self.padShape_property.storeIn (dictionary: &ioDictionary, forKey: "padShape")
    //--- Atomic property: padStyle
      self.padStyle_property.storeIn (dictionary: &ioDictionary, forKey: "padStyle")
    //--- Atomic property: xCenterUnit
      self.xCenterUnit_property.storeIn (dictionary: &ioDictionary, forKey: "xCenterUnit")
    //--- Atomic property: yCenterUnit
      self.yCenterUnit_property.storeIn (dictionary: &ioDictionary, forKey: "yCenterUnit")
    //--- Atomic property: widthUnit
      self.widthUnit_property.storeIn (dictionary: &ioDictionary, forKey: "widthUnit")
    //--- Atomic property: heightUnit
      self.heightUnit_property.storeIn (dictionary: &ioDictionary, forKey: "heightUnit")
    //--- Atomic property: holeWidthUnit
      self.holeWidthUnit_property.storeIn (dictionary: &ioDictionary, forKey: "holeWidthUnit")
    //--- Atomic property: holeHeightUnit
      self.holeHeightUnit_property.storeIn (dictionary: &ioDictionary, forKey: "holeHeightUnit")
    //--- Atomic property: annularRingUnit
      self.annularRingUnit_property.storeIn (dictionary: &ioDictionary, forKey: "annularRingUnit")
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

/*  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: master
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "master",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? PackagePad {
        self.master_property.setProp (entity)
      }
    }
  } */

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

/*  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey: "xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey: "yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey: "width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey: "height")
  //--- Atomic property: holeWidth
    self.holeWidth_property.readFrom (dictionary: inDictionary, forKey: "holeWidth")
  //--- Atomic property: holeHeight
    self.holeHeight_property.readFrom (dictionary: inDictionary, forKey: "holeHeight")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey: "padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey: "padStyle")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey: "widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey: "heightUnit")
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "holeWidthUnit")
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.readFrom (dictionary: inDictionary, forKey: "holeHeightUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey: "annularRingUnit")
  } */

  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

/*  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "xCenter\n"
    ioString += "yCenter\n"
    ioString += "width\n"
    ioString += "height\n"
    ioString += "holeWidth\n"
    ioString += "holeHeight\n"
    ioString += "padShape\n"
    ioString += "padStyle\n"
    ioString += "xCenterUnit\n"
    ioString += "yCenterUnit\n"
    ioString += "widthUnit\n"
    ioString += "heightUnit\n"
    ioString += "holeWidthUnit\n"
    ioString += "holeHeightUnit\n"
    ioString += "annularRingUnit\n"
  //--- To one relationships
    ioString += "master\n"
  //--- To many relationships
  } */

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

/*  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.xCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.width.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.height.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.widthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.heightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeHeightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.annularRingUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.master {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  } */

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

/*  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["xCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xCenter = value
    }
    if let range = inDictionary ["yCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yCenter = value
    }
    if let range = inDictionary ["width"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.width = value
    }
    if let range = inDictionary ["height"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.height = value
    }
    if let range = inDictionary ["holeWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.holeWidth = value
    }
    if let range = inDictionary ["holeHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.holeHeight = value
    }
    if let range = inDictionary ["padShape"], let value = PadShape.unarchiveFromDataRange (inData, range) {
      self.padShape = value
    }
    if let range = inDictionary ["padStyle"], let value = SlavePadStyle.unarchiveFromDataRange (inData, range) {
      self.padStyle = value
    }
    if let range = inDictionary ["xCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xCenterUnit = value
    }
    if let range = inDictionary ["yCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yCenterUnit = value
    }
    if let range = inDictionary ["widthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.widthUnit = value
    }
    if let range = inDictionary ["heightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.heightUnit = value
    }
    if let range = inDictionary ["holeWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.holeWidthUnit = value
    }
    if let range = inDictionary ["holeHeightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.holeHeightUnit = value
    }
    if let range = inDictionary ["annularRingUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.annularRingUnit = value
    }
  } */

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

/*  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["master"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! PackagePad
      self.master = object
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

/*  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: master
    if let object = self.master {
      ioObjectArray.append (object)
    }
  } */

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.annularRingUnit_property.signature ())
    crc.accumulate (u32: self.height_property.signature ())
    crc.accumulate (u32: self.heightUnit_property.signature ())
    crc.accumulate (u32: self.holeHeight_property.signature ())
    crc.accumulate (u32: self.holeHeightUnit_property.signature ())
    crc.accumulate (u32: self.holeWidth_property.signature ())
    crc.accumulate (u32: self.holeWidthUnit_property.signature ())
    crc.accumulate (u32: self.padShape_property.signature ())
    crc.accumulate (u32: self.padStyle_property.signature ())
    crc.accumulate (u32: self.width_property.signature ())
    crc.accumulate (u32: self.widthUnit_property.signature ())
    crc.accumulate (u32: self.xCenter_property.signature ())
    crc.accumulate (u32: self.xCenterUnit_property.signature ())
    crc.accumulate (u32: self.yCenter_property.signature ())
    crc.accumulate (u32: self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageSlavePad (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageSlavePad (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageSlavePad (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageSlavePad (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageSlavePad (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageSlavePad (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageSlavePad (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageSlavePad (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_PackageSlavePad ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageSlavePad ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_PackageSlavePad ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageSlavePad ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageSlavePad (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageSlavePad (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageSlavePad (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageSlavePad (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageSlavePad (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageSlavePad ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageSlavePad ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

