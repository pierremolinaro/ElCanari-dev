//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_xCenter : AnyObject {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_yCenter : AnyObject {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_width : AnyObject {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_height : AnyObject {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeWidth : AnyObject {
  var holeWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeHeight : AnyObject {
  var holeHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padShape : AnyObject {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padStyle : AnyObject {
  var padStyle : SlavePadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_xCenterUnit : AnyObject {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_yCenterUnit : AnyObject {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_widthUnit : AnyObject {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_heightUnit : AnyObject {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeWidthUnit : AnyObject {
  var holeWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeHeightUnit : AnyObject {
  var holeHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_annularRingUnit : AnyObject {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padIsTraversing : AnyObject {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_annularRing : AnyObject {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padNameWithZoneName : AnyObject {
  var padNameWithZoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_masterPadNameWithZoneName : AnyObject {
  var masterPadNameWithZoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padNameForDisplay : AnyObject {
  var padNameForDisplay : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageSlavePad : PackageObject,
         PackageSlavePad_xCenter,
         PackageSlavePad_yCenter,
         PackageSlavePad_width,
         PackageSlavePad_height,
         PackageSlavePad_holeWidth,
         PackageSlavePad_holeHeight,
         PackageSlavePad_padShape,
         PackageSlavePad_padStyle,
         PackageSlavePad_xCenterUnit,
         PackageSlavePad_yCenterUnit,
         PackageSlavePad_widthUnit,
         PackageSlavePad_heightUnit,
         PackageSlavePad_holeWidthUnit,
         PackageSlavePad_holeHeightUnit,
         PackageSlavePad_annularRingUnit,
         PackageSlavePad_objectDisplay,
         PackageSlavePad_selectionDisplay,
         PackageSlavePad_issues,
         PackageSlavePad_padIsTraversing,
         PackageSlavePad_annularRing,
         PackageSlavePad_padNameWithZoneName,
         PackageSlavePad_masterPadNameWithZoneName,
         PackageSlavePad_padNameForDisplay,
         PackageSlavePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  final let xCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenter_toDefaultValue () {
    self.xCenter = 0
  }

  //····················································································································

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  final let yCenter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenter_toDefaultValue () {
    self.yCenter = 0
  }

  //····················································································································

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  final let width_property : EBStoredProperty_Int

  //····················································································································

  final func reset_width_toDefaultValue () {
    self.width = 114300
  }

  //····················································································································

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  final let height_property : EBStoredProperty_Int

  //····················································································································

  final func reset_height_toDefaultValue () {
    self.height = 228600
  }

  //····················································································································

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidth
  //····················································································································

  final let holeWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidth_toDefaultValue () {
    self.holeWidth = 57150
  }

  //····················································································································

  final var holeWidth : Int {
    get { return self.holeWidth_property.propval }
    set { self.holeWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeight
  //····················································································································

  final let holeHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeight_toDefaultValue () {
    self.holeHeight = 57150
  }

  //····················································································································

  final var holeHeight : Int {
    get { return self.holeHeight_property.propval }
    set { self.holeHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  final let padShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_padShape_toDefaultValue () {
    self.padShape = PadShape.octo
  }

  //····················································································································

  final var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  final let padStyle_property : EBStoredProperty_SlavePadStyle

  //····················································································································

  final func reset_padStyle_toDefaultValue () {
    self.padStyle = SlavePadStyle.traversing
  }

  //····················································································································

  final var padStyle : SlavePadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xCenterUnit_toDefaultValue () {
    self.xCenterUnit = 2286
  }

  //····················································································································

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yCenterUnit_toDefaultValue () {
    self.yCenterUnit = 2286
  }

  //····················································································································

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  final let widthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_widthUnit_toDefaultValue () {
    self.widthUnit = 2286
  }

  //····················································································································

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  final let heightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_heightUnit_toDefaultValue () {
    self.heightUnit = 2286
  }

  //····················································································································

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeWidthUnit
  //····················································································································

  final let holeWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeWidthUnit_toDefaultValue () {
    self.holeWidthUnit = 2286
  }

  //····················································································································

  final var holeWidthUnit : Int {
    get { return self.holeWidthUnit_property.propval }
    set { self.holeWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: holeHeightUnit
  //····················································································································

  final let holeHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_holeHeightUnit_toDefaultValue () {
    self.holeHeightUnit = 2286
  }

  //····················································································································

  final var holeHeightUnit : Int {
    get { return self.holeHeightUnit_property.propval }
    set { self.holeHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  final let annularRingUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_annularRingUnit_toDefaultValue () {
    self.annularRingUnit = 2286
  }

  //····················································································································

  final var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: master
  //····················································································································

  final let master_property = StoredObject_PackagePad (usedForSignature: false)

  //····················································································································

  final var master : PackagePad? {
    get {
      return self.master_property.propval
    }
    set {
      if self.master_property.propval != nil {
        self.master_property.setProp (nil)
      }
      if newValue != nil {
        self.master_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let master_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  final let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  final var padIsTraversing : Bool? {
    switch self.padIsTraversing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  final let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  final var annularRing : Int? {
    switch self.annularRing_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameWithZoneName
  //····················································································································

  final let padNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameWithZoneName : String? {
    switch self.padNameWithZoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: masterPadNameWithZoneName
  //····················································································································

  final let masterPadNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································

  final var masterPadNameWithZoneName : String? {
    switch self.masterPadNameWithZoneName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameForDisplay
  //····················································································································

  final let padNameForDisplay_property = EBTransientProperty_String ()

  //····················································································································

  final var padNameForDisplay : String? {
    switch self.padNameForDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.width_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: ebUndoManager)
    self.height_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.holeWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.holeHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: ebUndoManager)
    self.padStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: ebUndoManager)
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.holeWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.holeHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.master_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.master_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.master_property.addEBObserver (self.master_none)
  //--- To one property: master (has opposite to many relationship: slaves)
    self.master_property.ebUndoManager = self.ebUndoManager
    self.master_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.slaves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.slaves_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xCenter_property.selection, unwSelf.yCenter_property.selection, unwSelf.width_property.selection, unwSelf.height_property.selection, unwSelf.holeWidth_property.selection, unwSelf.holeHeight_property.selection, unwSelf.padShape_property.selection, unwSelf.padStyle_property.selection, preferences_frontSidePadColor_property.selection, preferences_displayPackageFrontSidePads_property.selection, preferences_backSidePadColor_property.selection, preferences_displayPackageBackSidePads_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
          return .single (transient_PackageSlavePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeWidth_property.addEBObserver (self.objectDisplay_property)
    self.holeHeight_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    preferences_backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xCenter_property.selection, unwSelf.yCenter_property.selection, unwSelf.width_property.selection, unwSelf.height_property.selection, unwSelf.padShape_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_PackageSlavePad_selectionDisplay (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xCenter_property.selection, unwSelf.yCenter_property.selection, unwSelf.width_property.selection, unwSelf.height_property.selection, unwSelf.holeWidth_property.selection, unwSelf.holeHeight_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
          return .single (transient_PackageSlavePad_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeWidth_property.addEBObserver (self.issues_property)
    self.holeHeight_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.padStyle_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padIsTraversing (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.width_property.selection, unwSelf.height_property.selection, unwSelf.holeWidth_property.selection, unwSelf.holeHeight_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_PackageSlavePad_annularRing (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeWidth_property.addEBObserver (self.annularRing_property)
    self.holeHeight_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.master_property.padNameWithZoneName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.addEBObserver (self.padNameWithZoneName_property)
  //--- Atomic property: masterPadNameWithZoneName
    self.masterPadNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.master_property.padNameWithZoneName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_masterPadNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.addEBObserver (self.masterPadNameWithZoneName_property)
  //--- Atomic property: padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.master_property.padNameForDisplay_property.selection) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameForDisplay (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameForDisplay_property.addEBObserver (self.padNameForDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xCenter_property.selection, unwSelf.yCenter_property.selection, preferences_padNumberFont_property.selection, preferences_padNumberColor_property.selection, unwSelf.padNameForDisplay_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_PackageSlavePad_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    preferences_padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padNameForDisplay_property.addEBObserver (self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeHeight_property.setSignatureObserver (observer: self)
    self.holeHeightUnit_property.setSignatureObserver (observer: self)
    self.holeWidth_property.setSignatureObserver (observer: self)
    self.holeWidthUnit_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    // self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    // self.width_property.removeEBObserver (self.objectDisplay_property)
    // self.height_property.removeEBObserver (self.objectDisplay_property)
    // self.holeWidth_property.removeEBObserver (self.objectDisplay_property)
    // self.holeHeight_property.removeEBObserver (self.objectDisplay_property)
    // self.padShape_property.removeEBObserver (self.objectDisplay_property)
    // self.padStyle_property.removeEBObserver (self.objectDisplay_property)
    // preferences_frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayPackageFrontSidePads_property.removeEBObserver (self.objectDisplay_property)
    // preferences_backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayPackageBackSidePads_property.removeEBObserver (self.objectDisplay_property)
    // self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    // self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    // self.width_property.removeEBObserver (self.selectionDisplay_property)
    // self.height_property.removeEBObserver (self.selectionDisplay_property)
    // self.padShape_property.removeEBObserver (self.selectionDisplay_property)
    // self.xCenter_property.removeEBObserver (self.issues_property)
    // self.yCenter_property.removeEBObserver (self.issues_property)
    // self.width_property.removeEBObserver (self.issues_property)
    // self.height_property.removeEBObserver (self.issues_property)
    // self.holeWidth_property.removeEBObserver (self.issues_property)
    // self.holeHeight_property.removeEBObserver (self.issues_property)
    // self.padStyle_property.removeEBObserver (self.padIsTraversing_property)
    // self.width_property.removeEBObserver (self.annularRing_property)
    // self.height_property.removeEBObserver (self.annularRing_property)
    // self.holeWidth_property.removeEBObserver (self.annularRing_property)
    // self.holeHeight_property.removeEBObserver (self.annularRing_property)
    // self.master_property.padNameWithZoneName_property.removeEBObserver (self.padNameWithZoneName_property)
    // self.master_property.padNameWithZoneName_property.removeEBObserver (self.masterPadNameWithZoneName_property)
    // self.master_property.padNameForDisplay_property.removeEBObserver (self.padNameForDisplay_property)
    // self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    // self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    // preferences_padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    // preferences_padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    // self.padNameForDisplay_property.removeEBObserver (self.padNumberDisplay_property)
  //--- Unregister properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: nil)
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.holeHeight_property.setSignatureObserver (observer: nil)
    self.holeHeightUnit_property.setSignatureObserver (observer: nil)
    self.holeWidth_property.setSignatureObserver (observer: nil)
    self.holeWidthUnit_property.setSignatureObserver (observer: nil)
    self.padShape_property.setSignatureObserver (observer: nil)
    self.padStyle_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "xCenter",
        object: self.xCenter_property,
        y: &y,
        view: view,
        observerExplorer: &self.xCenter_property.mObserverExplorer,
        valueExplorer: &self.xCenter_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yCenter",
        object: self.yCenter_property,
        y: &y,
        view: view,
        observerExplorer: &self.yCenter_property.mObserverExplorer,
        valueExplorer: &self.yCenter_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "width",
        object: self.width_property,
        y: &y,
        view: view,
        observerExplorer: &self.width_property.mObserverExplorer,
        valueExplorer: &self.width_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "height",
        object: self.height_property,
        y: &y,
        view: view,
        observerExplorer: &self.height_property.mObserverExplorer,
        valueExplorer: &self.height_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "holeWidth",
        object: self.holeWidth_property,
        y: &y,
        view: view,
        observerExplorer: &self.holeWidth_property.mObserverExplorer,
        valueExplorer: &self.holeWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "holeHeight",
        object: self.holeHeight_property,
        y: &y,
        view: view,
        observerExplorer: &self.holeHeight_property.mObserverExplorer,
        valueExplorer: &self.holeHeight_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padShape",
        object: self.padShape_property,
        y: &y,
        view: view,
        observerExplorer: &self.padShape_property.mObserverExplorer,
        valueExplorer: &self.padShape_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padStyle",
        object: self.padStyle_property,
        y: &y,
        view: view,
        observerExplorer: &self.padStyle_property.mObserverExplorer,
        valueExplorer: &self.padStyle_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xCenterUnit",
        object: self.xCenterUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
        valueExplorer: &self.xCenterUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yCenterUnit",
        object: self.yCenterUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
        valueExplorer: &self.yCenterUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "widthUnit",
        object: self.widthUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.widthUnit_property.mObserverExplorer,
        valueExplorer: &self.widthUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "heightUnit",
        object: self.heightUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.heightUnit_property.mObserverExplorer,
        valueExplorer: &self.heightUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "holeWidthUnit",
        object: self.holeWidthUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.holeWidthUnit_property.mObserverExplorer,
        valueExplorer: &self.holeWidthUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "holeHeightUnit",
        object: self.holeHeightUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.holeHeightUnit_property.mObserverExplorer,
        valueExplorer: &self.holeHeightUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "annularRingUnit",
        object: self.annularRingUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.annularRingUnit_property.mObserverExplorer,
        valueExplorer: &self.annularRingUnit_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        object: self.issues_property,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padIsTraversing",
        object: self.padIsTraversing_property,
        y: &y,
        view: view,
        observerExplorer: &self.padIsTraversing_property.mObserverExplorer,
        valueExplorer: &self.padIsTraversing_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "annularRing",
        object: self.annularRing_property,
        y: &y,
        view: view,
        observerExplorer: &self.annularRing_property.mObserverExplorer,
        valueExplorer: &self.annularRing_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padNameWithZoneName",
        object: self.padNameWithZoneName_property,
        y: &y,
        view: view,
        observerExplorer: &self.padNameWithZoneName_property.mObserverExplorer,
        valueExplorer: &self.padNameWithZoneName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "masterPadNameWithZoneName",
        object: self.masterPadNameWithZoneName_property,
        y: &y,
        view: view,
        observerExplorer: &self.masterPadNameWithZoneName_property.mObserverExplorer,
        valueExplorer: &self.masterPadNameWithZoneName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padNameForDisplay",
        object: self.padNameForDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.padNameForDisplay_property.mObserverExplorer,
        valueExplorer: &self.padNameForDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "padNumberDisplay",
        object: self.padNumberDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.padNumberDisplay_property.mObserverExplorer,
        valueExplorer: &self.padNumberDisplay_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForToOneRelationshipNamed (
        "master",
        object: self.master_property,
        y: &y,
        view: view,
        valueExplorer:&self.master_property.mValueExplorer
      )
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeWidth
    self.holeWidth_property.mObserverExplorer = nil
    self.holeWidth_property.mValueExplorer = nil
  //--- Atomic property: holeHeight
    self.holeHeight_property.mObserverExplorer = nil
    self.holeHeight_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.mObserverExplorer = nil
    self.holeWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.mObserverExplorer = nil
    self.holeHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.mObserverExplorer = nil
    self.annularRingUnit_property.mValueExplorer = nil
    //--- To one property: master
      self.master_property.mObserverExplorer = nil
      self.master_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.master = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: xCenter
      self.xCenter_property.storeIn (dictionary: ioDictionary, forKey: "xCenter")
    //--- Atomic property: yCenter
      self.yCenter_property.storeIn (dictionary: ioDictionary, forKey: "yCenter")
    //--- Atomic property: width
      self.width_property.storeIn (dictionary: ioDictionary, forKey: "width")
    //--- Atomic property: height
      self.height_property.storeIn (dictionary: ioDictionary, forKey: "height")
    //--- Atomic property: holeWidth
      self.holeWidth_property.storeIn (dictionary: ioDictionary, forKey: "holeWidth")
    //--- Atomic property: holeHeight
      self.holeHeight_property.storeIn (dictionary: ioDictionary, forKey: "holeHeight")
    //--- Atomic property: padShape
      self.padShape_property.storeIn (dictionary: ioDictionary, forKey: "padShape")
    //--- Atomic property: padStyle
      self.padStyle_property.storeIn (dictionary: ioDictionary, forKey: "padStyle")
    //--- Atomic property: xCenterUnit
      self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "xCenterUnit")
    //--- Atomic property: yCenterUnit
      self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "yCenterUnit")
    //--- Atomic property: widthUnit
      self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey: "widthUnit")
    //--- Atomic property: heightUnit
      self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey: "heightUnit")
    //--- Atomic property: holeWidthUnit
      self.holeWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "holeWidthUnit")
    //--- Atomic property: holeHeightUnit
      self.holeHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "holeHeightUnit")
    //--- Atomic property: annularRingUnit
      self.annularRingUnit_property.storeIn (dictionary: ioDictionary, forKey: "annularRingUnit")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: master
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "master",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackagePad {
        self.master_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey: "xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey: "yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey: "width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey: "height")
  //--- Atomic property: holeWidth
    self.holeWidth_property.readFrom (dictionary: inDictionary, forKey: "holeWidth")
  //--- Atomic property: holeHeight
    self.holeHeight_property.readFrom (dictionary: inDictionary, forKey: "holeHeight")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey: "padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey: "padStyle")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey: "widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey: "heightUnit")
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "holeWidthUnit")
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.readFrom (dictionary: inDictionary, forKey: "holeHeightUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey: "annularRingUnit")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "xCenter\n"
    ioString += "yCenter\n"
    ioString += "width\n"
    ioString += "height\n"
    ioString += "holeWidth\n"
    ioString += "holeHeight\n"
    ioString += "padShape\n"
    ioString += "padStyle\n"
    ioString += "xCenterUnit\n"
    ioString += "yCenterUnit\n"
    ioString += "widthUnit\n"
    ioString += "heightUnit\n"
    ioString += "holeWidthUnit\n"
    ioString += "holeHeightUnit\n"
    ioString += "annularRingUnit\n"
  //--- To one relationships
    ioString += "master\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.xCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.width.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.height.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.widthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.heightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.holeHeightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.annularRingUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.master {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["xCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xCenter = value
      }
      if let range = inDictionary ["yCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yCenter = value
      }
      if let range = inDictionary ["width"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.width = value
      }
      if let range = inDictionary ["height"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.height = value
      }
      if let range = inDictionary ["holeWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.holeWidth = value
      }
      if let range = inDictionary ["holeHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.holeHeight = value
      }
      if let range = inDictionary ["padShape"], let value = PadShape.unarchiveFromDataRange (inData, range) {
        self.padShape = value
      }
      if let range = inDictionary ["padStyle"], let value = SlavePadStyle.unarchiveFromDataRange (inData, range) {
        self.padStyle = value
      }
      if let range = inDictionary ["xCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xCenterUnit = value
      }
      if let range = inDictionary ["yCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yCenterUnit = value
      }
      if let range = inDictionary ["widthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.widthUnit = value
      }
      if let range = inDictionary ["heightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.heightUnit = value
      }
      if let range = inDictionary ["holeWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.holeWidthUnit = value
      }
      if let range = inDictionary ["holeHeightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.holeHeightUnit = value
      }
      if let range = inDictionary ["annularRingUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.annularRingUnit = value
      }
    //--- To one relationships
      if let range = inDictionary ["master"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! PackagePad
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.master = object }
      }
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: master
    if let object = self.master {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: master
    if let object = self.master {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.annularRingUnit_property.signature ())
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.holeHeight_property.signature ())
    crc.accumulateUInt32 (self.holeHeightUnit_property.signature ())
    crc.accumulateUInt32 (self.holeWidth_property.signature ())
    crc.accumulateUInt32 (self.holeWidthUnit_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_PackageSlavePad (knob: inKnobIndex)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_PackageSlavePad (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : ObjcObjectSet) {
    translate_PackageSlavePad (xBy: inDx, yBy: inDy, userSet: ioSet)
  }

  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_PackageSlavePad (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_PackageSlavePad (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_PackageSlavePad (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_PackageSlavePad (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_PackageSlavePad ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_PackageSlavePad ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_PackageSlavePad ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_PackageSlavePad ()
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_PackageSlavePad (ioDictionary)
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> ObjcCanariPointSet {
    return alignmentPoints_PackageSlavePad ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_PackageSlavePad ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

