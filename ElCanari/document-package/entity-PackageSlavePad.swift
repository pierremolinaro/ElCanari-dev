//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_xCenter : AnyObject {
//   var xCenter : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_yCenter : AnyObject {
//   var yCenter : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_width : AnyObject {
//   var width : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_height : AnyObject {
//   var height : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_holeWidth : AnyObject {
//   var holeWidth : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_holeHeight : AnyObject {
//   var holeHeight : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_padShape : AnyObject {
//   var padShape : PadShape { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_padStyle : AnyObject {
//   var padStyle : SlavePadStyle { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_xCenterUnit : AnyObject {
//   var xCenterUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_yCenterUnit : AnyObject {
//   var yCenterUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_widthUnit : AnyObject {
//   var widthUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_heightUnit : AnyObject {
//   var heightUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_holeWidthUnit : AnyObject {
//   var holeWidthUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_holeHeightUnit : AnyObject {
//   var holeHeightUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_annularRingUnit : AnyObject {
//   var annularRingUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_issues : AnyObject {
//   var issues : CanariIssueArray? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_padIsTraversing : AnyObject {
//   var padIsTraversing : Bool? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_annularRing : AnyObject {
//   var annularRing : Int? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_padNameWithZoneName : AnyObject {
//   var padNameWithZoneName : String? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_masterPadNameWithZoneName : AnyObject {
//   var masterPadNameWithZoneName : String? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_padNameForDisplay : AnyObject {
//   var padNameForDisplay : String? { get }
// }

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageSlavePad_padNumberDisplay : AnyObject {
  var padNumberDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_objectDisplay : AnyObject {
//   var objectDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageSlavePad_selectionDisplay : AnyObject {
//   var selectionDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------
//    Entity: PackageSlavePad
//--------------------------------------------------------------------------------------------------

final class PackageSlavePad : PackageObject
    // PackageSlavePad_xCenter // Commented out, not used
    // PackageSlavePad_yCenter // Commented out, not used
    // PackageSlavePad_width // Commented out, not used
    // PackageSlavePad_height // Commented out, not used
    // PackageSlavePad_holeWidth // Commented out, not used
    // PackageSlavePad_holeHeight // Commented out, not used
    // PackageSlavePad_padShape // Commented out, not used
    // PackageSlavePad_padStyle // Commented out, not used
    // PackageSlavePad_xCenterUnit // Commented out, not used
    // PackageSlavePad_yCenterUnit // Commented out, not used
    // PackageSlavePad_widthUnit // Commented out, not used
    // PackageSlavePad_heightUnit // Commented out, not used
    // PackageSlavePad_holeWidthUnit // Commented out, not used
    // PackageSlavePad_holeHeightUnit // Commented out, not used
    // PackageSlavePad_annularRingUnit // Commented out, not used
    // PackageSlavePad_issues // Commented out, not used
    // PackageSlavePad_padIsTraversing // Commented out, not used
    // PackageSlavePad_annularRing // Commented out, not used
    // PackageSlavePad_padNameWithZoneName // Commented out, not used
    // PackageSlavePad_masterPadNameWithZoneName // Commented out, not used
    // PackageSlavePad_padNameForDisplay // Commented out, not used
    , PackageSlavePad_padNumberDisplay
    // PackageSlavePad_objectDisplay // Commented out, not used
    // PackageSlavePad_selectionDisplay // Commented out, not used
    {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xCenter
  //------------------------------------------------------------------------------------------------

  final let xCenter_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yCenter
  //------------------------------------------------------------------------------------------------

  final let yCenter_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: width
  //------------------------------------------------------------------------------------------------

  final let width_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: height
  //------------------------------------------------------------------------------------------------

  final let height_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: holeWidth
  //------------------------------------------------------------------------------------------------

  final let holeWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var holeWidth : Int {
    get { return self.holeWidth_property.propval }
    set { self.holeWidth_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: holeHeight
  //------------------------------------------------------------------------------------------------

  final let holeHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var holeHeight : Int {
    get { return self.holeHeight_property.propval }
    set { self.holeHeight_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: padShape
  //------------------------------------------------------------------------------------------------

  final let padShape_property : EBStoredProperty_PadShape

  //------------------------------------------------------------------------------------------------

  final var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: padStyle
  //------------------------------------------------------------------------------------------------

  final let padStyle_property : EBStoredProperty_SlavePadStyle

  //------------------------------------------------------------------------------------------------

  final var padStyle : SlavePadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xCenterUnit
  //------------------------------------------------------------------------------------------------

  final let xCenterUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yCenterUnit
  //------------------------------------------------------------------------------------------------

  final let yCenterUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: widthUnit
  //------------------------------------------------------------------------------------------------

  final let widthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: heightUnit
  //------------------------------------------------------------------------------------------------

  final let heightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: holeWidthUnit
  //------------------------------------------------------------------------------------------------

  final let holeWidthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var holeWidthUnit : Int {
    get { return self.holeWidthUnit_property.propval }
    set { self.holeWidthUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: holeHeightUnit
  //------------------------------------------------------------------------------------------------

  final let holeHeightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var holeHeightUnit : Int {
    get { return self.holeHeightUnit_property.propval }
    set { self.holeHeightUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: annularRingUnit
  //------------------------------------------------------------------------------------------------

  final let annularRingUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   To one property: master
  //------------------------------------------------------------------------------------------------

  final let master_property = StoredObject_PackagePad (usedForSignature: false, strongRef: false, key: "master")

  //------------------------------------------------------------------------------------------------

  final var master : PackagePad? {
    get {
      return self.master_property.propval
    }
    set {
      // self.master_property.setProp (newValue)
      if self.master_property.propval !== newValue {
        if self.master_property.propval != nil {
          self.master_property.setProp (nil)
        }
        if newValue != nil {
          self.master_property.setProp (newValue)
        }
      }
    }
  }

  //------------------------------------------------------------------------------------------------

  final let master_none = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Transient property: padIsTraversing
  //------------------------------------------------------------------------------------------------

  final let padIsTraversing_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var padIsTraversing : Bool? {
    return self.padIsTraversing_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: annularRing
  //------------------------------------------------------------------------------------------------

  final let annularRing_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var annularRing : Int? {
    return self.annularRing_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: padNameWithZoneName
  //------------------------------------------------------------------------------------------------

  final let padNameWithZoneName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var padNameWithZoneName : String? {
    return self.padNameWithZoneName_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: masterPadNameWithZoneName
  //------------------------------------------------------------------------------------------------

  final let masterPadNameWithZoneName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var masterPadNameWithZoneName : String? {
    return self.masterPadNameWithZoneName_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: padNameForDisplay
  //------------------------------------------------------------------------------------------------

  final let padNameForDisplay_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var padNameForDisplay : String? {
    return self.padNameForDisplay_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: padNumberDisplay
  //------------------------------------------------------------------------------------------------

  final let padNumberDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var padNumberDisplay : EBShape? {
    return self.padNumberDisplay_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.xCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xCenter")
    self.yCenter_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "yCenter")
    self.width_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "width")
    self.height_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "height")
    self.holeWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeWidth")
    self.holeHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "holeHeight")
    self.padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "padShape")
    self.padStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: inUndoManager, key: "padStyle")
    self.xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xCenterUnit")
    self.yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yCenterUnit")
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "widthUnit")
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "heightUnit")
    self.holeWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeWidthUnit")
    self.holeHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "holeHeightUnit")
    self.annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "annularRingUnit")
    super.init (inUndoManager)
    self.master_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.master_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.master_property.startsBeingObserved (by: self.master_none)
    self.accumulateProperty (self.xCenter_property)
    self.accumulateProperty (self.yCenter_property)
    self.accumulateProperty (self.width_property)
    self.accumulateProperty (self.height_property)
    self.accumulateProperty (self.holeWidth_property)
    self.accumulateProperty (self.holeHeight_property)
    self.accumulateProperty (self.padShape_property)
    self.accumulateProperty (self.padStyle_property)
    self.accumulateProperty (self.xCenterUnit_property)
    self.accumulateProperty (self.yCenterUnit_property)
    self.accumulateProperty (self.widthUnit_property)
    self.accumulateProperty (self.heightUnit_property)
    self.accumulateProperty (self.holeWidthUnit_property)
    self.accumulateProperty (self.holeHeightUnit_property)
    self.accumulateProperty (self.annularRingUnit_property)
  //--- To one property: master (has opposite to many relationship: slaves)
    self.master_property.undoManager = inUndoManager
    self.master_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.slaves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.slaves_property.remove (me) } }
    )
    self.accumulateProperty (self.master_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageSlavePad_issues (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.startsBeingObserved (by: self.issues_property)
    self.yCenter_property.startsBeingObserved (by: self.issues_property)
    self.width_property.startsBeingObserved (by: self.issues_property)
    self.height_property.startsBeingObserved (by: self.issues_property)
    self.holeWidth_property.startsBeingObserved (by: self.issues_property)
    self.holeHeight_property.startsBeingObserved (by: self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.padStyle_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padIsTraversing (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.startsBeingObserved (by: self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.width_property.selection
        let s1 = unwSelf.height_property.selection
        let s2 = unwSelf.holeWidth_property.selection
        let s3 = unwSelf.holeHeight_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageSlavePad_annularRing (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.width_property.startsBeingObserved (by: self.annularRing_property)
    self.height_property.startsBeingObserved (by: self.annularRing_property)
    self.holeWidth_property.startsBeingObserved (by: self.annularRing_property)
    self.holeHeight_property.startsBeingObserved (by: self.annularRing_property)
  //--- Atomic property: padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameWithZoneName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.startsBeingObserved (by: self.padNameWithZoneName_property)
  //--- Atomic property: masterPadNameWithZoneName
    self.masterPadNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameWithZoneName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_masterPadNameWithZoneName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameWithZoneName_property.startsBeingObserved (by: self.masterPadNameWithZoneName_property)
  //--- Atomic property: padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.master_property.padNameForDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageSlavePad_padNameForDisplay (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.master_property.padNameForDisplay_property.startsBeingObserved (by: self.padNameForDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = preferences_padNumberFont_property.selection
        let s3 = preferences_padNumberColor_property.selection
        let s4 = unwSelf.padNameForDisplay_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PackageSlavePad_padNumberDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.yCenter_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberFont_property.startsBeingObserved (by: self.padNumberDisplay_property)
    preferences_padNumberColor_property.startsBeingObserved (by: self.padNumberDisplay_property)
    self.padNameForDisplay_property.startsBeingObserved (by: self.padNumberDisplay_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xCenter_property.selection
        let s1 = unwSelf.yCenter_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.holeWidth_property.selection
        let s5 = unwSelf.holeHeight_property.selection
        let s6 = unwSelf.padShape_property.selection
        let s7 = unwSelf.padStyle_property.selection
        let s8 = preferences_frontSidePadColor_property.selection
        let s9 = preferences_displayPackageFrontSidePads_property.selection
        let s10 = preferences_backSidePadColor_property.selection
        let s11 = preferences_displayPackageBackSidePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackageSlavePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.startsBeingObserved (by: self.objectDisplay_property)
    self.yCenter_property.startsBeingObserved (by: self.objectDisplay_property)
    self.width_property.startsBeingObserved (by: self.objectDisplay_property)
    self.height_property.startsBeingObserved (by: self.objectDisplay_property)
    self.holeWidth_property.startsBeingObserved (by: self.objectDisplay_property)
    self.holeHeight_property.startsBeingObserved (by: self.objectDisplay_property)
    self.padShape_property.startsBeingObserved (by: self.objectDisplay_property)
    self.padStyle_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_frontSidePadColor_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_displayPackageFrontSidePads_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_backSidePadColor_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_displayPackageBackSidePads_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.xCenter_property.selection
        let s2 = unwSelf.yCenter_property.selection
        let s3 = unwSelf.width_property.selection
        let s4 = unwSelf.height_property.selection
        let s5 = unwSelf.padShape_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_PackageSlavePad_selectionDisplay (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.xCenter_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.yCenter_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.width_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.height_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.padShape_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeHeight_property.setSignatureObserver (observer: self)
    self.holeHeightUnit_property.setSignatureObserver (observer: self)
    self.holeWidth_property.setSignatureObserver (observer: self)
    self.holeWidthUnit_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.annularRingUnit_property.signature ())
    crc.accumulate (u32: self.height_property.signature ())
    crc.accumulate (u32: self.heightUnit_property.signature ())
    crc.accumulate (u32: self.holeHeight_property.signature ())
    crc.accumulate (u32: self.holeHeightUnit_property.signature ())
    crc.accumulate (u32: self.holeWidth_property.signature ())
    crc.accumulate (u32: self.holeWidthUnit_property.signature ())
    crc.accumulate (u32: self.padShape_property.signature ())
    crc.accumulate (u32: self.padStyle_property.signature ())
    crc.accumulate (u32: self.width_property.signature ())
    crc.accumulate (u32: self.widthUnit_property.signature ())
    crc.accumulate (u32: self.xCenter_property.signature ())
    crc.accumulate (u32: self.xCenterUnit_property.signature ())
    crc.accumulate (u32: self.yCenter_property.signature ())
    crc.accumulate (u32: self.yCenterUnit_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageSlavePad (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageSlavePad (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageSlavePad (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageSlavePad (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageSlavePad (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageSlavePad (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageSlavePad (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageSlavePad (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageSlavePad (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageSlavePad (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageSlavePad (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageSlavePad (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageSlavePad (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageSlavePad ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

