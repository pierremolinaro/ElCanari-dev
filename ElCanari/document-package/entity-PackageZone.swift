//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_x : AnyObject {
//   var x : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_y : AnyObject {
//   var y : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_width : AnyObject {
//   var width : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_height : AnyObject {
//   var height : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_xUnit : AnyObject {
//   var xUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_yUnit : AnyObject {
//   var yUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_widthUnit : AnyObject {
//   var widthUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_heightUnit : AnyObject {
//   var heightUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageZone_zoneName : AnyObject {
  var zoneName : String { get }
}

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_displayZoneName : AnyObject {
//   var displayZoneName : Bool { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_displayZoneNameWithPadNumbers : AnyObject {
//   var displayZoneNameWithPadNumbers : Bool { get }
// }

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageZone_xName : AnyObject {
  var xName : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageZone_yName : AnyObject {
  var yName : Int { get }
}

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_xNameUnit : AnyObject {
//   var xNameUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_yNameUnit : AnyObject {
//   var yNameUnit : Int { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_zoneNumbering : AnyObject {
//   var zoneNumbering : PadNumbering { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_objectDisplay : AnyObject {
//   var objectDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_issues : AnyObject {
//   var issues : CanariIssueArray? { get }
// }

//--------------------------------------------------------------------------------------------------

@MainActor protocol PackageZone_rect : AnyObject {
  var rect : CanariRect? { get }
}

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_selectionDisplay : AnyObject {
//   var selectionDisplay : EBShape? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_forbiddenPadArray : AnyObject {
//   var forbiddenPadArray : StringArray? { get }
// }

//--------------------------------------------------------------------------------------------------

// Commented out, not used
// @MainActor protocol PackageZone_emptyForbiddenPadArray : AnyObject {
//   var emptyForbiddenPadArray : Bool? { get }
// }

//--------------------------------------------------------------------------------------------------
//    Entity: PackageZone
//--------------------------------------------------------------------------------------------------

final class PackageZone : PackageObject
    // PackageZone_x // Commented out, not used
    // PackageZone_y // Commented out, not used
    // PackageZone_width // Commented out, not used
    // PackageZone_height // Commented out, not used
    // PackageZone_xUnit // Commented out, not used
    // PackageZone_yUnit // Commented out, not used
    // PackageZone_widthUnit // Commented out, not used
    // PackageZone_heightUnit // Commented out, not used
    , PackageZone_zoneName
    // PackageZone_displayZoneName // Commented out, not used
    // PackageZone_displayZoneNameWithPadNumbers // Commented out, not used
    , PackageZone_xName
    , PackageZone_yName
    // PackageZone_xNameUnit // Commented out, not used
    // PackageZone_yNameUnit // Commented out, not used
    // PackageZone_zoneNumbering // Commented out, not used
    // PackageZone_objectDisplay // Commented out, not used
    // PackageZone_issues // Commented out, not used
    , PackageZone_rect
    // PackageZone_selectionDisplay // Commented out, not used
    // PackageZone_forbiddenPadArray // Commented out, not used
    // PackageZone_emptyForbiddenPadArray // Commented out, not used
    {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: x
  //------------------------------------------------------------------------------------------------

  final let x_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var x : Int {
    get { return self.x_property.propval }
    set { self.x_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: y
  //------------------------------------------------------------------------------------------------

  final let y_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var y : Int {
    get { return self.y_property.propval }
    set { self.y_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: width
  //------------------------------------------------------------------------------------------------

  final let width_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: height
  //------------------------------------------------------------------------------------------------

  final let height_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xUnit
  //------------------------------------------------------------------------------------------------

  final let xUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xUnit : Int {
    get { return self.xUnit_property.propval }
    set { self.xUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yUnit
  //------------------------------------------------------------------------------------------------

  final let yUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yUnit : Int {
    get { return self.yUnit_property.propval }
    set { self.yUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: widthUnit
  //------------------------------------------------------------------------------------------------

  final let widthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: heightUnit
  //------------------------------------------------------------------------------------------------

  final let heightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: zoneName
  //------------------------------------------------------------------------------------------------

  final let zoneName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var zoneName : String {
    get { return self.zoneName_property.propval }
    set { self.zoneName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayZoneName
  //------------------------------------------------------------------------------------------------

  final let displayZoneName_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var displayZoneName : Bool {
    get { return self.displayZoneName_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayZoneNameWithPadNumbers
  //------------------------------------------------------------------------------------------------

  final let displayZoneNameWithPadNumbers_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var displayZoneNameWithPadNumbers : Bool {
    get { return self.displayZoneNameWithPadNumbers_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xName
  //------------------------------------------------------------------------------------------------

  final let xName_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yName
  //------------------------------------------------------------------------------------------------

  final let yName_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xNameUnit
  //------------------------------------------------------------------------------------------------

  final let xNameUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var xNameUnit : Int {
    get { return self.xNameUnit_property.propval }
    set { self.xNameUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yNameUnit
  //------------------------------------------------------------------------------------------------

  final let yNameUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var yNameUnit : Int {
    get { return self.yNameUnit_property.propval }
    set { self.yNameUnit_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: zoneNumbering
  //------------------------------------------------------------------------------------------------

  final let zoneNumbering_property : EBStoredProperty_PadNumbering

  //------------------------------------------------------------------------------------------------

  final var zoneNumbering : PadNumbering {
    get { return self.zoneNumbering_property.propval }
    set { self.zoneNumbering_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: forbiddenPadNumbers
  //------------------------------------------------------------------------------------------------

  final let forbiddenPadNumbers_property = StoredArrayOf_ForbiddenPadNumber (usedForSignature: true, key: "forbiddenPadNumbers")

  //------------------------------------------------------------------------------------------------

  final var forbiddenPadNumbers : EBReferenceArray <ForbiddenPadNumber> {
    get { return self.forbiddenPadNumbers_property.propval }
    set { self.forbiddenPadNumbers_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: rect
  //------------------------------------------------------------------------------------------------

  final let rect_property = EBTransientProperty <CanariRect> ()

  //------------------------------------------------------------------------------------------------

  final var rect : CanariRect? {
    return self.rect_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: forbiddenPadArray
  //------------------------------------------------------------------------------------------------

  final let forbiddenPadArray_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var forbiddenPadArray : StringArray? {
    return self.forbiddenPadArray_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: emptyForbiddenPadArray
  //------------------------------------------------------------------------------------------------

  final let emptyForbiddenPadArray_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var emptyForbiddenPadArray : Bool? {
    return self.emptyForbiddenPadArray_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.x_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "x")
    self.y_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "y")
    self.width_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "width")
    self.height_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "height")
    self.xUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xUnit")
    self.yUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yUnit")
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "widthUnit")
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "heightUnit")
    self.zoneName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "zoneName")
    self.displayZoneName_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayZoneName")
    self.displayZoneNameWithPadNumbers_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayZoneNameWithPadNumbers")
    self.xName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "xName")
    self.yName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "yName")
    self.xNameUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xNameUnit")
    self.yNameUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yNameUnit")
    self.zoneNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering, undoManager: inUndoManager, key: "zoneNumbering")
    super.init (inUndoManager)
    self.accumulateProperty (self.x_property)
    self.accumulateProperty (self.y_property)
    self.accumulateProperty (self.width_property)
    self.accumulateProperty (self.height_property)
    self.accumulateProperty (self.xUnit_property)
    self.accumulateProperty (self.yUnit_property)
    self.accumulateProperty (self.widthUnit_property)
    self.accumulateProperty (self.heightUnit_property)
    self.accumulateProperty (self.zoneName_property)
    self.accumulateProperty (self.displayZoneName_property)
    self.accumulateProperty (self.displayZoneNameWithPadNumbers_property)
    self.accumulateProperty (self.xName_property)
    self.accumulateProperty (self.yName_property)
    self.accumulateProperty (self.xNameUnit_property)
    self.accumulateProperty (self.yNameUnit_property)
    self.accumulateProperty (self.zoneNumbering_property)
  //--- To many property: forbiddenPadNumbers (no option)
    self.forbiddenPadNumbers_property.undoManager = inUndoManager
    self.accumulateProperty (self.forbiddenPadNumbers_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.xName_property.selection
        let s5 = unwSelf.yName_property.selection
        let s6 = unwSelf.zoneName_property.selection
        let s7 = preferences_padZoneFont_property.selection
        let s8 = preferences_padZoneColor_property.selection
        let s9 = unwSelf.displayZoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_PackageZone_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.startsBeingObserved (by: self.objectDisplay_property)
    self.y_property.startsBeingObserved (by: self.objectDisplay_property)
    self.width_property.startsBeingObserved (by: self.objectDisplay_property)
    self.height_property.startsBeingObserved (by: self.objectDisplay_property)
    self.xName_property.startsBeingObserved (by: self.objectDisplay_property)
    self.yName_property.startsBeingObserved (by: self.objectDisplay_property)
    self.zoneName_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_padZoneFont_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_padZoneColor_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayZoneName_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.xName_property.selection
        let s5 = unwSelf.yName_property.selection
        let s6 = unwSelf.zoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6)) :
          return .single (transient_PackageZone_issues (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.startsBeingObserved (by: self.issues_property)
    self.y_property.startsBeingObserved (by: self.issues_property)
    self.width_property.startsBeingObserved (by: self.issues_property)
    self.height_property.startsBeingObserved (by: self.issues_property)
    self.xName_property.startsBeingObserved (by: self.issues_property)
    self.yName_property.startsBeingObserved (by: self.issues_property)
    self.zoneName_property.startsBeingObserved (by: self.issues_property)
  //--- Atomic property: rect
    self.rect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageZone_rect (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.startsBeingObserved (by: self.rect_property)
    self.y_property.startsBeingObserved (by: self.rect_property)
    self.width_property.startsBeingObserved (by: self.rect_property)
    self.height_property.startsBeingObserved (by: self.rect_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.x_property.selection
        let s2 = unwSelf.y_property.selection
        let s3 = unwSelf.width_property.selection
        let s4 = unwSelf.height_property.selection
        let s5 = unwSelf.xName_property.selection
        let s6 = unwSelf.yName_property.selection
        let s7 = unwSelf.zoneName_property.selection
        let s8 = preferences_padZoneFont_property.selection
        let s9 = preferences_packageBackgroundColor_property.selection
        let s10 = preferences_padZoneColor_property.selection
        let s11 = unwSelf.knobSize_property.selection
        let s12 = unwSelf.displayZoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12)) :
          return .single (transient_PackageZone_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.x_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.y_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.width_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.height_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.xName_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.yName_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.zoneName_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_padZoneFont_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_packageBackgroundColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_padZoneColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.knobSize_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.displayZoneName_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: forbiddenPadArray
    self.forbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.forbiddenPadNumbers_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageZone_forbiddenPadArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.forbiddenPadNumbers_property.toMany_padNumber_StartsBeingObserved (by: self.forbiddenPadArray_property)
  //--- Atomic property: emptyForbiddenPadArray
    self.emptyForbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.forbiddenPadNumbers_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageZone_emptyForbiddenPadArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.forbiddenPadNumbers_property.startsBeingObserved (by: self.emptyForbiddenPadArray_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.forbiddenPadNumbers_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.x_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNameUnit_property.setSignatureObserver (observer: self)
    self.xUnit_property.setSignatureObserver (observer: self)
    self.y_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNameUnit_property.setSignatureObserver (observer: self)
    self.yUnit_property.setSignatureObserver (observer: self)
    self.zoneName_property.setSignatureObserver (observer: self)
    self.zoneNumbering_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.forbiddenPadNumbers_property.signature ())
    crc.accumulate (u32: self.height_property.signature ())
    crc.accumulate (u32: self.heightUnit_property.signature ())
    crc.accumulate (u32: self.width_property.signature ())
    crc.accumulate (u32: self.widthUnit_property.signature ())
    crc.accumulate (u32: self.x_property.signature ())
    crc.accumulate (u32: self.xName_property.signature ())
    crc.accumulate (u32: self.xNameUnit_property.signature ())
    crc.accumulate (u32: self.xUnit_property.signature ())
    crc.accumulate (u32: self.y_property.signature ())
    crc.accumulate (u32: self.yName_property.signature ())
    crc.accumulate (u32: self.yNameUnit_property.signature ())
    crc.accumulate (u32: self.yUnit_property.signature ())
    crc.accumulate (u32: self.zoneName_property.signature ())
    crc.accumulate (u32: self.zoneNumbering_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_PackageZone (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_PackageZone (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_PackageZone (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_PackageZone (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_PackageZone (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_PackageZone (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_PackageZone (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_PackageZone (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_PackageZone (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_PackageZone (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_PackageZone (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_PackageZone (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_PackageZone (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_PackageZone ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

