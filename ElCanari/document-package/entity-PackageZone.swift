//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_x : AnyObject {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_y : AnyObject {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_width : AnyObject {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_height : AnyObject {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xUnit : AnyObject {
  var xUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yUnit : AnyObject {
  var yUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_widthUnit : AnyObject {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_heightUnit : AnyObject {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneName : AnyObject {
  var zoneName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_displayZoneName : AnyObject {
  var displayZoneName : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_displayZoneNameWithPadNumbers : AnyObject {
  var displayZoneNameWithPadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xName : AnyObject {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yName : AnyObject {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xNameUnit : AnyObject {
  var xNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yNameUnit : AnyObject {
  var yNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneNumbering : AnyObject {
  var zoneNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_rect : AnyObject {
  var rect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_forbiddenPadArray : AnyObject {
  var forbiddenPadArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_emptyForbiddenPadArray : AnyObject {
  var emptyForbiddenPadArray : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PackageZone : PackageObject,
         PackageZone_x,
         PackageZone_y,
         PackageZone_width,
         PackageZone_height,
         PackageZone_xUnit,
         PackageZone_yUnit,
         PackageZone_widthUnit,
         PackageZone_heightUnit,
         PackageZone_zoneName,
         PackageZone_displayZoneName,
         PackageZone_displayZoneNameWithPadNumbers,
         PackageZone_xName,
         PackageZone_yName,
         PackageZone_xNameUnit,
         PackageZone_yNameUnit,
         PackageZone_zoneNumbering,
         PackageZone_objectDisplay,
         PackageZone_issues,
         PackageZone_rect,
         PackageZone_selectionDisplay,
         PackageZone_forbiddenPadArray,
         PackageZone_emptyForbiddenPadArray {

  //····················································································································
  //   Atomic property: x
  //····················································································································

  final let x_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x_toDefaultValue () {
    self.x = 0
  }

  //····················································································································

  final var x : Int {
    get { return self.x_property.propval }
    set { self.x_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: y
  //····················································································································

  final let y_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y_toDefaultValue () {
    self.y = 0
  }

  //····················································································································

  final var y : Int {
    get { return self.y_property.propval }
    set { self.y_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  final let width_property : EBStoredProperty_Int

  //····················································································································

  final func reset_width_toDefaultValue () {
    self.width = 457200
  }

  //····················································································································

  final var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  final let height_property : EBStoredProperty_Int

  //····················································································································

  final func reset_height_toDefaultValue () {
    self.height = 457200
  }

  //····················································································································

  final var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xUnit
  //····················································································································

  final let xUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xUnit_toDefaultValue () {
    self.xUnit = 2286
  }

  //····················································································································

  final var xUnit : Int {
    get { return self.xUnit_property.propval }
    set { self.xUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yUnit
  //····················································································································

  final let yUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yUnit_toDefaultValue () {
    self.yUnit = 2286
  }

  //····················································································································

  final var yUnit : Int {
    get { return self.yUnit_property.propval }
    set { self.yUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  final let widthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_widthUnit_toDefaultValue () {
    self.widthUnit = 2286
  }

  //····················································································································

  final var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  final let heightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_heightUnit_toDefaultValue () {
    self.heightUnit = 2286
  }

  //····················································································································

  final var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoneName
  //····················································································································

  final let zoneName_property : EBStoredProperty_String

  //····················································································································

  final func reset_zoneName_toDefaultValue () {
    self.zoneName = ""
  }

  //····················································································································

  final var zoneName : String {
    get { return self.zoneName_property.propval }
    set { self.zoneName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayZoneName
  //····················································································································

  final let displayZoneName_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayZoneName_toDefaultValue () {
    self.displayZoneName = true
  }

  //····················································································································

  final var displayZoneName : Bool {
    get { return self.displayZoneName_property.propval }
    set { self.displayZoneName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayZoneNameWithPadNumbers
  //····················································································································

  final let displayZoneNameWithPadNumbers_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayZoneNameWithPadNumbers_toDefaultValue () {
    self.displayZoneNameWithPadNumbers = true
  }

  //····················································································································

  final var displayZoneNameWithPadNumbers : Bool {
    get { return self.displayZoneNameWithPadNumbers_property.propval }
    set { self.displayZoneNameWithPadNumbers_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  final let xName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xName_toDefaultValue () {
    self.xName = 228600
  }

  //····················································································································

  final var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  final let yName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yName_toDefaultValue () {
    self.yName = 228600
  }

  //····················································································································

  final var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xNameUnit
  //····················································································································

  final let xNameUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xNameUnit_toDefaultValue () {
    self.xNameUnit = 2286
  }

  //····················································································································

  final var xNameUnit : Int {
    get { return self.xNameUnit_property.propval }
    set { self.xNameUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yNameUnit
  //····················································································································

  final let yNameUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yNameUnit_toDefaultValue () {
    self.yNameUnit = 2286
  }

  //····················································································································

  final var yNameUnit : Int {
    get { return self.yNameUnit_property.propval }
    set { self.yNameUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoneNumbering
  //····················································································································

  final let zoneNumbering_property : EBStoredProperty_PadNumbering

  //····················································································································

  final func reset_zoneNumbering_toDefaultValue () {
    self.zoneNumbering = PadNumbering.noNumbering
  }

  //····················································································································

  final var zoneNumbering : PadNumbering {
    get { return self.zoneNumbering_property.propval }
    set { self.zoneNumbering_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: forbiddenPadNumbers
  //····················································································································

  final let forbiddenPadNumbers_property = StoredArrayOf_ForbiddenPadNumber (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var forbiddenPadNumbers : EBReferenceArray <ForbiddenPadNumber> {
    get { return self.forbiddenPadNumbers_property.propval }
    set { self.forbiddenPadNumbers_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: rect
  //····················································································································

  final let rect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  final var rect : CanariRect? {
    switch self.rect_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: forbiddenPadArray
  //····················································································································

  final let forbiddenPadArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var forbiddenPadArray : StringArray? {
    switch self.forbiddenPadArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyForbiddenPadArray
  //····················································································································

  final let emptyForbiddenPadArray_property = EBTransientProperty_Bool ()

  //····················································································································

  final var emptyForbiddenPadArray : Bool? {
    switch self.emptyForbiddenPadArray_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.x_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.y_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.width_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: ebUndoManager)
    self.height_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: ebUndoManager)
    self.xUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.yUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.widthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.heightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.zoneName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.displayZoneName_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.displayZoneNameWithPadNumbers_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.xName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.yName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.xNameUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.yNameUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.zoneNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    // gInitSemaphore.wait ()
  //--- To many property: forbiddenPadNumbers (no option)
    self.forbiddenPadNumbers_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.xName_property.selection
        let s5 = unwSelf.yName_property.selection
        let s6 = unwSelf.zoneName_property.selection
        let s7 = preferences_padZoneFont_property.selection
        let s8 = preferences_padZoneColor_property.selection
        let s9 = unwSelf.displayZoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_PackageZone_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.objectDisplay_property)
    self.y_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.zoneName_property.addEBObserver (self.objectDisplay_property)
    preferences_padZoneFont_property.addEBObserver (self.objectDisplay_property)
    preferences_padZoneColor_property.addEBObserver (self.objectDisplay_property)
    self.displayZoneName_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.xName_property.selection
        let s5 = unwSelf.yName_property.selection
        let s6 = unwSelf.zoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6)) :
          return .single (transient_PackageZone_issues (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.issues_property)
    self.y_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.zoneName_property.addEBObserver (self.issues_property)
  //--- Atomic property: rect
    self.rect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_PackageZone_rect (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.rect_property)
    self.y_property.addEBObserver (self.rect_property)
    self.width_property.addEBObserver (self.rect_property)
    self.height_property.addEBObserver (self.rect_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.x_property.selection
        let s1 = unwSelf.y_property.selection
        let s2 = unwSelf.width_property.selection
        let s3 = unwSelf.height_property.selection
        let s4 = unwSelf.xName_property.selection
        let s5 = unwSelf.yName_property.selection
        let s6 = unwSelf.zoneName_property.selection
        let s7 = preferences_padZoneFont_property.selection
        let s8 = preferences_packageBackgroundColor_property.selection
        let s9 = preferences_padZoneColor_property.selection
        let s10 = unwSelf.knobSize_property.selection
        let s11 = unwSelf.displayZoneName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_PackageZone_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.selectionDisplay_property)
    self.y_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.zoneName_property.addEBObserver (self.selectionDisplay_property)
    preferences_padZoneFont_property.addEBObserver (self.selectionDisplay_property)
    preferences_packageBackgroundColor_property.addEBObserver (self.selectionDisplay_property)
    preferences_padZoneColor_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
    self.displayZoneName_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: forbiddenPadArray
    self.forbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.forbiddenPadNumbers_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageZone_forbiddenPadArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.forbiddenPadNumbers_property.addEBObserverOf_padNumber (self.forbiddenPadArray_property)
  //--- Atomic property: emptyForbiddenPadArray
    self.emptyForbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.forbiddenPadNumbers_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PackageZone_emptyForbiddenPadArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.forbiddenPadNumbers_property.addEBObserver (self.emptyForbiddenPadArray_property)
    // gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.forbiddenPadNumbers_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.x_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNameUnit_property.setSignatureObserver (observer: self)
    self.xUnit_property.setSignatureObserver (observer: self)
    self.y_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNameUnit_property.setSignatureObserver (observer: self)
    self.yUnit_property.setSignatureObserver (observer: self)
    self.zoneName_property.setSignatureObserver (observer: self)
    self.zoneNumbering_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

/*  override func cleanUpToManyRelationships () {
    self.forbiddenPadNumbers.removeAll ()
    super.cleanUpToManyRelationships ()
  } */

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: x
      self.x_property.storeIn (dictionary: ioDictionary, forKey: "x")
    //--- Atomic property: y
      self.y_property.storeIn (dictionary: ioDictionary, forKey: "y")
    //--- Atomic property: width
      self.width_property.storeIn (dictionary: ioDictionary, forKey: "width")
    //--- Atomic property: height
      self.height_property.storeIn (dictionary: ioDictionary, forKey: "height")
    //--- Atomic property: xUnit
      self.xUnit_property.storeIn (dictionary: ioDictionary, forKey: "xUnit")
    //--- Atomic property: yUnit
      self.yUnit_property.storeIn (dictionary: ioDictionary, forKey: "yUnit")
    //--- Atomic property: widthUnit
      self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey: "widthUnit")
    //--- Atomic property: heightUnit
      self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey: "heightUnit")
    //--- Atomic property: zoneName
      self.zoneName_property.storeIn (dictionary: ioDictionary, forKey: "zoneName")
    //--- Atomic property: displayZoneName
      self.displayZoneName_property.storeIn (dictionary: ioDictionary, forKey: "displayZoneName")
    //--- Atomic property: displayZoneNameWithPadNumbers
      self.displayZoneNameWithPadNumbers_property.storeIn (dictionary: ioDictionary, forKey: "displayZoneNameWithPadNumbers")
    //--- Atomic property: xName
      self.xName_property.storeIn (dictionary: ioDictionary, forKey: "xName")
    //--- Atomic property: yName
      self.yName_property.storeIn (dictionary: ioDictionary, forKey: "yName")
    //--- Atomic property: xNameUnit
      self.xNameUnit_property.storeIn (dictionary: ioDictionary, forKey: "xNameUnit")
    //--- Atomic property: yNameUnit
      self.yNameUnit_property.storeIn (dictionary: ioDictionary, forKey: "yNameUnit")
    //--- Atomic property: zoneNumbering
      self.zoneNumbering_property.storeIn (dictionary: ioDictionary, forKey: "zoneNumbering")
  //--- To many property: forbiddenPadNumbers
    self.store (
      managedObjectArray: self.forbiddenPadNumbers_property.propval.values,
      relationshipName: "forbiddenPadNumbers",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: forbiddenPadNumbers
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "forbiddenPadNumbers",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [ForbiddenPadNumber]
      self.forbiddenPadNumbers_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: x
    self.x_property.readFrom (dictionary: inDictionary, forKey: "x")
  //--- Atomic property: y
    self.y_property.readFrom (dictionary: inDictionary, forKey: "y")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey: "width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey: "height")
  //--- Atomic property: xUnit
    self.xUnit_property.readFrom (dictionary: inDictionary, forKey: "xUnit")
  //--- Atomic property: yUnit
    self.yUnit_property.readFrom (dictionary: inDictionary, forKey: "yUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey: "widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey: "heightUnit")
  //--- Atomic property: zoneName
    self.zoneName_property.readFrom (dictionary: inDictionary, forKey: "zoneName")
  //--- Atomic property: displayZoneName
    self.displayZoneName_property.readFrom (dictionary: inDictionary, forKey: "displayZoneName")
  //--- Atomic property: displayZoneNameWithPadNumbers
    self.displayZoneNameWithPadNumbers_property.readFrom (dictionary: inDictionary, forKey: "displayZoneNameWithPadNumbers")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey: "xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey: "yName")
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.readFrom (dictionary: inDictionary, forKey: "xNameUnit")
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.readFrom (dictionary: inDictionary, forKey: "yNameUnit")
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.readFrom (dictionary: inDictionary, forKey: "zoneNumbering")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "x\n"
    ioString += "y\n"
    ioString += "width\n"
    ioString += "height\n"
    ioString += "xUnit\n"
    ioString += "yUnit\n"
    ioString += "widthUnit\n"
    ioString += "heightUnit\n"
    ioString += "zoneName\n"
    ioString += "displayZoneName\n"
    ioString += "displayZoneNameWithPadNumbers\n"
    ioString += "xName\n"
    ioString += "yName\n"
    ioString += "xNameUnit\n"
    ioString += "yNameUnit\n"
    ioString += "zoneNumbering\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "forbiddenPadNumbers\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.x.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.width.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.height.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.widthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.heightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoneName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.displayZoneName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.displayZoneNameWithPadNumbers.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xNameUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yNameUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoneNumbering.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.forbiddenPadNumbers.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["x"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x = value
      }
      if let range = inDictionary ["y"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y = value
      }
      if let range = inDictionary ["width"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.width = value
      }
      if let range = inDictionary ["height"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.height = value
      }
      if let range = inDictionary ["xUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xUnit = value
      }
      if let range = inDictionary ["yUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yUnit = value
      }
      if let range = inDictionary ["widthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.widthUnit = value
      }
      if let range = inDictionary ["heightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.heightUnit = value
      }
      if let range = inDictionary ["zoneName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.zoneName = value
      }
      if let range = inDictionary ["displayZoneName"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.displayZoneName = value
      }
      if let range = inDictionary ["displayZoneNameWithPadNumbers"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.displayZoneNameWithPadNumbers = value
      }
      if let range = inDictionary ["xName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xName = value
      }
      if let range = inDictionary ["yName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yName = value
      }
      if let range = inDictionary ["xNameUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xNameUnit = value
      }
      if let range = inDictionary ["yNameUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yNameUnit = value
      }
      if let range = inDictionary ["zoneNumbering"], let value = PadNumbering.unarchiveFromDataRange (inData, range) {
        self.zoneNumbering = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["forbiddenPadNumbers"], range.length > 0 {
        var relationshipArray = EBReferenceArray <ForbiddenPadNumber> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! ForbiddenPadNumber)
        }
        self.forbiddenPadNumbers = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

/*  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: forbiddenPadNumbers
    for managedObject in self.forbiddenPadNumbers.values {
      objects.append (managedObject)
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: forbiddenPadNumbers
    for managedObject in self.forbiddenPadNumbers.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.forbiddenPadNumbers_property.signature ())
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.x_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNameUnit_property.signature ())
    crc.accumulateUInt32 (self.xUnit_property.signature ())
    crc.accumulateUInt32 (self.y_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNameUnit_property.signature ())
    crc.accumulateUInt32 (self.yUnit_property.signature ())
    crc.accumulateUInt32 (self.zoneName_property.signature ())
    crc.accumulateUInt32 (self.zoneNumbering_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_PackageZone (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_PackageZone (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_PackageZone (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    translate_PackageZone (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_PackageZone (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_PackageZone (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_PackageZone (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_PackageZone (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_PackageZone ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_PackageZone ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_PackageZone ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_PackageZone ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_PackageZone (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90Clockwise_PackageZone (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90CounterClockwise_PackageZone (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_PackageZone (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_PackageZone (additionalDictionary: inDictionary,
                                                 optionalDocument: inOptionalDocument,
                                                 objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_PackageZone ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_PackageZone ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

