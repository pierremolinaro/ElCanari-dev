//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutPackageDocument mPackageArcSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutPackageDocument_mPackageArcSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: yCenter
  //····················································································································

  let yCenter_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: radius
  //····················································································································

  let radius_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: startAngle
  //····················································································································

  let startAngle_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: arcAngle
  //····················································································································

  let arcAngle_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: startTangent
  //····················································································································

  let startTangent_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: endTangent
  //····················································································································

  let endTangent_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: pathIsClosed
  //····················································································································

  let pathIsClosed_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: radiusUnit
  //····················································································································

  let radiusUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: startTangentUnit
  //····················································································································

  let startTangentUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: endTangentUnit
  //····················································································································

  let endTangentUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: xCenter
  //····················································································································

  let xCenter_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: strokeBezierPath
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <PackageArc> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_PackageArc <PackageObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_yCenter ()
    self.bind_property_radius ()
    self.bind_property_startAngle ()
    self.bind_property_arcAngle ()
    self.bind_property_startTangent ()
    self.bind_property_endTangent ()
    self.bind_property_pathIsClosed ()
    self.bind_property_xCenterUnit ()
    self.bind_property_yCenterUnit ()
    self.bind_property_radiusUnit ()
    self.bind_property_startTangentUnit ()
    self.bind_property_endTangentUnit ()
    self.bind_property_xCenter ()
    self.bind_property_strokeBezierPath ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- yCenter
    self.yCenter_property.mReadModelFunction = nil 
    self.yCenter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yCenter (self.yCenter_property)
  //--- radius
    self.radius_property.mReadModelFunction = nil 
    self.radius_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_radius (self.radius_property)
  //--- startAngle
    self.startAngle_property.mReadModelFunction = nil 
    self.startAngle_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_startAngle (self.startAngle_property)
  //--- arcAngle
    self.arcAngle_property.mReadModelFunction = nil 
    self.arcAngle_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_arcAngle (self.arcAngle_property)
  //--- startTangent
    self.startTangent_property.mReadModelFunction = nil 
    self.startTangent_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_startTangent (self.startTangent_property)
  //--- endTangent
    self.endTangent_property.mReadModelFunction = nil 
    self.endTangent_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_endTangent (self.endTangent_property)
  //--- pathIsClosed
    self.pathIsClosed_property.mReadModelFunction = nil 
    self.pathIsClosed_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_pathIsClosed (self.pathIsClosed_property)
  //--- xCenterUnit
    self.xCenterUnit_property.mReadModelFunction = nil 
    self.xCenterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xCenterUnit (self.xCenterUnit_property)
  //--- yCenterUnit
    self.yCenterUnit_property.mReadModelFunction = nil 
    self.yCenterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yCenterUnit (self.yCenterUnit_property)
  //--- radiusUnit
    self.radiusUnit_property.mReadModelFunction = nil 
    self.radiusUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_radiusUnit (self.radiusUnit_property)
  //--- startTangentUnit
    self.startTangentUnit_property.mReadModelFunction = nil 
    self.startTangentUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_startTangentUnit (self.startTangentUnit_property)
  //--- endTangentUnit
    self.endTangentUnit_property.mReadModelFunction = nil 
    self.endTangentUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_endTangentUnit (self.endTangentUnit_property)
  //--- xCenter
    self.xCenter_property.mReadModelFunction = nil 
    self.xCenter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xCenter (self.xCenter_property)
  //--- strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_strokeBezierPath (self.strokeBezierPath_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_issues (self.issues_property)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mValueExplorer : NSButton?
    private var mExplorerWindow : NSWindow?
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
      let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
      let tf = NSTextField (frame:secondColumn (y))
      tf.isEnabled = true
      tf.isEditable = false
      tf.stringValue = name
      tf.font = font
      view.addSubview (tf)
      let valueExplorer = NSButton (frame: thirdColumn (y))
      valueExplorer.font = font
      valueExplorer.title = self.explorerIndexString + " " + String (describing: type (of: self))
      valueExplorer.target = self
      valueExplorer.action = #selector(SelectionController_AutoLayoutPackageDocument_mPackageArcSelectionController.showObjectWindowFromExplorerButton(_:))
      view.addSubview (valueExplorer)
      self.mValueExplorer = valueExplorer
      y += EXPLORER_ROW_HEIGHT
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func buildExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x: 20.0, y: 20.0, width: 10.0, height: 10.0)
      self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
    //-------------------------------------------------- Adding properties
      let view = NSView (frame: r)
      var y : CGFloat = 0.0
      createEntryForPropertyNamed (
        "yCenter",
        object: self.yCenter_property,
        y: &y,
        view: view,
        observerExplorer: &self.yCenter_property.mObserverExplorer,
        valueExplorer: &self.yCenter_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "radius",
        object: self.radius_property,
        y: &y,
        view: view,
        observerExplorer: &self.radius_property.mObserverExplorer,
        valueExplorer: &self.radius_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "startAngle",
        object: self.startAngle_property,
        y: &y,
        view: view,
        observerExplorer: &self.startAngle_property.mObserverExplorer,
        valueExplorer: &self.startAngle_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "arcAngle",
        object: self.arcAngle_property,
        y: &y,
        view: view,
        observerExplorer: &self.arcAngle_property.mObserverExplorer,
        valueExplorer: &self.arcAngle_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "startTangent",
        object: self.startTangent_property,
        y: &y,
        view: view,
        observerExplorer: &self.startTangent_property.mObserverExplorer,
        valueExplorer: &self.startTangent_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "endTangent",
        object: self.endTangent_property,
        y: &y,
        view: view,
        observerExplorer: &self.endTangent_property.mObserverExplorer,
        valueExplorer: &self.endTangent_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "pathIsClosed",
        object: self.pathIsClosed_property,
        y: &y,
        view: view,
        observerExplorer: &self.pathIsClosed_property.mObserverExplorer,
        valueExplorer: &self.pathIsClosed_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xCenterUnit",
        object: self.xCenterUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
        valueExplorer: &self.xCenterUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yCenterUnit",
        object: self.yCenterUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
        valueExplorer: &self.yCenterUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "radiusUnit",
        object: self.radiusUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.radiusUnit_property.mObserverExplorer,
        valueExplorer: &self.radiusUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "startTangentUnit",
        object: self.startTangentUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.startTangentUnit_property.mObserverExplorer,
        valueExplorer: &self.startTangentUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "endTangentUnit",
        object: self.endTangentUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.endTangentUnit_property.mObserverExplorer,
        valueExplorer: &self.endTangentUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xCenter",
        object: self.xCenter_property,
        y: &y,
        view: view,
        observerExplorer: &self.xCenter_property.mObserverExplorer,
        valueExplorer: &self.xCenter_property.mValueExplorer
      )
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      view.frame = viewFrame
    //--- Set content size
      self.mExplorerWindow?.setContentSize (NSSize (width: EXPLORER_ROW_WIDTH + 16.0, height: fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(SelectionController_AutoLayoutPackageDocument_mPackageArcSelectionController.deleteSelectionControllerWindowAction(_:))
    //--- Set window title
      let windowTitle = self.explorerIndexString + " " + String (describing: type (of: self))
      self.mExplorerWindow!.title = windowTitle
    //--- Add Scroll view
      let frame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      let sw = NSScrollView (frame: frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      self.mExplorerWindow!.contentView = sw
    }
  #endif
  
  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showObjectWindowFromExplorerButton (_ : Any) {
      if self.mExplorerWindow == nil {
        self.buildExplorerWindow ()
      }
      self.mExplorerWindow?.makeKeyAndOrderFront (nil)
    }
  #endif
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteSelectionControllerWindowAction (_ : Any) {
      self.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func clearObjectExplorer () {
      if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
        closeButton.target = nil
      }
      self.mExplorerWindow?.orderOut (nil)
      self.mExplorerWindow = nil
    }
  #endif

  //····················································································································

  private final func bind_property_yCenter () {
    self.selectedArray_property.addEBObserverOf_yCenter (self.yCenter_property)
    self.yCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_radius () {
    self.selectedArray_property.addEBObserverOf_radius (self.radius_property)
    self.radius_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.radius_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.radius_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.radius_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_startAngle () {
    self.selectedArray_property.addEBObserverOf_startAngle (self.startAngle_property)
    self.startAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startAngle_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startAngle_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startAngle_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_arcAngle () {
    self.selectedArray_property.addEBObserverOf_arcAngle (self.arcAngle_property)
    self.arcAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.arcAngle_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.arcAngle_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.arcAngle_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_startTangent () {
    self.selectedArray_property.addEBObserverOf_startTangent (self.startTangent_property)
    self.startTangent_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startTangent_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startTangent_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startTangent_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_endTangent () {
    self.selectedArray_property.addEBObserverOf_endTangent (self.endTangent_property)
    self.endTangent_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.endTangent_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.endTangent_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.endTangent_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_pathIsClosed () {
    self.selectedArray_property.addEBObserverOf_pathIsClosed (self.pathIsClosed_property)
    self.pathIsClosed_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pathIsClosed_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.pathIsClosed_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.pathIsClosed_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xCenterUnit () {
    self.selectedArray_property.addEBObserverOf_xCenterUnit (self.xCenterUnit_property)
    self.xCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yCenterUnit () {
    self.selectedArray_property.addEBObserverOf_yCenterUnit (self.yCenterUnit_property)
    self.yCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_radiusUnit () {
    self.selectedArray_property.addEBObserverOf_radiusUnit (self.radiusUnit_property)
    self.radiusUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.radiusUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.radiusUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.radiusUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_startTangentUnit () {
    self.selectedArray_property.addEBObserverOf_startTangentUnit (self.startTangentUnit_property)
    self.startTangentUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startTangentUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startTangentUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startTangentUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_endTangentUnit () {
    self.selectedArray_property.addEBObserverOf_endTangentUnit (self.endTangentUnit_property)
    self.endTangentUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.endTangentUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.endTangentUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.endTangentUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xCenter () {
    self.selectedArray_property.addEBObserverOf_xCenter (self.xCenter_property)
    self.xCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_strokeBezierPath () {
    self.selectedArray_property.addEBObserverOf_strokeBezierPath (self.strokeBezierPath_property)
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.strokeBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

