//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutPackageDocument mPackageDimensionSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutPackageDocument_mPackageDimensionSelectionController {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: y1
  //····················································································································

  final let y1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: x2
  //····················································································································

  final let x2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: y2
  //····················································································································

  final let y2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: xDimension
  //····················································································································

  final let xDimension_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yDimension
  //····················································································································

  final let yDimension_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: x1Unit
  //····················································································································

  final let x1Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: y1Unit
  //····················································································································

  final let y1Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: x2Unit
  //····················································································································

  final let x2Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: y2Unit
  //····················································································································

  final let y2Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: xDimensionUnit
  //····················································································································

  final let xDimensionUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yDimensionUnit
  //····················································································································

  final let yDimensionUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: distanceUnit
  //····················································································································

  final let distanceUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: drawDimensionBackground
  //····················································································································

  final let drawDimensionBackground_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: x1
  //····················································································································

  final let x1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: distanceInCanariUnit
  //····················································································································

  final let distanceInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <PackageDimension> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_PackageDimension <PackageObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_y1 ()
    self.bind_property_x2 ()
    self.bind_property_y2 ()
    self.bind_property_xDimension ()
    self.bind_property_yDimension ()
    self.bind_property_x1Unit ()
    self.bind_property_y1Unit ()
    self.bind_property_x2Unit ()
    self.bind_property_y2Unit ()
    self.bind_property_xDimensionUnit ()
    self.bind_property_yDimensionUnit ()
    self.bind_property_distanceUnit ()
    self.bind_property_drawDimensionBackground ()
    self.bind_property_x1 ()
    self.bind_property_distanceInCanariUnit ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- y1
    self.y1_property.mReadModelFunction = nil 
    self.y1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y1_StopsBeingObserved (by: self.y1_property)
  //--- x2
    self.x2_property.mReadModelFunction = nil 
    self.x2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x2_StopsBeingObserved (by: self.x2_property)
  //--- y2
    self.y2_property.mReadModelFunction = nil 
    self.y2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y2_StopsBeingObserved (by: self.y2_property)
  //--- xDimension
    self.xDimension_property.mReadModelFunction = nil 
    self.xDimension_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xDimension_StopsBeingObserved (by: self.xDimension_property)
  //--- yDimension
    self.yDimension_property.mReadModelFunction = nil 
    self.yDimension_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yDimension_StopsBeingObserved (by: self.yDimension_property)
  //--- x1Unit
    self.x1Unit_property.mReadModelFunction = nil 
    self.x1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x1Unit_StopsBeingObserved (by: self.x1Unit_property)
  //--- y1Unit
    self.y1Unit_property.mReadModelFunction = nil 
    self.y1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y1Unit_StopsBeingObserved (by: self.y1Unit_property)
  //--- x2Unit
    self.x2Unit_property.mReadModelFunction = nil 
    self.x2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x2Unit_StopsBeingObserved (by: self.x2Unit_property)
  //--- y2Unit
    self.y2Unit_property.mReadModelFunction = nil 
    self.y2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y2Unit_StopsBeingObserved (by: self.y2Unit_property)
  //--- xDimensionUnit
    self.xDimensionUnit_property.mReadModelFunction = nil 
    self.xDimensionUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xDimensionUnit_StopsBeingObserved (by: self.xDimensionUnit_property)
  //--- yDimensionUnit
    self.yDimensionUnit_property.mReadModelFunction = nil 
    self.yDimensionUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yDimensionUnit_StopsBeingObserved (by: self.yDimensionUnit_property)
  //--- distanceUnit
    self.distanceUnit_property.mReadModelFunction = nil 
    self.distanceUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_distanceUnit_StopsBeingObserved (by: self.distanceUnit_property)
  //--- drawDimensionBackground
    self.drawDimensionBackground_property.mReadModelFunction = nil 
    self.drawDimensionBackground_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_drawDimensionBackground_StopsBeingObserved (by: self.drawDimensionBackground_property)
  //--- x1
    self.x1_property.mReadModelFunction = nil 
    self.x1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x1_StopsBeingObserved (by: self.x1_property)
  //--- distanceInCanariUnit
    self.distanceInCanariUnit_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_distanceInCanariUnit_StopsBeingObserved (by: self.distanceInCanariUnit_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_issues_StopsBeingObserved (by: self.issues_property)
  } */

  //····················································································································

  private final func bind_property_y1 () {
    self.selectedArray_property.toMany_y1_StartsToBeObserved (by: self.y1_property)
    self.y1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_x2 () {
    self.selectedArray_property.toMany_x2_StartsToBeObserved (by: self.x2_property)
    self.x2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_y2 () {
    self.selectedArray_property.toMany_y2_StartsToBeObserved (by: self.y2_property)
    self.y2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xDimension () {
    self.selectedArray_property.toMany_xDimension_StartsToBeObserved (by: self.xDimension_property)
    self.xDimension_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xDimension_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xDimension_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xDimension_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yDimension () {
    self.selectedArray_property.toMany_yDimension_StartsToBeObserved (by: self.yDimension_property)
    self.yDimension_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yDimension_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yDimension_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yDimension_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_x1Unit () {
    self.selectedArray_property.toMany_x1Unit_StartsToBeObserved (by: self.x1Unit_property)
    self.x1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_y1Unit () {
    self.selectedArray_property.toMany_y1Unit_StartsToBeObserved (by: self.y1Unit_property)
    self.y1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_x2Unit () {
    self.selectedArray_property.toMany_x2Unit_StartsToBeObserved (by: self.x2Unit_property)
    self.x2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_y2Unit () {
    self.selectedArray_property.toMany_y2Unit_StartsToBeObserved (by: self.y2Unit_property)
    self.y2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xDimensionUnit () {
    self.selectedArray_property.toMany_xDimensionUnit_StartsToBeObserved (by: self.xDimensionUnit_property)
    self.xDimensionUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xDimensionUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xDimensionUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xDimensionUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yDimensionUnit () {
    self.selectedArray_property.toMany_yDimensionUnit_StartsToBeObserved (by: self.yDimensionUnit_property)
    self.yDimensionUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yDimensionUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yDimensionUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yDimensionUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_distanceUnit () {
    self.selectedArray_property.toMany_distanceUnit_StartsToBeObserved (by: self.distanceUnit_property)
    self.distanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.distanceUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.distanceUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.distanceUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_drawDimensionBackground () {
    self.selectedArray_property.toMany_drawDimensionBackground_StartsToBeObserved (by: self.drawDimensionBackground_property)
    self.drawDimensionBackground_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawDimensionBackground_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawDimensionBackground_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawDimensionBackground_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_x1 () {
    self.selectedArray_property.toMany_x1_StartsToBeObserved (by: self.x1_property)
    self.x1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_distanceInCanariUnit () {
    self.selectedArray_property.toMany_distanceInCanariUnit_StartsToBeObserved (by: self.distanceInCanariUnit_property)
    self.distanceInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.distanceInCanariUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsToBeObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsToBeObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.toMany_issues_StartsToBeObserved (by: self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

