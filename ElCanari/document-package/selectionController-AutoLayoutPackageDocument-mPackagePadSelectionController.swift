//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutPackageDocument mPackagePadSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutPackageDocument_mPackagePadSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: xCenter
  //····················································································································

  let xCenter_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: yCenter
  //····················································································································

  let yCenter_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: width
  //····················································································································

  let width_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: height
  //····················································································································

  let height_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: holeWidth
  //····················································································································

  let holeWidth_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: holeHeight
  //····················································································································

  let holeHeight_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: padShape
  //····················································································································

  let padShape_property = EBPropertyProxy_PadShape ()
  //····················································································································
  //   Selection observable property: padStyle
  //····················································································································

  let padStyle_property = EBPropertyProxy_PadStyle ()
  //····················································································································
  //   Selection observable property: padNumber
  //····················································································································

  let padNumber_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: widthUnit
  //····················································································································

  let widthUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: heightUnit
  //····················································································································

  let heightUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: holeWidthUnit
  //····················································································································

  let holeWidthUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: holeHeightUnit
  //····················································································································

  let holeHeightUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: annularRingUnit
  //····················································································································

  let annularRingUnit_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: padNameForDisplay
  //····················································································································

  let padNameForDisplay_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: padIsTraversing
  //····················································································································

  let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: annularRing
  //····················································································································

  let annularRing_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: padNameWithZoneName
  //····················································································································

  let padNameWithZoneName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: zoneName
  //····················································································································

  let zoneName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: noZone
  //····················································································································

  let noZone_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: zoneAllowsManualRenumbering
  //····················································································································

  let zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: slavePadCount
  //····················································································································

  let slavePadCount_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: masterPadObjectIndex
  //····················································································································

  let masterPadObjectIndex_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: padNumberDisplay
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : [PackagePad] { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_PackagePad <PackageObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_xCenter ()
    self.bind_property_yCenter ()
    self.bind_property_width ()
    self.bind_property_height ()
    self.bind_property_holeWidth ()
    self.bind_property_holeHeight ()
    self.bind_property_padShape ()
    self.bind_property_padStyle ()
    self.bind_property_padNumber ()
    self.bind_property_xCenterUnit ()
    self.bind_property_yCenterUnit ()
    self.bind_property_widthUnit ()
    self.bind_property_heightUnit ()
    self.bind_property_holeWidthUnit ()
    self.bind_property_holeHeightUnit ()
    self.bind_property_annularRingUnit ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_padNameForDisplay ()
    self.bind_property_issues ()
    self.bind_property_padIsTraversing ()
    self.bind_property_annularRing ()
    self.bind_property_padNameWithZoneName ()
    self.bind_property_zoneName ()
    self.bind_property_noZone ()
    self.bind_property_zoneAllowsManualRenumbering ()
    self.bind_property_slavePadCount ()
    self.bind_property_masterPadObjectIndex ()
    self.bind_property_padNumberDisplay ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- xCenter
    self.xCenter_property.mReadModelFunction = nil 
    self.xCenter_property.mWriteModelFunction = nil 
    self.xCenter_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xCenter (self.xCenter_property)
  //--- yCenter
    self.yCenter_property.mReadModelFunction = nil 
    self.yCenter_property.mWriteModelFunction = nil 
    self.yCenter_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yCenter (self.yCenter_property)
  //--- width
    self.width_property.mReadModelFunction = nil 
    self.width_property.mWriteModelFunction = nil 
    self.width_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_width (self.width_property)
  //--- height
    self.height_property.mReadModelFunction = nil 
    self.height_property.mWriteModelFunction = nil 
    self.height_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_height (self.height_property)
  //--- holeWidth
    self.holeWidth_property.mReadModelFunction = nil 
    self.holeWidth_property.mWriteModelFunction = nil 
    self.holeWidth_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_holeWidth (self.holeWidth_property)
  //--- holeHeight
    self.holeHeight_property.mReadModelFunction = nil 
    self.holeHeight_property.mWriteModelFunction = nil 
    self.holeHeight_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_holeHeight (self.holeHeight_property)
  //--- padShape
    self.padShape_property.mReadModelFunction = nil 
    self.padShape_property.mWriteModelFunction = nil 
    self.padShape_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padShape (self.padShape_property)
  //--- padStyle
    self.padStyle_property.mReadModelFunction = nil 
    self.padStyle_property.mWriteModelFunction = nil 
    self.padStyle_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padStyle (self.padStyle_property)
  //--- padNumber
    self.padNumber_property.mReadModelFunction = nil 
    self.padNumber_property.mWriteModelFunction = nil 
    self.padNumber_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padNumber (self.padNumber_property)
  //--- xCenterUnit
    self.xCenterUnit_property.mReadModelFunction = nil 
    self.xCenterUnit_property.mWriteModelFunction = nil 
    self.xCenterUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xCenterUnit (self.xCenterUnit_property)
  //--- yCenterUnit
    self.yCenterUnit_property.mReadModelFunction = nil 
    self.yCenterUnit_property.mWriteModelFunction = nil 
    self.yCenterUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yCenterUnit (self.yCenterUnit_property)
  //--- widthUnit
    self.widthUnit_property.mReadModelFunction = nil 
    self.widthUnit_property.mWriteModelFunction = nil 
    self.widthUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_widthUnit (self.widthUnit_property)
  //--- heightUnit
    self.heightUnit_property.mReadModelFunction = nil 
    self.heightUnit_property.mWriteModelFunction = nil 
    self.heightUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_heightUnit (self.heightUnit_property)
  //--- holeWidthUnit
    self.holeWidthUnit_property.mReadModelFunction = nil 
    self.holeWidthUnit_property.mWriteModelFunction = nil 
    self.holeWidthUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_holeWidthUnit (self.holeWidthUnit_property)
  //--- holeHeightUnit
    self.holeHeightUnit_property.mReadModelFunction = nil 
    self.holeHeightUnit_property.mWriteModelFunction = nil 
    self.holeHeightUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_holeHeightUnit (self.holeHeightUnit_property)
  //--- annularRingUnit
    self.annularRingUnit_property.mReadModelFunction = nil 
    self.annularRingUnit_property.mWriteModelFunction = nil 
    self.annularRingUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_annularRingUnit (self.annularRingUnit_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padNameForDisplay (self.padNameForDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_issues (self.issues_property)
  //--- padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padIsTraversing (self.padIsTraversing_property)
  //--- annularRing
    self.annularRing_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_annularRing (self.annularRing_property)
  //--- padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padNameWithZoneName (self.padNameWithZoneName_property)
  //--- zoneName
    self.zoneName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_zoneName (self.zoneName_property)
  //--- noZone
    self.noZone_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_noZone (self.noZone_property)
  //--- zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_zoneAllowsManualRenumbering (self.zoneAllowsManualRenumbering_property)
  //--- slavePadCount
    self.slavePadCount_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_slavePadCount (self.slavePadCount_property)
  //--- masterPadObjectIndex
    self.masterPadObjectIndex_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_masterPadObjectIndex (self.masterPadObjectIndex_property)
  //--- padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame: thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_AutoLayoutPackageDocument_mPackagePadSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }

  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x: 20.0, y: 20.0, width: 10.0, height: 10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame: r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "xCenter",
      idx: self.xCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenter_property.mObserverExplorer,
      valueExplorer: &self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx: self.yCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenter_property.mObserverExplorer,
      valueExplorer: &self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx: self.width_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.width_property.mObserverExplorer,
      valueExplorer: &self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx: self.height_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.height_property.mObserverExplorer,
      valueExplorer: &self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeWidth",
      idx: self.holeWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeWidth_property.mObserverExplorer,
      valueExplorer: &self.holeWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeHeight",
      idx: self.holeHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeHeight_property.mObserverExplorer,
      valueExplorer: &self.holeHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx: self.padShape_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padShape_property.mObserverExplorer,
      valueExplorer: &self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx: self.padStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padStyle_property.mObserverExplorer,
      valueExplorer: &self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumber",
      idx: self.padNumber_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumber_property.mObserverExplorer,
      valueExplorer: &self.padNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx: self.xCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx: self.yCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx: self.widthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.widthUnit_property.mObserverExplorer,
      valueExplorer: &self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx: self.heightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.heightUnit_property.mObserverExplorer,
      valueExplorer: &self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeWidthUnit",
      idx: self.holeWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.holeWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeHeightUnit",
      idx: self.holeHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.holeHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx: self.annularRingUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.annularRingUnit_property.mObserverExplorer,
      valueExplorer: &self.annularRingUnit_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width: EXPLORER_ROW_WIDTH + 16.0, height: fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_AutoLayoutPackageDocument_mPackagePadSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
    let sw = NSScrollView (frame: frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront (nil)
  }

  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //····················································································································

  private final func bind_property_xCenter () {
    self.selectedArray_property.addEBObserverOf_xCenter (self.xCenter_property)
    self.xCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenter_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yCenter () {
    self.selectedArray_property.addEBObserverOf_yCenter (self.yCenter_property)
    self.yCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenter_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_width () {
    self.selectedArray_property.addEBObserverOf_width (self.width_property)
    self.width_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.width_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.width_property.setProp (inValue)
          }
        }
      }
    }
    self.width_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.width_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_height () {
    self.selectedArray_property.addEBObserverOf_height (self.height_property)
    self.height_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.height_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.height_property.setProp (inValue)
          }
        }
      }
    }
    self.height_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.height_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_holeWidth () {
    self.selectedArray_property.addEBObserverOf_holeWidth (self.holeWidth_property)
    self.holeWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeWidth_property.setProp (inValue)
          }
        }
      }
    }
    self.holeWidth_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeWidth_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_holeHeight () {
    self.selectedArray_property.addEBObserverOf_holeHeight (self.holeHeight_property)
    self.holeHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeHeight_property.setProp (inValue)
          }
        }
      }
    }
    self.holeHeight_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeHeight_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_padShape () {
    self.selectedArray_property.addEBObserverOf_padShape (self.padShape_property)
    self.padShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padShape_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padShape_property.mWriteModelFunction = { [weak self] (inValue : PadShape) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padShape_property.setProp (inValue)
          }
        }
      }
    }
    self.padShape_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : PadShape, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padShape_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_padStyle () {
    self.selectedArray_property.addEBObserverOf_padStyle (self.padStyle_property)
    self.padStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadStyle> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padStyle_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.mWriteModelFunction = { [weak self] (inValue : PadStyle) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padStyle_property.setProp (inValue)
          }
        }
      }
    }
    self.padStyle_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : PadStyle, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padStyle_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_padNumber () {
    self.selectedArray_property.addEBObserverOf_padNumber (self.padNumber_property)
    self.padNumber_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNumber_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.padNumber_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xCenterUnit () {
    self.selectedArray_property.addEBObserverOf_xCenterUnit (self.xCenterUnit_property)
    self.xCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenterUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yCenterUnit () {
    self.selectedArray_property.addEBObserverOf_yCenterUnit (self.yCenterUnit_property)
    self.yCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenterUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_widthUnit () {
    self.selectedArray_property.addEBObserverOf_widthUnit (self.widthUnit_property)
    self.widthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.widthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.widthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.widthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.widthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_heightUnit () {
    self.selectedArray_property.addEBObserverOf_heightUnit (self.heightUnit_property)
    self.heightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.heightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.heightUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.heightUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.heightUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_holeWidthUnit () {
    self.selectedArray_property.addEBObserverOf_holeWidthUnit (self.holeWidthUnit_property)
    self.holeWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.holeWidthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeWidthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_holeHeightUnit () {
    self.selectedArray_property.addEBObserverOf_holeHeightUnit (self.holeHeightUnit_property)
    self.holeHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.holeHeightUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeHeightUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_annularRingUnit () {
    self.selectedArray_property.addEBObserverOf_annularRingUnit (self.annularRingUnit_property)
    self.annularRingUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRingUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.annularRingUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.annularRingUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.annularRingUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.annularRingUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNameForDisplay () {
    self.selectedArray_property.addEBObserverOf_padNameForDisplay (self.padNameForDisplay_property)
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNameForDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padIsTraversing () {
    self.selectedArray_property.addEBObserverOf_padIsTraversing (self.padIsTraversing_property)
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padIsTraversing_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_annularRing () {
    self.selectedArray_property.addEBObserverOf_annularRing (self.annularRing_property)
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRing_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNameWithZoneName () {
    self.selectedArray_property.addEBObserverOf_padNameWithZoneName (self.padNameWithZoneName_property)
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNameWithZoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneName () {
    self.selectedArray_property.addEBObserverOf_zoneName (self.zoneName_property)
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_noZone () {
    self.selectedArray_property.addEBObserverOf_noZone (self.noZone_property)
    self.noZone_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.noZone_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneAllowsManualRenumbering () {
    self.selectedArray_property.addEBObserverOf_zoneAllowsManualRenumbering (self.zoneAllowsManualRenumbering_property)
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneAllowsManualRenumbering_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_slavePadCount () {
    self.selectedArray_property.addEBObserverOf_slavePadCount (self.slavePadCount_property)
    self.slavePadCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.slavePadCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_masterPadObjectIndex () {
    self.selectedArray_property.addEBObserverOf_masterPadObjectIndex (self.masterPadObjectIndex_property)
    self.masterPadObjectIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.masterPadObjectIndex_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNumberDisplay () {
    self.selectedArray_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNumberDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

