//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Derived selection controller AutoLayoutPackageDocument mPackageSegmentSelectionController
//--------------------------------------------------------------------------------------------------

@MainActor final class SelectionController_AutoLayoutPackageDocument_mPackageSegmentSelectionController {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: y1
  //------------------------------------------------------------------------------------------------

  final let y1_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: x2
  //------------------------------------------------------------------------------------------------

  final let x2_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: y2
  //------------------------------------------------------------------------------------------------

  final let y2_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: x1Unit
  //------------------------------------------------------------------------------------------------

  final let x1Unit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: y1Unit
  //------------------------------------------------------------------------------------------------

  final let y1Unit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: x2Unit
  //------------------------------------------------------------------------------------------------

  final let x2Unit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: y2Unit
  //------------------------------------------------------------------------------------------------

  final let y2Unit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: lengthUnit
  //------------------------------------------------------------------------------------------------

  final let lengthUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: x1
  //------------------------------------------------------------------------------------------------

  final let x1_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: strokeBezierPath
  //------------------------------------------------------------------------------------------------

  final let strokeBezierPath_property = EBTransientProperty <NSBezierPath> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: objectDisplay
  //------------------------------------------------------------------------------------------------

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: selectionDisplay
  //------------------------------------------------------------------------------------------------

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: issues
  //------------------------------------------------------------------------------------------------

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: lengthInCanariUnit
  //------------------------------------------------------------------------------------------------

  final let lengthInCanariUnit_property = EBTransientProperty <Int> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Selected array (not observable)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectedArray : EBReferenceArray <PackageSegment> { return self.selectedArray_property.propval }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   BIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   let selectedArray_property = TransientArrayOfSuperOf_PackageSegment <PackageObject> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_y1 ()
    self.bind_property_x2 ()
    self.bind_property_y2 ()
    self.bind_property_x1Unit ()
    self.bind_property_y1Unit ()
    self.bind_property_x2Unit ()
    self.bind_property_y2Unit ()
    self.bind_property_lengthUnit ()
    self.bind_property_x1 ()
    self.bind_property_strokeBezierPath ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
    self.bind_property_lengthInCanariUnit ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   UNBIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- y1
    self.y1_property.mReadModelFunction = nil 
    self.y1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y1_StopsBeingObserved (by: self.y1_property)
  //--- x2
    self.x2_property.mReadModelFunction = nil 
    self.x2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x2_StopsBeingObserved (by: self.x2_property)
  //--- y2
    self.y2_property.mReadModelFunction = nil 
    self.y2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y2_StopsBeingObserved (by: self.y2_property)
  //--- x1Unit
    self.x1Unit_property.mReadModelFunction = nil 
    self.x1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x1Unit_StopsBeingObserved (by: self.x1Unit_property)
  //--- y1Unit
    self.y1Unit_property.mReadModelFunction = nil 
    self.y1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y1Unit_StopsBeingObserved (by: self.y1Unit_property)
  //--- x2Unit
    self.x2Unit_property.mReadModelFunction = nil 
    self.x2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x2Unit_StopsBeingObserved (by: self.x2Unit_property)
  //--- y2Unit
    self.y2Unit_property.mReadModelFunction = nil 
    self.y2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_y2Unit_StopsBeingObserved (by: self.y2Unit_property)
  //--- lengthUnit
    self.lengthUnit_property.mReadModelFunction = nil 
    self.lengthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_lengthUnit_StopsBeingObserved (by: self.lengthUnit_property)
  //--- x1
    self.x1_property.mReadModelFunction = nil 
    self.x1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_x1_StopsBeingObserved (by: self.x1_property)
  //--- strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_strokeBezierPath_StopsBeingObserved (by: self.strokeBezierPath_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_issues_StopsBeingObserved (by: self.issues_property)
  //--- lengthInCanariUnit
    self.lengthInCanariUnit_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_lengthInCanariUnit_StopsBeingObserved (by: self.lengthInCanariUnit_property)
  } */

  //------------------------------------------------------------------------------------------------

  private final func bind_property_y1 () {
    self.selectedArray_property.toMany_y1_StartsBeingObserved (by: self.y1_property)
    self.y1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_x2 () {
    self.selectedArray_property.toMany_x2_StartsBeingObserved (by: self.x2_property)
    self.x2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_y2 () {
    self.selectedArray_property.toMany_y2_StartsBeingObserved (by: self.y2_property)
    self.y2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_x1Unit () {
    self.selectedArray_property.toMany_x1Unit_StartsBeingObserved (by: self.x1Unit_property)
    self.x1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_y1Unit () {
    self.selectedArray_property.toMany_y1Unit_StartsBeingObserved (by: self.y1Unit_property)
    self.y1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_x2Unit () {
    self.selectedArray_property.toMany_x2Unit_StartsBeingObserved (by: self.x2Unit_property)
    self.x2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_y2Unit () {
    self.selectedArray_property.toMany_y2Unit_StartsBeingObserved (by: self.y2Unit_property)
    self.y2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_lengthUnit () {
    self.selectedArray_property.toMany_lengthUnit_StartsBeingObserved (by: self.lengthUnit_property)
    self.lengthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.lengthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.lengthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.lengthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_x1 () {
    self.selectedArray_property.toMany_x1_StartsBeingObserved (by: self.x1_property)
    self.x1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_strokeBezierPath () {
    self.selectedArray_property.toMany_strokeBezierPath_StartsBeingObserved (by: self.strokeBezierPath_property)
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.strokeBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_issues () {
    self.selectedArray_property.toMany_issues_StartsBeingObserved (by: self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_lengthInCanariUnit () {
    self.selectedArray_property.toMany_lengthInCanariUnit_StartsBeingObserved (by: self.lengthInCanariUnit_property)
    self.lengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.lengthInCanariUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

