//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutPackageDocument mPackageSlavePadSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutPackageDocument_mPackageSlavePadSelectionController {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: xCenter
  //····················································································································

  final let xCenter_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yCenter
  //····················································································································

  final let yCenter_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: width
  //····················································································································

  final let width_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: height
  //····················································································································

  final let height_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: holeWidth
  //····················································································································

  final let holeWidth_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: holeHeight
  //····················································································································

  final let holeHeight_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: padShape
  //····················································································································

  final let padShape_property = EBComputedProperty_PadShape ()

  //····················································································································
  //   Selection observable property: padStyle
  //····················································································································

  final let padStyle_property = EBComputedProperty_SlavePadStyle ()

  //····················································································································
  //   Selection observable property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: widthUnit
  //····················································································································

  final let widthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: heightUnit
  //····················································································································

  final let heightUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: holeWidthUnit
  //····················································································································

  final let holeWidthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: holeHeightUnit
  //····················································································································

  final let holeHeightUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: annularRingUnit
  //····················································································································

  final let annularRingUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //····················································································································
  //   Selection observable property: padIsTraversing
  //····················································································································

  final let padIsTraversing_property = EBTransientProperty <Bool> ()

  //····················································································································
  //   Selection observable property: annularRing
  //····················································································································

  final let annularRing_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: padNameWithZoneName
  //····················································································································

  final let padNameWithZoneName_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: masterPadNameWithZoneName
  //····················································································································

  final let masterPadNameWithZoneName_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: padNameForDisplay
  //····················································································································

  final let padNameForDisplay_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: padNumberDisplay
  //····················································································································

  final let padNumberDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <PackageSlavePad> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_PackageSlavePad <PackageObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_xCenter ()
    self.bind_property_yCenter ()
    self.bind_property_width ()
    self.bind_property_height ()
    self.bind_property_holeWidth ()
    self.bind_property_holeHeight ()
    self.bind_property_padShape ()
    self.bind_property_padStyle ()
    self.bind_property_xCenterUnit ()
    self.bind_property_yCenterUnit ()
    self.bind_property_widthUnit ()
    self.bind_property_heightUnit ()
    self.bind_property_holeWidthUnit ()
    self.bind_property_holeHeightUnit ()
    self.bind_property_annularRingUnit ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
    self.bind_property_padIsTraversing ()
    self.bind_property_annularRing ()
    self.bind_property_padNameWithZoneName ()
    self.bind_property_masterPadNameWithZoneName ()
    self.bind_property_padNameForDisplay ()
    self.bind_property_padNumberDisplay ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- xCenter
    self.xCenter_property.mReadModelFunction = nil 
    self.xCenter_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xCenter_StopsBeingObserved (by: self.xCenter_property)
  //--- yCenter
    self.yCenter_property.mReadModelFunction = nil 
    self.yCenter_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yCenter_StopsBeingObserved (by: self.yCenter_property)
  //--- width
    self.width_property.mReadModelFunction = nil 
    self.width_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_width_StopsBeingObserved (by: self.width_property)
  //--- height
    self.height_property.mReadModelFunction = nil 
    self.height_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_height_StopsBeingObserved (by: self.height_property)
  //--- holeWidth
    self.holeWidth_property.mReadModelFunction = nil 
    self.holeWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_holeWidth_StopsBeingObserved (by: self.holeWidth_property)
  //--- holeHeight
    self.holeHeight_property.mReadModelFunction = nil 
    self.holeHeight_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_holeHeight_StopsBeingObserved (by: self.holeHeight_property)
  //--- padShape
    self.padShape_property.mReadModelFunction = nil 
    self.padShape_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_padShape_StopsBeingObserved (by: self.padShape_property)
  //--- padStyle
    self.padStyle_property.mReadModelFunction = nil 
    self.padStyle_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_padStyle_StopsBeingObserved (by: self.padStyle_property)
  //--- xCenterUnit
    self.xCenterUnit_property.mReadModelFunction = nil 
    self.xCenterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xCenterUnit_StopsBeingObserved (by: self.xCenterUnit_property)
  //--- yCenterUnit
    self.yCenterUnit_property.mReadModelFunction = nil 
    self.yCenterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yCenterUnit_StopsBeingObserved (by: self.yCenterUnit_property)
  //--- widthUnit
    self.widthUnit_property.mReadModelFunction = nil 
    self.widthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_widthUnit_StopsBeingObserved (by: self.widthUnit_property)
  //--- heightUnit
    self.heightUnit_property.mReadModelFunction = nil 
    self.heightUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_heightUnit_StopsBeingObserved (by: self.heightUnit_property)
  //--- holeWidthUnit
    self.holeWidthUnit_property.mReadModelFunction = nil 
    self.holeWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_holeWidthUnit_StopsBeingObserved (by: self.holeWidthUnit_property)
  //--- holeHeightUnit
    self.holeHeightUnit_property.mReadModelFunction = nil 
    self.holeHeightUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_holeHeightUnit_StopsBeingObserved (by: self.holeHeightUnit_property)
  //--- annularRingUnit
    self.annularRingUnit_property.mReadModelFunction = nil 
    self.annularRingUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_annularRingUnit_StopsBeingObserved (by: self.annularRingUnit_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_issues_StopsBeingObserved (by: self.issues_property)
  //--- padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_padIsTraversing_StopsBeingObserved (by: self.padIsTraversing_property)
  //--- annularRing
    self.annularRing_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_annularRing_StopsBeingObserved (by: self.annularRing_property)
  //--- padNameWithZoneName
    self.padNameWithZoneName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_padNameWithZoneName_StopsBeingObserved (by: self.padNameWithZoneName_property)
  //--- masterPadNameWithZoneName
    self.masterPadNameWithZoneName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_masterPadNameWithZoneName_StopsBeingObserved (by: self.masterPadNameWithZoneName_property)
  //--- padNameForDisplay
    self.padNameForDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_padNameForDisplay_StopsBeingObserved (by: self.padNameForDisplay_property)
  //--- padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_padNumberDisplay_StopsBeingObserved (by: self.padNumberDisplay_property)
  } */

  //····················································································································

  private final func bind_property_xCenter () {
    self.selectedArray_property.toMany_xCenter_StartsBeingObserved (by: self.xCenter_property)
    self.xCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yCenter () {
    self.selectedArray_property.toMany_yCenter_StartsBeingObserved (by: self.yCenter_property)
    self.yCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_width () {
    self.selectedArray_property.toMany_width_StartsBeingObserved (by: self.width_property)
    self.width_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.width_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.width_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_height () {
    self.selectedArray_property.toMany_height_StartsBeingObserved (by: self.height_property)
    self.height_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.height_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.height_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_holeWidth () {
    self.selectedArray_property.toMany_holeWidth_StartsBeingObserved (by: self.holeWidth_property)
    self.holeWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_holeHeight () {
    self.selectedArray_property.toMany_holeHeight_StartsBeingObserved (by: self.holeHeight_property)
    self.holeHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeHeight_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_padShape () {
    self.selectedArray_property.toMany_padShape_StartsBeingObserved (by: self.padShape_property)
    self.padShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padShape_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padShape_property.mWriteModelFunction = { [weak self] (inValue : PadShape) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padShape_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_padStyle () {
    self.selectedArray_property.toMany_padStyle_StartsBeingObserved (by: self.padStyle_property)
    self.padStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <SlavePadStyle> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padStyle_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.mWriteModelFunction = { [weak self] (inValue : SlavePadStyle) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padStyle_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xCenterUnit () {
    self.selectedArray_property.toMany_xCenterUnit_StartsBeingObserved (by: self.xCenterUnit_property)
    self.xCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yCenterUnit () {
    self.selectedArray_property.toMany_yCenterUnit_StartsBeingObserved (by: self.yCenterUnit_property)
    self.yCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_widthUnit () {
    self.selectedArray_property.toMany_widthUnit_StartsBeingObserved (by: self.widthUnit_property)
    self.widthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.widthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.widthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_heightUnit () {
    self.selectedArray_property.toMany_heightUnit_StartsBeingObserved (by: self.heightUnit_property)
    self.heightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.heightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.heightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_holeWidthUnit () {
    self.selectedArray_property.toMany_holeWidthUnit_StartsBeingObserved (by: self.holeWidthUnit_property)
    self.holeWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_holeHeightUnit () {
    self.selectedArray_property.toMany_holeHeightUnit_StartsBeingObserved (by: self.holeHeightUnit_property)
    self.holeHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_annularRingUnit () {
    self.selectedArray_property.toMany_annularRingUnit_StartsBeingObserved (by: self.annularRingUnit_property)
    self.annularRingUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRingUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.annularRingUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.annularRingUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.toMany_issues_StartsBeingObserved (by: self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padIsTraversing () {
    self.selectedArray_property.toMany_padIsTraversing_StartsBeingObserved (by: self.padIsTraversing_property)
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padIsTraversing_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_annularRing () {
    self.selectedArray_property.toMany_annularRing_StartsBeingObserved (by: self.annularRing_property)
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRing_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNameWithZoneName () {
    self.selectedArray_property.toMany_padNameWithZoneName_StartsBeingObserved (by: self.padNameWithZoneName_property)
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNameWithZoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_masterPadNameWithZoneName () {
    self.selectedArray_property.toMany_masterPadNameWithZoneName_StartsBeingObserved (by: self.masterPadNameWithZoneName_property)
    self.masterPadNameWithZoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.masterPadNameWithZoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNameForDisplay () {
    self.selectedArray_property.toMany_padNameForDisplay_StartsBeingObserved (by: self.padNameForDisplay_property)
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNameForDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_padNumberDisplay () {
    self.selectedArray_property.toMany_padNumberDisplay_StartsBeingObserved (by: self.padNumberDisplay_property)
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNumberDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

