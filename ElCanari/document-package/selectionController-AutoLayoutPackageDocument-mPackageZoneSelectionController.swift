//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutPackageDocument mPackageZoneSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutPackageDocument_mPackageZoneSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: x
  //····················································································································

  let x_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: y
  //····················································································································

  let y_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: width
  //····················································································································

  let width_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: height
  //····················································································································

  let height_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: xUnit
  //····················································································································

  let xUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: yUnit
  //····················································································································

  let yUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: widthUnit
  //····················································································································

  let widthUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: heightUnit
  //····················································································································

  let heightUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: zoneName
  //····················································································································

  let zoneName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: displayZoneName
  //····················································································································

  let displayZoneName_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: displayZoneNameWithPadNumbers
  //····················································································································

  let displayZoneNameWithPadNumbers_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: xName
  //····················································································································

  let xName_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: yName
  //····················································································································

  let yName_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: xNameUnit
  //····················································································································

  let xNameUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: yNameUnit
  //····················································································································

  let yNameUnit_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: zoneNumbering
  //····················································································································

  let zoneNumbering_property = EBPropertyProxy_PadNumbering ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: rect
  //····················································································································

  let rect_property = EBTransientProperty_CanariRect ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: forbiddenPadArray
  //····················································································································

  let forbiddenPadArray_property = EBTransientProperty_StringArray ()

  //····················································································································
  //   Selection observable property: emptyForbiddenPadArray
  //····················································································································

  let emptyForbiddenPadArray_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <PackageZone> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_PackageZone <PackageObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_PackageObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_x ()
    self.bind_property_y ()
    self.bind_property_width ()
    self.bind_property_height ()
    self.bind_property_xUnit ()
    self.bind_property_yUnit ()
    self.bind_property_widthUnit ()
    self.bind_property_heightUnit ()
    self.bind_property_zoneName ()
    self.bind_property_displayZoneName ()
    self.bind_property_displayZoneNameWithPadNumbers ()
    self.bind_property_xName ()
    self.bind_property_yName ()
    self.bind_property_xNameUnit ()
    self.bind_property_yNameUnit ()
    self.bind_property_zoneNumbering ()
    self.bind_property_objectDisplay ()
    self.bind_property_issues ()
    self.bind_property_rect ()
    self.bind_property_selectionDisplay ()
    self.bind_property_forbiddenPadArray ()
    self.bind_property_emptyForbiddenPadArray ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- x
    self.x_property.mReadModelFunction = nil 
    self.x_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_x (self.x_property)
  //--- y
    self.y_property.mReadModelFunction = nil 
    self.y_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_y (self.y_property)
  //--- width
    self.width_property.mReadModelFunction = nil 
    self.width_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_width (self.width_property)
  //--- height
    self.height_property.mReadModelFunction = nil 
    self.height_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_height (self.height_property)
  //--- xUnit
    self.xUnit_property.mReadModelFunction = nil 
    self.xUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xUnit (self.xUnit_property)
  //--- yUnit
    self.yUnit_property.mReadModelFunction = nil 
    self.yUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yUnit (self.yUnit_property)
  //--- widthUnit
    self.widthUnit_property.mReadModelFunction = nil 
    self.widthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_widthUnit (self.widthUnit_property)
  //--- heightUnit
    self.heightUnit_property.mReadModelFunction = nil 
    self.heightUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_heightUnit (self.heightUnit_property)
  //--- zoneName
    self.zoneName_property.mReadModelFunction = nil 
    self.zoneName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_zoneName (self.zoneName_property)
  //--- displayZoneName
    self.displayZoneName_property.mReadModelFunction = nil 
    self.displayZoneName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_displayZoneName (self.displayZoneName_property)
  //--- displayZoneNameWithPadNumbers
    self.displayZoneNameWithPadNumbers_property.mReadModelFunction = nil 
    self.displayZoneNameWithPadNumbers_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_displayZoneNameWithPadNumbers (self.displayZoneNameWithPadNumbers_property)
  //--- xName
    self.xName_property.mReadModelFunction = nil 
    self.xName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xName (self.xName_property)
  //--- yName
    self.yName_property.mReadModelFunction = nil 
    self.yName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yName (self.yName_property)
  //--- xNameUnit
    self.xNameUnit_property.mReadModelFunction = nil 
    self.xNameUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xNameUnit (self.xNameUnit_property)
  //--- yNameUnit
    self.yNameUnit_property.mReadModelFunction = nil 
    self.yNameUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yNameUnit (self.yNameUnit_property)
  //--- zoneNumbering
    self.zoneNumbering_property.mReadModelFunction = nil 
    self.zoneNumbering_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_zoneNumbering (self.zoneNumbering_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_issues (self.issues_property)
  //--- rect
    self.rect_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_rect (self.rect_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- forbiddenPadArray
    self.forbiddenPadArray_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_forbiddenPadArray (self.forbiddenPadArray_property)
  //--- emptyForbiddenPadArray
    self.emptyForbiddenPadArray_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_emptyForbiddenPadArray (self.emptyForbiddenPadArray_property)
  } */

  //····················································································································

  private final func bind_property_x () {
    self.selectedArray_property.addEBObserverOf_x (self.x_property)
    self.x_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_y () {
    self.selectedArray_property.addEBObserverOf_y (self.y_property)
    self.y_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_width () {
    self.selectedArray_property.addEBObserverOf_width (self.width_property)
    self.width_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.width_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.width_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_height () {
    self.selectedArray_property.addEBObserverOf_height (self.height_property)
    self.height_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.height_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.height_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xUnit () {
    self.selectedArray_property.addEBObserverOf_xUnit (self.xUnit_property)
    self.xUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yUnit () {
    self.selectedArray_property.addEBObserverOf_yUnit (self.yUnit_property)
    self.yUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_widthUnit () {
    self.selectedArray_property.addEBObserverOf_widthUnit (self.widthUnit_property)
    self.widthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.widthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.widthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_heightUnit () {
    self.selectedArray_property.addEBObserverOf_heightUnit (self.heightUnit_property)
    self.heightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.heightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.heightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneName () {
    self.selectedArray_property.addEBObserverOf_zoneName (self.zoneName_property)
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoneName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoneName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_displayZoneName () {
    self.selectedArray_property.addEBObserverOf_displayZoneName (self.displayZoneName_property)
    self.displayZoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayZoneName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.displayZoneName_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.displayZoneName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_displayZoneNameWithPadNumbers () {
    self.selectedArray_property.addEBObserverOf_displayZoneNameWithPadNumbers (self.displayZoneNameWithPadNumbers_property)
    self.displayZoneNameWithPadNumbers_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayZoneNameWithPadNumbers_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.displayZoneNameWithPadNumbers_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.displayZoneNameWithPadNumbers_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xName () {
    self.selectedArray_property.addEBObserverOf_xName (self.xName_property)
    self.xName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yName () {
    self.selectedArray_property.addEBObserverOf_yName (self.yName_property)
    self.yName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xNameUnit () {
    self.selectedArray_property.addEBObserverOf_xNameUnit (self.xNameUnit_property)
    self.xNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xNameUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xNameUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yNameUnit () {
    self.selectedArray_property.addEBObserverOf_yNameUnit (self.yNameUnit_property)
    self.yNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yNameUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yNameUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneNumbering () {
    self.selectedArray_property.addEBObserverOf_zoneNumbering (self.zoneNumbering_property)
    self.zoneNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadNumbering> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneNumbering_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoneNumbering_property.mWriteModelFunction = { [weak self] (inValue : PadNumbering) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoneNumbering_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_rect () {
    self.selectedArray_property.addEBObserverOf_rect (self.rect_property)
    self.rect_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.rect_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_forbiddenPadArray () {
    self.selectedArray_property.addEBObserverOf_forbiddenPadArray (self.forbiddenPadArray_property)
    self.forbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <StringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.forbiddenPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_emptyForbiddenPadArray () {
    self.selectedArray_property.addEBObserverOf_emptyForbiddenPadArray (self.emptyForbiddenPadArray_property)
    self.emptyForbiddenPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.emptyForbiddenPadArray_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

