//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageArc : ReadOnlyAbstractArrayProperty <PackageArc> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageArc>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageArc>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_yCenter { // Stored property
        managedObject.yCenter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_radius { // Stored property
        managedObject.radius_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_startAngle { // Stored property
        managedObject.startAngle_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_arcAngle { // Stored property
        managedObject.arcAngle_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_startTangent { // Stored property
        managedObject.startTangent_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_endTangent { // Stored property
        managedObject.endTangent_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pathIsClosed { // Stored property
        managedObject.pathIsClosed_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenterUnit { // Stored property
        managedObject.xCenterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenterUnit { // Stored property
        managedObject.yCenterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_radiusUnit { // Stored property
        managedObject.radiusUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_startTangentUnit { // Stored property
        managedObject.startTangentUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_endTangentUnit { // Stored property
        managedObject.endTangentUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenter { // Stored property
        managedObject.xCenter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_yCenter { // Stored property
        managedObject.yCenter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_radius { // Stored property
        managedObject.radius_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_startAngle { // Stored property
        managedObject.startAngle_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_arcAngle { // Stored property
        managedObject.arcAngle_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_startTangent { // Stored property
        managedObject.startTangent_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_endTangent { // Stored property
        managedObject.endTangent_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_pathIsClosed { // Stored property
        managedObject.pathIsClosed_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenterUnit { // Stored property
        managedObject.xCenterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenterUnit { // Stored property
        managedObject.yCenterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_radiusUnit { // Stored property
        managedObject.radiusUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_startTangentUnit { // Stored property
        managedObject.startTangentUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_endTangentUnit { // Stored property
        managedObject.endTangentUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenter { // Stored property
        managedObject.xCenter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter : EBObservedObject? = nil

  //····················································································································

  final func toMany_yCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yCenter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yCenter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yCenter = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yCenter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private final var mObserversOf_radius : EBObservedObject? = nil

  //····················································································································

  final func toMany_radius_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_radius {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.radius_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_radius = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_radius_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_radius?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private final var mObserversOf_startAngle : EBObservedObject? = nil

  //····················································································································

  final func toMany_startAngle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_startAngle {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.startAngle_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_startAngle = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_startAngle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_startAngle?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private final var mObserversOf_arcAngle : EBObservedObject? = nil

  //····················································································································

  final func toMany_arcAngle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_arcAngle {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.arcAngle_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_arcAngle = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_arcAngle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_arcAngle?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'startTangent' stored property
  //····················································································································

  private final var mObserversOf_startTangent : EBObservedObject? = nil

  //····················································································································

  final func toMany_startTangent_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_startTangent {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.startTangent_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_startTangent = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_startTangent_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_startTangent?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'endTangent' stored property
  //····················································································································

  private final var mObserversOf_endTangent : EBObservedObject? = nil

  //····················································································································

  final func toMany_endTangent_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_endTangent {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.endTangent_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_endTangent = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_endTangent_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_endTangent?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private final var mObserversOf_pathIsClosed : EBObservedObject? = nil

  //····················································································································

  final func toMany_pathIsClosed_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_pathIsClosed {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.pathIsClosed_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_pathIsClosed = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_pathIsClosed_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_pathIsClosed?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_xCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xCenterUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xCenterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xCenterUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xCenterUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_yCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yCenterUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yCenterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yCenterUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yCenterUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private final var mObserversOf_radiusUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_radiusUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_radiusUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.radiusUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_radiusUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_radiusUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_radiusUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'startTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_startTangentUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_startTangentUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_startTangentUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.startTangentUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_startTangentUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_startTangentUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_startTangentUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'endTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_endTangentUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_endTangentUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_endTangentUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.endTangentUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_endTangentUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_endTangentUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_endTangentUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter : EBObservedObject? = nil

  //····················································································································

  final func toMany_xCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xCenter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xCenter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xCenter = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xCenter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath : EBObservedObject? = nil

  //····················································································································

  final func toMany_strokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_strokeBezierPath {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_strokeBezierPath = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_strokeBezierPath?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObject? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageArc <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageArc> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageArc {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageArc] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageArc> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ReadWriteArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

