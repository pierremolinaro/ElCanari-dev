//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageArc : ReadOnlyAbstractArrayProperty <PackageArc> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageArc>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageArc>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_yCenter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_radius_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_startAngle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_arcAngle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_startTangent_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_endTangent_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_pathIsClosed_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_radiusUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_startTangentUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_endTangentUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xCenter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_yCenter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_radius_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_startAngle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_arcAngle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_startTangent_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_endTangent_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_pathIsClosed_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xCenterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_yCenterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_radiusUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_startTangentUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_endTangentUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xCenter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func toMany_yCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_yCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_yCenter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yCenter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.yCenter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_yCenter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_yCenter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yCenter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_yCenter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private final var mObserversOf_radius = EBWeakEventSet ()

  //····················································································································

  final func toMany_radius_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_radius.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_radius_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_radius.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radius_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_radius.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_radius.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.radius_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_radius.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radius_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_radius.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.radius_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_radius.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private final var mObserversOf_startAngle = EBWeakEventSet ()

  //····················································································································

  final func toMany_startAngle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_startAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_startAngle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_startAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startAngle_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_startAngle.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_startAngle.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.startAngle_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_startAngle.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startAngle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_startAngle.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.startAngle_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_startAngle.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private final var mObserversOf_arcAngle = EBWeakEventSet ()

  //····················································································································

  final func toMany_arcAngle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_arcAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_arcAngle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_arcAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arcAngle_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_arcAngle.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_arcAngle.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.arcAngle_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_arcAngle.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arcAngle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_arcAngle.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.arcAngle_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_arcAngle.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangent' stored property
  //····················································································································

  private final var mObserversOf_startTangent = EBWeakEventSet ()

  //····················································································································

  final func toMany_startTangent_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_startTangent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangent_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_startTangent_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_startTangent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangent_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangent_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_startTangent.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_startTangent.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.startTangent_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_startTangent.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangent_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_startTangent.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.startTangent_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_startTangent.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangent' stored property
  //····················································································································

  private final var mObserversOf_endTangent = EBWeakEventSet ()

  //····················································································································

  final func toMany_endTangent_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_endTangent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangent_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_endTangent_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_endTangent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangent_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangent_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_endTangent.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_endTangent.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.endTangent_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_endTangent.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangent_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_endTangent.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.endTangent_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_endTangent.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private final var mObserversOf_pathIsClosed = EBWeakEventSet ()

  //····················································································································

  final func toMany_pathIsClosed_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_pathIsClosed.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_pathIsClosed_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_pathIsClosed.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pathIsClosed_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_pathIsClosed.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_pathIsClosed.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.pathIsClosed_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_pathIsClosed.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pathIsClosed_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_pathIsClosed.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.pathIsClosed_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_pathIsClosed.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_xCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_xCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_xCenterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xCenterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.xCenterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_xCenterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_xCenterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xCenterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_xCenterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_yCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_yCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_yCenterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yCenterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.yCenterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_yCenterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_yCenterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yCenterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_yCenterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private final var mObserversOf_radiusUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_radiusUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_radiusUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_radiusUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_radiusUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radiusUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_radiusUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_radiusUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.radiusUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_radiusUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radiusUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_radiusUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.radiusUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_radiusUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_startTangentUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_startTangentUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_startTangentUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_startTangentUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_startTangentUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangentUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_startTangentUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_startTangentUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.startTangentUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_startTangentUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangentUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_startTangentUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.startTangentUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_startTangentUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_endTangentUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_endTangentUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_endTangentUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_endTangentUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_endTangentUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangentUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_endTangentUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_endTangentUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.endTangentUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_endTangentUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangentUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_endTangentUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.endTangentUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_endTangentUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func toMany_xCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_xCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    if !self.mObserversOf_xCenter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xCenter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.xCenter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_xCenter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for (_, entry) in self.mObserversOf_xCenter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xCenter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_xCenter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func toMany_strokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <PackageArc>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageArc <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageArc> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageArc {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageArc] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageArc> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageArc : ReadOnlyArrayOf_PackageArc {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageArc>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageArc is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

