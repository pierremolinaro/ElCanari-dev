//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageBezier : ReadOnlyAbstractArrayProperty <PackageBezier> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageBezier>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageBezier>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_y1 { // Stored property
        managedObject.y1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2 { // Stored property
        managedObject.x2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2 { // Stored property
        managedObject.y2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx1 { // Stored property
        managedObject.cpx1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy1 { // Stored property
        managedObject.cpy1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx2 { // Stored property
        managedObject.cpx2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy2 { // Stored property
        managedObject.cpy2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x1Unit { // Stored property
        managedObject.x1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y1Unit { // Stored property
        managedObject.y1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2Unit { // Stored property
        managedObject.x2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2Unit { // Stored property
        managedObject.y2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx1Unit { // Stored property
        managedObject.cpx1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy1Unit { // Stored property
        managedObject.cpy1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx2Unit { // Stored property
        managedObject.cpx2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy2Unit { // Stored property
        managedObject.cpy2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x1 { // Stored property
        managedObject.x1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_y1 { // Stored property
        managedObject.y1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2 { // Stored property
        managedObject.x2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2 { // Stored property
        managedObject.y2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx1 { // Stored property
        managedObject.cpx1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy1 { // Stored property
        managedObject.cpy1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx2 { // Stored property
        managedObject.cpx2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy2 { // Stored property
        managedObject.cpy2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x1Unit { // Stored property
        managedObject.x1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_y1Unit { // Stored property
        managedObject.y1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x2Unit { // Stored property
        managedObject.x2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_y2Unit { // Stored property
        managedObject.y2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx1Unit { // Stored property
        managedObject.cpx1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy1Unit { // Stored property
        managedObject.cpy1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpx2Unit { // Stored property
        managedObject.cpx2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_cpy2Unit { // Stored property
        managedObject.cpy2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x1 { // Stored property
        managedObject.x1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private final var mObserversOf_y1 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private final var mObserversOf_x2 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private final var mObserversOf_y2 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpx1' stored property
  //····················································································································

  private final var mObserversOf_cpx1 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpx1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpx1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpx1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpx1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpx1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpx1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpy1' stored property
  //····················································································································

  private final var mObserversOf_cpy1 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpy1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpy1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpy1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpy1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpy1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpy1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpx2' stored property
  //····················································································································

  private final var mObserversOf_cpx2 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpx2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpx2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpx2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpx2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpx2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpx2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpy2' stored property
  //····················································································································

  private final var mObserversOf_cpy2 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpy2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpy2 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpy2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpy2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpy2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpy2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private final var mObserversOf_x1Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x1Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x1Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x1Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private final var mObserversOf_y1Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y1Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y1Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y1Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private final var mObserversOf_x2Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x2Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x2Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x2Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private final var mObserversOf_y2Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y2Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y2Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y2Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpx1Unit' stored property
  //····················································································································

  private final var mObserversOf_cpx1Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpx1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpx1Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpx1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpx1Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpx1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpx1Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpy1Unit' stored property
  //····················································································································

  private final var mObserversOf_cpy1Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpy1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpy1Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpy1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpy1Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpy1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpy1Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpx2Unit' stored property
  //····················································································································

  private final var mObserversOf_cpx2Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpx2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpx2Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpx2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpx2Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpx2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpx2Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'cpy2Unit' stored property
  //····················································································································

  private final var mObserversOf_cpy2Unit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_cpy2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_cpy2Unit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.cpy2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_cpy2Unit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_cpy2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_cpy2Unit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private final var mObserversOf_x1 : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x1 {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath : EBObservedObserver? = nil

  //····················································································································

  final func toMany_strokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_strokeBezierPath {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_strokeBezierPath = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_strokeBezierPath?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObserver? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageBezier is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageBezier <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageBezier {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageBezier> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageBezier {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageBezier] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageBezier> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ReadWriteArrayOf_PackageBezier is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageBezier is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_PackageBezier is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageBezier is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

