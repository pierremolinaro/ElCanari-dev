//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageOval : ReadOnlyAbstractArrayProperty <PackageOval> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageOval>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageOval>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xUnit { // Stored property
        managedObject.xUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yUnit { // Stored property
        managedObject.yUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xUnit { // Stored property
        managedObject.xUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yUnit { // Stored property
        managedObject.yUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_y {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_width_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_width {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_width = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_width_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_width?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_height_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_height {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_height = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_height_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_height?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'xUnit' stored property
  //····················································································································

  private final var mObserversOf_xUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_xUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_xUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_xUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'yUnit' stored property
  //····················································································································

  private final var mObserversOf_yUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_yUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_yUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_yUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_widthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_widthUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_widthUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_widthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_widthUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_heightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_heightUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_heightUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_heightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_heightUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_x_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_x {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_x_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_strokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_strokeBezierPath {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.strokeBezierPath_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_strokeBezierPath = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_strokeBezierPath?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageOval <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageOval {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageOval> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageOval {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageOval] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageOval> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageOval : ReadOnlyArrayOf_PackageOval {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageOval>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

