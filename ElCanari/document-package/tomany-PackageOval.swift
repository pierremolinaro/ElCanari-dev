//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageOval : ReadOnlyAbstractArrayProperty <PackageOval> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageOval>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageOval>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_y_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_width_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_height_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_yUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_widthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_heightUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_x_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_y_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_width_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_height_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_yUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_widthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_heightUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_x_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_y.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_y.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.y_property.addEBObserver (observer)
          }else{
            self.mObserversOf_y.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_y.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.y_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_y.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_width.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_width.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.width_property.addEBObserver (observer)
          }else{
            self.mObserversOf_width.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_width.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.width_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_width.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_height.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_height.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.height_property.addEBObserver (observer)
          }else{
            self.mObserversOf_height.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_height.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.height_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_height.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xUnit' stored property
  //····················································································································

  private final var mObserversOf_xUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_xUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.xUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_xUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_xUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_xUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'yUnit' stored property
  //····················································································································

  private final var mObserversOf_yUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_yUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.yUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_yUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_yUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_yUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_widthUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_widthUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.widthUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_widthUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_widthUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.widthUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_widthUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_heightUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_heightUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.heightUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_heightUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_heightUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.heightUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_heightUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    if !self.mObserversOf_x.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_x.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.x_property.addEBObserver (observer)
          }else{
            self.mObserversOf_x.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for (_, entry) in self.mObserversOf_x.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.x_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_x.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.addEBObserver (observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.addEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <PackageOval>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageOval <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageOval {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageOval> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageOval {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageOval] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageOval> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageOval : ReadOnlyArrayOf_PackageOval {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageOval>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageOval
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageOval is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

