//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackagePad : ReadOnlyAbstractArrayProperty <PackagePad> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackagePad>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackagePad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_xCenter { // Stored property
        managedObject.xCenter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenter { // Stored property
        managedObject.yCenter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeWidth { // Stored property
        managedObject.holeWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeHeight { // Stored property
        managedObject.holeHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padShape { // Stored property
        managedObject.padShape_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padStyle { // Stored property
        managedObject.padStyle_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNumber { // Stored property
        managedObject.padNumber_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenterUnit { // Stored property
        managedObject.xCenterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenterUnit { // Stored property
        managedObject.yCenterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeWidthUnit { // Stored property
        managedObject.holeWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeHeightUnit { // Stored property
        managedObject.holeHeightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_annularRingUnit { // Stored property
        managedObject.annularRingUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameForDisplay { // Transient property
        managedObject.padNameForDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padIsTraversing { // Transient property
        managedObject.padIsTraversing_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_annularRing { // Transient property
        managedObject.annularRing_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameWithZoneName { // Transient property
        managedObject.padNameWithZoneName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneName { // Transient property
        managedObject.zoneName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_noZone { // Transient property
        managedObject.noZone_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneAllowsManualRenumbering { // Transient property
        managedObject.zoneAllowsManualRenumbering_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_slavePadCount { // Transient property
        managedObject.slavePadCount_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_masterPadObjectIndex { // Transient property
        managedObject.masterPadObjectIndex_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNumberDisplay { // Transient property
        managedObject.padNumberDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_xCenter { // Stored property
        managedObject.xCenter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenter { // Stored property
        managedObject.yCenter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeWidth { // Stored property
        managedObject.holeWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeHeight { // Stored property
        managedObject.holeHeight_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padShape { // Stored property
        managedObject.padShape_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padStyle { // Stored property
        managedObject.padStyle_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNumber { // Stored property
        managedObject.padNumber_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xCenterUnit { // Stored property
        managedObject.xCenterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yCenterUnit { // Stored property
        managedObject.yCenterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeWidthUnit { // Stored property
        managedObject.holeWidthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_holeHeightUnit { // Stored property
        managedObject.holeHeightUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_annularRingUnit { // Stored property
        managedObject.annularRingUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameForDisplay { // Transient property
        managedObject.padNameForDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padIsTraversing { // Transient property
        managedObject.padIsTraversing_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_annularRing { // Transient property
        managedObject.annularRing_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNameWithZoneName { // Transient property
        managedObject.padNameWithZoneName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneName { // Transient property
        managedObject.zoneName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_noZone { // Transient property
        managedObject.noZone_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneAllowsManualRenumbering { // Transient property
        managedObject.zoneAllowsManualRenumbering_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_slavePadCount { // Transient property
        managedObject.slavePadCount_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_masterPadObjectIndex { // Transient property
        managedObject.masterPadObjectIndex_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNumberDisplay { // Transient property
        managedObject.padNumberDisplay_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_xCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_xCenter {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xCenter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xCenter = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_xCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xCenter?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_yCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_yCenter {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yCenter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yCenter = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_yCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yCenter?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_width_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_width {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_width = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_width_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_width?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_height_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_height {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_height = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_height_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_height?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'holeWidth' stored property
  //····················································································································

  private final var mObserversOf_holeWidth : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_holeWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_holeWidth {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.holeWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_holeWidth = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_holeWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_holeWidth?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'holeHeight' stored property
  //····················································································································

  private final var mObserversOf_holeHeight : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_holeHeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_holeHeight {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.holeHeight_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_holeHeight = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_holeHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_holeHeight?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private final var mObserversOf_padShape : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padShape_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padShape {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padShape_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padShape = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_padShape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padShape?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private final var mObserversOf_padStyle : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padStyle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padStyle {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padStyle_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padStyle = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_padStyle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padStyle?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padNumber' stored property
  //····················································································································

  private final var mObserversOf_padNumber : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padNumber_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padNumber {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNumber_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padNumber = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_padNumber_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNumber?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_xCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_xCenterUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xCenterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xCenterUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_xCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xCenterUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_yCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_yCenterUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yCenterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yCenterUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_yCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yCenterUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_widthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_widthUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_widthUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_widthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_widthUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_heightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_heightUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_heightUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_heightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_heightUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'holeWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_holeWidthUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_holeWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_holeWidthUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.holeWidthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_holeWidthUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_holeWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_holeWidthUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'holeHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_holeHeightUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_holeHeightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_holeHeightUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.holeHeightUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_holeHeightUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_holeHeightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_holeHeightUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private final var mObserversOf_annularRingUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_annularRingUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_annularRingUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.annularRingUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_annularRingUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_annularRingUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_annularRingUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padNameForDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNameForDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padNameForDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padNameForDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNameForDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padNameForDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_padNameForDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNameForDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private final var mObserversOf_padIsTraversing : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padIsTraversing_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padIsTraversing {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padIsTraversing_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padIsTraversing = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_padIsTraversing_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padIsTraversing?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private final var mObserversOf_annularRing : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_annularRing_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_annularRing {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.annularRing_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_annularRing = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_annularRing_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_annularRing?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_padNameWithZoneName : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padNameWithZoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padNameWithZoneName {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNameWithZoneName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padNameWithZoneName = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_padNameWithZoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNameWithZoneName?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'zoneName' transient property
  //····················································································································

  private final var mObserversOf_zoneName : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_zoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_zoneName {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.zoneName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_zoneName = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_zoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_zoneName?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'noZone' transient property
  //····················································································································

  private final var mObserversOf_noZone : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_noZone_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_noZone {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.noZone_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_noZone = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_noZone_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_noZone?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'zoneAllowsManualRenumbering' transient property
  //····················································································································

  private final var mObserversOf_zoneAllowsManualRenumbering : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_zoneAllowsManualRenumbering_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_zoneAllowsManualRenumbering {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.zoneAllowsManualRenumbering_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_zoneAllowsManualRenumbering = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_zoneAllowsManualRenumbering_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_zoneAllowsManualRenumbering?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'slavePadCount' transient property
  //····················································································································

  private final var mObserversOf_slavePadCount : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_slavePadCount_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_slavePadCount {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.slavePadCount_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_slavePadCount = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_slavePadCount_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_slavePadCount?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'masterPadObjectIndex' transient property
  //····················································································································

  private final var mObserversOf_masterPadObjectIndex : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_masterPadObjectIndex_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_masterPadObjectIndex {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.masterPadObjectIndex_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_masterPadObjectIndex = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_masterPadObjectIndex_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_masterPadObjectIndex?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_padNumberDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_padNumberDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNumberDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_padNumberDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_padNumberDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNumberDisplay?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackagePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackagePad <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackagePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackagePad> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackagePad {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackagePad] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackagePad> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackagePad : ReadOnlyArrayOf_PackagePad {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackagePad>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackagePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackagePad : ReadWriteArrayOf_PackagePad, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PackagePad> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PackagePad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <PackagePad> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! PackagePad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackagePad) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PackagePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PackagePad>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackagePad>,
                                 addedSet inAddedSet : EBReferenceSet <PackagePad>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackagePad] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackagePad>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <PackagePad> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackagePad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackagePad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackagePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

