//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageRoot : ReadOnlyAbstractArrayProperty <PackageRoot> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageRoot>,
                                 addedSet inAddedSet : EBReferenceSet <PackageRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_selectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_comments_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_program_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_horizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_verticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_gridStyle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_gridStep_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_gridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageOpacity_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageGridStep_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageXPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePageYPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageSecondPointXUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageSecondPointYUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageFirstPointXOnLock_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageFirstPointYOnLock_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePointsDxOnLock_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImagePointsDyOnLock_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageScale_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageRotationInRadians_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDimensionUnitFirstModelPointX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDimensionUnitFirstModelPointY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDimensionUnitSecondModelPointDx_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDimensionUnitSecondModelPointDy_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelPointsCircleRadius_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPointsAreLocked_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_knobSizeMultpliedByTen_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_padNumbering_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_counterClockNumberingStartAngle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_yPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mModelImageData_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_freePadNumbering_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_counterClockNumbering_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_secondPointX_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_secondPointY_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_lockImageView_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_backgroundImagePageBackgroundDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_modelImageSizeString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_hasModelImage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_masterPadObjectIndexArray_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_selectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_selectedInspector_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_comments_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_program_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_horizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_verticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_gridStyle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_gridStep_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_gridStepUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_gridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageOpacity_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageGridStyle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageGridStep_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageXPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePageYPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageSecondPointXUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageSecondPointYUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageFirstPointXOnLock_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageFirstPointYOnLock_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePointsDxOnLock_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImagePointsDyOnLock_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageScale_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageRotationInRadians_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDimensionUnitFirstModelPointX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDimensionUnitFirstModelPointY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDimensionUnitSecondModelPointDx_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDimensionUnitSecondModelPointDy_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelPointsCircleRadius_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPointsAreLocked_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_knobSizeMultpliedByTen_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_padNumbering_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_counterClockNumberingStartAngle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_yPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mModelImageData_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_freePadNumbering_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_counterClockNumbering_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_secondPointX_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_secondPointY_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_lockImageView_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_padNumberDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_backgroundImagePageBackgroundDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_modelImageSizeString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_hasModelImage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_masterPadObjectIndexArray_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private final var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_selectedPageIndex.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedPageIndex.apply { (_ observer : EBObserverProtocol) in
          managedObject.selectedPageIndex_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private final var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_selectedInspector.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_selectedInspector.apply { (_ observer : EBObserverProtocol) in
          managedObject.selectedInspector_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_comments.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_comments.apply { (_ observer : EBObserverProtocol) in
          managedObject.comments_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  private final var mObserversOf_program = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_program (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_program.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_program (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_program.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_program_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_program.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_program.apply { (_ observer : EBObserverProtocol) in
          managedObject.program_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_program_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_program.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.program_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_horizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_horizontalFlip.apply { (_ observer : EBObserverProtocol) in
          managedObject.horizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_horizontalFlip.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private final var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_verticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_verticalFlip.apply { (_ observer : EBObserverProtocol) in
          managedObject.verticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_verticalFlip.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private final var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_gridStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_gridStyle.apply { (_ observer : EBObserverProtocol) in
          managedObject.gridStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_gridStyle.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private final var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStep_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_gridStep.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_gridStep.apply { (_ observer : EBObserverProtocol) in
          managedObject.gridStep_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStep_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_gridStep.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.gridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  private final var mObserversOf_gridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_gridStepUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_gridStepUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.gridStepUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_gridStepUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.gridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  private final var mObserversOf_gridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_gridDisplayFactor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBObserverProtocol) in
          managedObject.gridDisplayFactor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.gridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_zoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_zoom.apply { (_ observer : EBObserverProtocol) in
          managedObject.zoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageOpacity' stored property
  //····················································································································

  private final var mObserversOf_mModelImageOpacity = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageOpacity (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageOpacity.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageOpacity_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageOpacity (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageOpacity.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageOpacity_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageOpacity_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageOpacity.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageOpacity.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageOpacity_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageOpacity_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageOpacity.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageOpacity_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageHorizontalFlip.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageHorizontalFlip.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageVerticalFlip.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageVerticalFlip.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStyle' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStyle_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageGridStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageGridStyle.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageGridStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStyle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStyle.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStep' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStep (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStep (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStep_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageGridStep.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageGridStep.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageGridStep_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStep_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStep.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStepUnit' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStepUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageGridStepUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageGridStepUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageGridStepUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStepUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStepUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridDisplayFactor' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageGridDisplayFactor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageGridDisplayFactor.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageGridDisplayFactor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageGridDisplayFactor.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageZoom' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageZoom (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageZoom (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageZoom_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageZoom.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageZoom_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageZoom.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageXPlacardUnit' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageXPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageXPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageXPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageXPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageXPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageXPlacardUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageXPlacardUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageXPlacardUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageXPlacardUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageXPlacardUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageXPlacardUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageXPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageYPlacardUnit' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePageYPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageYPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageYPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageYPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePageYPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageYPlacardUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePageYPlacardUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePageYPlacardUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePageYPlacardUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageYPlacardUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePageYPlacardUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePageYPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointXUnit' stored property
  //····················································································································

  private final var mObserversOf_mModelImageSecondPointXUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointXUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointXUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointXUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageSecondPointXUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageSecondPointXUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageSecondPointXUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointXUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointXUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageSecondPointXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointYUnit' stored property
  //····················································································································

  private final var mObserversOf_mModelImageSecondPointYUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointYUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointYUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointYUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointYUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointYUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageSecondPointYUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageSecondPointYUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageSecondPointYUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointYUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointYUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageSecondPointYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointXOnLock' stored property
  //····················································································································

  private final var mObserversOf_mModelImageFirstPointXOnLock = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointXOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointXOnLock_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointXOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointXOnLock_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointXOnLock_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageFirstPointXOnLock.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageFirstPointXOnLock.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageFirstPointXOnLock_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointXOnLock_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointXOnLock.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageFirstPointXOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointYOnLock' stored property
  //····················································································································

  private final var mObserversOf_mModelImageFirstPointYOnLock = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointYOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointYOnLock_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointYOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointYOnLock_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointYOnLock_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageFirstPointYOnLock.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageFirstPointYOnLock.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageFirstPointYOnLock_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointYOnLock_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointYOnLock.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageFirstPointYOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDxOnLock' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePointsDxOnLock = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDxOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePointsDxOnLock_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDxOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePointsDxOnLock_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePointsDxOnLock_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePointsDxOnLock.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePointsDxOnLock.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePointsDxOnLock_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePointsDxOnLock_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePointsDxOnLock.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePointsDxOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDyOnLock' stored property
  //····················································································································

  private final var mObserversOf_mModelImagePointsDyOnLock = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDyOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePointsDyOnLock_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDyOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImagePointsDyOnLock_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePointsDyOnLock_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImagePointsDyOnLock.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImagePointsDyOnLock.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImagePointsDyOnLock_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePointsDyOnLock_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImagePointsDyOnLock.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImagePointsDyOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageScale' stored property
  //····················································································································

  private final var mObserversOf_mModelImageScale = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageScale (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageScale.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageScale_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageScale (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageScale.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageScale_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageScale_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageScale.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageScale.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageScale_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageScale_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageScale.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageScale_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageRotationInRadians' stored property
  //····················································································································

  private final var mObserversOf_mModelImageRotationInRadians = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageRotationInRadians.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageRotationInRadians_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageRotationInRadians.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageRotationInRadians_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageRotationInRadians_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageRotationInRadians.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageRotationInRadians.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageRotationInRadians_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageRotationInRadians_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageRotationInRadians.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageRotationInRadians_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointX' stored property
  //····················································································································

  private final var mObserversOf_mDimensionUnitFirstModelPointX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitFirstModelPointX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitFirstModelPointX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitFirstModelPointX_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mDimensionUnitFirstModelPointX.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDimensionUnitFirstModelPointX.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDimensionUnitFirstModelPointX_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitFirstModelPointX_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mDimensionUnitFirstModelPointX.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDimensionUnitFirstModelPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointY' stored property
  //····················································································································

  private final var mObserversOf_mDimensionUnitFirstModelPointY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitFirstModelPointY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitFirstModelPointY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitFirstModelPointY_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mDimensionUnitFirstModelPointY.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDimensionUnitFirstModelPointY.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDimensionUnitFirstModelPointY_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitFirstModelPointY_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mDimensionUnitFirstModelPointY.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDimensionUnitFirstModelPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDx' stored property
  //····················································································································

  private final var mObserversOf_mDimensionUnitSecondModelPointDx = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDx.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitSecondModelPointDx_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDx.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitSecondModelPointDx_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitSecondModelPointDx_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mDimensionUnitSecondModelPointDx.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDimensionUnitSecondModelPointDx.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDimensionUnitSecondModelPointDx_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitSecondModelPointDx_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mDimensionUnitSecondModelPointDx.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDimensionUnitSecondModelPointDx_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDy' stored property
  //····················································································································

  private final var mObserversOf_mDimensionUnitSecondModelPointDy = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDy.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitSecondModelPointDy_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDy.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDimensionUnitSecondModelPointDy_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitSecondModelPointDy_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mDimensionUnitSecondModelPointDy.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDimensionUnitSecondModelPointDy.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDimensionUnitSecondModelPointDy_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitSecondModelPointDy_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mDimensionUnitSecondModelPointDy.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDimensionUnitSecondModelPointDy_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelPointsCircleRadius' stored property
  //····················································································································

  private final var mObserversOf_mModelPointsCircleRadius = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelPointsCircleRadius.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelPointsCircleRadius_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelPointsCircleRadius.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelPointsCircleRadius_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelPointsCircleRadius_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelPointsCircleRadius.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelPointsCircleRadius.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelPointsCircleRadius_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelPointsCircleRadius_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelPointsCircleRadius.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelPointsCircleRadius_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPointsAreLocked' stored property
  //····················································································································

  private final var mObserversOf_mPointsAreLocked = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPointsAreLocked (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPointsAreLocked.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPointsAreLocked_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPointsAreLocked (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPointsAreLocked.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPointsAreLocked_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPointsAreLocked_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mPointsAreLocked.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPointsAreLocked.apply { (_ observer : EBObserverProtocol) in
          managedObject.mPointsAreLocked_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPointsAreLocked_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mPointsAreLocked.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mPointsAreLocked_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'knobSizeMultpliedByTen' stored property
  //····················································································································

  private final var mObserversOf_knobSizeMultpliedByTen = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_knobSizeMultpliedByTen.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.knobSizeMultpliedByTen_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_knobSizeMultpliedByTen.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.knobSizeMultpliedByTen_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_knobSizeMultpliedByTen_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_knobSizeMultpliedByTen.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_knobSizeMultpliedByTen.apply { (_ observer : EBObserverProtocol) in
          managedObject.knobSizeMultpliedByTen_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_knobSizeMultpliedByTen_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_knobSizeMultpliedByTen.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.knobSizeMultpliedByTen_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  private final var mObserversOf_padNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumbering (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumbering (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumbering_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_padNumbering.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_padNumbering.apply { (_ observer : EBObserverProtocol) in
          managedObject.padNumbering_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumbering_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_padNumbering.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.padNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'counterClockNumberingStartAngle' stored property
  //····················································································································

  private final var mObserversOf_counterClockNumberingStartAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_counterClockNumberingStartAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.counterClockNumberingStartAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_counterClockNumberingStartAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.counterClockNumberingStartAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_counterClockNumberingStartAngle_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_counterClockNumberingStartAngle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_counterClockNumberingStartAngle.apply { (_ observer : EBObserverProtocol) in
          managedObject.counterClockNumberingStartAngle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_counterClockNumberingStartAngle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_counterClockNumberingStartAngle.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.counterClockNumberingStartAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private final var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_xPlacardUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_xPlacardUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.xPlacardUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_xPlacardUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private final var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_yPlacardUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_yPlacardUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.yPlacardUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_yPlacardUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageData' stored property
  //····················································································································

  private final var mObserversOf_mModelImageData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageData (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageData (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageData_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    if !self.mObserversOf_mModelImageData.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mModelImageData.apply { (_ observer : EBObserverProtocol) in
          managedObject.mModelImageData_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageData_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageData.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointX' proxy property
  //····················································································································

  private final var mObserversOf_mModelImageFirstPointX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointX_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBObserverProtocol) in
        managedObject.mModelImageFirstPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointX_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageFirstPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointY' proxy property
  //····················································································································

  private final var mObserversOf_mModelImageFirstPointY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageFirstPointY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointY_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBObserverProtocol) in
        managedObject.mModelImageFirstPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointY_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageFirstPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointDx' proxy property
  //····················································································································

  private final var mObserversOf_mModelImageSecondPointDx = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointDx_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointDx_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDx_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBObserverProtocol) in
        managedObject.mModelImageSecondPointDx_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDx_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageSecondPointDx_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointDy' proxy property
  //····················································································································

  private final var mObserversOf_mModelImageSecondPointDy = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointDy_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mModelImageSecondPointDy_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDy_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBObserverProtocol) in
        managedObject.mModelImageSecondPointDy_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDy_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mModelImageSecondPointDy_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  private final var mObserversOf_freePadNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_freePadNumbering (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_freePadNumbering (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_freePadNumbering_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBObserverProtocol) in
        managedObject.freePadNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_freePadNumbering_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBObserverProtocol) in
        managedObject.freePadNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'counterClockNumbering' transient property
  //····················································································································

  private final var mObserversOf_counterClockNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_counterClockNumbering (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_counterClockNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.counterClockNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumbering (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_counterClockNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.counterClockNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_counterClockNumbering_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_counterClockNumbering.apply { (_ observer : EBObserverProtocol) in
        managedObject.counterClockNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_counterClockNumbering_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_counterClockNumbering.apply { (_ observer : EBObserverProtocol) in
        managedObject.counterClockNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var mObserversOf_gridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBObserverProtocol) in
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBObserverProtocol) in
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'secondPointX' transient property
  //····················································································································

  private final var mObserversOf_secondPointX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_secondPointX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_secondPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.secondPointX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_secondPointX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_secondPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.secondPointX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_secondPointX_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_secondPointX.apply { (_ observer : EBObserverProtocol) in
        managedObject.secondPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_secondPointX_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_secondPointX.apply { (_ observer : EBObserverProtocol) in
        managedObject.secondPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'secondPointY' transient property
  //····················································································································

  private final var mObserversOf_secondPointY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_secondPointY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_secondPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.secondPointY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_secondPointY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_secondPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.secondPointY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_secondPointY_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_secondPointY.apply { (_ observer : EBObserverProtocol) in
        managedObject.secondPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_secondPointY_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_secondPointY.apply { (_ observer : EBObserverProtocol) in
        managedObject.secondPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lockImageView' transient property
  //····················································································································

  private final var mObserversOf_lockImageView = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_lockImageView (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lockImageView.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lockImageView_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_lockImageView (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lockImageView.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lockImageView_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_lockImageView_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_lockImageView.apply { (_ observer : EBObserverProtocol) in
        managedObject.lockImageView_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lockImageView_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_lockImageView.apply { (_ observer : EBObserverProtocol) in
        managedObject.lockImageView_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backgroundImagePageBackgroundDisplay' transient property
  //····················································································································

  private final var mObserversOf_backgroundImagePageBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backgroundImagePageBackgroundDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundImagePageBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backgroundImagePageBackgroundDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundImagePageBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backgroundImagePageBackgroundDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_backgroundImagePageBackgroundDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.backgroundImagePageBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backgroundImagePageBackgroundDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_backgroundImagePageBackgroundDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.backgroundImagePageBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelImageSizeString' transient property
  //····················································································································

  private final var mObserversOf_modelImageSizeString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelImageSizeString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelImageSizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelImageSizeString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelImageSizeString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelImageSizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelImageSizeString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelImageSizeString_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_modelImageSizeString.apply { (_ observer : EBObserverProtocol) in
        managedObject.modelImageSizeString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelImageSizeString_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_modelImageSizeString.apply { (_ observer : EBObserverProtocol) in
        managedObject.modelImageSizeString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasModelImage' transient property
  //····················································································································

  private final var mObserversOf_hasModelImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasModelImage (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasModelImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasModelImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasModelImage (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasModelImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasModelImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasModelImage_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasModelImage.apply { (_ observer : EBObserverProtocol) in
        managedObject.hasModelImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasModelImage_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasModelImage.apply { (_ observer : EBObserverProtocol) in
        managedObject.hasModelImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'masterPadObjectIndexArray' transient property
  //····················································································································

  private final var mObserversOf_masterPadObjectIndexArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_masterPadObjectIndexArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadObjectIndexArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_masterPadObjectIndexArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadObjectIndexArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_masterPadObjectIndexArray_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_masterPadObjectIndexArray.apply { (_ observer : EBObserverProtocol) in
        managedObject.masterPadObjectIndexArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_masterPadObjectIndexArray_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_masterPadObjectIndexArray.apply { (_ observer : EBObserverProtocol) in
        managedObject.masterPadObjectIndexArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBObserverProtocol) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBObserverProtocol) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : PackageRoot, _ right : PackageRoot) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageRoot? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageRoot,
                        sortCallback inSortCallBack : Optional < (_ left : PackageRoot, _ right : PackageRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <PackageRoot>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageRoot> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageRoot {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageRoot>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <PackageRoot>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <PackageRoot> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <PackageRoot>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [PackageRoot] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageRoot> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PackageRoot>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageRoot>,
                                 addedSet inAddedSet : EBReferenceSet <PackageRoot>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackageRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackageRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <PackageRoot> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackageRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackageRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot {

  //····················································································································

  override var selection : EBSelection < [PackageRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackageRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <PackageRoot> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : PackageRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : PackageRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_PackageRoot : StoredArrayOf_PackageRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <PackageRoot> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageRoot") as? PackageRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_selectedPageIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_selectedInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_comments (self.mObserverForWritingPreferences)
    self.addEBObserverOf_program (self.mObserverForWritingPreferences)
    self.addEBObserverOf_horizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_verticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_gridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_gridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_gridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_gridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_zoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageOpacity (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageGridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageGridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageXPlacardUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePageYPlacardUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageSecondPointXUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageSecondPointYUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageFirstPointXOnLock (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageFirstPointYOnLock (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePointsDxOnLock (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImagePointsDyOnLock (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageScale (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageRotationInRadians (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDimensionUnitFirstModelPointX (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDimensionUnitFirstModelPointY (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDimensionUnitSecondModelPointDx (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDimensionUnitSecondModelPointDy (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelPointsCircleRadius (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPointsAreLocked (self.mObserverForWritingPreferences)
    self.addEBObserverOf_knobSizeMultpliedByTen (self.mObserverForWritingPreferences)
    self.addEBObserverOf_padNumbering (self.mObserverForWritingPreferences)
    self.addEBObserverOf_counterClockNumberingStartAngle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_xPlacardUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_yPlacardUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mModelImageData (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

