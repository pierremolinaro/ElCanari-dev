//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageSlavePad : ReadOnlyAbstractArrayProperty <PackageSlavePad> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageSlavePad>,
                                          addedSet inAddedSet : EBReferenceSet <PackageSlavePad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_xCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_width_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_height_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padShape_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_widthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_heightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_annularRing_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNameWithZoneName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_masterPadNameWithZoneName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNameForDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_xCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_width_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_height_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padShape_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_widthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_heightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeHeightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_annularRingUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padIsTraversing_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_annularRing_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNameWithZoneName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_masterPadNameWithZoneName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNameForDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNumberDisplay_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_xCenter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
          managedObject.xCenter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_yCenter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
          managedObject.yCenter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_width.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_width.apply { (_ observer : EBEvent) in
          managedObject.width_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_width.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_height.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_height.apply { (_ observer : EBEvent) in
          managedObject.height_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_height.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeWidth' stored property
  //····················································································································

  private final var mObserversOf_holeWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeWidth_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_holeWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_holeWidth.apply { (_ observer : EBEvent) in
          managedObject.holeWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeWidth_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_holeWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.holeWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeHeight' stored property
  //····················································································································

  private final var mObserversOf_holeHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeHeight_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_holeHeight.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_holeHeight.apply { (_ observer : EBEvent) in
          managedObject.holeHeight_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeHeight_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_holeHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.holeHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private final var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_padShape.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
          managedObject.padShape_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private final var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_padStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
          managedObject.padStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_xCenterUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
          managedObject.xCenterUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_yCenterUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
          managedObject.yCenterUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_widthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
          managedObject.widthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_heightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
          managedObject.heightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_holeWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_holeWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_holeWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.holeWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_holeWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.holeWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_holeHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_holeHeightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_holeHeightUnit.apply { (_ observer : EBEvent) in
          managedObject.holeHeightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_holeHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.holeHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private final var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    if !self.mObserversOf_annularRingUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
          managedObject.annularRingUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.annularRingUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private final var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private final var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_padNameWithZoneName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNameWithZoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNameWithZoneName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameWithZoneName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNameWithZoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNameWithZoneName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameWithZoneName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNameWithZoneName_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNameWithZoneName.apply { (_ observer : EBEvent) in
        managedObject.padNameWithZoneName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNameWithZoneName_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNameWithZoneName.apply { (_ observer : EBEvent) in
        managedObject.padNameWithZoneName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'masterPadNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_masterPadNameWithZoneName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_masterPadNameWithZoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_masterPadNameWithZoneName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadNameWithZoneName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_masterPadNameWithZoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_masterPadNameWithZoneName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadNameWithZoneName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_masterPadNameWithZoneName_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_masterPadNameWithZoneName.apply { (_ observer : EBEvent) in
        managedObject.masterPadNameWithZoneName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_masterPadNameWithZoneName_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_masterPadNameWithZoneName.apply { (_ observer : EBEvent) in
        managedObject.masterPadNameWithZoneName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNameForDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNameForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNameForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNameForDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNameForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNameForDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNameForDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNameForDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNameForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNameForDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNameForDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNameForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_PackageSlavePad : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : PackageSlavePad, _ right : PackageSlavePad) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageSlavePad? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageSlavePad,
                        sortCallback inSortCallBack : Optional < (_ left : PackageSlavePad, _ right : PackageSlavePad) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray  ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray  <PackageSlavePad>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray  ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray  (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray  (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray  ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray  ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageSlavePad] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <PackageSlavePad> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageSlavePad <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray  <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray  ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray  (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray  ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray  ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray  <PackageSlavePad> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageSlavePad {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageSlavePad] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <PackageSlavePad> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageSlavePad : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································

  func setProp (_ value :  EBReferenceArray  <PackageSlavePad>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageSlavePad? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageSlavePad?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray  <PackageSlavePad>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray  ()
      case .single (let v) :
        newModelArray = EBReferenceArray  <PackageSlavePad> (v)
      case .multiple :
        newModelArray = EBReferenceArray  ()
      }
    }else{
      newModelArray = EBReferenceArray  ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray  <PackageSlavePad>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [PackageSlavePad] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray  <PackageSlavePad> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray  ()
      case .single (let v) :
        return EBReferenceArray  (v)
      }
    }else{
      return EBReferenceArray  ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  final var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray  <PackageSlavePad>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageSlavePad>,
                                 addedSet inAddedSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackageSlavePad] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray  <PackageSlavePad>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray  <PackageSlavePad> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackageSlavePad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackageSlavePad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad {

  //····················································································································

  override var selection : EBSelection < [PackageSlavePad] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray  <PackageSlavePad>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray  <PackageSlavePad> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : PackageSlavePad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : PackageSlavePad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_PackageSlavePad : StoredArrayOf_PackageSlavePad {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray  <PackageSlavePad> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageSlavePad") as? PackageSlavePad {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_xCenter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_yCenter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_width (self.mObserverForWritingPreferences)
    self.addEBObserverOf_height (self.mObserverForWritingPreferences)
    self.addEBObserverOf_holeWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_holeHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_padShape (self.mObserverForWritingPreferences)
    self.addEBObserverOf_padStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_xCenterUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_yCenterUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_widthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_heightUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_holeWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_holeHeightUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_annularRingUnit (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

