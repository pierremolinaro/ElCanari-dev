//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageSlavePad : ReadOnlyAbstractArrayProperty <PackageSlavePad> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageSlavePad>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageSlavePad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.xCenter_property.stopsBeingObserved (by: self.mObserversOf_xCenter) // Stored property
      managedObject.yCenter_property.stopsBeingObserved (by: self.mObserversOf_yCenter) // Stored property
      managedObject.width_property.stopsBeingObserved (by: self.mObserversOf_width) // Stored property
      managedObject.height_property.stopsBeingObserved (by: self.mObserversOf_height) // Stored property
      managedObject.holeWidth_property.stopsBeingObserved (by: self.mObserversOf_holeWidth) // Stored property
      managedObject.holeHeight_property.stopsBeingObserved (by: self.mObserversOf_holeHeight) // Stored property
      managedObject.padShape_property.stopsBeingObserved (by: self.mObserversOf_padShape) // Stored property
      managedObject.padStyle_property.stopsBeingObserved (by: self.mObserversOf_padStyle) // Stored property
      managedObject.xCenterUnit_property.stopsBeingObserved (by: self.mObserversOf_xCenterUnit) // Stored property
      managedObject.yCenterUnit_property.stopsBeingObserved (by: self.mObserversOf_yCenterUnit) // Stored property
      managedObject.widthUnit_property.stopsBeingObserved (by: self.mObserversOf_widthUnit) // Stored property
      managedObject.heightUnit_property.stopsBeingObserved (by: self.mObserversOf_heightUnit) // Stored property
      managedObject.holeWidthUnit_property.stopsBeingObserved (by: self.mObserversOf_holeWidthUnit) // Stored property
      managedObject.holeHeightUnit_property.stopsBeingObserved (by: self.mObserversOf_holeHeightUnit) // Stored property
      managedObject.annularRingUnit_property.stopsBeingObserved (by: self.mObserversOf_annularRingUnit) // Stored property
      managedObject.objectDisplay_property.stopsBeingObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.stopsBeingObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.issues_property.stopsBeingObserved (by: self.mObserversOf_issues) // Transient property
      managedObject.padIsTraversing_property.stopsBeingObserved (by: self.mObserversOf_padIsTraversing) // Transient property
      managedObject.annularRing_property.stopsBeingObserved (by: self.mObserversOf_annularRing) // Transient property
      managedObject.padNameWithZoneName_property.stopsBeingObserved (by: self.mObserversOf_padNameWithZoneName) // Transient property
      managedObject.masterPadNameWithZoneName_property.stopsBeingObserved (by: self.mObserversOf_masterPadNameWithZoneName) // Transient property
      managedObject.padNameForDisplay_property.stopsBeingObserved (by: self.mObserversOf_padNameForDisplay) // Transient property
      managedObject.padNumberDisplay_property.stopsBeingObserved (by: self.mObserversOf_padNumberDisplay) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.xCenter_property.startsToBeObserved (by: self.mObserversOf_xCenter) // Stored property
      managedObject.yCenter_property.startsToBeObserved (by: self.mObserversOf_yCenter) // Stored property
      managedObject.width_property.startsToBeObserved (by: self.mObserversOf_width) // Stored property
      managedObject.height_property.startsToBeObserved (by: self.mObserversOf_height) // Stored property
      managedObject.holeWidth_property.startsToBeObserved (by: self.mObserversOf_holeWidth) // Stored property
      managedObject.holeHeight_property.startsToBeObserved (by: self.mObserversOf_holeHeight) // Stored property
      managedObject.padShape_property.startsToBeObserved (by: self.mObserversOf_padShape) // Stored property
      managedObject.padStyle_property.startsToBeObserved (by: self.mObserversOf_padStyle) // Stored property
      managedObject.xCenterUnit_property.startsToBeObserved (by: self.mObserversOf_xCenterUnit) // Stored property
      managedObject.yCenterUnit_property.startsToBeObserved (by: self.mObserversOf_yCenterUnit) // Stored property
      managedObject.widthUnit_property.startsToBeObserved (by: self.mObserversOf_widthUnit) // Stored property
      managedObject.heightUnit_property.startsToBeObserved (by: self.mObserversOf_heightUnit) // Stored property
      managedObject.holeWidthUnit_property.startsToBeObserved (by: self.mObserversOf_holeWidthUnit) // Stored property
      managedObject.holeHeightUnit_property.startsToBeObserved (by: self.mObserversOf_holeHeightUnit) // Stored property
      managedObject.annularRingUnit_property.startsToBeObserved (by: self.mObserversOf_annularRingUnit) // Stored property
      managedObject.objectDisplay_property.startsToBeObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.startsToBeObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.issues_property.startsToBeObserved (by: self.mObserversOf_issues) // Transient property
      managedObject.padIsTraversing_property.startsToBeObserved (by: self.mObserversOf_padIsTraversing) // Transient property
      managedObject.annularRing_property.startsToBeObserved (by: self.mObserversOf_annularRing) // Transient property
      managedObject.padNameWithZoneName_property.startsToBeObserved (by: self.mObserversOf_padNameWithZoneName) // Transient property
      managedObject.masterPadNameWithZoneName_property.startsToBeObserved (by: self.mObserversOf_masterPadNameWithZoneName) // Transient property
      managedObject.padNameForDisplay_property.startsToBeObserved (by: self.mObserversOf_padNameForDisplay) // Transient property
      managedObject.padNumberDisplay_property.startsToBeObserved (by: self.mObserversOf_padNumberDisplay) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_xCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_xCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.xCenter_property.startsToBeObserved (by: self.mObserversOf_xCenter)
    }*/
    /* if !self.mObserversOf_xCenter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_xCenter.values () {
          if let observer = entry.possibleObserver {
            managedObject.xCenter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_xCenter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.xCenter_property.stopsBeingObserved (by: self.mObserversOf_xCenter)
    }
    for entry in self.mObserversOf_xCenter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xCenter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_xCenter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_yCenter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_yCenter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.yCenter_property.startsToBeObserved (by: self.mObserversOf_yCenter)
    }*/
    /* if !self.mObserversOf_yCenter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_yCenter.values () {
          if let observer = entry.possibleObserver {
            managedObject.yCenter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_yCenter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.yCenter_property.stopsBeingObserved (by: self.mObserversOf_yCenter)
    }
    for entry in self.mObserversOf_yCenter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yCenter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_yCenter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_width_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_width.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_width_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_width.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_width_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.width_property.startsToBeObserved (by: self.mObserversOf_width)
    }*/
    /* if !self.mObserversOf_width.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_width.values () {
          if let observer = entry.possibleObserver {
            managedObject.width_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_width.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_width_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.width_property.stopsBeingObserved (by: self.mObserversOf_width)
    }
    for entry in self.mObserversOf_width.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.width_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_width.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_height_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_height.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_height_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_height.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_height_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.height_property.startsToBeObserved (by: self.mObserversOf_height)
    }*/
    /* if !self.mObserversOf_height.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_height.values () {
          if let observer = entry.possibleObserver {
            managedObject.height_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_height.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_height_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.height_property.stopsBeingObserved (by: self.mObserversOf_height)
    }
    for entry in self.mObserversOf_height.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.height_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_height.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'holeWidth' stored property
  //····················································································································

  private final var mObserversOf_holeWidth = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_holeWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_holeWidth.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidth_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_holeWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_holeWidth.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidth_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_holeWidth_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.holeWidth_property.startsToBeObserved (by: self.mObserversOf_holeWidth)
    }*/
    /* if !self.mObserversOf_holeWidth.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_holeWidth.values () {
          if let observer = entry.possibleObserver {
            managedObject.holeWidth_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_holeWidth.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_holeWidth_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.holeWidth_property.stopsBeingObserved (by: self.mObserversOf_holeWidth)
    }
    for entry in self.mObserversOf_holeWidth.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.holeWidth_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_holeWidth.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'holeHeight' stored property
  //····················································································································

  private final var mObserversOf_holeHeight = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_holeHeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_holeHeight.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeight_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_holeHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_holeHeight.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeight_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_holeHeight_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.holeHeight_property.startsToBeObserved (by: self.mObserversOf_holeHeight)
    }*/
    /* if !self.mObserversOf_holeHeight.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_holeHeight.values () {
          if let observer = entry.possibleObserver {
            managedObject.holeHeight_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_holeHeight.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_holeHeight_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.holeHeight_property.stopsBeingObserved (by: self.mObserversOf_holeHeight)
    }
    for entry in self.mObserversOf_holeHeight.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.holeHeight_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_holeHeight.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private final var mObserversOf_padShape = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padShape_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padShape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_padShape_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.padShape_property.startsToBeObserved (by: self.mObserversOf_padShape)
    }*/
    /* if !self.mObserversOf_padShape.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_padShape.values () {
          if let observer = entry.possibleObserver {
            managedObject.padShape_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_padShape.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.padShape_property.stopsBeingObserved (by: self.mObserversOf_padShape)
    }
    for entry in self.mObserversOf_padShape.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.padShape_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_padShape.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private final var mObserversOf_padStyle = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padStyle_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padStyle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.padStyle_property.startsToBeObserved (by: self.mObserversOf_padStyle)
    }*/
    /* if !self.mObserversOf_padStyle.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_padStyle.values () {
          if let observer = entry.possibleObserver {
            managedObject.padStyle_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_padStyle.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.padStyle_property.stopsBeingObserved (by: self.mObserversOf_padStyle)
    }
    for entry in self.mObserversOf_padStyle.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.padStyle_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_padStyle.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_xCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_xCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.xCenterUnit_property.startsToBeObserved (by: self.mObserversOf_xCenterUnit)
    }*/
    /* if !self.mObserversOf_xCenterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_xCenterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.xCenterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_xCenterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.xCenterUnit_property.stopsBeingObserved (by: self.mObserversOf_xCenterUnit)
    }
    for entry in self.mObserversOf_xCenterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xCenterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_xCenterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_yCenterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_yCenterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.yCenterUnit_property.startsToBeObserved (by: self.mObserversOf_yCenterUnit)
    }*/
    /* if !self.mObserversOf_yCenterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_yCenterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.yCenterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_yCenterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.yCenterUnit_property.stopsBeingObserved (by: self.mObserversOf_yCenterUnit)
    }
    for entry in self.mObserversOf_yCenterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yCenterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_yCenterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_widthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_widthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.widthUnit_property.startsToBeObserved (by: self.mObserversOf_widthUnit)
    }*/
    /* if !self.mObserversOf_widthUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_widthUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.widthUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_widthUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.widthUnit_property.stopsBeingObserved (by: self.mObserversOf_widthUnit)
    }
    for entry in self.mObserversOf_widthUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.widthUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_widthUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_heightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_heightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.heightUnit_property.startsToBeObserved (by: self.mObserversOf_heightUnit)
    }*/
    /* if !self.mObserversOf_heightUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_heightUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.heightUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_heightUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.heightUnit_property.stopsBeingObserved (by: self.mObserversOf_heightUnit)
    }
    for entry in self.mObserversOf_heightUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.heightUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_heightUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'holeWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_holeWidthUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_holeWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_holeWidthUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidthUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_holeWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_holeWidthUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeWidthUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_holeWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.holeWidthUnit_property.startsToBeObserved (by: self.mObserversOf_holeWidthUnit)
    }*/
    /* if !self.mObserversOf_holeWidthUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_holeWidthUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.holeWidthUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_holeWidthUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_holeWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.holeWidthUnit_property.stopsBeingObserved (by: self.mObserversOf_holeWidthUnit)
    }
    for entry in self.mObserversOf_holeWidthUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.holeWidthUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_holeWidthUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'holeHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_holeHeightUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_holeHeightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_holeHeightUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeightUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_holeHeightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_holeHeightUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeHeightUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_holeHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.holeHeightUnit_property.startsToBeObserved (by: self.mObserversOf_holeHeightUnit)
    }*/
    /* if !self.mObserversOf_holeHeightUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_holeHeightUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.holeHeightUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_holeHeightUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_holeHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.holeHeightUnit_property.stopsBeingObserved (by: self.mObserversOf_holeHeightUnit)
    }
    for entry in self.mObserversOf_holeHeightUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.holeHeightUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_holeHeightUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private final var mObserversOf_annularRingUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_annularRingUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_annularRingUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    /* for managedObject in inSet.values {
      managedObject.annularRingUnit_property.startsToBeObserved (by: self.mObserversOf_annularRingUnit)
    }*/
    /* if !self.mObserversOf_annularRingUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_annularRingUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.annularRingUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_annularRingUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      managedObject.annularRingUnit_property.stopsBeingObserved (by: self.mObserversOf_annularRingUnit)
    }
    for entry in self.mObserversOf_annularRingUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.annularRingUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_annularRingUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_issues.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_issues.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_issues.values () {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_issues.values () {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private final var mObserversOf_padIsTraversing = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padIsTraversing_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padIsTraversing_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padIsTraversing.values () {
        if let observer = entry.possibleObserver {
          managedObject.padIsTraversing_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padIsTraversing.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padIsTraversing.values () {
        if let observer = entry.possibleObserver {
          managedObject.padIsTraversing_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padIsTraversing.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private final var mObserversOf_annularRing = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_annularRing_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_annularRing_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_annularRing.values () {
        if let observer = entry.possibleObserver {
          managedObject.annularRing_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_annularRing.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_annularRing.values () {
        if let observer = entry.possibleObserver {
          managedObject.annularRing_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_annularRing.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'padNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_padNameWithZoneName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padNameWithZoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padNameWithZoneName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameWithZoneName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padNameWithZoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padNameWithZoneName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameWithZoneName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_padNameWithZoneName_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNameWithZoneName.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNameWithZoneName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padNameWithZoneName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_padNameWithZoneName_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNameWithZoneName.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNameWithZoneName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padNameWithZoneName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'masterPadNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_masterPadNameWithZoneName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_masterPadNameWithZoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_masterPadNameWithZoneName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadNameWithZoneName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_masterPadNameWithZoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_masterPadNameWithZoneName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.masterPadNameWithZoneName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_masterPadNameWithZoneName_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_masterPadNameWithZoneName.values () {
        if let observer = entry.possibleObserver {
          managedObject.masterPadNameWithZoneName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_masterPadNameWithZoneName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_masterPadNameWithZoneName_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_masterPadNameWithZoneName.values () {
        if let observer = entry.possibleObserver {
          managedObject.masterPadNameWithZoneName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_masterPadNameWithZoneName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'padNameForDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNameForDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padNameForDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padNameForDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameForDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padNameForDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padNameForDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameForDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_padNameForDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNameForDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNameForDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padNameForDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_padNameForDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNameForDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNameForDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padNameForDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_padNumberDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_padNumberDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNumberDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNumberDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padNumberDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_padNumberDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.padNumberDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padNumberDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageSlavePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageSlavePad <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageSlavePad> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageSlavePad {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageSlavePad] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageSlavePad> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageSlavePad : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageSlavePad>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageSlavePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PackageSlavePad> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PackageSlavePad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <PackageSlavePad> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! PackageSlavePad)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PackageSlavePad>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageSlavePad>,
                                 addedSet inAddedSet : EBReferenceSet <PackageSlavePad>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackageSlavePad] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackageSlavePad>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <PackageSlavePad> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackageSlavePad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackageSlavePad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageSlavePad is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

