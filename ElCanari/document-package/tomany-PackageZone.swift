//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageZone : ReadOnlyAbstractArrayProperty <PackageZone> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageZone>,                            
                                 addedSet inAddedSet : EBReferenceSet <PackageZone>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xUnit { // Stored property
        managedObject.xUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yUnit { // Stored property
        managedObject.yUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneName { // Stored property
        managedObject.zoneName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayZoneName { // Stored property
        managedObject.displayZoneName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayZoneNameWithPadNumbers { // Stored property
        managedObject.displayZoneNameWithPadNumbers_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xName { // Stored property
        managedObject.xName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yName { // Stored property
        managedObject.yName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xNameUnit { // Stored property
        managedObject.xNameUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yNameUnit { // Stored property
        managedObject.yNameUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneNumbering { // Stored property
        managedObject.zoneNumbering_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_rect { // Transient property
        managedObject.rect_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_forbiddenPadArray { // Transient property
        managedObject.forbiddenPadArray_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_emptyForbiddenPadArray { // Transient property
        managedObject.emptyForbiddenPadArray_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_width { // Stored property
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_height { // Stored property
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xUnit { // Stored property
        managedObject.xUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yUnit { // Stored property
        managedObject.yUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_widthUnit { // Stored property
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_heightUnit { // Stored property
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneName { // Stored property
        managedObject.zoneName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayZoneName { // Stored property
        managedObject.displayZoneName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayZoneNameWithPadNumbers { // Stored property
        managedObject.displayZoneNameWithPadNumbers_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xName { // Stored property
        managedObject.xName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yName { // Stored property
        managedObject.yName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xNameUnit { // Stored property
        managedObject.xNameUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yNameUnit { // Stored property
        managedObject.yNameUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_zoneNumbering { // Stored property
        managedObject.zoneNumbering_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_rect { // Transient property
        managedObject.rect_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_forbiddenPadArray { // Transient property
        managedObject.forbiddenPadArray_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_emptyForbiddenPadArray { // Transient property
        managedObject.emptyForbiddenPadArray_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x : EBObservedObject? = nil

  //····················································································································

  final func toMany_x_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_x {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y : EBObservedObject? = nil

  //····················································································································

  final func toMany_y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_y {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var mObserversOf_width : EBObservedObject? = nil

  //····················································································································

  final func toMany_width_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_width {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.width_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_width = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_width_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_width?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var mObserversOf_height : EBObservedObject? = nil

  //····················································································································

  final func toMany_height_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_height {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.height_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_height = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_height_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_height?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xUnit' stored property
  //····················································································································

  private final var mObserversOf_xUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_xUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yUnit' stored property
  //····················································································································

  private final var mObserversOf_yUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_yUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var mObserversOf_widthUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_widthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_widthUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.widthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_widthUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_widthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_widthUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var mObserversOf_heightUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_heightUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_heightUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.heightUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_heightUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_heightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_heightUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'zoneName' stored property
  //····················································································································

  private final var mObserversOf_zoneName : EBObservedObject? = nil

  //····················································································································

  final func toMany_zoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_zoneName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.zoneName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_zoneName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_zoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_zoneName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'displayZoneName' stored property
  //····················································································································

  private final var mObserversOf_displayZoneName : EBObservedObject? = nil

  //····················································································································

  final func toMany_displayZoneName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_displayZoneName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayZoneName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayZoneName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_displayZoneName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayZoneName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'displayZoneNameWithPadNumbers' stored property
  //····················································································································

  private final var mObserversOf_displayZoneNameWithPadNumbers : EBObservedObject? = nil

  //····················································································································

  final func toMany_displayZoneNameWithPadNumbers_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_displayZoneNameWithPadNumbers {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayZoneNameWithPadNumbers_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayZoneNameWithPadNumbers = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_displayZoneNameWithPadNumbers_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayZoneNameWithPadNumbers?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private final var mObserversOf_xName : EBObservedObject? = nil

  //····················································································································

  final func toMany_xName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private final var mObserversOf_yName : EBObservedObject? = nil

  //····················································································································

  final func toMany_yName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xNameUnit' stored property
  //····················································································································

  private final var mObserversOf_xNameUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_xNameUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xNameUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xNameUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xNameUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xNameUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xNameUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yNameUnit' stored property
  //····················································································································

  private final var mObserversOf_yNameUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_yNameUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yNameUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yNameUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yNameUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yNameUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yNameUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'zoneNumbering' stored property
  //····················································································································

  private final var mObserversOf_zoneNumbering : EBObservedObject? = nil

  //····················································································································

  final func toMany_zoneNumbering_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_zoneNumbering {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.zoneNumbering_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_zoneNumbering = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_zoneNumbering_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_zoneNumbering?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObject? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'rect' transient property
  //····················································································································

  private final var mObserversOf_rect : EBObservedObject? = nil

  //····················································································································

  final func toMany_rect_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_rect {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.rect_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_rect = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_rect_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_rect?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'forbiddenPadArray' transient property
  //····················································································································

  private final var mObserversOf_forbiddenPadArray : EBObservedObject? = nil

  //····················································································································

  final func toMany_forbiddenPadArray_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_forbiddenPadArray {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.forbiddenPadArray_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_forbiddenPadArray = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_forbiddenPadArray_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_forbiddenPadArray?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'emptyForbiddenPadArray' transient property
  //····················································································································

  private final var mObserversOf_emptyForbiddenPadArray : EBObservedObject? = nil

  //····················································································································

  final func toMany_emptyForbiddenPadArray_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_emptyForbiddenPadArray {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.emptyForbiddenPadArray_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_emptyForbiddenPadArray = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_emptyForbiddenPadArray_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_emptyForbiddenPadArray?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PackageZone is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_PackageZone <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageZone {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <PackageZone> ()
      for superObject in newModelArray.values {
        if let object = superObject as? PackageZone {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [PackageZone] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <PackageZone> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageZone : ReadOnlyArrayOf_PackageZone {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PackageZone>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PackageZone is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PackageZone : ReadWriteArrayOf_PackageZone, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PackageZone> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PackageZone)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <PackageZone> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! PackageZone)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PackageZone>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PackageZone>,
                                 addedSet inAddedSet : EBReferenceSet <PackageZone>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PackageZone] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PackageZone>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <PackageZone> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PackageZone) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PackageZone) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PackageZone is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

