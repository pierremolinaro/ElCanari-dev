//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PackageRoot : ReadOnlyAbstractObjectProperty <PackageRoot> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.selectedPageIndex_property.removeEBObserver (self.selectedPageIndex_property) // Stored property
      oldValue.selectedInspector_property.removeEBObserver (self.selectedInspector_property) // Stored property
      oldValue.comments_property.removeEBObserver (self.comments_property) // Stored property
      oldValue.program_property.removeEBObserver (self.program_property) // Stored property
      oldValue.horizontalFlip_property.removeEBObserver (self.horizontalFlip_property) // Stored property
      oldValue.verticalFlip_property.removeEBObserver (self.verticalFlip_property) // Stored property
      oldValue.gridStyle_property.removeEBObserver (self.gridStyle_property) // Stored property
      oldValue.gridStep_property.removeEBObserver (self.gridStep_property) // Stored property
      oldValue.gridStepUnit_property.removeEBObserver (self.gridStepUnit_property) // Stored property
      oldValue.gridDisplayFactor_property.removeEBObserver (self.gridDisplayFactor_property) // Stored property
      oldValue.zoom_property.removeEBObserver (self.zoom_property) // Stored property
      oldValue.mModelImageOpacity_property.removeEBObserver (self.mModelImageOpacity_property) // Stored property
      oldValue.mModelImagePageHorizontalFlip_property.removeEBObserver (self.mModelImagePageHorizontalFlip_property) // Stored property
      oldValue.mModelImagePageVerticalFlip_property.removeEBObserver (self.mModelImagePageVerticalFlip_property) // Stored property
      oldValue.mModelImagePageGridStyle_property.removeEBObserver (self.mModelImagePageGridStyle_property) // Stored property
      oldValue.mModelImagePageGridStep_property.removeEBObserver (self.mModelImagePageGridStep_property) // Stored property
      oldValue.mModelImagePageGridStepUnit_property.removeEBObserver (self.mModelImagePageGridStepUnit_property) // Stored property
      oldValue.mModelImagePageGridDisplayFactor_property.removeEBObserver (self.mModelImagePageGridDisplayFactor_property) // Stored property
      oldValue.mModelImagePageZoom_property.removeEBObserver (self.mModelImagePageZoom_property) // Stored property
      oldValue.mModelImagePageXPlacardUnit_property.removeEBObserver (self.mModelImagePageXPlacardUnit_property) // Stored property
      oldValue.mModelImagePageYPlacardUnit_property.removeEBObserver (self.mModelImagePageYPlacardUnit_property) // Stored property
      oldValue.mModelImageSecondPointXUnit_property.removeEBObserver (self.mModelImageSecondPointXUnit_property) // Stored property
      oldValue.mModelImageSecondPointYUnit_property.removeEBObserver (self.mModelImageSecondPointYUnit_property) // Stored property
      oldValue.mModelImageFirstPointXOnLock_property.removeEBObserver (self.mModelImageFirstPointXOnLock_property) // Stored property
      oldValue.mModelImageFirstPointYOnLock_property.removeEBObserver (self.mModelImageFirstPointYOnLock_property) // Stored property
      oldValue.mModelImagePointsDxOnLock_property.removeEBObserver (self.mModelImagePointsDxOnLock_property) // Stored property
      oldValue.mModelImagePointsDyOnLock_property.removeEBObserver (self.mModelImagePointsDyOnLock_property) // Stored property
      oldValue.mModelImageScale_property.removeEBObserver (self.mModelImageScale_property) // Stored property
      oldValue.mModelImageRotationInRadians_property.removeEBObserver (self.mModelImageRotationInRadians_property) // Stored property
      oldValue.mDimensionUnitFirstModelPointX_property.removeEBObserver (self.mDimensionUnitFirstModelPointX_property) // Stored property
      oldValue.mDimensionUnitFirstModelPointY_property.removeEBObserver (self.mDimensionUnitFirstModelPointY_property) // Stored property
      oldValue.mDimensionUnitSecondModelPointDx_property.removeEBObserver (self.mDimensionUnitSecondModelPointDx_property) // Stored property
      oldValue.mDimensionUnitSecondModelPointDy_property.removeEBObserver (self.mDimensionUnitSecondModelPointDy_property) // Stored property
      oldValue.mModelPointsCircleRadius_property.removeEBObserver (self.mModelPointsCircleRadius_property) // Stored property
      oldValue.mPointsAreLocked_property.removeEBObserver (self.mPointsAreLocked_property) // Stored property
      oldValue.knobSizeMultpliedByTen_property.removeEBObserver (self.knobSizeMultpliedByTen_property) // Stored property
      oldValue.padNumbering_property.removeEBObserver (self.padNumbering_property) // Stored property
      oldValue.counterClockNumberingStartAngle_property.removeEBObserver (self.counterClockNumberingStartAngle_property) // Stored property
      oldValue.xPlacardUnit_property.removeEBObserver (self.xPlacardUnit_property) // Stored property
      oldValue.yPlacardUnit_property.removeEBObserver (self.yPlacardUnit_property) // Stored property
      oldValue.mModelImageData_property.removeEBObserver (self.mModelImageData_property) // Stored property
      oldValue.freePadNumbering_property.removeEBObserver (self.freePadNumbering_property) // Transient property
      oldValue.counterClockNumbering_property.removeEBObserver (self.counterClockNumbering_property) // Transient property
      oldValue.gridStepMultipliedByDisplayFactor_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property) // Transient property
      oldValue.secondPointX_property.removeEBObserver (self.secondPointX_property) // Transient property
      oldValue.secondPointY_property.removeEBObserver (self.secondPointY_property) // Transient property
      oldValue.lockImageView_property.removeEBObserver (self.lockImageView_property) // Transient property
      oldValue.padNumberDisplay_property.removeEBObserver (self.padNumberDisplay_property) // Transient property
      oldValue.backgroundImagePageBackgroundDisplay_property.removeEBObserver (self.backgroundImagePageBackgroundDisplay_property) // Transient property
      oldValue.modelImageSizeString_property.removeEBObserver (self.modelImageSizeString_property) // Transient property
      oldValue.hasModelImage_property.removeEBObserver (self.hasModelImage_property) // Transient property
      oldValue.masterPadObjectIndexArray_property.removeEBObserver (self.masterPadObjectIndexArray_property) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.selectedPageIndex_property.addEBObserver (self.selectedPageIndex_property) // Stored property
      newValue.selectedInspector_property.addEBObserver (self.selectedInspector_property) // Stored property
      newValue.comments_property.addEBObserver (self.comments_property) // Stored property
      newValue.program_property.addEBObserver (self.program_property) // Stored property
      newValue.horizontalFlip_property.addEBObserver (self.horizontalFlip_property) // Stored property
      newValue.verticalFlip_property.addEBObserver (self.verticalFlip_property) // Stored property
      newValue.gridStyle_property.addEBObserver (self.gridStyle_property) // Stored property
      newValue.gridStep_property.addEBObserver (self.gridStep_property) // Stored property
      newValue.gridStepUnit_property.addEBObserver (self.gridStepUnit_property) // Stored property
      newValue.gridDisplayFactor_property.addEBObserver (self.gridDisplayFactor_property) // Stored property
      newValue.zoom_property.addEBObserver (self.zoom_property) // Stored property
      newValue.mModelImageOpacity_property.addEBObserver (self.mModelImageOpacity_property) // Stored property
      newValue.mModelImagePageHorizontalFlip_property.addEBObserver (self.mModelImagePageHorizontalFlip_property) // Stored property
      newValue.mModelImagePageVerticalFlip_property.addEBObserver (self.mModelImagePageVerticalFlip_property) // Stored property
      newValue.mModelImagePageGridStyle_property.addEBObserver (self.mModelImagePageGridStyle_property) // Stored property
      newValue.mModelImagePageGridStep_property.addEBObserver (self.mModelImagePageGridStep_property) // Stored property
      newValue.mModelImagePageGridStepUnit_property.addEBObserver (self.mModelImagePageGridStepUnit_property) // Stored property
      newValue.mModelImagePageGridDisplayFactor_property.addEBObserver (self.mModelImagePageGridDisplayFactor_property) // Stored property
      newValue.mModelImagePageZoom_property.addEBObserver (self.mModelImagePageZoom_property) // Stored property
      newValue.mModelImagePageXPlacardUnit_property.addEBObserver (self.mModelImagePageXPlacardUnit_property) // Stored property
      newValue.mModelImagePageYPlacardUnit_property.addEBObserver (self.mModelImagePageYPlacardUnit_property) // Stored property
      newValue.mModelImageSecondPointXUnit_property.addEBObserver (self.mModelImageSecondPointXUnit_property) // Stored property
      newValue.mModelImageSecondPointYUnit_property.addEBObserver (self.mModelImageSecondPointYUnit_property) // Stored property
      newValue.mModelImageFirstPointXOnLock_property.addEBObserver (self.mModelImageFirstPointXOnLock_property) // Stored property
      newValue.mModelImageFirstPointYOnLock_property.addEBObserver (self.mModelImageFirstPointYOnLock_property) // Stored property
      newValue.mModelImagePointsDxOnLock_property.addEBObserver (self.mModelImagePointsDxOnLock_property) // Stored property
      newValue.mModelImagePointsDyOnLock_property.addEBObserver (self.mModelImagePointsDyOnLock_property) // Stored property
      newValue.mModelImageScale_property.addEBObserver (self.mModelImageScale_property) // Stored property
      newValue.mModelImageRotationInRadians_property.addEBObserver (self.mModelImageRotationInRadians_property) // Stored property
      newValue.mDimensionUnitFirstModelPointX_property.addEBObserver (self.mDimensionUnitFirstModelPointX_property) // Stored property
      newValue.mDimensionUnitFirstModelPointY_property.addEBObserver (self.mDimensionUnitFirstModelPointY_property) // Stored property
      newValue.mDimensionUnitSecondModelPointDx_property.addEBObserver (self.mDimensionUnitSecondModelPointDx_property) // Stored property
      newValue.mDimensionUnitSecondModelPointDy_property.addEBObserver (self.mDimensionUnitSecondModelPointDy_property) // Stored property
      newValue.mModelPointsCircleRadius_property.addEBObserver (self.mModelPointsCircleRadius_property) // Stored property
      newValue.mPointsAreLocked_property.addEBObserver (self.mPointsAreLocked_property) // Stored property
      newValue.knobSizeMultpliedByTen_property.addEBObserver (self.knobSizeMultpliedByTen_property) // Stored property
      newValue.padNumbering_property.addEBObserver (self.padNumbering_property) // Stored property
      newValue.counterClockNumberingStartAngle_property.addEBObserver (self.counterClockNumberingStartAngle_property) // Stored property
      newValue.xPlacardUnit_property.addEBObserver (self.xPlacardUnit_property) // Stored property
      newValue.yPlacardUnit_property.addEBObserver (self.yPlacardUnit_property) // Stored property
      newValue.mModelImageData_property.addEBObserver (self.mModelImageData_property) // Stored property
      newValue.freePadNumbering_property.addEBObserver (self.freePadNumbering_property) // Transient property
      newValue.counterClockNumbering_property.addEBObserver (self.counterClockNumbering_property) // Transient property
      newValue.gridStepMultipliedByDisplayFactor_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property) // Transient property
      newValue.secondPointX_property.addEBObserver (self.secondPointX_property) // Transient property
      newValue.secondPointY_property.addEBObserver (self.secondPointY_property) // Transient property
      newValue.lockImageView_property.addEBObserver (self.lockImageView_property) // Transient property
      newValue.padNumberDisplay_property.addEBObserver (self.padNumberDisplay_property) // Transient property
      newValue.backgroundImagePageBackgroundDisplay_property.addEBObserver (self.backgroundImagePageBackgroundDisplay_property) // Transient property
      newValue.modelImageSizeString_property.addEBObserver (self.modelImageSizeString_property) // Transient property
      newValue.hasModelImage_property.addEBObserver (self.hasModelImage_property) // Transient property
      newValue.masterPadObjectIndexArray_property.addEBObserver (self.masterPadObjectIndexArray_property) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  final let selectedPageIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  final let selectedInspector_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  final let comments_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  final let program_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  final let horizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  final let verticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  final let gridStyle_property = EBGenericTransientProperty <GridStyle?> ()

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  final let gridStep_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  final let gridStepUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  final let gridDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  final let zoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageOpacity' stored property
  //····················································································································

  final let mModelImageOpacity_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mModelImagePageHorizontalFlip' stored property
  //····················································································································

  final let mModelImagePageHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mModelImagePageVerticalFlip' stored property
  //····················································································································

  final let mModelImagePageVerticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mModelImagePageGridStyle' stored property
  //····················································································································

  final let mModelImagePageGridStyle_property = EBGenericTransientProperty <GridStyle?> ()

  //····················································································································
  //   Observers of 'mModelImagePageGridStep' stored property
  //····················································································································

  final let mModelImagePageGridStep_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePageGridStepUnit' stored property
  //····················································································································

  final let mModelImagePageGridStepUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePageGridDisplayFactor' stored property
  //····················································································································

  final let mModelImagePageGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePageZoom' stored property
  //····················································································································

  final let mModelImagePageZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePageXPlacardUnit' stored property
  //····················································································································

  final let mModelImagePageXPlacardUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePageYPlacardUnit' stored property
  //····················································································································

  final let mModelImagePageYPlacardUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageSecondPointXUnit' stored property
  //····················································································································

  final let mModelImageSecondPointXUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageSecondPointYUnit' stored property
  //····················································································································

  final let mModelImageSecondPointYUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageFirstPointXOnLock' stored property
  //····················································································································

  final let mModelImageFirstPointXOnLock_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageFirstPointYOnLock' stored property
  //····················································································································

  final let mModelImageFirstPointYOnLock_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePointsDxOnLock' stored property
  //····················································································································

  final let mModelImagePointsDxOnLock_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImagePointsDyOnLock' stored property
  //····················································································································

  final let mModelImagePointsDyOnLock_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageScale' stored property
  //····················································································································

  final let mModelImageScale_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mModelImageRotationInRadians' stored property
  //····················································································································

  final let mModelImageRotationInRadians_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointX' stored property
  //····················································································································

  final let mDimensionUnitFirstModelPointX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointY' stored property
  //····················································································································

  final let mDimensionUnitFirstModelPointY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDx' stored property
  //····················································································································

  final let mDimensionUnitSecondModelPointDx_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDy' stored property
  //····················································································································

  final let mDimensionUnitSecondModelPointDy_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelPointsCircleRadius' stored property
  //····················································································································

  final let mModelPointsCircleRadius_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mPointsAreLocked' stored property
  //····················································································································

  final let mPointsAreLocked_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'knobSizeMultpliedByTen' stored property
  //····················································································································

  final let knobSizeMultpliedByTen_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  final let padNumbering_property = EBGenericTransientProperty <PadNumbering?> ()

  //····················································································································
  //   Observers of 'counterClockNumberingStartAngle' stored property
  //····················································································································

  final let counterClockNumberingStartAngle_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  final let xPlacardUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  final let yPlacardUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mModelImageData' stored property
  //····················································································································

  final let mModelImageData_property = EBGenericTransientProperty <Data?> ()

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  final let freePadNumbering_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'counterClockNumbering' transient property
  //····················································································································

  final let counterClockNumbering_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  final let gridStepMultipliedByDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'secondPointX' transient property
  //····················································································································

  final let secondPointX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'secondPointY' transient property
  //····················································································································

  final let secondPointY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'lockImageView' transient property
  //····················································································································

  final let lockImageView_property = EBGenericTransientProperty <NSImage?> ()

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  final let padNumberDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'backgroundImagePageBackgroundDisplay' transient property
  //····················································································································

  final let backgroundImagePageBackgroundDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'modelImageSizeString' transient property
  //····················································································································

  final let modelImageSizeString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'hasModelImage' transient property
  //····················································································································

  final let hasModelImage_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'masterPadObjectIndexArray' transient property
  //····················································································································

  final let masterPadObjectIndexArray_property = EBGenericTransientProperty <IntArray?> ()

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observable toMany property: mModelImageObjects
  //····················································································································

  private final var mObserversOf_mModelImageObjects = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mModelImageObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mModelImageObjects.insert (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mModelImageObjects.remove (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageObjects
  //····················································································································

  private final var mObserversOf_packageObjects = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageObjects.insert (inObserver)
    if let object = self.propval {
      object.packageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageObjects.remove (inObserver)
    if let object = self.propval {
      object.packageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packagePads
  //····················································································································

  private final var mObserversOf_packagePads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packagePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packagePads.insert (inObserver)
    if let object = self.propval {
      object.packagePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packagePads.remove (inObserver)
    if let object = self.propval {
      object.packagePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageSlavePads
  //····················································································································

  private final var mObserversOf_packageSlavePads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageSlavePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageSlavePads.insert (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageSlavePads (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageSlavePads.remove (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageZones
  //····················································································································

  private final var mObserversOf_packageZones = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageZones (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageZones.insert (inObserver)
    if let object = self.propval {
      object.packageZones_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageZones (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_packageZones.remove (inObserver)
    if let object = self.propval {
      object.packageZones_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure selectedPageIndex simple stored property
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.selectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectedInspector simple stored property
    self.selectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.selectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure comments simple stored property
    self.comments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure program simple stored property
    self.program_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.program_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure horizontalFlip simple stored property
    self.horizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.horizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure verticalFlip simple stored property
    self.verticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.verticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gridStyle simple stored property
    self.gridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.gridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gridStep simple stored property
    self.gridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.gridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gridStepUnit simple stored property
    self.gridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.gridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gridDisplayFactor simple stored property
    self.gridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.gridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageOpacity simple stored property
    self.mModelImageOpacity_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageOpacity_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageHorizontalFlip simple stored property
    self.mModelImagePageHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageVerticalFlip simple stored property
    self.mModelImagePageVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageGridStyle simple stored property
    self.mModelImagePageGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageGridStep simple stored property
    self.mModelImagePageGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageGridStepUnit simple stored property
    self.mModelImagePageGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageGridDisplayFactor simple stored property
    self.mModelImagePageGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageZoom simple stored property
    self.mModelImagePageZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageXPlacardUnit simple stored property
    self.mModelImagePageXPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageXPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePageYPlacardUnit simple stored property
    self.mModelImagePageYPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePageYPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageSecondPointXUnit simple stored property
    self.mModelImageSecondPointXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageSecondPointXUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageSecondPointYUnit simple stored property
    self.mModelImageSecondPointYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageSecondPointYUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageFirstPointXOnLock simple stored property
    self.mModelImageFirstPointXOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageFirstPointXOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageFirstPointYOnLock simple stored property
    self.mModelImageFirstPointYOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageFirstPointYOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePointsDxOnLock simple stored property
    self.mModelImagePointsDxOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePointsDxOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImagePointsDyOnLock simple stored property
    self.mModelImagePointsDyOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImagePointsDyOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageScale simple stored property
    self.mModelImageScale_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageScale_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageRotationInRadians simple stored property
    self.mModelImageRotationInRadians_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageRotationInRadians_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDimensionUnitFirstModelPointX simple stored property
    self.mDimensionUnitFirstModelPointX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDimensionUnitFirstModelPointX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDimensionUnitFirstModelPointY simple stored property
    self.mDimensionUnitFirstModelPointY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDimensionUnitFirstModelPointY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDimensionUnitSecondModelPointDx simple stored property
    self.mDimensionUnitSecondModelPointDx_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDimensionUnitSecondModelPointDx_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDimensionUnitSecondModelPointDy simple stored property
    self.mDimensionUnitSecondModelPointDy_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDimensionUnitSecondModelPointDy_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelPointsCircleRadius simple stored property
    self.mModelPointsCircleRadius_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelPointsCircleRadius_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPointsAreLocked simple stored property
    self.mPointsAreLocked_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPointsAreLocked_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure knobSizeMultpliedByTen simple stored property
    self.knobSizeMultpliedByTen_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.knobSizeMultpliedByTen_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure padNumbering simple stored property
    self.padNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.padNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure counterClockNumberingStartAngle simple stored property
    self.counterClockNumberingStartAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.counterClockNumberingStartAngle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure xPlacardUnit simple stored property
    self.xPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.xPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure yPlacardUnit simple stored property
    self.yPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.yPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mModelImageData simple stored property
    self.mModelImageData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mModelImageData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure freePadNumbering transient property
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.freePadNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure counterClockNumbering transient property
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.counterClockNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure gridStepMultipliedByDisplayFactor transient property
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.gridStepMultipliedByDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure secondPointX transient property
    self.secondPointX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.secondPointX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure secondPointY transient property
    self.secondPointY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.secondPointY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure lockImageView transient property
    self.lockImageView_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.lockImageView_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure padNumberDisplay transient property
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.padNumberDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backgroundImagePageBackgroundDisplay transient property
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.backgroundImagePageBackgroundDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure modelImageSizeString transient property
    self.modelImageSizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.modelImageSizeString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure hasModelImage transient property
    self.hasModelImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.hasModelImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure masterPadObjectIndexArray transient property
    self.masterPadObjectIndexArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.masterPadObjectIndexArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PackageRoot : ReadOnlyObject_PackageRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! PackageRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! PackageRoot
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageRoot? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : PackageRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

