//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_PackageArc_selectionDisplay (
       _ self_xCenter : Int,                
       _ self_yCenter : Int,                
       _ self_radius : Int,                 
       _ self_startAngle : Int,             
       _ self_arcAngle : Int,               
       _ self_startTangent : Int,           
       _ self_endTangent : Int,             
       _ self_pathIsClosed : Bool,          
       _ self_PackageObject_knobSize : Double
) -> EBShape {
//--- START OF USER ZONE 2
    let center = CanariPoint (x: self_xCenter, y: self_yCenter).cocoaPoint
    let radius = canariUnitToCocoa (self_radius)
    let startTangentLength = canariUnitToCocoa (self_startTangent)
    let endTangentLength = canariUnitToCocoa (self_endTangent)
    let startAngle = CGFloat (self_startAngle) / 1000.0
    let arcAngle = CGFloat (self_arcAngle) / 1000.0
    var bp = EBBezierPath (
      arcWithTangentFromCenter: center,
      radius: radius,
      startAngleInDegrees: startAngle,
      arcAngleInDegrees: arcAngle,
      startTangentLength: startTangentLength,
      endTangentLength: endTangentLength,
      pathIsClosed: self_pathIsClosed
    )
    bp.lineWidth = 0.25
    bp.lineCapStyle = .round
    var shape = EBShape ()
    shape.add (stroke: [bp], NSColor.cyan)
  //--- Add center knob
    shape.add (knobAt:  center, knobIndex: PACKAGE_ARC_CENTER, .rect, CGFloat (self_PackageObject_knobSize))
  //--- Add radius knob
    var t = NSAffineTransform ()
    t.translateX (by: center.x, yBy: center.y)
    t.rotate (byDegrees: startAngle + arcAngle / 2.0)
    let radiusKnob = t.transform (NSPoint (x: radius, y: 0.0))
    shape.add (knobAt:  radiusKnob, knobIndex: PACKAGE_ARC_RADIUS, .diamond, CGFloat (self_PackageObject_knobSize))
  //--- Add start point knob
    t = NSAffineTransform ()
    t.translateX (by: center.x, yBy: center.y)
    t.rotate (byDegrees: startAngle)
    let startPointKnob = t.transform (NSPoint (x: radius, y: 0.0))
    shape.add (knobAt:  startPointKnob, knobIndex: PACKAGE_ARC_START_ANGLE, .diamond, CGFloat (self_PackageObject_knobSize))
  //--- Add end point knob
    t = NSAffineTransform ()
    t.translateX (by: center.x, yBy: center.y)
    t.rotate (byDegrees: startAngle + arcAngle)
    let endPointKnob = t.transform (NSPoint (x: radius, y: 0.0))
    shape.add (knobAt:  endPointKnob, knobIndex: PACKAGE_ARC_END_ANGLE, .diamond, CGFloat (self_PackageObject_knobSize))
  //---
    return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
