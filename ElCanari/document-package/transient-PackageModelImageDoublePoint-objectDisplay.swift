//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1

let IMAGE_MODEL_POINT_CIRCLE_LINE_WIDTH = CGFloat (2.0)

//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_PackageModelImageDoublePoint_objectDisplay (
       _ self_mFirstX : Int,                                          
       _ self_mFirstY : Int,                                          
       _ self_mFirstColor : NSColor,                                  
       _ self_mSecondDx : Int,                                        
       _ self_mSecondDy : Int,                                        
       _ self_mSecondColor : NSColor,                                 
       _ self_mRoot_mModelPointsCircleRadius : Int?,                  
       _ self_mRoot_mPointsAreLocked : Bool?
) -> EBShape {
//--- START OF USER ZONE 2
  var shape = EBShape ()
  let firstPointRadiusInCocoaUnit = CGFloat (self_mRoot_mModelPointsCircleRadius ?? 10)
  let secondPointRadiusInCocoaUnit = CGFloat (self_mRoot_mModelPointsCircleRadius ?? 10)
  let firstX = canariUnitToCocoa (self_mFirstX)
  let firstY = canariUnitToCocoa (self_mFirstY)
  let firstR = NSRect (center: NSPoint (x: firstX, y: firstY), size: NSSize (width: firstPointRadiusInCocoaUnit * 2.0, height: firstPointRadiusInCocoaUnit * 2.0))
  let secondX = canariUnitToCocoa (self_mFirstX + self_mSecondDx)
  let secondY = canariUnitToCocoa (self_mFirstY + self_mSecondDy)
  let secondR = NSRect (center: NSPoint (x: secondX, y: secondY), size: NSSize (width: secondPointRadiusInCocoaUnit * 2.0, height: secondPointRadiusInCocoaUnit * 2.0))
  if let locked = self_mRoot_mPointsAreLocked, locked {
    shape.add (filled: [EBBezierPath (ovalIn: firstR)], self_mFirstColor)
    shape.add (filled: [EBBezierPath (ovalIn: secondR)], self_mSecondColor)
  }else{
    let firstPointDelta = firstPointRadiusInCocoaUnit / sqrt (2.0)
    let secondPointDelta = secondPointRadiusInCocoaUnit / sqrt (2.0)
  //--- First Point
    var lines = EBBezierPath ()
    lines.lineCapStyle = .round
    lines.move (to: NSPoint (x: firstX - firstPointDelta, y: firstY - firstPointDelta))
    lines.relativeLine (to: NSPoint (x: firstPointDelta * 2.0, y: firstPointDelta * 2.0))
    lines.move (to: NSPoint (x: firstX + firstPointDelta, y: firstY - firstPointDelta))
    lines.relativeLine (to: NSPoint (x: -firstPointDelta * 2.0, y: firstPointDelta * 2.0))
    lines.lineWidth = 0.0
    var circle = EBBezierPath (ovalIn: firstR)
    circle.lineWidth = IMAGE_MODEL_POINT_CIRCLE_LINE_WIDTH
    shape.add (filled: [circle], .clear)
    shape.add (stroke: [lines, circle], self_mFirstColor)
  //--- Second Point
    lines = EBBezierPath ()
    lines.lineCapStyle = .round
    lines.move (to: NSPoint (x: secondX - secondPointDelta, y: secondY - secondPointDelta))
    lines.relativeLine (to: NSPoint (x: secondPointDelta * 2.0, y: secondPointDelta * 2.0))
    lines.move (to: NSPoint (x: secondX + secondPointDelta, y: secondY - secondPointDelta))
    lines.relativeLine (to: NSPoint (x: -secondPointDelta * 2.0, y: secondPointDelta * 2.0))
    lines.lineWidth = 0.0
    circle = EBBezierPath (ovalIn: secondR)
    circle.lineWidth = IMAGE_MODEL_POINT_CIRCLE_LINE_WIDTH
    shape.add (filled: [circle], .clear)
    shape.add (stroke: [lines, circle], self_mSecondColor)
  }
  return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
