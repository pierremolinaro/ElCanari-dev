//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension AutoLayoutProjectDocument {
  final func configure_addLineButton (_ inOutlet : AutoLayoutDragSourceButton) {
//--- START OF USER ZONE 2
    inOutlet.register (
      draggedType: kDragAndDropBoardLine,
      draggedObjectFactory: { return (BoardLine (nil), NSDictionary ()) },
      scaleProvider: self.boardObjectsController
    )
    inOutlet.image = NSImage (named: "line-in-symbol")
    inOutlet.imageScaling = .scaleProportionallyUpOrDown
    let menu = EBChoiceMenu ()
    menu.addItem (withTitle: "Legend, Front Side", action: nil, keyEquivalent: "")
    menu.addItem (withTitle: "Legend, Back Side",  action: nil, keyEquivalent: "")
    menu.bind_selectedIndex (self.rootObject.mBoardLayerForNewLine_property)
    inOutlet.mRightContextualMenu = menu
//--- END OF USER ZONE 2
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
