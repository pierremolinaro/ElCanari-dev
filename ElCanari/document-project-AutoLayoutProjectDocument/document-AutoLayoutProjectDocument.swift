//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutProjectDocument) class AutoLayoutProjectDocument : AutoLayoutProjectDocumentSuperClass {
  
  //····················································································································
  //   Array controller: netClassController
  //····················································································································

  final var netClassController = Controller_AutoLayoutProjectDocument_netClassController ()

  //····················································································································
  //   Array controller: componentController
  //····················································································································

  final var componentController = Controller_AutoLayoutProjectDocument_componentController ()

  //····················································································································
  //   Array controller: projectFontController
  //····················································································································

  final var projectFontController = Controller_AutoLayoutProjectDocument_projectFontController ()

  //····················································································································
  //   Array controller: projectDeviceController
  //····················································································································

  final var projectDeviceController = Controller_AutoLayoutProjectDocument_projectDeviceController ()

  //····················································································································
  //   Array controller: schematicObjectsController
  //····················································································································

  final var schematicObjectsController = Controller_AutoLayoutProjectDocument_schematicObjectsController ()

  //····················································································································
  //   Selection controller: wireInSchematicSelectionController
  //····················································································································

  final var wireInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_wireInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: ncInSchematicSelectionController
  //····················································································································

  final var ncInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_ncInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: schematicLabelSelectionController
  //····················································································································

  final var schematicLabelSelectionController = SelectionController_AutoLayoutProjectDocument_schematicLabelSelectionController ()

  //····················································································································
  //   Selection controller: commentInSchematicSelectionController
  //····················································································································

  final var commentInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_commentInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: componentSymbolSelectionController
  //····················································································································

  final var componentSymbolSelectionController = SelectionController_AutoLayoutProjectDocument_componentSymbolSelectionController ()

  //····················································································································
  //   Array controller: boardCurveObjectsController
  //····················································································································

  final var boardCurveObjectsController = Controller_AutoLayoutProjectDocument_boardCurveObjectsController ()

  //····················································································································
  //   Selection controller: boardCurveSelectionController
  //····················································································································

  final var boardCurveSelectionController = SelectionController_AutoLayoutProjectDocument_boardCurveSelectionController ()

  //····················································································································
  //   Array controller: boardObjectsController
  //····················································································································

  final var boardObjectsController = Controller_AutoLayoutProjectDocument_boardObjectsController ()

  //····················································································································
  //   Selection controller: boardTrackSelectionController
  //····················································································································

  final var boardTrackSelectionController = SelectionController_AutoLayoutProjectDocument_boardTrackSelectionController ()

  //····················································································································
  //   Selection controller: boardConnectorSelectionController
  //····················································································································

  final var boardConnectorSelectionController = SelectionController_AutoLayoutProjectDocument_boardConnectorSelectionController ()

  //····················································································································
  //   Selection controller: boardLineSelectionController
  //····················································································································

  final var boardLineSelectionController = SelectionController_AutoLayoutProjectDocument_boardLineSelectionController ()

  //····················································································································
  //   Selection controller: restrictRectangleSelectionController
  //····················································································································

  final var restrictRectangleSelectionController = SelectionController_AutoLayoutProjectDocument_restrictRectangleSelectionController ()

  //····················································································································
  //   Selection controller: boardTextSelectionController
  //····················································································································

  final var boardTextSelectionController = SelectionController_AutoLayoutProjectDocument_boardTextSelectionController ()

  //····················································································································
  //   Selection controller: componentInBoardSelectionController
  //····················································································································

  final var componentInBoardSelectionController = SelectionController_AutoLayoutProjectDocument_componentInBoardSelectionController ()

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  final var mDataController = Controller_AutoLayoutProjectDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  final var mDataSelection = SelectionController_AutoLayoutProjectDocument_mDataSelection ()

  //····················································································································
  //   Transient property: netCount
  //····················································································································

  final let netCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netCount : Int? {
    switch self.netCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetDisplayOneNet
  //····················································································································

  final let rastnetDisplayOneNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var rastnetDisplayOneNet : Bool? {
    switch self.rastnetDisplayOneNet_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetDisplayComponentNet
  //····················································································································

  final let rastnetDisplayComponentNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var rastnetDisplayComponentNet : Bool? {
    switch self.rastnetDisplayComponentNet_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //····················································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    switch self.incorrectDocumentFileDetailedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //····················································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    switch self.documentFileShouldBeRenamedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceSymbolNames
  //····················································································································

  final let selectedDeviceSymbolNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  final var selectedDeviceSymbolNames : TwoStringArray? {
    switch self.selectedDeviceSymbolNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDevicePackageNames
  //····················································································································

  final let selectedDevicePackageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDevicePackageNames : StringArray? {
    switch self.selectedDevicePackageNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceNames
  //····················································································································

  final let selectedDeviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDeviceNames : StringArray? {
    switch self.selectedDeviceNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveNetClasses
  //····················································································································

  final let canRemoveNetClasses_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveNetClasses : Bool? {
    switch self.canRemoveNetClasses_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCountString
  //····················································································································

  final let netCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var netCountString : String? {
    switch self.netCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicSheetOrientationIsCustom
  //····················································································································

  final let schematicSheetOrientationIsCustom_property = EBTransientProperty_Bool ()

  //····················································································································

  final var schematicSheetOrientationIsCustom : Bool? {
    switch self.schematicSheetOrientationIsCustom_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetShape
  //····················································································································

  final let rastnetShape_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var rastnetShape : EBShape? {
    switch self.rastnetShape_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  final let documentIsUnnamed_property = EBTransientProperty_Bool ()

  //····················································································································

  final var documentIsUnnamed : Bool? {
    switch self.documentIsUnnamed_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtension
  //····················································································································

  final let emptyDrillFileExtension_property = EBTransientProperty_Bool ()

  //····················································································································

  final var emptyDrillFileExtension : Bool? {
    switch self.emptyDrillFileExtension_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentCount
  //····················································································································

  final let componentCount_property = EBTransientProperty_String ()

  //····················································································································

  final var componentCount : String? {
    switch self.componentCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canChangePackage
  //····················································································································

  final let canChangePackage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canChangePackage : Bool? {
    switch self.canChangePackage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedFonts
  //····················································································································

  final let canRemoveSelectedFonts_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedFonts : Bool? {
    switch self.canRemoveSelectedFonts_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedDevices
  //····················································································································

  final let canRemoveSelectedDevices_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedDevices : Bool? {
    switch self.canRemoveSelectedDevices_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbolsCount
  //····················································································································

  final let unplacedSymbolsCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var unplacedSymbolsCount : Int? {
    switch self.unplacedSymbolsCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbolsCountString
  //····················································································································

  final let unplacedSymbolsCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var unplacedSymbolsCountString : String? {
    switch self.unplacedSymbolsCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardOutlineOverDisplay
  //····················································································································

  final let boardOutlineOverDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var boardOutlineOverDisplay : EBShape? {
    switch self.boardOutlineOverDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackageCount
  //····················································································································

  final let unplacedPackageCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var unplacedPackageCount : Int? {
    switch self.unplacedPackageCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackagesCountString
  //····················································································································

  final let unplacedPackagesCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var unplacedPackagesCountString : String? {
    switch self.unplacedPackagesCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackagesMessageString
  //····················································································································

  final let unplacedPackagesMessageString_property = EBTransientProperty_String ()

  //····················································································································

  final var unplacedPackagesMessageString : String? {
    switch self.unplacedPackagesMessageString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtensionImage
  //····················································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    switch self.emptyDrillFileExtensionImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: generatedFileCountString
  //····················································································································

  final let generatedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var generatedFileCountString : String? {
    switch self.generatedFileCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  final var mAddBottomSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddLabelToAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddLeftLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddNCSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddNCToAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddRightLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddTopLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddWirePointSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mBoardView : AutoLayoutGraphicView? = nil
  final var mConnectAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mConnectSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mDisconnectAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mDisconnectSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mERCIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mERCLogTextView : AutoLayoutTextObserverView? = nil
  final var mExchangeSymbolSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mNetInfoTableView : AutoLayoutCanariNetDescriptionTableView? = nil
  weak final var mProductFileGenerationLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  final var mRemoveWirePointSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mSchematicsView : AutoLayoutGraphicView? = nil
  final var mShowHideSymbolValueSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mUnplacedPackageTableView : AutoLayoutCanariDragSourceTableView? = nil
  final var mUnplacedSymbolsTableViewArray = EBWeakReferenceArray <AutoLayoutCanariDragSourceTableView> ()

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  //····················································································································
  //    VIEW PageMasterView
  //····················································································································

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW DocumentMainView
  //····················································································································

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let pageMasterView = self.PageMasterView ()
    let componentsPage = self.ComponentsPage ()
    let libraryPage = self.LibraryPage ()
    let schematicPage = self.SchematicPage ()
    let netClassesPage = self.NetClassesPage ()
    let netListPage = self.NetListPage ()
    let boardOutlinePage = self.BoardOutlinePage ()
    let boardContentsPage = self.BoardContentsPage ()
    let productPage = self.ProductPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Components", tooltip: "", pageView: componentsPage)
          .addPage (title: "Library", tooltip: "", pageView: libraryPage)
          .addPage (title: "Schematic", tooltip: "", pageView: schematicPage)
          .addPage (title: "Net Classes", tooltip: "", pageView: netClassesPage)
          .addPage (title: "Net List", tooltip: "", pageView: netListPage)
          .addPage (title: "Board Outline", tooltip: "", pageView: boardOutlinePage)
          .addPage (title: "Board Contents", tooltip: "", pageView: boardContentsPage)
          .addPage (title: "Product", tooltip: "", pageView: productPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small, alignment: .center)
        _ = view_0_0.appendView (view_0_0_1)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_2_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_2_0.appendView (view_0_2_0_0)
          let view_0_2_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.schematicStatusImage_property)
            .bind_tooltip (self.rootObject.schematicStatusMessage_property)
          _ = view_0_2_0.appendView (view_0_2_0_1)
          let view_0_2_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_2_0.appendView (view_0_2_0_2)
        }
        _ = view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Schematic", bold: false, size: .small, alignment: .center)
        _ = view_0_2.appendView (view_0_2_1)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
      do{
        let view_0_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_3_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_3_0.appendView (view_0_3_0_0)
          let view_0_3_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.boardStatusImage_property)
            .bind_tooltip (self.rootObject.boardStatusMessage_property)
          _ = view_0_3_0.appendView (view_0_3_0_1)
          let view_0_3_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_3_0.appendView (view_0_3_0_2)
        }
        _ = view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutStaticLabel (title: "Board", bold: false, size: .small, alignment: .center)
        _ = view_0_3.appendView (view_0_3_1)
      }
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.ercStatusImage_property)
            .bind_tooltip (self.rootObject.ercStatusMessage_property)
          _ = view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_0_4_0.appendView (view_0_4_0_2)
        }
        _ = view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "ERC", bold: false, size: .small, alignment: .center)
        _ = view_0_4.appendView (view_0_4_1)
      }
      _ = view_0.appendView (view_0_4)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW ComponentsPage
  //····················································································································

  final func ComponentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutVerticalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentCount_property)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Add Component from:", bold: true, size: .small, alignment: .left)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromFileLibraryAction (_:))
        )
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutPullDownButton (title: "Embedded Library…", size: .small)
        .expandableWidth ()
        .bind_items (self.rootObject.deviceNames_property)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromEmbeddedLibraryAction (_:))
        )
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutStaticLabel (title: "On Selected Components", bold: true, size: .small, alignment: .left)
      _ = view_0.appendView (view_0_6)
      let view_0_7 = AutoLayoutButton (title: "Duplicate", size: .small)
        .set (commandKeyEquivalent: "d")
        .expandableWidth ()
        .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.duplicateSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_7)
      let view_0_8 = AutoLayoutButton (title: "Rename…", size: .small)
        .expandableWidth ()
        .set (commandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_8)
      let view_0_9 = AutoLayoutButton (title: "Remove", size: .small)
        .expandableWidth ()
        .setDeleteKeyAsKeyEquivalent ()
        .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_9)
      let view_0_10 = AutoLayoutButton (title: "Change Package…", size: .small)
        .expandableWidth ()
        .set (controlCommandKeyEquivalent: "c")
        .bind_enabled (.prop (self.canChangePackage_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changePackageOfSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_10)
      let view_0_11 = AutoLayoutButton (title: "Change Value…", size: .small)
        .expandableWidth ()
        .set (controlCommandKeyEquivalent: "v")
        .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changeValueOfSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_11)
      let view_0_12 = AutoLayoutButton (title: "Reveal in Board", size: .small)
        .expandableWidth ()
        .set (controlCommandKeyEquivalent: "b")
        .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.revealPackageOfSelectedComponentsAction (_:))
        )
      _ = view_0.appendView (view_0_12)
      let view_0_13 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_13)
      let view_0_14 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_14)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.componentController.bind_tableView (view_1)
    _ = hStackView.appendView (view_1)
    return hStackView
  }

  //····················································································································
  //    VIEW LibraryPage
  //····················································································································

  final func LibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let libraryContentView = self.LibraryContentView ()
    let devicesInLibraryPage = self.DevicesInLibraryPage ()
    let fontsInLibraryPage = self.FontsInLibraryPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Remove Embedded Devices", size: .regular)
        .set (controlCommandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeEmbeddedDevicesAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Device and Font Versions", size: .regular)
        .set (controlCommandKeyEquivalent: "v")
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetDevicesAndFontsVersionAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Update Devices and Fonts", size: .regular)
        .set (controlCommandKeyEquivalent: "u")
        .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateDevicesAndFontsAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutSegmentedControlWithPages (documentView: libraryContentView, equalWidth: false, size: .regular)
        .addPage (title: "Devices", tooltip: "", pageView: devicesInLibraryPage)
        .addPage (title: "Fonts", tooltip: "", pageView: fontsInLibraryPage)
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = libraryContentView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW LibraryContentView
  //····················································································································

  final func LibraryContentView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW DevicesInLibraryPage
  //····················································································································

  final func DevicesInLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
      .expandableWidth ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Edit Selected Device", size: .regular)
        .set (shiftCommandKeyEquivalent: "e")
        .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editSelectedDeviceAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Selected Device Version", size: .regular)
        .set (shiftCommandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetSelectedDeviceVersionAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Device", size: .regular)
        .setDeleteKeyAsKeyEquivalent ()
        .bind_enabled (.prop (self.canRemoveSelectedDevices_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedDeviceAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Export Selected Device", size: .regular)
        .set (shiftCommandKeyEquivalent: "x")
        .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.exportSelectedDeviceAction (_:))
        )
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Update Selected Device…", size: .regular)
        .set (shiftCommandKeyEquivalent: "u")
        .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateSelectedDeviceAction (_:))
        )
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_5)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        .set (minimumWidth: 400)
      self.projectDeviceController.bind_tableView (view_1_0)
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Selected Device", bold: false, size: .regular, alignment: .center)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalSplitView ()
        do{
          let view_1_1_1_0 = AutoLayoutCanariProjectDeviceTableView (size: .regular)
            .set (minimumWidth: 150)
            .bind_array (self.selectedDeviceNames_property)
          _ = view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalSplitView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutCanariProjectDeviceSymbolTypeAndNameTableView (size: .regular)
              .set (minimumWidth: 250)
              .set (height: 200)
              .bind_array (self.selectedDeviceSymbolNames_property)
            _ = view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutCanariProjectDevicePackageTableView (size: .regular)
              .set (height: 200)
              .expandableWidth ()
              .bind_array (self.selectedDevicePackageNames_property)
            _ = view_1_1_1_1.appendView (view_1_1_1_1_1)
          }
          _ = view_1_1_1.appendView (view_1_1_1_1)
          let view_1_1_1_2 = AutoLayoutCanariProjectPinPadAssignmentTableView (size: .regular)
            .set (minimumWidth: 200)
            .bind_array (self.pinPadAssignments_property)
          _ = view_1_1_1.appendView (view_1_1_1_2)
        }
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW FontsInLibraryPage
  //····················································································································

  final func FontsInLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Add Font…", size: .regular)
        .set (shiftCommandKeyEquivalent: "a")
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addFontAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Font", size: .regular)
        .set (shiftCommandKeyEquivalent: "e")
        .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editFontAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Reset Selected Font Version", size: .regular)
        .set (shiftCommandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetFontVersionAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Update Selected Fonts", size: .regular)
        .set (shiftCommandKeyEquivalent: "u")
        .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateFontAction (_:))
        )
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Remove Selected Font", size: .regular)
        .setDeleteKeyAsKeyEquivalent ()
        .bind_enabled (.boolcmp (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .prop (self.canRemoveSelectedFonts_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeFontAction (_:))
        )
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_5)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.projectFontController.bind_tableView (view_1)
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW NetClassesPage
  //····················································································································

  final func NetClassesPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "New Net Class", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addNetClassAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Net Class", size: .regular)
        .bind_enabled (.intcmp (.prop (self.netClassController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editNetClassAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Net Class", size: .regular)
        .setDeleteKeyAsKeyEquivalent ()
        .bind_enabled (.prop (self.canRemoveNetClasses_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeNetClassAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.netClassController.bind_tableView (view_1)
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW NetListPage
  //····················································································································

  final func NetListPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .regular)
        .bind_title (self.netCountString_property)
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Rename Net…", size: .regular)
        .set (commandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameNetAction (_:))
        )
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Select Net Class…", size: .regular)
        .set (commandKeyEquivalent: "k")
        .bind_enabled (.intcmp (.prop (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.selectNetClassAction (_:))
        )
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutWarningImageView ()
        .bind_hidden (.intcmp (.prop (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutIntObserverField (bold: true, size: .regular)
        .bind_observedValue (self.rootObject.netWarningCount_property)
        .bind_hidden (.intcmp (.prop (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_5)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutCanariNetDescriptionTableView ()
        .bind_netInfo (self.rootObject.netsDescription_property)
      self.mNetInfoTableView = view_1_0 // Outlet
      self.configure_netDescriptionTableViewConfigurator (view_1_0) // Configurator
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Pins of Selected Net", bold: false, size: .regular, alignment: .center)
          .set (minWidth: 300)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        self.configure_pinsOfSelectedNetTableViewConfigurator (view_1_1_1) // Configurator
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicPage
  //····················································································································

  final func SchematicPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let schematicLateralBar = self.SchematicLateralBar ()
    let view_0 = schematicLateralBar
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 50, maxZoom: 1000)
      .bind_underObjectsDisplay (self.rootObject.schematicBackgroundDisplay_property)
      .bind_overObjectsDisplay (self.rootObject.schematicOverDisplay_property)
      .bind_horizontalFlip (self.rootObject.mSchematicHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mSchematicVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mSchematicGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mSchematicGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForSchematic_property)
      .bind_gridCrossColor (preferences_dotColorGridForSchematic_property)
      .bind_zoom (self.rootObject.mSchematicZoom_property)
      .bind_backColor (preferences_schematicBackColor_property)
      .bind_graphic_controller (self.schematicObjectsController)
    self.mSchematicsView = view_2 // Outlet
    self.configure_schematicView (view_2) // Configurator
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  //····················································································································
  //    VIEW SchematicLateralBar
  //····················································································································

  final func SchematicLateralBar () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (spacing: 0)
    let selectedSchematicElementInspectorView = self.SelectedSchematicElementInspectorView ()
    let schematicsInspectorView = self.SchematicsInspectorView ()
    let schematicHotKeysInspectorView = self.SchematicHotKeysInspectorView ()
    let insertSymbolInSchematicView = self.SchematicsInsertSymbolInSchematicView ()
    let schematicsDisplayInspectorView = self.schematicsDisplayInspectorView ()
    let schematicsSheetInspectorView = self.SchematicsSheetInspectorView ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutPullDownButton (title: "", size: .regular)
        .add (item: AutoLayoutMenuItemDescriptor (title: "Select all Connected Elements", target: self, selector: #selector (AutoLayoutProjectDocument.selectAllConnectedElementsInSchematicsAction (_:)), enableBinding: .alwaysTrue))
        .add (item: AutoLayoutMenuItemDescriptor (title: "Move Selected Elements to Sheet…", target: self, selector: #selector (AutoLayoutProjectDocument.moveSelectedToSheetInSchematicsAction (_:)), enableBinding: .alwaysTrue))
      self.configure_schematicPullDownButtonConfigurator (view_0_1) // Configurator
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Wire; hint: option click starts a new wire.")
      self.configure_addWireInschematicsButton (view_0_3) // Configurator
      _ = view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Comment")
      self.configure_addCommentInSchematicsButton (view_0_5) // Configurator
      _ = view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_6)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
    do{
      let view_1_0 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 8)
        .set (rightMargin: 8)
      do{
        let view_1_0_0 = AutoLayoutSegmentedControlWithPages (documentView: schematicsInspectorView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "", tooltip: "Selected Element Inspector", pageView: selectedSchematicElementInspectorView)
          .addPage (title: "", tooltip: "Hot Keys", pageView: schematicHotKeysInspectorView)
          .addPage (title: "", tooltip: "Insert Symbol in Schematic", pageView: insertSymbolInSchematicView)
          .addPage (image: "", tooltip: "Display Inspector", pageView: schematicsDisplayInspectorView)
          .addPage (title: "", tooltip: "Sheet Inspector", pageView: schematicsSheetInspectorView)
          .bind_selectedPage (self.rootObject.mSelectedSchematicInspector_property)
          .bind_segmentTitle (self.unplacedSymbolsCountString_property, segmentIndex:2)
        self.configure_schematicInspectorConfigurator (view_1_0_0) // Configurator
        _ = view_1_0.appendView (view_1_0_0)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = schematicsInspectorView
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicsInspectorView
  //····················································································································

  final func SchematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicHotKeysInspectorView
  //····················································································································

  final func SchematicHotKeysInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "◀︎+", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.newSchematicHotKeysInspectorAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Hot Keys", bold: true, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutStaticLabel (title: "[A] Connect all Symbol Pins", bold: false, size: .small, alignment: .left)
    self.mConnectAllSymbolPinsSchematicHotKeyTextField.append (view_1) // Outlet Array
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutStaticLabel (title: "[B] Add Bottom Label", bold: false, size: .small, alignment: .left)
    self.mAddBottomSchematicHotKeyTextField.append (view_2) // Outlet Array
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutStaticLabel (title: "[C] Connect", bold: false, size: .small, alignment: .left)
    self.mConnectSchematicHotKeyTextField.append (view_3) // Outlet Array
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutStaticLabel (title: "[D] Disconnect", bold: false, size: .small, alignment: .left)
    self.mDisconnectSchematicHotKeyTextField.append (view_4) // Outlet Array
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutStaticLabel (title: "[E] Disconnect All Symbol Pins", bold: false, size: .small, alignment: .left)
    self.mDisconnectAllSymbolPinsSchematicHotKeyTextField.append (view_5) // Outlet Array
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutStaticLabel (title: "[F] Add Label to Symbol Pins", bold: false, size: .small, alignment: .left)
    self.mAddLabelToAllSymbolPinsSchematicHotKeyTextField.append (view_6) // Outlet Array
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutStaticLabel (title: "[L] Add Left Label", bold: false, size: .small, alignment: .left)
    self.mAddLeftLabelSchematicHotKeyTextField.append (view_7) // Outlet Array
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutStaticLabel (title: "[M] Set NC to Symbol Pins", bold: false, size: .small, alignment: .left)
    self.mAddNCToAllSymbolPinsSchematicHotKeyTextField.append (view_8) // Outlet Array
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutStaticLabel (title: "[N] Set NC", bold: false, size: .small, alignment: .left)
    self.mAddNCSchematicHotKeyTextField.append (view_9) // Outlet Array
    _ = vStackView.appendView (view_9)
    let view_10 = AutoLayoutStaticLabel (title: "[P] Remove Wire Point", bold: false, size: .small, alignment: .left)
    self.mRemoveWirePointSchematicHotKeyTextField.append (view_10) // Outlet Array
    _ = vStackView.appendView (view_10)
    let view_11 = AutoLayoutStaticLabel (title: "[R] Add Right Label", bold: false, size: .small, alignment: .left)
    self.mAddRightLabelSchematicHotKeyTextField.append (view_11) // Outlet Array
    _ = vStackView.appendView (view_11)
    let view_12 = AutoLayoutStaticLabel (title: "[T] Add Top Label", bold: false, size: .small, alignment: .left)
    self.mAddTopLabelSchematicHotKeyTextField.append (view_12) // Outlet Array
    _ = vStackView.appendView (view_12)
    let view_13 = AutoLayoutStaticLabel (title: "[V] Show / Hide Component Value", bold: false, size: .small, alignment: .left)
    self.mShowHideSymbolValueSchematicHotKeyTextField.append (view_13) // Outlet Array
    _ = vStackView.appendView (view_13)
    let view_14 = AutoLayoutStaticLabel (title: "[X] Exchange Symbol…", bold: false, size: .small, alignment: .left)
    self.mExchangeSymbolSchematicHotKeyTextField.append (view_14) // Outlet Array
    _ = vStackView.appendView (view_14)
    let view_15 = AutoLayoutStaticLabel (title: "[W] Insert Wire Point", bold: false, size: .small, alignment: .left)
    self.mAddWirePointSchematicHotKeyTextField.append (view_15) // Outlet Array
    _ = vStackView.appendView (view_15)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicsInsertSymbolInSchematicView
  //····················································································································

  final func SchematicsInsertSymbolInSchematicView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "◀︎+", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.newSchematicInsertSymbolInspectorAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Insert Symbol Inspector", bold: true, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariDragSourceTableView ()
      .bind_models (self.rootObject.unplacedSymbols_property)
    self.mUnplacedSymbolsTableViewArray.append (view_1) // Outlet Array
    self.configure_symbolDragSourceTableViewConfigurator (view_1) // Configurator
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW schematicsDisplayInspectorView
  //····················································································································

  final func schematicsDisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "◀︎+", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.newSchematicDisplayInspectorAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTabView (equalWidth: true, size: .small)
      .addTab (title: "Grid and Flip", tooltip: "Grid and Flip", contentView: self.computeImplicitView_14 ())
      .addTab (title: "Colors and Font", tooltip: "Colors and Font", contentView: self.computeImplicitView_38 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicsSheetInspectorView
  //····················································································································

  final func SchematicsSheetInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "◀︎+", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.newSchematicSheetInspectorAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Sheet Inspector", bold: true, size: .small, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutPopUpButton (size: .small)
      self.configure_sheetPopUpButtonConfigurator (view_1_0) // Configurator
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutStepper ()
      self.configure_sheetStepperConfigurator (view_1_1) // Configurator
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutButton (title: "New Sheet", size: .small)
        .expandableHeight ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.newSheetAction (_:))
        )
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutVerticalStackView ()
      do{
        let view_2_2_0 = AutoLayoutButton (title: "Up", size: .small)
          .expandableWidth ()
        self.configure_moveSheetUp (view_2_2_0) // Configurator
        _ = view_2_2.appendView (view_2_2_0)
        let view_2_2_1 = AutoLayoutButton (title: "Down", size: .small)
        self.configure_moveSheetDown (view_2_2_1) // Configurator
        _ = view_2_2.appendView (view_2_2_1)
      }
      _ = view_2.appendView (view_2_2)
      let view_2_3 = AutoLayoutFlexibleSpace ()
      _ = view_2.appendView (view_2_3)
      let view_2_4 = AutoLayoutButton (title: "Delete Sheet", size: .small)
        .expandableHeight ()
        .bind_enabled (.intcmp (.prop (self.rootObject.mSheets_property.count_property), .gt, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.deleteSheetAction (_:))
        )
      _ = view_2.appendView (view_2_4)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutStaticLabel (title: "Selected Sheet Name", bold: false, size: .small, alignment: .left)
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.rootObject.selectedSheetTitle_property, sendContinously:true)
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_39 (), right: self.computeImplicitView_40 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_41 (), right: self.computeImplicitView_42 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_43 (), right: self.computeImplicitView_44 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_45 (), right: self.computeImplicitView_46 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_47 (), right: self.computeImplicitView_48 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_49 (), right: self.computeImplicitView_50 ())
    _ = vStackView.appendView (view_6)
    return vStackView
  }

  //····················································································································
  //    VIEW SelectedSchematicElementInspectorView
  //····················································································································

  final func SelectedSchematicElementInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let schematicsWireInspectorView = self.SchematicsWireInspectorView ()
    let ncInSchematicsInspectorView = self.NCInSchematicsInspectorView ()
    let schematicsLabelInspectorView = self.SchematicsLabelInspectorView ()
    let commentInSchematicsInspectorView = self.CommentInSchematicsInspectorView ()
    let componentSymbolInspectorView = self.ComponentSymbolInspectorView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: WireInSchematic.self, inspectorView: schematicsWireInspectorView)
      .addObjectInspector (forEntity: NCInSchematic.self, inspectorView: ncInSchematicsInspectorView)
      .addObjectInspector (forEntity: LabelInSchematic.self, inspectorView: schematicsLabelInspectorView)
      .addObjectInspector (forEntity: CommentInSchematic.self, inspectorView: commentInSchematicsInspectorView)
      .addObjectInspector (forEntity: ComponentSymbolInProject.self, inspectorView: componentSymbolInspectorView)
      .bind_graphic_controller (self.schematicObjectsController)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicsWireInspectorView
  //····················································································································

  final func SchematicsWireInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Wire Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutStaticLabel (title: "Net", bold: false, size: .small, alignment: .right)
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
        .bind_title (self.wireInSchematicSelectionController.netName_property)
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutButton (title: "Rename Net…", size: .small)
      .expandableWidth ()
      .set (commandKeyEquivalent: "r")
      .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.renameSchematicWireNetAction (_:))
      )
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutButton (title: "Rename Net with Automatic Name", size: .small)
      .expandableWidth ()
      .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.renameWireNetWithNewAutomaticNameAction (_:))
      )
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutHorizontalStackView ()
    do{
      let view_4_0 = AutoLayoutStaticLabel (title: "Net Class", bold: false, size: .small, alignment: .right)
      _ = view_4.appendView (view_4_0)
      let view_4_1 = AutoLayoutPopUpButton (size: .small)
        .expandableWidth ()
      self.configure_selectedWireNetPopUpButtonConfigurator (view_4_1) // Configurator
      _ = view_4.appendView (view_4_1)
    }
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutButton (title: "Merge Subnet into Existing Net…", size: .small)
      .expandableWidth ()
      .set (commandKeyEquivalent: "m")
      .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.mergeSubnetIntoAnExistingNetForSelectedWireAction (_:))
      )
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutButton (title: "Insulate Subnet from Current Net", size: .small)
      .expandableWidth ()
      .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.insulateSubnetFromCurrentNetForSelectedWireAction (_:))
      )
    _ = vStackView.appendView (view_7)
    return vStackView
  }

  //····················································································································
  //    VIEW NCInSchematicsInspectorView
  //····················································································································

  final func NCInSchematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "NC Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.directionTitles (), equalWidth: true, size: .small)
      .bind_selectedSegment (self.ncInSchematicSelectionController.mOrientation_property)
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW SchematicsLabelInspectorView
  //····················································································································

  final func SchematicsLabelInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Label Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.directionTitles (), equalWidth: true, size: .small)
      .bind_selectedSegment (self.schematicLabelSelectionController.mOrientation_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutStaticLabel (title: "Net", bold: false, size: .small, alignment: .center)
        .notExpandableWidth ()
      _ = view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
        .bind_title (self.schematicLabelSelectionController.netName_property)
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutButton (title: "Rename Net…", size: .small)
      .expandableWidth ()
      .set (commandKeyEquivalent: "r")
      .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.renameSchematicLabelNetAction (_:))
      )
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutButton (title: "Rename Net with Automatic Name", size: .small)
      .expandableWidth ()
      .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.renameLabelNetWithNewAutomaticNameAction (_:))
      )
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutHorizontalStackView ()
    do{
      let view_5_0 = AutoLayoutStaticLabel (title: "Net Class", bold: false, size: .small, alignment: .right)
      _ = view_5.appendView (view_5_0)
      let view_5_1 = AutoLayoutPopUpButton (size: .small)
        .expandableWidth ()
      self.configure_selectedLabelNetPopUpButtonConfigurator (view_5_1) // Configurator
      _ = view_5.appendView (view_5_1)
    }
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutButton (title: "Merge Subnet into Existing Net…", size: .small)
      .expandableWidth ()
      .set (commandKeyEquivalent: "m")
      .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.mergeSubnetIntoAnExistingNetForSelectedLabelAction (_:))
      )
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutButton (title: "Insulate Subnet from Current Net", size: .small)
      .expandableWidth ()
      .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.insulateSubnetFromCurrentNetForSelectedLabelAction (_:))
      )
    _ = vStackView.appendView (view_8)
    return vStackView
  }

  //····················································································································
  //    VIEW CommentInSchematicsInspectorView
  //····················································································································

  final func CommentInSchematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Comment Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutTextField (minWidth: 210, size: .small)
      .automaticallyAdjustHeight (maxWidth: 210)
      .bind_value (self.commentInSchematicSelectionController.mComment_property, sendContinously:true)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_51 (), right: self.computeImplicitView_52 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_53 (), right: self.computeImplicitView_54 ())
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutLinearSlider (min: 4, max: 20, ticks: 17)
      .setAllowsTickMarkValuesOnly ()
      .bind_doubleValue (self.commentInSchematicSelectionController.mSize_property, sendContinously:true)
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutStaticLabel (title: "Alignment", bold: false, size: .small, alignment: .left)
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutEnumSegmentedControl (titles: HorizontalAlignment.popupTitles (), equalWidth: true, size: .small)
      .bind_selectedSegment (self.commentInSchematicSelectionController.mHorizontalAlignment_property)
    self.configure_labelHAlignmentSegmendControlConfigurator (view_6) // Configurator
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutEnumSegmentedControl (titles: VerticalAlignment.popupTitles (), equalWidth: true, size: .small)
      .bind_selectedSegment (self.commentInSchematicSelectionController.mVerticalAlignment_property)
    self.configure_labelVAlignmentSegmendControlConfigurator (view_7) // Configurator
    _ = vStackView.appendView (view_7)
    return vStackView
  }

  //····················································································································
  //    VIEW ComponentSymbolInspectorView
  //····················································································································

  final func ComponentSymbolInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Symbol Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_55 (), right: self.computeImplicitView_56 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_57 (), right: self.computeImplicitView_58 ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutStaticLabel (title: "Component Name", bold: false, size: .small, alignment: .center)
        .notExpandableWidth ()
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
        .bind_title (self.componentSymbolSelectionController.componentName_property)
      _ = view_3.appendView (view_3_1)
    }
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutButton (title: "Rename Component…", size: .small)
      .expandableWidth ()
      .bind_enabled (.intcmp (.prop (self.schematicObjectsController.selectedArray_property.count_property), .eq, .literalInt (1)))
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.renameComponentFromSelectedSymbolAction (_:))
      )
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutCheckbox (title: "Show Component Value", size: .small)
      .bind_value (self.componentSymbolSelectionController.mDisplayComponentValue_property)
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutHorizontalStackView ()
    do{
      let view_7_0 = AutoLayoutStaticLabel (title: "Component Value", bold: false, size: .small, alignment: .center)
      _ = view_7.appendView (view_7_0)
      let view_7_1 = AutoLayoutTextField (minWidth: 100, size: .small)
        .expandableWidth ()
        .bind_value (self.componentSymbolSelectionController.componentValueProxy_property, sendContinously:true)
      _ = view_7.appendView (view_7_1)
    }
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutStaticLabel (title: "Symbol Instance Name", bold: false, size: .small, alignment: .center)
    _ = vStackView.appendView (view_9)
    let view_10 = AutoLayoutLabel (bold: true, size: .small)
      .expandableWidth ()
      .set (alignment: .center)
      .bind_title (self.componentSymbolSelectionController.mSymbolInstanceName_property)
    _ = vStackView.appendView (view_10)
    let view_11 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_11)
    let view_12 = AutoLayoutStaticLabel (title: "Symbol Type Name", bold: false, size: .small, alignment: .center)
    _ = vStackView.appendView (view_12)
    let view_13 = AutoLayoutLabel (bold: true, size: .small)
      .expandableWidth ()
      .set (alignment: .center)
      .bind_title (self.componentSymbolSelectionController.mSymbolTypeName_property)
    _ = vStackView.appendView (view_13)
    let view_14 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_14)
    let view_15 = AutoLayoutStaticLabel (title: "Device Name", bold: false, size: .small, alignment: .center)
    _ = vStackView.appendView (view_15)
    let view_16 = AutoLayoutLabel (bold: true, size: .small)
      .expandableWidth ()
      .set (alignment: .center)
      .bind_title (self.componentSymbolSelectionController.deviceName_property)
    _ = vStackView.appendView (view_16)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardOutlinePage
  //····················································································································

  final func BoardOutlinePage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let boardOutlineBaseView = self.BoardOutlineBaseView ()
    let boardOutlineInspectorView = self.BoardOutlineInspectorView ()
    let boardOutlineGridAndFlipView = self.BoardOutlineGridAndFlipView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: boardOutlineBaseView, equalWidth: true, size: .small)
        .addPage (title: "", tooltip: "", pageView: boardOutlineInspectorView)
        .addPage (title: "", tooltip: "", pageView: boardOutlineGridAndFlipView)
        .bind_selectedPage (self.rootObject.mBoardLimitsSelectedInspector_property)
      self.configure_boardOutlineBaseConfigurator (view_0_0) // Configurator
      _ = view_0.appendView (view_0_0)
      let view_0_1 = boardOutlineBaseView
      _ = view_0.appendView (view_0_1)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
      .bind_underObjectsDisplay (self.rootObject.borderViewBackground_property)
      .bind_horizontalFlip (self.rootObject.mBoardLimitsHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mBoardLimitsVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mBoardLimitsGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mBoardLimitsGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForBoard_property)
      .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
      .bind_zoom (self.rootObject.mBoardLimitsZoom_property)
      .bind_backColor (preferences_boardBackgroundColorForBoard_property)
      .bind_mouseGrid (self.rootObject.mBoardLimitsGridStep_property)
      .bind_gridStep (self.rootObject.mBoardLimitsGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mBoardLimitsGridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.boardLimitsGridStepMultipliedByDisplayFactor_property)
      .bind_xPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_yPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_graphic_controller (self.boardCurveObjectsController)
    self.configure_boardOutlineView (view_2) // Configurator
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  //····················································································································
  //    VIEW BoardOutlineBaseView
  //····················································································································

  final func BoardOutlineBaseView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardOutlineGridAndFlipView
  //····················································································································

  final func BoardOutlineGridAndFlipView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Grid and Flip Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_59 (), right: self.computeImplicitView_60 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_61 (), right: self.computeImplicitView_62 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_63 (), right: self.computeImplicitView_64 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_65 (), right: self.computeImplicitView_66 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_67 (), right: self.computeImplicitView_68 ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardOutlineInspectorView
  //····················································································································

  final func BoardOutlineInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let boardShapeBaseView = self.BoardShapeBaseView ()
    let boardRectangularOutlineView = self.BoardRectangularOutlineView ()
    let boardBezierPathOutlineView = self.BoardBezierPathOutlineView ()
    let view_0 = AutoLayoutStaticLabel (title: "Outlines", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_69 (), right: self.computeImplicitView_70 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_71 (), right: self.computeImplicitView_72 ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutStaticLabel (title: "Interior Bounding Box", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_3)
    let view_4 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardInteriorTop_property)
      .bind_bottom (self.rootObject.boardInteriorBottom_property)
      .bind_left (self.rootObject.boardInteriorLeft_property)
      .bind_right (self.rootObject.boardInteriorRight_property)
      .bind_unit (self.rootObject.mBoardPointsBoundingBoxUnit_property)
    _ = vStackView.appendView (view_4)
    let view_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_5)
    let view_6 = AutoLayoutStaticLabel (title: "Board Bounding Box", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_6)
    let view_7 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardLimitBorderTop_property)
      .bind_bottom (self.rootObject.boardLimitBorderBottom_property)
      .bind_left (self.rootObject.boardLimitBorderLeft_property)
      .bind_right (self.rootObject.boardLimitBorderRight_property)
      .bind_unit (self.rootObject.mBoardLimitsBoundingBoxUnit_property)
    _ = vStackView.appendView (view_7)
    let view_8 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_8)
    let view_9 = AutoLayoutStaticLabel (title: "Board Shape", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_9)
    let view_10 = AutoLayoutSegmentedControlWithPages (documentView: boardShapeBaseView, equalWidth: true, size: .small)
      .addPage (title: "Rectangular", tooltip: "", pageView: boardRectangularOutlineView)
      .addPage (title: "Bezier Pathes", tooltip: "", pageView: boardBezierPathOutlineView)
      .bind_selectedSegment (self.rootObject.mBoardShape_property)
    _ = vStackView.appendView (view_10)
    let view_11 = boardShapeBaseView
    _ = vStackView.appendView (view_11)
    let view_12 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_12)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardShapeBaseView
  //····················································································································

  final func BoardShapeBaseView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW BoardRectangularOutlineView
  //····················································································································

  final func BoardRectangularOutlineView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_73 (), right: self.computeImplicitView_74 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_75 (), right: self.computeImplicitView_76 ())
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardBezierPathOutlineView
  //····················································································································

  final func BoardBezierPathOutlineView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.borderElementCountString_property)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutStaticLabel (title: "For editing Board limits, click on a line, use contextual click on a line.", bold: false, size: .small, alignment: .center)
      .expandableHeight ()
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutGridView2 ()
      .add (single: self.computeImplicitView_77 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_78 (), right: self.computeImplicitView_79 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_80 (), right: self.computeImplicitView_81 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_82 (), right: self.computeImplicitView_83 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_84 (), right: self.computeImplicitView_85 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_86 (), right: self.computeImplicitView_87 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_88 (), right: self.computeImplicitView_89 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_90 (), right: self.computeImplicitView_91 ())
      .bind_hidden (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardContentsPage
  //····················································································································

  final func BoardContentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let boardInspectorView = self.BoardInspectorView ()
    let selectedElementInspectorView = self.SelectedElementInspectorView ()
    let insertComponentInBoardView = self.InsertComponentInBoardView ()
    let boardDisplayInspectorView = self.BoardDisplayInspectorView ()
    let boardRouterInspectorView = self.BoardRouterInspectorView ()
    let boardERCInspectorView = self.BoardERCInspectorView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (spacing: 0)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .set (spacing: 0)
        .set (margins: 8)
      do{
        let view_0_0_0 = AutoLayoutCanariBoardOperationPullDownButton ()
        self.configure_boardOperationPullDownButtonConfigurator (view_0_0_0) // Configurator
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutFlexibleSpace ()
        _ = view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.")
        self.configure_addRestrictRectangleButton (view_0_0_2) // Configurator
        _ = view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutFlexibleSpace ()
        _ = view_0_0.appendView (view_0_0_3)
        let view_0_0_4 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Line in Board;  the layer is set by the contextual menu.")
        self.configure_addLineButton (view_0_0_4) // Configurator
        _ = view_0_0.appendView (view_0_0_4)
        let view_0_0_5 = AutoLayoutFlexibleSpace ()
        _ = view_0_0.appendView (view_0_0_5)
        let view_0_0_6 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Text in Board; the layer is set by the contextual menu.")
        self.configure_addTextButton (view_0_0_6) // Configurator
        _ = view_0_0.appendView (view_0_0_6)
        let view_0_0_7 = AutoLayoutFlexibleSpace ()
        _ = view_0_0.appendView (view_0_0_7)
        let view_0_0_8 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.")
        self.configure_addTrackButton (view_0_0_8) // Configurator
        _ = view_0_0.appendView (view_0_0_8)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 8)
          .set (rightMargin: 8)
        do{
          let view_0_1_0_0 = AutoLayoutSegmentedControlWithPages (documentView: boardInspectorView, equalWidth: true, size: .small)
            .expandableWidth ()
            .addPage (title: "", tooltip: "Selected Element Inspector", pageView: selectedElementInspectorView)
            .addPage (title: "", tooltip: "Insert Component in Board", pageView: insertComponentInBoardView)
            .addPage (title: "", tooltip: "Display Inspector", pageView: boardDisplayInspectorView)
            .addPage (image: "autorouter", tooltip: "Router Inspector", pageView: boardRouterInspectorView)
            .addPage (title: "ERC", tooltip: "Electric Rule Check Inspector", pageView: boardERCInspectorView)
            .bind_selectedPage (self.rootObject.mBoardSelectedInspector_property)
            .bind_segmentTitle (self.unplacedPackagesCountString_property, segmentIndex:1)
          self.configure_boardInspectorConfigurator (view_0_1_0_0) // Configurator
          _ = view_0_1_0.appendView (view_0_1_0_0)
        }
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = boardInspectorView
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
      .bind_underObjectsDisplay (self.rootObject.borderOutlineBackground_property)
      .bind_overObjectsDisplay (self.boardOutlineOverDisplay_property)
      .bind_horizontalFlip (self.rootObject.mBoardHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mBoardVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mBoardGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mBoardGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForBoard_property)
      .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
      .bind_zoom (self.rootObject.mBoardZoom_property)
      .bind_backColor (preferences_boardBackgroundColorForBoard_property)
      .bind_mouseGrid (self.rootObject.mBoardGridStep_property)
      .bind_gridStep (self.rootObject.mBoardGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mBoardGridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.boardGridStepMultipliedByDisplayFactor_property)
      .bind_xPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
      .bind_yPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
      .bind_graphic_controller (self.boardObjectsController)
    self.mBoardView = view_2 // Outlet
    self.configure_boardView (view_2) // Configurator
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  //····················································································································
  //    VIEW BoardInspectorView
  //····················································································································

  final func BoardInspectorView () -> AutoLayoutBase_NSStackView {
    return AutoLayoutVerticalStackView ()
  }

  //····················································································································
  //    VIEW InsertComponentInBoardView
  //····················································································································

  final func InsertComponentInBoardView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: true, size: .small)
        .bind_title (self.unplacedPackagesMessageString_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariDragSourceTableView ()
      .bind_models (self.rootObject.unplacedPackages_property)
    self.mUnplacedPackageTableView = view_1 // Outlet
    self.configure_packageDragSourceTableViewConfigurator (view_1) // Configurator
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardDisplayInspectorView
  //····················································································································

  final func BoardDisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
      .set (rightMargin: 0)
    let view_0 = AutoLayoutVerticalScrollView (content: self.computeImplicitView_164 ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardRouterInspectorView
  //····················································································································

  final func BoardRouterInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutGridView2 ()
      .add (single: self.computeImplicitView_165 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_166 (), right: self.computeImplicitView_167 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_168 (), right: self.computeImplicitView_169 ())
      .add (single: self.computeImplicitView_170 ())
      .add (single: self.computeImplicitView_171 ())
      .add (single: self.computeImplicitView_172 ())
      .add (single: self.computeImplicitView_173 ())
      .add (single: self.computeImplicitView_176 ())
      .add (single: self.computeImplicitView_177 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_178 (), right: self.computeImplicitView_179 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_180 (), right: self.computeImplicitView_181 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_182 (), right: self.computeImplicitView_183 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_184 (), right: self.computeImplicitView_185 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_186 (), right: self.computeImplicitView_187 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_188 (), right: self.computeImplicitView_189 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_190 (), right: self.computeImplicitView_191 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_192 (), right: self.computeImplicitView_193 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_194 (), right: self.computeImplicitView_195 ())
      .add (single: self.computeImplicitView_196 ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardERCInspectorView
  //····················································································································

  final func BoardERCInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutStaticLabel (title: "ERC Checking", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCheckbox (title: "Check Clearance\nbetween Pads of the same Net", size: .small)
      .set (width: 200, multiline: true)
      .bind_value (self.rootObject.mCheckClearanceBetweenPadsOfSameNet_property)
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutButton (title: "Design Rule Check", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
      )
    _ = vStackView.appendView (view_2)
    let view_3 = AutoLayoutVerticalSplitView ()
    do{
      let view_3_0 = AutoLayoutTextObserverView ()
      self.mERCLogTextView = view_3_0 // Outlet
      _ = view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      self.mERCIssueTableView = view_3_1 // Outlet
      self.configure_ercIssueTableViewConfigurator (view_3_1) // Configurator
      _ = view_3.appendView (view_3_1)
    }
    _ = vStackView.appendView (view_3)
    return vStackView
  }

  //····················································································································
  //    VIEW SelectedElementInspectorView
  //····················································································································

  final func SelectedElementInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let boardTrackInspectorView = self.BoardTrackInspectorView ()
    let boardConnectorInspectorView = self.BoardConnectorInspectorView ()
    let boardLineInspectorView = self.BoardLineInspectorView ()
    let restrictRectangleInspectorView = self.RestrictRectangleInspectorView ()
    let boardTextInspectorView = self.BoardTextInspectorView ()
    let componentInBoardInspectorView = self.ComponentInBoardInspectorView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: BoardTrack.self, inspectorView: boardTrackInspectorView)
      .addObjectInspector (forEntity: BoardConnector.self, inspectorView: boardConnectorInspectorView)
      .addObjectInspector (forEntity: BoardLine.self, inspectorView: boardLineInspectorView)
      .addObjectInspector (forEntity: BoardRestrictRectangle.self, inspectorView: restrictRectangleInspectorView)
      .addObjectInspector (forEntity: BoardText.self, inspectorView: boardTextInspectorView)
      .addObjectInspector (forEntity: ComponentInProject.self, inspectorView: componentInBoardInspectorView)
      .bind_graphic_controller (self.boardObjectsController)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardTrackInspectorView
  //····················································································································

  final func BoardTrackInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Board Track", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_197 (), right: self.computeImplicitView_198 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_199 (), right: self.computeImplicitView_200 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_201 (), right: self.computeImplicitView_202 ())
      .add (single: self.computeImplicitView_203 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_204 (), right: self.computeImplicitView_205 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_206 (), right: self.computeImplicitView_207 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_208 (), right: self.computeImplicitView_209 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_210 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_211 (), right: self.computeImplicitView_212 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_213 (), right: self.computeImplicitView_214 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_215 (), right: self.computeImplicitView_216 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_217 (), right: self.computeImplicitView_218 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_219 (), right: self.computeImplicitView_220 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_221 (), right: self.computeImplicitView_222 ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardConnectorInspectorView
  //····················································································································

  final func BoardConnectorInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Via Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_223 (), right: self.computeImplicitView_224 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_225 (), right: self.computeImplicitView_226 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_227 (), right: self.computeImplicitView_228 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_229 (), right: self.computeImplicitView_230 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_231 (), right: self.computeImplicitView_232 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_233 (), right: self.computeImplicitView_234 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_235 (), right: self.computeImplicitView_236 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_237 (), right: self.computeImplicitView_238 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardLineInspectorView
  //····················································································································

  final func BoardLineInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Line Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_239 (), right: self.computeImplicitView_240 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_241 (), right: self.computeImplicitView_242 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_243 (), right: self.computeImplicitView_244 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_245 (), right: self.computeImplicitView_246 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_247 (), right: self.computeImplicitView_248 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_249 (), right: self.computeImplicitView_250 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW RestrictRectangleInspectorView
  //····················································································································

  final func RestrictRectangleInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Restrict Rectangle Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariRestrictRectangleView ()
      .bind_front (self.restrictRectangleSelectionController.mIsInFrontLayer_property)
      .bind_back (self.restrictRectangleSelectionController.mIsInBackLayer_property)
      .bind_inner1 (self.restrictRectangleSelectionController.mIsInInner1Layer_property)
      .bind_inner2 (self.restrictRectangleSelectionController.mIsInInner2Layer_property)
      .bind_inner3 (self.restrictRectangleSelectionController.mIsInInner3Layer_property)
      .bind_inner4 (self.restrictRectangleSelectionController.mIsInInner4Layer_property)
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW BoardTextInspectorView
  //····················································································································

  final func BoardTextInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Text Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_251 (), right: self.computeImplicitView_252 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_253 (), right: self.computeImplicitView_254 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_255 (), right: self.computeImplicitView_256 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_257 (), right: self.computeImplicitView_258 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_259 (), right: self.computeImplicitView_260 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_261 (), right: self.computeImplicitView_262 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_263 (), right: self.computeImplicitView_264 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_265 (), right: self.computeImplicitView_266 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_267 (), right: self.computeImplicitView_268 ())
      .add (single: self.computeImplicitView_269 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW ComponentInBoardInspectorView
  //····················································································································

  final func ComponentInBoardInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Component Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_270 (), right: self.computeImplicitView_271 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_272 (), right: self.computeImplicitView_273 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_274 (), right: self.computeImplicitView_275 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_276 (), right: self.computeImplicitView_277 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_278 (), right: self.computeImplicitView_279 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_280 (), right: self.computeImplicitView_281 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_282 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_283 ())
      .add (single: self.computeImplicitView_284 ())
      .add (single: self.computeImplicitView_285 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_286 (), right: self.computeImplicitView_287 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_288 (), right: self.computeImplicitView_289 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_290 (), right: self.computeImplicitView_291 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_292 (), right: self.computeImplicitView_293 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_294 (), right: self.computeImplicitView_295 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_296 (), right: self.computeImplicitView_297 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_298 (), right: self.computeImplicitView_299 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_300 (), right: self.computeImplicitView_301 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_302 (), right: self.computeImplicitView_303 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_304 (), right: self.computeImplicitView_305 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_306 (), right: self.computeImplicitView_307 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_308 (), right: self.computeImplicitView_309 ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW ProductPage
  //····················································································································

  final func ProductPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let productMasterView = self.ProductMasterView ()
    let artworkDescriptionPage = self.ArtworkDescriptionPage ()
    let artworkMinimaPage = self.ArtworkMinimaPage ()
    let artworkDataPage = self.ArtworkDataPage ()
    let pdfSettingsPage = self.PDFSettingsPage ()
    let generationLogPage = self.GenerationLogPage ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutButton (title: "Import Artwork…", size: .regular)
          .expandableWidth ()
          .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importArtworkAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutButton (title: "Detach Artwork", size: .regular)
          .expandableWidth ()
          .bind_hidden (.prop (self.rootObject.mArtwork_none))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.detachArtworkAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutLabel (bold: true, size: .regular)
          .expandableWidth ()
          .set (alignment: .center)
          .bind_title (self.rootObject.mArtworkName_property)
        _ = view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutButton (title: "Generate Files", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.not (.prop (self.rootObject.mArtwork_none)), .and, .not (.prop (self.documentIsUnnamed_property))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.generateProductFilesAction (_:))
          )
        _ = view_0_0.appendView (view_0_0_3)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutTextObserverView ()
          .expandableWidth ()
          .setNoBackground ()
          .setNoVerticalScroller ()
          .setNoHorizontalScroller ()
          .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
        _ = view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_0_1.appendView (view_0_1_2)
      }
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular, alignment: .center)
        _ = view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1_1.appendView (view_1_1_2)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView ()
      .bind_hidden (.prop (self.rootObject.mArtwork_none))
    do{
      let view_2_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0_0 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutSegmentedControlWithPages (documentView: productMasterView, equalWidth: true, size: .regular)
          .addPage (title: "Artwork Description", tooltip: "", pageView: artworkDescriptionPage)
          .addPage (title: "Artwork Minima", tooltip: "", pageView: artworkMinimaPage)
          .addPage (title: "Artwork Data", tooltip: "", pageView: artworkDataPage)
          .addPage (title: "PDF Settings", tooltip: "", pageView: pdfSettingsPage)
          .addPage (title: "Generation Log", tooltip: "", pageView: generationLogPage)
        self.mProductPageSegmentedControl = view_2_0_1 // Outlet
        _ = view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_2_0.appendView (view_2_0_2)
      }
      _ = view_2.appendView (view_2_0)
      let view_2_1 = productMasterView
      _ = view_2.appendView (view_2_1)
    }
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW ProductMasterView
  //····················································································································

  final func ProductMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkDescriptionPage
  //····················································································································

  final func ArtworkDescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_310 (), right: self.computeImplicitView_311 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_312 (), right: self.computeImplicitView_313 ())
      .addCenterYAligned (left: self.computeImplicitView_314 (), right: self.computeImplicitView_315 ())
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkDataPage
  //····················································································································

  final func ArtworkDataPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_1_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutTextField (minWidth: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        _ = view_0_1.appendView (view_0_1_1)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_1_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        _ = view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_1_1_1)
        _ = view_1_1.appendView (view_1_1_1)
      }
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      _ = view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_3_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_1_3_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
            _ = view_1_3_0_0.appendView (view_1_3_0_0_0)
            let view_1_3_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            _ = view_1_3_0_0.appendView (view_1_3_0_0_1)
          }
          _ = view_1_3_0.appendView (view_1_3_0_0)
          let view_1_3_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          _ = view_1_3_0.appendView (view_1_3_0_1)
          let view_1_3_0_2 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_0.appendView (view_1_3_0_2)
          let view_1_3_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
            .setOrangeTextColor ()
            .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
          _ = view_1_3_0.appendView (view_1_3_0_3)
        }
        _ = view_1_3.appendView (view_1_3_0)
        let view_1_3_1 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
        _ = view_1_3.appendView (view_1_3_1)
        let view_1_3_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_3_2_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_316 (), right: self.computeImplicitView_317 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_318 (), right: self.computeImplicitView_319 ())
          _ = view_1_3_2.appendView (view_1_3_2_0)
          let view_1_3_2_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_2.appendView (view_1_3_2_1)
        }
        _ = view_1_3.appendView (view_1_3_2)
        let view_1_3_3 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_3_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          _ = view_1_3_3.appendView (view_1_3_3_0)
          let view_1_3_3_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_3.appendView (view_1_3_3_1)
        }
        _ = view_1_3.appendView (view_1_3_3)
        let view_1_3_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_4_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          _ = view_1_3_4.appendView (view_1_3_4_0)
          let view_1_3_4_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_4.appendView (view_1_3_4_1)
        }
        _ = view_1_3.appendView (view_1_3_4)
        let view_1_3_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_5_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          _ = view_1_3_5.appendView (view_1_3_5_0)
          let view_1_3_5_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_5.appendView (view_1_3_5_1)
        }
        _ = view_1_3.appendView (view_1_3_5)
        let view_1_3_6 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .center)
        _ = view_1_3.appendView (view_1_3_6)
        let view_1_3_7 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_3_7_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_320 (), right: self.computeImplicitView_321 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_322 (), right: self.computeImplicitView_323 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_324 (), right: self.computeImplicitView_325 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_326 (), right: self.computeImplicitView_327 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_328 (), right: self.computeImplicitView_329 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_330 (), right: self.computeImplicitView_331 ())
          _ = view_1_3_7.appendView (view_1_3_7_0)
          let view_1_3_7_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_7.appendView (view_1_3_7_1)
        }
        _ = view_1_3.appendView (view_1_3_7)
        let view_1_3_8 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .center)
        _ = view_1_3.appendView (view_1_3_8)
        let view_1_3_9 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_3_9_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_332 (), right: self.computeImplicitView_333 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_334 (), right: self.computeImplicitView_335 ())
          _ = view_1_3_9.appendView (view_1_3_9_0)
          let view_1_3_9_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_9.appendView (view_1_3_9_1)
        }
        _ = view_1_3.appendView (view_1_3_9)
        let view_1_3_10 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_10_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          _ = view_1_3_10.appendView (view_1_3_10_0)
          let view_1_3_10_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_10.appendView (view_1_3_10_1)
        }
        _ = view_1_3.appendView (view_1_3_10)
        let view_1_3_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_11_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          _ = view_1_3_11.appendView (view_1_3_11_0)
          let view_1_3_11_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_11.appendView (view_1_3_11_1)
        }
        _ = view_1_3.appendView (view_1_3_11)
        let view_1_3_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_12_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          _ = view_1_3_12.appendView (view_1_3_12_0)
          let view_1_3_12_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_12.appendView (view_1_3_12_1)
        }
        _ = view_1_3.appendView (view_1_3_12)
        let view_1_3_13 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .center)
        _ = view_1_3.appendView (view_1_3_13)
        let view_1_3_14 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_14_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          _ = view_1_3_14.appendView (view_1_3_14_0)
          let view_1_3_14_1 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          _ = view_1_3_14.appendView (view_1_3_14_1)
          let view_1_3_14_2 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          _ = view_1_3_14.appendView (view_1_3_14_2)
          let view_1_3_14_3 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_14.appendView (view_1_3_14_3)
        }
        _ = view_1_3.appendView (view_1_3_14)
        let view_1_3_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
          .setFirstBaselineAlignment ()
        do{
          let view_1_3_15_0 = AutoLayoutCheckbox (title: "Pad Holes in PDF file, with diameter", size: .small)
            .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
          _ = view_1_3_15.appendView (view_1_3_15_0)
          let view_1_3_15_1 = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
            .bind_enabled (.prop (self.mDataSelection.drawPadHolesInPDF_property))
          _ = view_1_3_15.appendView (view_1_3_15_1)
        }
        _ = view_1_3.appendView (view_1_3_15)
        let view_1_3_16 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .center)
        _ = view_1_3.appendView (view_1_3_16)
        let view_1_3_17 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_3_17_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          _ = view_1_3_17.appendView (view_1_3_17_0)
          let view_1_3_17_1 = AutoLayoutFlexibleSpace ()
          _ = view_1_3_17.appendView (view_1_3_17_1)
        }
        _ = view_1_3.appendView (view_1_3_17)
      }
      _ = view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_4)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW ArtworkMinimaPage
  //····················································································································

  final func ArtworkMinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_2)
        let view_0_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_3)
        let view_0_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_4)
        let view_0_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_5)
        let view_0_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_6)
        let view_0_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .left)
        _ = view_0_1.appendView (view_0_1_7)
        let view_0_1_8 = AutoLayoutFlexibleSpace ()
        _ = view_0_1.appendView (view_0_1_8)
      }
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticImageView (name: "artwork")
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutGridView2 ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_336 (), right: self.computeImplicitView_337 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_338 (), right: self.computeImplicitView_339 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_340 (), right: self.computeImplicitView_341 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_342 (), right: self.computeImplicitView_343 ())
      _ = view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      _ = view_1.appendView (view_1_2)
    }
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  //····················································································································
  //    VIEW PDFSettingsPage
  //····················································································································

  final func PDFSettingsPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutColorWell ()
        .bind_color (self.rootObject.mPDFBoardBackgroundColor_property, sendContinously:false)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular, alignment: .center)
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_3)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  //····················································································································
  //    VIEW GenerationLogPage
  //····················································································································

  final func GenerationLogPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutTextObserverView ()
    self.mProductFileGenerationLogTextView = view_0 // Outlet
    _ = vStackView.appendView (view_0)
    return vStackView
  }

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  private final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  private final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "50 mils", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  private final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  private final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mSchematicGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  private final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Every", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  private final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mSchematicGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  private final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  private final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mSchematicHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  private final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  private final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mSchematicVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  private final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Cross Grid Color", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  private final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_dotColorGridForSchematic_property, sendContinously:true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  private final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Grid Color", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  private final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_lineColorGridForSchematic_property, sendContinously:true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  private final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutGridView2 ()
      .set (margins: 8)
      .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_12 (), right: self.computeImplicitView_13 ())
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  private final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbols, unplaced Component", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  private final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_symbolColorForUnplacedComponentsForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  private final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbols, placed Component", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  private final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_symbolColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  private final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutStaticLabel (title: "Symbols Drawing Width", bold: false, size: .small, alignment: .center)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutTaggedPopUpButton (size: .small)
        .add (title: "0.5 Point", withTag: 5)
        .add (title: "1.0 Point", withTag: 10)
        .add (title: "1.5 Point", withTag: 15)
        .add (title: "2.0 Point", withTag: 20)
        .add (title: "2.5 Point", withTag: 25)
        .bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTenForSchematic_property)
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  private final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  private final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_componentNameColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  private final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_componentNameFontForSchematic_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  private final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Component Value", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  private final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_componentValueColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  private final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_componentValueFontForSchematic_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  private final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pin Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  private final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_pinNameColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  private final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_pinNameFontForSchematic_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  private final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pin Number", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  private final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_pinNumberColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  private final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_pinNumberFontForSchematic_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  private final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Connection", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  private final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_connectionColorForSchematic_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  private final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background Color", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  private final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_schematicBackColor_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  private final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Frame Color", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  private final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_schematicFrameColor_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  private final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutGridView2 ()
      .set (margins: 8)
      .addFirstBaseLineAligned (left: self.computeImplicitView_15 (), right: self.computeImplicitView_16 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_17 (), right: self.computeImplicitView_18 ())
      .add (single: self.computeImplicitView_19 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .add (single: self.computeImplicitView_22 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_23 (), right: self.computeImplicitView_24 ())
      .add (single: self.computeImplicitView_25 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .add (single: self.computeImplicitView_28 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_29 (), right: self.computeImplicitView_30 ())
      .add (single: self.computeImplicitView_31 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_32 (), right: self.computeImplicitView_33 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_34 (), right: self.computeImplicitView_35 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_36 (), right: self.computeImplicitView_37 ())
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  private final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Title", bold: false, size: .small, alignment: .right)
      .expandableHeight ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  private final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.rootObject.mSchematicTitle_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  private final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 42
  //····················································································································

  private final func computeImplicitView_42 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .bind_value (self.rootObject.mSchematicVersion_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 43
  //····················································································································

  private final func computeImplicitView_43 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Date", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 44
  //····················································································································

  private final func computeImplicitView_44 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutButton (title: "Set…", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.openSetDateDialogAction (_:))
        )
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutButton (title: "Set to Now", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.setDateToNowAction (_:))
        )
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 45
  //····················································································································

  private final func computeImplicitView_45 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 46
  //····················································································································

  private final func computeImplicitView_46 () -> NSView {
    let view = AutoLayoutEnumSegmentedControl (titles: SchematicSheetOrientation.popupTitles (), equalWidth: false, size: .small)
      .bind_selectedSegment (self.rootObject.mSchematicSheetOrientation_property)
    self.configure_sheetOrientationSegmentedControlConfigurator (view) // Configurator
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 47
  //····················································································································

  private final func computeImplicitView_47 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .center)
      .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 48
  //····················································································································

  private final func computeImplicitView_48 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mSchematicCustomWidth_property, self.rootObject.mSchematicCustomWidthUnit_property)
      .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 49
  //····················································································································

  private final func computeImplicitView_49 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .center)
      .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 50
  //····················································································································

  private final func computeImplicitView_50 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mSchematicCustomHeight_property, self.rootObject.mSchematicCustomHeightUnit_property)
      .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 51
  //····················································································································

  private final func computeImplicitView_51 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Color", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 52
  //····················································································································

  private final func computeImplicitView_52 () -> NSView {
    let view = AutoLayoutColorWell ()
      .bind_color (self.commentInSchematicSelectionController.mColor_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 53
  //····················································································································

  private final func computeImplicitView_53 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 54
  //····················································································································

  private final func computeImplicitView_54 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (self.commentInSchematicSelectionController.mSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 55
  //····················································································································

  private final func computeImplicitView_55 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Orientation", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 56
  //····················································································································

  private final func computeImplicitView_56 () -> NSView {
    let view = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.degreesTitles (), equalWidth: false, size: .small)
      .bind_selectedSegment (self.componentSymbolSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 57
  //····················································································································

  private final func computeImplicitView_57 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 58
  //····················································································································

  private final func computeImplicitView_58 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Mirror", size: .small)
      .bind_value (self.componentSymbolSelectionController.mMirror_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 59
  //····················································································································

  private final func computeImplicitView_59 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 60
  //····················································································································

  private final func computeImplicitView_60 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsGridStep_property, self.rootObject.mBoardLimitsGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 61
  //····················································································································

  private final func computeImplicitView_61 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 62
  //····················································································································

  private final func computeImplicitView_62 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .expandableWidth ()
      .bind_selectedIndex (self.rootObject.mBoardLimitsGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 63
  //····················································································································

  private final func computeImplicitView_63 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 64
  //····················································································································

  private final func computeImplicitView_64 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .expandableWidth ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mBoardLimitsGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 65
  //····················································································································

  private final func computeImplicitView_65 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 66
  //····················································································································

  private final func computeImplicitView_66 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mBoardLimitsHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 67
  //····················································································································

  private final func computeImplicitView_67 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 68
  //····················································································································

  private final func computeImplicitView_68 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .expandableWidth ()
      .bind_value (self.rootObject.mBoardLimitsVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 69
  //····················································································································

  private final func computeImplicitView_69 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Limit Width", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 70
  //····················································································································

  private final func computeImplicitView_70 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsWidth_property, self.rootObject.mBoardLimitsWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 71
  //····················································································································

  private final func computeImplicitView_71 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 72
  //····················································································································

  private final func computeImplicitView_72 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardClearance_property, self.rootObject.mBoardClearanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 73
  //····················································································································

  private final func computeImplicitView_73 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Width", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 74
  //····················································································································

  private final func computeImplicitView_74 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardWidth_property, self.rootObject.mRectangularBoardWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 75
  //····················································································································

  private final func computeImplicitView_75 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Height", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 76
  //····················································································································

  private final func computeImplicitView_76 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardHeight_property, self.rootObject.mRectangularBoardHeightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 77
  //····················································································································

  private final func computeImplicitView_77 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Selected Board Limit Element", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 78
  //····················································································································

  private final func computeImplicitView_78 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Shape", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 79
  //····················································································································

  private final func computeImplicitView_79 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BorderCurveShape.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardCurveSelectionController.mShape_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 80
  //····················································································································

  private final func computeImplicitView_80 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "End Points", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 81
  //····················································································································

  private final func computeImplicitView_81 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardSelectedCurveDisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 82
  //····················································································································

  private final func computeImplicitView_82 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .left)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mX_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 83
  //····················································································································

  private final func computeImplicitView_83 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .left)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mY_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 84
  //····················································································································

  private final func computeImplicitView_84 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .left)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutDoubleObserverField (width: 72, bold: true, size: .small)
        .bind_observedValue (self.boardCurveSelectionController.p2Xvalue_property)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 85
  //····················································································································

  private final func computeImplicitView_85 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .left)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutDoubleObserverField (width: 72, bold: true, size: .small)
        .bind_observedValue (self.boardCurveSelectionController.p2Yvalue_property)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 86
  //····················································································································

  private final func computeImplicitView_86 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Control Points", bold: true, size: .small, alignment: .left)
      .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 87
  //····················································································································

  private final func computeImplicitView_87 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
      .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 88
  //····················································································································

  private final func computeImplicitView_88 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .left)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 89
  //····················································································································

  private final func computeImplicitView_89 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .left)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 90
  //····················································································································

  private final func computeImplicitView_90 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .left)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 91
  //····················································································································

  private final func computeImplicitView_91 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .left)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.prop (self.boardCurveSelectionController.isLine_property))
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 92
  //····················································································································

  private final func computeImplicitView_92 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid and Flip", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 93
  //····················································································································

  private final func computeImplicitView_93 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 94
  //····················································································································

  private final func computeImplicitView_94 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardGridStep_property, self.rootObject.mBoardGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 95
  //····················································································································

  private final func computeImplicitView_95 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 96
  //····················································································································

  private final func computeImplicitView_96 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mBoardGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 97
  //····················································································································

  private final func computeImplicitView_97 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Every", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 98
  //····················································································································

  private final func computeImplicitView_98 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mBoardGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 99
  //····················································································································

  private final func computeImplicitView_99 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 100
  //····················································································································

  private final func computeImplicitView_100 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mBoardHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 101
  //····················································································································

  private final func computeImplicitView_101 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 102
  //····················································································································

  private final func computeImplicitView_102 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mBoardVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 103
  //····················································································································

  private final func computeImplicitView_103 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 104
  //····················································································································

  private final func computeImplicitView_104 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_crossColorGridForBoard_property, sendContinously:true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 105
  //····················································································································

  private final func computeImplicitView_105 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Grid", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 106
  //····················································································································

  private final func computeImplicitView_106 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_lineColorGridForBoard_property, sendContinously:true)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 107
  //····················································································································

  private final func computeImplicitView_107 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rastnet", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 108
  //····················································································································

  private final func computeImplicitView_108 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: RastnetDisplay.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mRastnetDisplay_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 109
  //····················································································································

  private final func computeImplicitView_109 () -> NSView {
    let view = AutoLayoutCanariSelectionPopUpButton (size: .small)
      .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedNetName_property, self.rootObject.netNamesArray_property)
      .bind_hidden (.not (.prop (self.rastnetDisplayOneNet_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 110
  //····················································································································

  private final func computeImplicitView_110 () -> NSView {
    let view = AutoLayoutCanariSelectionPopUpButton (size: .small)
      .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedComponentName_property, self.rootObject.placedComponentNameArray_property)
      .bind_hidden (.not (.prop (self.rastnetDisplayComponentNet_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 111
  //····················································································································

  private final func computeImplicitView_111 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Warning and Error Circle", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 112
  //····················································································································

  private final func computeImplicitView_112 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 0, max: 24, ticks: 13)
      .bind_doubleValue (self.rootObject.mErrorOrWarningIssueSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 113
  //····················································································································

  private final func computeImplicitView_113 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Contextual Click Diameter", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 114
  //····················································································································

  private final func computeImplicitView_114 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 10, max: 200, ticks: 10)
      .bind_doubleValue (self.rootObject.mControlKeyHiliteDiameter_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 115
  //····················································································································

  private final func computeImplicitView_115 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Number", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 116
  //····················································································································

  private final func computeImplicitView_116 () -> NSView {
    let view = AutoLayoutFontButton (width: 125, size: .small)
      .bind_fontValue (preferences_padNumberFontForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 117
  //····················································································································

  private final func computeImplicitView_117 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package Width", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 118
  //····················································································································

  private final func computeImplicitView_118 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Point", withTag: 20)
      .add (title: "2.5 Point", withTag: 25)
      .bind_selectedTag (self.rootObject.packageDrawingWidthMultpliedByTenForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 119
  //····················································································································

  private final func computeImplicitView_119 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 120
  //····················································································································

  private final func computeImplicitView_120 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_frontSidePadColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 121
  //····················································································································

  private final func computeImplicitView_121 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayFrontPadsForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 122
  //····················································································································

  private final func computeImplicitView_122 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_backSidePadColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 123
  //····················································································································

  private final func computeImplicitView_123 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayBackPadsForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 124
  //····················································································································

  private final func computeImplicitView_124 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_padNumberColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 125
  //····················································································································

  private final func computeImplicitView_125 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Pad Numbers", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayPadNumbersForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 126
  //····················································································································

  private final func computeImplicitView_126 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_frontSideLegendColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 127
  //····················································································································

  private final func computeImplicitView_127 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Legend", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayFrontLegendForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 128
  //····················································································································

  private final func computeImplicitView_128 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_backSideLegendColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 129
  //····················································································································

  private final func computeImplicitView_129 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Legend", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayBackLegendForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 130
  //····················································································································

  private final func computeImplicitView_130 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_frontSideLayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 131
  //····················································································································

  private final func computeImplicitView_131 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayFrontLayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 132
  //····················································································································

  private final func computeImplicitView_132 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner1LayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 133
  //····················································································································

  private final func computeImplicitView_133 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner1LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 134
  //····················································································································

  private final func computeImplicitView_134 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner2LayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 135
  //····················································································································

  private final func computeImplicitView_135 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner2LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 136
  //····················································································································

  private final func computeImplicitView_136 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner3LayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 137
  //····················································································································

  private final func computeImplicitView_137 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner3LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 138
  //····················································································································

  private final func computeImplicitView_138 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner4LayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 139
  //····················································································································

  private final func computeImplicitView_139 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner4LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 140
  //····················································································································

  private final func computeImplicitView_140 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_backSideLayoutColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 141
  //····················································································································

  private final func computeImplicitView_141 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Layout", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayBackLayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 142
  //····················································································································

  private final func computeImplicitView_142 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_frontSideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 143
  //····················································································································

  private final func computeImplicitView_143 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayFrontRestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 144
  //····················································································································

  private final func computeImplicitView_144 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_backSideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 145
  //····················································································································

  private final func computeImplicitView_145 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayBackRestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 146
  //····················································································································

  private final func computeImplicitView_146 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner1SideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 147
  //····················································································································

  private final func computeImplicitView_147 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner1 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner1RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 148
  //····················································································································

  private final func computeImplicitView_148 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner2SideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 149
  //····················································································································

  private final func computeImplicitView_149 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner2 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner2RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 150
  //····················································································································

  private final func computeImplicitView_150 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner3SideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 151
  //····················································································································

  private final func computeImplicitView_151 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner3 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner3RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 152
  //····················································································································

  private final func computeImplicitView_152 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_inner4SideRestrictRectangleColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 153
  //····················································································································

  private final func computeImplicitView_153 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner4 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.displayInner4RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 154
  //····················································································································

  private final func computeImplicitView_154 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_boardLimitsColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 155
  //····················································································································

  private final func computeImplicitView_155 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Limits", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 156
  //····················································································································

  private final func computeImplicitView_156 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_boardClearanceColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 157
  //····················································································································

  private final func computeImplicitView_157 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 158
  //····················································································································

  private final func computeImplicitView_158 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_boardBackgroundColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 159
  //····················································································································

  private final func computeImplicitView_159 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 160
  //····················································································································

  private final func computeImplicitView_160 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_errorBackgroundColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 161
  //····················································································································

  private final func computeImplicitView_161 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Error Background", size: .small)
      .expandableHeight ()
      .bind_value (self.rootObject.drawErrorBackgroundForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 162
  //····················································································································

  private final func computeImplicitView_162 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .set (toolTip: "Stored in Preferences")
        .bind_color (preferences_warningBackgroundColorForBoard_property, sendContinously:true)
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 163
  //····················································································································

  private final func computeImplicitView_163 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Warning Background", size: .small)
      .expandableHeight ()
      .bind_value (preferences_drawWarningBackgroundForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 164
  //····················································································································

  private final func computeImplicitView_164 () -> NSView {
    let view = AutoLayoutGridView2 ()
      .add (single: self.computeImplicitView_92 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_93 (), right: self.computeImplicitView_94 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_95 (), right: self.computeImplicitView_96 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_97 (), right: self.computeImplicitView_98 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_99 (), right: self.computeImplicitView_100 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_101 (), right: self.computeImplicitView_102 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_103 (), right: self.computeImplicitView_104 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_105 (), right: self.computeImplicitView_106 ())
      .add (single: self.computeImplicitView_107 ())
      .add (single: self.computeImplicitView_108 ())
      .add (single: self.computeImplicitView_109 ())
      .add (single: self.computeImplicitView_110 ())
      .add (single: self.computeImplicitView_111 ())
      .add (single: self.computeImplicitView_112 ())
      .add (single: self.computeImplicitView_113 ())
      .add (single: self.computeImplicitView_114 ())
      .add (single: self.computeImplicitView_115 ())
      .add (single: self.computeImplicitView_116 ())
      .add (single: self.computeImplicitView_117 ())
      .add (single: self.computeImplicitView_118 ())
      .add (single: self.computeImplicitView_119 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_120 (), right: self.computeImplicitView_121 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_122 (), right: self.computeImplicitView_123 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_124 (), right: self.computeImplicitView_125 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_126 (), right: self.computeImplicitView_127 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_128 (), right: self.computeImplicitView_129 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_130 (), right: self.computeImplicitView_131 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_132 (), right: self.computeImplicitView_133 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_134 (), right: self.computeImplicitView_135 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_136 (), right: self.computeImplicitView_137 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_138 (), right: self.computeImplicitView_139 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_140 (), right: self.computeImplicitView_141 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_142 (), right: self.computeImplicitView_143 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_144 (), right: self.computeImplicitView_145 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_146 (), right: self.computeImplicitView_147 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_148 (), right: self.computeImplicitView_149 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_150 (), right: self.computeImplicitView_151 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_152 (), right: self.computeImplicitView_153 ())
      .addCenterYAligned (left: self.computeImplicitView_154 (), right: self.computeImplicitView_155 ())
      .addCenterYAligned (left: self.computeImplicitView_156 (), right: self.computeImplicitView_157 ())
      .addCenterYAligned (left: self.computeImplicitView_158 (), right: self.computeImplicitView_159 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_160 (), right: self.computeImplicitView_161 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_162 (), right: self.computeImplicitView_163 ())
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 165
  //····················································································································

  private final func computeImplicitView_165 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Settings", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 166
  //····················································································································

  private final func computeImplicitView_166 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layers", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 167
  //····················································································································

  private final func computeImplicitView_167 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mLayerConfiguration_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.changeLayerConfigurationAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 168
  //····················································································································

  private final func computeImplicitView_168 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Clearance", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 169
  //····················································································································

  private final func computeImplicitView_169 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mLayoutClearance_property, self.rootObject.mLayoutClearanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 170
  //····················································································································

  private final func computeImplicitView_170 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Autorouter Settings", bold: true, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 171
  //····················································································································

  private final func computeImplicitView_171 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: AutorouterPreferredDirections.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mAutoRouterPreferredDirections_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 172
  //····················································································································

  private final func computeImplicitView_172 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: AutorouterSnapAngle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mAutorouterSnapAngle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 173
  //····················································································································

  private final func computeImplicitView_173 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Route", bold: false, size: .small, alignment: .center)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutEnumPopUpButton (titles: RouteDirection.popupTitles (), size: .small)
        .bind_selectedIndex (self.rootObject.mRouteDirection_property)
      _ = view.appendView (view_2)
      let view_3 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_3)
      let view_4 = AutoLayoutEnumPopUpButton (titles: RouteOrigin.popupTitles (), size: .small)
        .bind_selectedIndex (self.rootObject.mRouteOrigin_property)
      _ = view.appendView (view_4)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 174
  //····················································································································

  private final func computeImplicitView_174 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    do{
      let view_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_0_0 = AutoLayoutFlexibleSpace ()
        _ = view_0.appendView (view_0_0)
        let view_0_1 = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
          .bind_value (self.rootObject.mExportExistingTracksAndVias_property)
        _ = view_0.appendView (view_0_1)
        let view_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_0.appendView (view_0_2)
      }
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1.appendView (view_1_0)
        let view_1_1 = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithRouterDocument (_:))
          )
        _ = view_1.appendView (view_1_1)
        let view_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1.appendView (view_1_2)
      }
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0 = AutoLayoutFlexibleSpace ()
        _ = view_2.appendView (view_2_0)
        let view_2_1 = AutoLayoutButton (title: "Import SES File", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importSESFromBasicTabAction (_:))
          )
        _ = view_2.appendView (view_2_1)
        let view_2_2 = AutoLayoutFlexibleSpace ()
        _ = view_2.appendView (view_2_2)
      }
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 175
  //····················································································································

  private final func computeImplicitView_175 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    do{
      let view_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_0_0 = AutoLayoutFlexibleSpace ()
        _ = view_0.appendView (view_0_0)
        let view_0_1 = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
          .bind_value (self.rootObject.mExportExistingTracksAndVias2_property)
        _ = view_0.appendView (view_0_1)
        let view_0_2 = AutoLayoutFlexibleSpace ()
        _ = view_0.appendView (view_0_2)
      }
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0 = AutoLayoutFlexibleSpace ()
        _ = view_1.appendView (view_1_0)
        let view_1_1 = AutoLayoutButton (title: "Export DSN File…", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.exportDSNFileAction (_:))
          )
        _ = view_1.appendView (view_1_1)
        let view_1_2 = AutoLayoutFlexibleSpace ()
        _ = view_1.appendView (view_1_2)
      }
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0 = AutoLayoutFlexibleSpace ()
        _ = view_2.appendView (view_2_0)
        let view_2_1 = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithoutAnyDocument (_:))
          )
        _ = view_2.appendView (view_2_1)
        let view_2_2 = AutoLayoutFlexibleSpace ()
        _ = view_2.appendView (view_2_2)
      }
      _ = view.appendView (view_2)
      let view_3 = AutoLayoutHorizontalStackView ()
      do{
        let view_3_0 = AutoLayoutFlexibleSpace ()
        _ = view_3.appendView (view_3_0)
        let view_3_1 = AutoLayoutButton (title: "Import SES File…", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importSESFromExtendedTabAction (_:))
          )
        _ = view_3.appendView (view_3_1)
        let view_3_2 = AutoLayoutFlexibleSpace ()
        _ = view_3.appendView (view_3_2)
      }
      _ = view.appendView (view_3)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 176
  //····················································································································

  private final func computeImplicitView_176 () -> NSView {
    let view = AutoLayoutTabView (equalWidth: true, size: .small)
      .addTab (title: "Basic", tooltip: "Autorouter Basic Configuration", contentView: self.computeImplicitView_174 ())
      .addTab (title: "Advanced", tooltip: "Autorouter Advanced Configuration", contentView: self.computeImplicitView_175 ())
      .bind_selectedPage (self.rootObject.mAutorouterInterfaceMode_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 177
  //····················································································································

  private final func computeImplicitView_177 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Tracks", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 178
  //····················································································································

  private final func computeImplicitView_178 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Top Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 179
  //····················································································································

  private final func computeImplicitView_179 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.topSideTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 180
  //····················································································································

  private final func computeImplicitView_180 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 1 Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 181
  //····················································································································

  private final func computeImplicitView_181 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner1LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 182
  //····················································································································

  private final func computeImplicitView_182 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 2 Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 183
  //····················································································································

  private final func computeImplicitView_183 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner2LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 184
  //····················································································································

  private final func computeImplicitView_184 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 3 Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 185
  //····················································································································

  private final func computeImplicitView_185 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner3LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 186
  //····················································································································

  private final func computeImplicitView_186 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 4 Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 187
  //····················································································································

  private final func computeImplicitView_187 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner4LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 188
  //····················································································································

  private final func computeImplicitView_188 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Back Layer Tracks", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 189
  //····················································································································

  private final func computeImplicitView_189 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.backSideTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 190
  //····················································································································

  private final func computeImplicitView_190 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Total", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 191
  //····················································································································

  private final func computeImplicitView_191 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.trackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 192
  //····················································································································

  private final func computeImplicitView_192 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Trace Length", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 193
  //····················································································································

  private final func computeImplicitView_193 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutLabel (bold: true, size: .small)
        .bind_title (self.rootObject.trackLengthString_property)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutCanariUnitPopUpButton (size: .small)
        .bind_unit (self.rootObject.mTrackLengthUnit_property)
      _ = view.appendView (view_1)
      let view_2 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 194
  //····················································································································

  private final func computeImplicitView_194 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Via Count", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 195
  //····················································································································

  private final func computeImplicitView_195 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.viaCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 196
  //····················································································································

  private final func computeImplicitView_196 () -> NSView {
    let view = AutoLayoutButton (title: "Design Rule Check", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 197
  //····················································································································

  private final func computeImplicitView_197 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 198
  //····················································································································

  private final func computeImplicitView_198 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardTrackSelectionController.netName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 199
  //····················································································································

  private final func computeImplicitView_199 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 200
  //····················································································································

  private final func computeImplicitView_200 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardTrackSelectionController.netClassName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 201
  //····················································································································

  private final func computeImplicitView_201 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 202
  //····················································································································

  private final func computeImplicitView_202 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: TrackSide.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTrackSelectionController.mSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 203
  //····················································································································

  private final func computeImplicitView_203 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Is Preserved by Auto Router", size: .small)
      .bind_value (self.boardTrackSelectionController.mIsPreservedByAutoRouter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 204
  //····················································································································

  private final func computeImplicitView_204 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Track Width", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 205
  //····················································································································

  private final func computeImplicitView_205 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 206
  //····················································································································

  private final func computeImplicitView_206 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .center)
      .bind_hidden (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 207
  //····················································································································

  private final func computeImplicitView_207 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.netClassTrackWidth_property, self.boardTrackSelectionController.mDefaultTrackWidthUnit_property)
      .bind_hidden (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 208
  //····················································································································

  private final func computeImplicitView_208 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small, alignment: .center)
      .bind_hidden (.not (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 209
  //····················································································································

  private final func computeImplicitView_209 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.mCustomTrackWidth_property, self.boardTrackSelectionController.mCustomTrackWidthUnit_property)
      .bind_hidden (.not (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 210
  //····················································································································

  private final func computeImplicitView_210 () -> NSView {
    let view = AutoLayoutCanariTrackLockView ()
      .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
      .bind_manualLockP1 (self.boardTrackSelectionController.mManualLockP1_property)
      .bind_manualLockP2 (self.boardTrackSelectionController.mManualLockP2_property)
      .bind_p1ConnectedToSomePad (self.boardTrackSelectionController.p1ConnectedToSomePad_property)
      .bind_p2ConnectedToSomePad (self.boardTrackSelectionController.p2ConnectedToSomePad_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 211
  //····················································································································

  private final func computeImplicitView_211 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "On Knob Dragging", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 212
  //····················································································································

  private final func computeImplicitView_212 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: TrackLockDirection.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTrackSelectionController.mDirectionLockOnKnobDragging_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 213
  //····················································································································

  private final func computeImplicitView_213 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Track Angle", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 214
  //····················································································································

  private final func computeImplicitView_214 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
      .bind_enabled (.prop (self.boardTrackSelectionController.trackCanRotate_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 215
  //····················································································································

  private final func computeImplicitView_215 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "P1", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 216
  //····················································································································

  private final func computeImplicitView_216 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1X_property, self.boardTrackSelectionController.mP1XUnit_property)
      .bind_enabled (.prop (self.boardTrackSelectionController.p1CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 217
  //····················································································································

  private final func computeImplicitView_217 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 218
  //····················································································································

  private final func computeImplicitView_218 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1Y_property, self.boardTrackSelectionController.mP1YUnit_property)
      .bind_enabled (.prop (self.boardTrackSelectionController.p1CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 219
  //····················································································································

  private final func computeImplicitView_219 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "P2", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 220
  //····················································································································

  private final func computeImplicitView_220 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2X_property, self.boardTrackSelectionController.mP2XUnit_property)
      .bind_enabled (.prop (self.boardTrackSelectionController.p2CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 221
  //····················································································································

  private final func computeImplicitView_221 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 222
  //····················································································································

  private final func computeImplicitView_222 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2Y_property, self.boardTrackSelectionController.mP2YUnit_property)
      .bind_enabled (.prop (self.boardTrackSelectionController.p2CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 223
  //····················································································································

  private final func computeImplicitView_223 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 224
  //····················································································································

  private final func computeImplicitView_224 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardConnectorSelectionController.netNameFromTracks_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 225
  //····················································································································

  private final func computeImplicitView_225 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 226
  //····················································································································

  private final func computeImplicitView_226 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardConnectorSelectionController.netClassName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 227
  //····················································································································

  private final func computeImplicitView_227 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Diameter", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 228
  //····················································································································

  private final func computeImplicitView_228 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 229
  //····················································································································

  private final func computeImplicitView_229 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .center)
      .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 230
  //····················································································································

  private final func computeImplicitView_230 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultHoleDiameter_property, self.boardConnectorSelectionController.mDefaultHoleDiameterUnit_property)
      .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 231
  //····················································································································

  private final func computeImplicitView_231 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small, alignment: .center)
      .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 232
  //····················································································································

  private final func computeImplicitView_232 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomHoleDiameter_property, self.boardConnectorSelectionController.mCustomHoleDiameterUnit_property)
      .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 233
  //····················································································································

  private final func computeImplicitView_233 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Diameter", bold: false, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 234
  //····················································································································

  private final func computeImplicitView_234 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 235
  //····················································································································

  private final func computeImplicitView_235 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .center)
      .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 236
  //····················································································································

  private final func computeImplicitView_236 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultPadDiameter_property, self.boardConnectorSelectionController.mDefaultPadDiameterUnit_property)
      .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 237
  //····················································································································

  private final func computeImplicitView_237 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small, alignment: .center)
      .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 238
  //····················································································································

  private final func computeImplicitView_238 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomPadDiameter_property, self.boardConnectorSelectionController.mCustomPadDiameterUnit_property)
      .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 239
  //····················································································································

  private final func computeImplicitView_239 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 240
  //····················································································································

  private final func computeImplicitView_240 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mWidth_property, self.boardLineSelectionController.mWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 241
  //····················································································································

  private final func computeImplicitView_241 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 242
  //····················································································································

  private final func computeImplicitView_242 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BoardLineLayer.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardLineSelectionController.mLayer_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 243
  //····················································································································

  private final func computeImplicitView_243 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "P1", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 244
  //····················································································································

  private final func computeImplicitView_244 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mX1_property, self.boardLineSelectionController.mX1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 245
  //····················································································································

  private final func computeImplicitView_245 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 246
  //····················································································································

  private final func computeImplicitView_246 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mY1_property, self.boardLineSelectionController.mY1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 247
  //····················································································································

  private final func computeImplicitView_247 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "P2", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 248
  //····················································································································

  private final func computeImplicitView_248 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mX2_property, self.boardLineSelectionController.mX2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 249
  //····················································································································

  private final func computeImplicitView_249 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 250
  //····················································································································

  private final func computeImplicitView_250 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mY2_property, self.boardLineSelectionController.mY2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 251
  //····················································································································

  private final func computeImplicitView_251 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Text", bold: false, size: .small, alignment: .right)
      .expandableHeight ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 252
  //····················································································································

  private final func computeImplicitView_252 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.boardTextSelectionController.mText_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 253
  //····················································································································

  private final func computeImplicitView_253 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 254
  //····················································································································

  private final func computeImplicitView_254 () -> NSView {
    let view = AutoLayoutCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.boardTextSelectionController.fontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setBoardTextFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 255
  //····················································································································

  private final func computeImplicitView_255 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 256
  //····················································································································

  private final func computeImplicitView_256 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (self.boardTextSelectionController.mFontSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 257
  //····················································································································

  private final func computeImplicitView_257 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Weight", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 258
  //····················································································································

  private final func computeImplicitView_258 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (self.boardTextSelectionController.mWeight_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 259
  //····················································································································

  private final func computeImplicitView_259 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 260
  //····················································································································

  private final func computeImplicitView_260 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Oblique", size: .small)
      .bind_value (self.boardTextSelectionController.mOblique_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 261
  //····················································································································

  private final func computeImplicitView_261 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Horizontal", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 262
  //····················································································································

  private final func computeImplicitView_262 () -> NSView {
    let view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
      .bind_alignment (self.boardTextSelectionController.mHorizontalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 263
  //····················································································································

  private final func computeImplicitView_263 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Vertical", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 264
  //····················································································································

  private final func computeImplicitView_264 () -> NSView {
    let view = AutoLayoutCanariVerticalAlignmentSegmentedControl (size: .small)
      .bind_alignment (self.boardTextSelectionController.mVerticalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 265
  //····················································································································

  private final func computeImplicitView_265 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 266
  //····················································································································

  private final func computeImplicitView_266 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.boardTextSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 267
  //····················································································································

  private final func computeImplicitView_267 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 268
  //····················································································································

  private final func computeImplicitView_268 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BoardTextLayer.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTextSelectionController.mLayer_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 269
  //····················································································································

  private final func computeImplicitView_269 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Show Rotation Knob", size: .small)
      .set (toolTip: "Common to all texts, stored in Preferences")
      .bind_value (preferences_mShowTextRotationKnobInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 270
  //····················································································································

  private final func computeImplicitView_270 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Name", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 271
  //····················································································································

  private final func computeImplicitView_271 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .bind_title (self.componentInBoardSelectionController.componentName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 272
  //····················································································································

  private final func computeImplicitView_272 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 273
  //····················································································································

  private final func computeImplicitView_273 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Name", size: .small)
      .bind_value (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 274
  //····················································································································

  private final func computeImplicitView_274 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 275
  //····················································································································

  private final func computeImplicitView_275 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (self.componentInBoardSelectionController.mNameFontSize_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 276
  //····················································································································

  private final func computeImplicitView_276 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 277
  //····················································································································

  private final func computeImplicitView_277 () -> NSView {
    let view = AutoLayoutCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.componentInBoardSelectionController.componentNameFontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setComponentNameFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 278
  //····················································································································

  private final func computeImplicitView_278 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 279
  //····················································································································

  private final func computeImplicitView_279 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 280
  //····················································································································

  private final func computeImplicitView_280 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 281
  //····················································································································

  private final func computeImplicitView_281 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
      .bind_enabled (.prop (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 282
  //····················································································································

  private final func computeImplicitView_282 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Draw Component Legend", size: .small)
      .bind_value (self.componentInBoardSelectionController.mDisplayLegend_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 283
  //····················································································································

  private final func computeImplicitView_283 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 284
  //····················································································································

  private final func computeImplicitView_284 () -> NSView {
    let view = AutoLayoutCanariBoardComponentPackagePopUpButton ()
    self.configure_componentPackagePopUpButtonConfigurator (view) // Configurator
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 285
  //····················································································································

  private final func computeImplicitView_285 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Show Rotation Knob", size: .small)
      .set (toolTip: "Common to all packages, stored in Preferences")
      .bind_value (preferences_mShowComponentRotationKnobInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 286
  //····················································································································

  private final func computeImplicitView_286 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 287
  //····················································································································

  private final func computeImplicitView_287 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 288
  //····················································································································

  private final func computeImplicitView_288 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 289
  //····················································································································

  private final func computeImplicitView_289 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 290
  //····················································································································

  private final func computeImplicitView_290 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Center", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 291
  //····················································································································

  private final func computeImplicitView_291 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.componentInBoardSelectionController.mX_property, self.componentInBoardSelectionController.mXUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 292
  //····················································································································

  private final func computeImplicitView_292 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 293
  //····················································································································

  private final func computeImplicitView_293 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.componentInBoardSelectionController.mY_property, self.componentInBoardSelectionController.mYUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 294
  //····················································································································

  private final func computeImplicitView_294 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Value", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 295
  //····················································································································

  private final func computeImplicitView_295 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.componentInBoardSelectionController.mComponentValue_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 296
  //····················································································································

  private final func computeImplicitView_296 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 297
  //····················································································································

  private final func computeImplicitView_297 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Value", size: .small)
      .bind_value (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 298
  //····················································································································

  private final func computeImplicitView_298 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 299
  //····················································································································

  private final func computeImplicitView_299 () -> NSView {
    let view = AutoLayoutDoubleField (width: 64, size: .small)
      .bind_value (self.componentInBoardSelectionController.mValueFontSize_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 300
  //····················································································································

  private final func computeImplicitView_300 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 301
  //····················································································································

  private final func computeImplicitView_301 () -> NSView {
    let view = AutoLayoutCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.componentInBoardSelectionController.componentValueFontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setComponentValueFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 302
  //····················································································································

  private final func computeImplicitView_302 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 303
  //····················································································································

  private final func computeImplicitView_303 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 304
  //····················································································································

  private final func computeImplicitView_304 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 305
  //····················································································································

  private final func computeImplicitView_305 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
      .bind_enabled (.prop (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 306
  //····················································································································

  private final func computeImplicitView_306 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Slave Pads", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 307
  //····················································································································

  private final func computeImplicitView_307 () -> NSView {
    let view = AutoLayoutBoolPopUpButton (title0: "should be insulated", title1: "should be routed")
      .bind_value (self.componentInBoardSelectionController.mSlavePadsShouldBeRouted_property)
      .bind_enabled (.prop (self.componentInBoardSelectionController.hasSlavePads_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 308
  //····················································································································

  private final func computeImplicitView_308 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: true, size: .small, alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 309
  //····················································································································

  private final func computeImplicitView_309 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: ComponentSide.popupTitles (), size: .small)
      .bind_selectedIndex (self.componentInBoardSelectionController.mSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 310
  //····················································································································

  private final func computeImplicitView_310 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 311
  //····················································································································

  private final func computeImplicitView_311 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.rootObject.layerConfigurationString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 312
  //····················································································································

  private final func computeImplicitView_312 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 313
  //····················································································································

  private final func computeImplicitView_313 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_observedValue (self.rootObject.mArtworkVersion_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 314
  //····················································································································

  private final func computeImplicitView_314 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular, alignment: .center)
      _ = view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      _ = view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 315
  //····················································································································

  private final func computeImplicitView_315 () -> NSView {
    let view = AutoLayoutTextObserverView ()
      .expandableWidth ()
      .bind_observedValue (self.rootObject.artworkComments_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 316
  //····················································································································

  private final func computeImplicitView_316 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 317
  //····················································································································

  private final func computeImplicitView_317 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 318
  //····················································································································

  private final func computeImplicitView_318 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 319
  //····················································································································

  private final func computeImplicitView_319 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 320
  //····················································································································

  private final func computeImplicitView_320 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_value (self.mDataSelection.drawTraversingPads_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 321
  //····················································································································

  private final func computeImplicitView_321 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 322
  //····················································································································

  private final func computeImplicitView_322 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 323
  //····················································································································

  private final func computeImplicitView_323 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 324
  //····················································································································

  private final func computeImplicitView_324 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 325
  //····················································································································

  private final func computeImplicitView_325 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 326
  //····················································································································

  private final func computeImplicitView_326 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 327
  //····················································································································

  private final func computeImplicitView_327 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasInnerElements_property))
      .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 328
  //····················································································································

  private final func computeImplicitView_328 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 329
  //····················································································································

  private final func computeImplicitView_329 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
      .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 330
  //····················································································································

  private final func computeImplicitView_330 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
      .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 331
  //····················································································································

  private final func computeImplicitView_331 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_enabled (.prop (self.rootObject.hasSixLayers_property))
      .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 332
  //····················································································································

  private final func computeImplicitView_332 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 333
  //····················································································································

  private final func computeImplicitView_333 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 334
  //····················································································································

  private final func computeImplicitView_334 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 335
  //····················································································································

  private final func computeImplicitView_335 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 336
  //····················································································································

  private final func computeImplicitView_336 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 337
  //····················································································································

  private final func computeImplicitView_337 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 338
  //····················································································································

  private final func computeImplicitView_338 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 339
  //····················································································································

  private final func computeImplicitView_339 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 340
  //····················································································································

  private final func computeImplicitView_340 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 341
  //····················································································································

  private final func computeImplicitView_341 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 342
  //····················································································································

  private final func computeImplicitView_342 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 343
  //····················································································································

  private final func computeImplicitView_343 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.undoManager)

  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.undoManager)

  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.undoManager)

  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.undoManager)

  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.bind_model (self.rootObject.selectedSheetObjects_property, self.undoManager)

  //--- Selection controller property: wireInSchematicSelectionController
    self.wireInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: ncInSchematicSelectionController
    self.ncInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: schematicLabelSelectionController
    self.schematicLabelSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: commentInSchematicSelectionController
    self.commentInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: componentSymbolSelectionController
    self.componentSymbolSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.bind_model (self.rootObject.mBorderCurves_property, self.undoManager)

  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.bind_selection (model: self.boardCurveObjectsController.selectedArray_property)

  //--- Array controller property: boardObjectsController
    self.boardObjectsController.bind_model (self.rootObject.mBoardObjects_property, self.undoManager)

  //--- Selection controller property: boardTrackSelectionController
    self.boardTrackSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardConnectorSelectionController
    self.boardConnectorSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardLineSelectionController
    self.boardLineSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: restrictRectangleSelectionController
    self.restrictRectangleSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardTextSelectionController
    self.boardTextSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: componentInBoardSelectionController
    self.componentInBoardSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)

  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.netsDescription_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCount_property)

  //--- Atomic property: rastnetDisplayOneNet
    self.rastnetDisplayOneNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayOneNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetDisplayOneNet_property)

  //--- Atomic property: rastnetDisplayComponentNet
    self.rastnetDisplayComponentNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayComponentNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetDisplayComponentNet_property)


  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.incorrectDocumentFileDetailedErrorMessage_property)

  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentFileShouldBeRenamedErrorMessage_property)

  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)

  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceSymbolNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)

  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDevicePackageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_packageNames (self.selectedDevicePackageNames_property)

  //--- Atomic property: selectedDeviceNames
    self.selectedDeviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)

  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mNetClasses_property.count_property.selection
        let s1 = unwSelf.netClassController.selectedArray_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveNetClasses (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.addEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveNetClasses_property)

  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.netsDescription_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCountString_property)

  //--- Atomic property: schematicSheetOrientationIsCustom
    self.schematicSheetOrientationIsCustom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mSchematicSheetOrientation_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_schematicSheetOrientationIsCustom (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mSchematicSheetOrientation_property.addEBObserver (self.schematicSheetOrientationIsCustom_property)

  //--- Atomic property: rastnetShape
    self.rastnetShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        let s1 = unwSelf.rootObject.mRastnetDisplayedNetName_property.selection
        let s2 = unwSelf.rootObject.mRastnetDisplayedComponentName_property.selection
        let s3 = unwSelf.rootObject.mBoardObjects_property.selection
        let s4 = unwSelf.boardObjectsController.selectedArray_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetShape (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedNetName_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedComponentName_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mBoardObjects_property.addEBObserverOf_netNameAndPadLocation (self.rastnetShape_property)
    self.boardObjectsController.selectedArray_property.addEBObserverOf_componentName (self.rastnetShape_property)

  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentIsUnnamed_property)

  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.addEBObserver (self.emptyDrillFileExtension_property)

  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mComponents_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_componentCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.addEBObserver (self.componentCount_property)

  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.componentController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canChangePackage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.addEBObserverOf_availablePackages (self.canChangePackage_property)

  //--- Atomic property: canRemoveSelectedFonts
    self.canRemoveSelectedFonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectFontController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedFonts (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectFontController.selectedArray_property.addEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)

  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedDevices (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)

  //--- Atomic property: unplacedSymbolsCount
    self.unplacedSymbolsCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unplacedSymbols_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedSymbolsCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedSymbols_property.addEBObserver (self.unplacedSymbolsCount_property)

  //--- Atomic property: unplacedSymbolsCountString
    self.unplacedSymbolsCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbolsCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedSymbolsCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbolsCount_property.addEBObserver (self.unplacedSymbolsCountString_property)

  //--- Atomic property: boardOutlineOverDisplay
    self.boardOutlineOverDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rastnetShape_property.selection
        let s1 = unwSelf.rootObject.boardIssues_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_boardOutlineOverDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rastnetShape_property.addEBObserver (self.boardOutlineOverDisplay_property)
    self.rootObject.boardIssues_property.addEBObserver (self.boardOutlineOverDisplay_property)

  //--- Atomic property: unplacedPackageCount
    self.unplacedPackageCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unplacedPackages_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackageCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedPackages_property.addEBObserver (self.unplacedPackageCount_property)

  //--- Atomic property: unplacedPackagesCountString
    self.unplacedPackagesCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedPackageCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.addEBObserver (self.unplacedPackagesCountString_property)

  //--- Atomic property: unplacedPackagesMessageString
    self.unplacedPackagesMessageString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedPackageCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesMessageString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.addEBObserver (self.unplacedPackagesMessageString_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.addEBObserver (self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.generatedFileCountString_property)

  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

