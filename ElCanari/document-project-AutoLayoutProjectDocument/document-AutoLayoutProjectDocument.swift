//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutProjectDocument) class AutoLayoutProjectDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: netClassController
  //····················································································································

  var netClassController = Controller_AutoLayoutProjectDocument_netClassController ()

  //····················································································································
  //   Array controller: componentController
  //····················································································································

  var componentController = Controller_AutoLayoutProjectDocument_componentController ()

  //····················································································································
  //   Array controller: projectFontController
  //····················································································································

  var projectFontController = Controller_AutoLayoutProjectDocument_projectFontController ()

  //····················································································································
  //   Array controller: projectDeviceController
  //····················································································································

  var projectDeviceController = Controller_AutoLayoutProjectDocument_projectDeviceController ()

  //····················································································································
  //   Array controller: boardCurveObjectsController
  //····················································································································

  var boardCurveObjectsController = Controller_AutoLayoutProjectDocument_boardCurveObjectsController ()

  //····················································································································
  //   Selection controller: boardCurveSelectionController
  //····················································································································

  var boardCurveSelectionController = SelectionController_AutoLayoutProjectDocument_boardCurveSelectionController ()

  //····················································································································
  //   Array controller: boardObjectsController
  //····················································································································

  var boardObjectsController = Controller_AutoLayoutProjectDocument_boardObjectsController ()

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_AutoLayoutProjectDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_AutoLayoutProjectDocument_mDataSelection ()

  //····················································································································
  //   Transient property: netCount
  //····················································································································

  final let netCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netCount : Int? {
    switch self.netCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //····················································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    switch self.incorrectDocumentFileDetailedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //····················································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    switch self.documentFileShouldBeRenamedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceSymbolNames
  //····················································································································

  final let selectedDeviceSymbolNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  final var selectedDeviceSymbolNames : TwoStringArray? {
    switch self.selectedDeviceSymbolNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDevicePackageNames
  //····················································································································

  final let selectedDevicePackageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDevicePackageNames : StringArray? {
    switch self.selectedDevicePackageNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceNames
  //····················································································································

  final let selectedDeviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDeviceNames : StringArray? {
    switch self.selectedDeviceNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveNetClasses
  //····················································································································

  final let canRemoveNetClasses_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveNetClasses : Bool? {
    switch self.canRemoveNetClasses_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCountString
  //····················································································································

  final let netCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var netCountString : String? {
    switch self.netCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  final let documentIsUnnamed_property = EBTransientProperty_Bool ()

  //····················································································································

  final var documentIsUnnamed : Bool? {
    switch self.documentIsUnnamed_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtension
  //····················································································································

  final let emptyDrillFileExtension_property = EBTransientProperty_Bool ()

  //····················································································································

  final var emptyDrillFileExtension : Bool? {
    switch self.emptyDrillFileExtension_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentCount
  //····················································································································

  final let componentCount_property = EBTransientProperty_String ()

  //····················································································································

  final var componentCount : String? {
    switch self.componentCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canChangePackage
  //····················································································································

  final let canChangePackage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canChangePackage : Bool? {
    switch self.canChangePackage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedFonts
  //····················································································································

  final let canRemoveSelectedFonts_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedFonts : Bool? {
    switch self.canRemoveSelectedFonts_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedDevices
  //····················································································································

  final let canRemoveSelectedDevices_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedDevices : Bool? {
    switch self.canRemoveSelectedDevices_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtensionImage
  //····················································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    switch self.emptyDrillFileExtensionImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: generatedFileCountString
  //····················································································································

  final let generatedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var generatedFileCountString : String? {
    switch self.generatedFileCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mNetInfoTableView : AutoLayoutCanariNetDescriptionTableView? = nil
  weak final var mProductFileGenerationLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: netClassController
      self.netClassController.addExplorer (name: "netClassController", y:&y, view:view)
    //--- Array controller property: componentController
      self.componentController.addExplorer (name: "componentController", y:&y, view:view)
    //--- Array controller property: projectFontController
      self.projectFontController.addExplorer (name: "projectFontController", y:&y, view:view)
    //--- Array controller property: projectDeviceController
      self.projectDeviceController.addExplorer (name: "projectDeviceController", y:&y, view:view)
    //--- Array controller property: boardCurveObjectsController
      self.boardCurveObjectsController.addExplorer (name: "boardCurveObjectsController", y:&y, view:view)
    //--- Selection controller property: boardCurveSelectionController
      self.boardCurveSelectionController.addExplorer (name: "boardCurveSelectionController", y:&y, view:view)
    //--- Array controller property: boardObjectsController
      self.boardObjectsController.addExplorer (name: "boardObjectsController", y:&y, view:view)
    //--- Array controller property: mDataController
      self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
    //--- Selection controller property: mDataSelection
      self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Components", tooltip: "", pageView: self.mComponentsPage)
          .addPage (title: "Library", tooltip: "", pageView: self.mLibraryPage)
          .addPage (title: "Schematic", tooltip: "", pageView: self.mSchematicPage)
          .addPage (title: "Net Classes", tooltip: "", pageView: self.mNetClassesPage)
          .addPage (title: "Net List", tooltip: "", pageView: self.mNetListPage)
          .addPage (title: "Board Outline", tooltip: "", pageView: self.mBoardOutlinePage)
          .addPage (title: "Board Contents", tooltip: "", pageView: self.mBoardContentsPage)
          .addPage (title: "Product", tooltip: "", pageView: self.mProductPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_2_0_0 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_0)
          let view_0_2_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.schematicStatusImage_property)
            .bind_tooltip (self.rootObject.schematicStatusMessage_property)
          view_0_2_0.appendView (view_0_2_0_1)
          let view_0_2_0_2 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_2)
        }
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Schematic", bold: false, size: .small)
          .set (alignment: .center)
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
      do{
        let view_0_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_3_0_0 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_0)
          let view_0_3_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.boardStatusImage_property)
            .bind_tooltip (self.rootObject.boardStatusMessage_property)
          view_0_3_0.appendView (view_0_3_0_1)
          let view_0_3_0_2 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_2)
        }
        view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutStaticLabel (title: "Board", bold: false, size: .small)
          .set (alignment: .center)
        view_0_3.appendView (view_0_3_1)
      }
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.ercStatusImage_property)
            .bind_tooltip (self.rootObject.ercStatusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "ERC", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mComponentsPage
  //····················································································································

  lazy var mComponentsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutVerticalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentCount_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Add Component from:", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromFileLibraryAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutPullDownButton (title: "Embedded Library…", size: .small)
        .expandableWidth ()
        .bind_items (self.rootObject.deviceNames_property)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromEmbeddedLibraryAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutStaticLabel (title: "On Selected Components", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_6)
      let view_0_7 = AutoLayoutButton (title: "Duplicate", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.duplicateSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_7)
      let view_0_8 = AutoLayoutButton (title: "Rename…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_8)
      let view_0_9 = AutoLayoutButton (title: "Remove", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_9)
      let view_0_10 = AutoLayoutButton (title: "Change Package…", size: .small)
        .expandableWidth ()
        .bind_enabled (.id (self.canChangePackage_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changePackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_10)
      let view_0_11 = AutoLayoutButton (title: "Change Value…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changeValueOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_11)
      let view_0_12 = AutoLayoutButton (title: "Reveal in Board", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.revealPackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_12)
      let view_0_13 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_13)
      let view_0_14 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_14)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.componentController.bind_tableView (view_1)
    hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mLibraryPage
  //····················································································································

  lazy var mLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Remove Embedded Devices", size: .regular)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeEmbeddedDevicesAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Device and Font Versions", size: .regular)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetDevicesAndFontsVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Update Devices and Fonts", size: .regular)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateDevicesAndFontsAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mLibraryContentView, equalWidth: false, size: .regular)
        .addPage (title: "Devices", tooltip: "", pageView: self.mDevicesInLibraryPage)
        .addPage (title: "Fonts", tooltip: "", pageView: self.mFontsInLibraryPage)
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    let view_2 = mLibraryContentView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mLibraryContentView
  //····················································································································

  lazy var mLibraryContentView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDevicesInLibraryPage
  //····················································································································

  lazy var mDevicesInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Edit Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Selected Device Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetSelectedDeviceVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Device", size: .regular)
        .bind_enabled (.id (self.canRemoveSelectedDevices_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Export Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.exportSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Update Selected Device…", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        .set (width: 400)
      self.projectDeviceController.bind_tableView (view_1_0)
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_0_0 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutStaticLabel (title: "Selected Device", bold: false, size: .regular)
          view_1_1_0.appendView (view_1_1_0_1)
          let view_1_1_0_2 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_2)
        }
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalSplitView ()
        do{
          let view_1_1_1_0 = AutoLayoutCanariProjectDeviceTableView (size: .regular)
            .set (width: 150)
            .bind_array (self.selectedDeviceNames_property)
          view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalSplitView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutCanariProjectDeviceSymbolTypeAndNameTableView (size: .regular)
              .set (width: 250)
              .set (height: 200)
              .bind_array (self.selectedDeviceSymbolNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutCanariProjectDevicePackageTableView (size: .regular)
              .set (height: 200)
              .bind_array (self.selectedDevicePackageNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_1)
          }
          view_1_1_1.appendView (view_1_1_1_1)
          let view_1_1_1_2 = AutoLayoutCanariProjectPinPadAssignmentTableView (size: .regular)
            .set (width: 200)
            .bind_array (self.pinPadAssignments_property)
          view_1_1_1.appendView (view_1_1_1_2)
        }
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mFontsInLibraryPage
  //····················································································································

  lazy var mFontsInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Add Font…", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addFontAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Font", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editFontAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Reset Selected Font Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetFontVersionAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Update Selected Fonts", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateFontAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Remove Selected Font", size: .regular)
        .bind_enabled (.boolcmp (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .id (self.canRemoveSelectedFonts_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeFontAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.projectFontController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetClassesPage
  //····················································································································

  lazy var mNetClassesPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "New Net Class", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addNetClassAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Net Class", size: .regular)
        .bind_enabled (.intcmp (.id (self.netClassController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editNetClassAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Net Class", size: .regular)
        .bind_enabled (.id (self.canRemoveNetClasses_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeNetClassAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.netClassController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetListPage
  //····················································································································

  lazy var mNetListPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .regular)
        .bind_title (self.netCountString_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Rename Net…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameNetAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Select Net Class…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.selectNetClassAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutWarningImageView ()
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutIntObserverField (bold: true, size: .regular)
        .bind_observedValue (self.rootObject.netWarningCount_property)
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutCanariNetDescriptionTableView ()
        .bind_netInfo (self.rootObject.netsDescription_property)
      self.mNetInfoTableView = view_1_0 // Outlet
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Pins of Selected Net", bold: false, size: .regular)
          .set (alignment: .center)
          .set (width: 300)
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        self.configure_pinsOfSelectedNetTableViewConfigurator (view_1_1_1) // Configurator
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSchematicPage
  //····················································································································

  lazy var mSchematicPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlinePage
  //····················································································································

  lazy var mBoardOutlinePage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mBoardOutlineBaseView, equalWidth: true, size: .small)
        .addPage (title: "", tooltip: "", pageView: self.mBoardOutlineInspectorView)
        .addPage (title: "", tooltip: "", pageView: self.mBoardOutlineGridAndFlipView)
        .bind_selectedPage (self.rootObject.mBoardLimitsSelectedInspector_property)
      self.configure_boardOutlineBaseConfigurator (view_0_0) // Configurator
      view_0.appendView (view_0_0)
      let view_0_1 = mBoardOutlineBaseView
      view_0.appendView (view_0_1)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
      .bind_underObjectsDisplay (self.rootObject.borderViewBackground_property)
      .bind_horizontalFlip (self.rootObject.mBoardLimitsHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mBoardLimitsVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mBoardLimitsGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mBoardLimitsGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForBoard_property)
      .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
      .bind_zoom (self.rootObject.mBoardLimitsZoom_property)
      .bind_backColor (preferences_boardBackgroundColorForBoard_property)
      .bind_mouseGrid (self.rootObject.mBoardLimitsGridStep_property)
      .bind_gridStep (self.rootObject.mBoardLimitsGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mBoardLimitsGridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.boardLimitsGridStepMultipliedByDisplayFactor_property)
      .bind_xPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_yPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_graphic_controller (self.boardCurveObjectsController)
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineBaseView
  //····················································································································

  lazy var mBoardOutlineBaseView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineGridAndFlipView
  //····················································································································

  lazy var mBoardOutlineGridAndFlipView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Grid and Flip Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineInspectorView
  //····················································································································

  lazy var mBoardOutlineInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Board Shape", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mBoardShapeBaseView, equalWidth: true, size: .small)
      .addPage (title: "Rectangular", tooltip: "", pageView: self.mBoardRectangularOutlineView)
      .addPage (title: "Bezier Pathes", tooltip: "", pageView: self.mBoardBezierPathOutlineView)
      .bind_selectedSegment (self.rootObject.mBoardShape_property)
    vStackView.appendView (view_1)
    let view_2 = mBoardShapeBaseView
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutHorizontalStackView ()
    do{
      let view_4_0 = AutoLayoutFlexibleSpace ()
      view_4.appendView (view_4_0)
      let view_4_1 = AutoLayoutStaticLabel (title: "Outlines", bold: true, size: .small)
      view_4.appendView (view_4_1)
      let view_4_2 = AutoLayoutFlexibleSpace ()
      view_4.appendView (view_4_2)
    }
    vStackView.appendView (view_4)
    let view_5 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_12 (), right: self.computeImplicitView_13 ())
    vStackView.appendView (view_5)
    let view_6 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_6)
    let view_7 = AutoLayoutHorizontalStackView ()
    do{
      let view_7_0 = AutoLayoutFlexibleSpace ()
      view_7.appendView (view_7_0)
      let view_7_1 = AutoLayoutStaticLabel (title: "Interior Bounding Box", bold: true, size: .small)
      view_7.appendView (view_7_1)
      let view_7_2 = AutoLayoutFlexibleSpace ()
      view_7.appendView (view_7_2)
    }
    vStackView.appendView (view_7)
    let view_8 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardInteriorTop_property)
      .bind_bottom (self.rootObject.boardInteriorBottom_property)
      .bind_left (self.rootObject.boardInteriorLeft_property)
      .bind_right (self.rootObject.boardInteriorRight_property)
      .bind_unit (self.rootObject.mBoardPointsBoundingBoxUnit_property)
    vStackView.appendView (view_8)
    let view_9 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_9)
    let view_10 = AutoLayoutHorizontalStackView ()
    do{
      let view_10_0 = AutoLayoutFlexibleSpace ()
      view_10.appendView (view_10_0)
      let view_10_1 = AutoLayoutStaticLabel (title: "Board Bounding Box", bold: true, size: .small)
      view_10.appendView (view_10_1)
      let view_10_2 = AutoLayoutFlexibleSpace ()
      view_10.appendView (view_10_2)
    }
    vStackView.appendView (view_10)
    let view_11 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardLimitBorderTop_property)
      .bind_bottom (self.rootObject.boardLimitBorderBottom_property)
      .bind_left (self.rootObject.boardLimitBorderLeft_property)
      .bind_right (self.rootObject.boardLimitBorderRight_property)
      .bind_unit (self.rootObject.mBoardLimitsBoundingBoxUnit_property)
    vStackView.appendView (view_11)
    let view_12 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_12)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardShapeBaseView
  //····················································································································

  lazy var mBoardShapeBaseView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardRectangularOutlineView
  //····················································································································

  lazy var mBoardRectangularOutlineView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardBezierPathOutlineView
  //····················································································································

  lazy var mBoardBezierPathOutlineView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.intcmp (.id (self.boardCurveObjectsController.selectedArray_property.count_property), .ne, .literalInt (0)))
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "No Selected Board Limit Element", bold: false, size: .regular)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_28 (), right: self.computeImplicitView_29 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_30 (), right: self.computeImplicitView_31 ())
      .bind_hidden (.intcmp (.id (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardContentsPage
  //····················································································································

  lazy var mBoardContentsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProductPage
  //····················································································································

  lazy var mProductPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutButton (title: "Import Artwork…", size: .regular)
          .expandableWidth ()
          .bind_hidden (.not (.id (self.rootObject.mArtwork_none)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importArtworkAction (_:))
          )
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutButton (title: "Detach Artwork", size: .regular)
          .expandableWidth ()
          .bind_hidden (.id (self.rootObject.mArtwork_none))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.detachArtworkAction (_:))
          )
        view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutLabel (bold: true, size: .regular)
          .expandableWidth ()
          .set (alignment: .center)
          .bind_title (self.rootObject.mArtworkName_property)
        view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutButton (title: "Generate Files", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.not (.id (self.rootObject.mArtwork_none)), .and, .not (.id (self.documentIsUnnamed_property))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.generateProductFilesAction (_:))
          )
        view_0_0.appendView (view_0_0_3)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutTextObserverView ()
          .expandableWidth ()
          .setNoBackground ()
          .setNoVerticalScroller ()
          .setNoHorizontalScroller ()
          .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
        view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutFlexibleSpace ()
        view_0_1.appendView (view_0_1_2)
      }
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.not (.id (self.rootObject.mArtwork_none)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular)
        view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_2)
      }
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView ()
      .bind_hidden (.id (self.rootObject.mArtwork_none))
    do{
      let view_2_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0_0 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mProductMasterView, equalWidth: true, size: .regular)
          .addPage (title: "Artwork Description", tooltip: "", pageView: self.mArtworkDescriptionPage)
          .addPage (title: "Artwork Minima", tooltip: "", pageView: self.mArtworkMinimaPage)
          .addPage (title: "Artwork Data", tooltip: "", pageView: self.mArtworkDataPage)
          .addPage (title: "PDF Settings", tooltip: "", pageView: self.mPDFSettingsPage)
          .addPage (title: "Generation Log", tooltip: "", pageView: self.mGenerationLogPage)
        self.mProductPageSegmentedControl = view_2_0_1 // Outlet
        view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_2)
      }
      view_2.appendView (view_2_0)
      let view_2_1 = mProductMasterView
      view_2.appendView (view_2_1)
    }
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProductMasterView
  //····················································································································

  lazy var mProductMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkDescriptionPage
  //····················································································································

  lazy var mArtworkDescriptionPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_32 (), right: self.computeImplicitView_33 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_34 (), right: self.computeImplicitView_35 ())
      .addCenterYAligned (left: self.computeImplicitView_36 (), right: self.computeImplicitView_37 ())
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkDataPage
  //····················································································································

  lazy var mArtworkDataPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutTextField (width: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_0_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_1_0_1)
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_1_2_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small)
            view_1_2_0_0.appendView (view_1_2_0_0_0)
            let view_1_2_0_0_1 = AutoLayoutTextField (width: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            view_1_2_0_0.appendView (view_1_2_0_0_1)
          }
          view_1_2_0.appendView (view_1_2_0_0)
          let view_1_2_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          view_1_2_0.appendView (view_1_2_0_1)
          let view_1_2_0_2 = AutoLayoutFlexibleSpace ()
          view_1_2_0.appendView (view_1_2_0_2)
          let view_1_2_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small)
            .setOrangeTextColor ()
            .bind_hidden (.not (.id (self.mDataSelection.hasNoData_property)))
          view_1_2_0.appendView (view_1_2_0_3)
        }
        view_1_2.appendView (view_1_2_0)
        let view_1_2_1 = AutoLayoutFlexibleSpace ()
        view_1_2.appendView (view_1_2_1)
        let view_1_2_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_2_0 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small)
          view_1_2_2.appendView (view_1_2_2_0)
          let view_1_2_2_1 = AutoLayoutFlexibleSpace ()
          view_1_2_2.appendView (view_1_2_2_1)
        }
        view_1_2.appendView (view_1_2_2)
        let view_1_2_3 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_3_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_38 (), right: self.computeImplicitView_39 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_40 (), right: self.computeImplicitView_41 ())
          view_1_2_3.appendView (view_1_2_3_0)
          let view_1_2_3_1 = AutoLayoutFlexibleSpace ()
          view_1_2_3.appendView (view_1_2_3_1)
        }
        view_1_2.appendView (view_1_2_3)
        let view_1_2_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_4_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          view_1_2_4.appendView (view_1_2_4_0)
          let view_1_2_4_1 = AutoLayoutFlexibleSpace ()
          view_1_2_4.appendView (view_1_2_4_1)
        }
        view_1_2.appendView (view_1_2_4)
        let view_1_2_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_5_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          view_1_2_5.appendView (view_1_2_5_0)
          let view_1_2_5_1 = AutoLayoutFlexibleSpace ()
          view_1_2_5.appendView (view_1_2_5_1)
        }
        view_1_2.appendView (view_1_2_5)
        let view_1_2_6 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_6_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          view_1_2_6.appendView (view_1_2_6_0)
          let view_1_2_6_1 = AutoLayoutFlexibleSpace ()
          view_1_2_6.appendView (view_1_2_6_1)
        }
        view_1_2.appendView (view_1_2_6)
        let view_1_2_7 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_7_0 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small)
          view_1_2_7.appendView (view_1_2_7_0)
          let view_1_2_7_1 = AutoLayoutFlexibleSpace ()
          view_1_2_7.appendView (view_1_2_7_1)
        }
        view_1_2.appendView (view_1_2_7)
        let view_1_2_8 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_8_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_42 (), right: self.computeImplicitView_43 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_44 (), right: self.computeImplicitView_45 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_46 (), right: self.computeImplicitView_47 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_48 (), right: self.computeImplicitView_49 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_50 (), right: self.computeImplicitView_51 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_52 (), right: self.computeImplicitView_53 ())
          view_1_2_8.appendView (view_1_2_8_0)
          let view_1_2_8_1 = AutoLayoutFlexibleSpace ()
          view_1_2_8.appendView (view_1_2_8_1)
        }
        view_1_2.appendView (view_1_2_8)
        let view_1_2_9 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_9_0 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small)
          view_1_2_9.appendView (view_1_2_9_0)
          let view_1_2_9_1 = AutoLayoutFlexibleSpace ()
          view_1_2_9.appendView (view_1_2_9_1)
        }
        view_1_2.appendView (view_1_2_9)
        let view_1_2_10 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_10_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_54 (), right: self.computeImplicitView_55 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_56 (), right: self.computeImplicitView_57 ())
          view_1_2_10.appendView (view_1_2_10_0)
          let view_1_2_10_1 = AutoLayoutFlexibleSpace ()
          view_1_2_10.appendView (view_1_2_10_1)
        }
        view_1_2.appendView (view_1_2_10)
        let view_1_2_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_11_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          view_1_2_11.appendView (view_1_2_11_0)
          let view_1_2_11_1 = AutoLayoutFlexibleSpace ()
          view_1_2_11.appendView (view_1_2_11_1)
        }
        view_1_2.appendView (view_1_2_11)
        let view_1_2_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_12_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          view_1_2_12.appendView (view_1_2_12_0)
          let view_1_2_12_1 = AutoLayoutFlexibleSpace ()
          view_1_2_12.appendView (view_1_2_12_1)
        }
        view_1_2.appendView (view_1_2_12)
        let view_1_2_13 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_13_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          view_1_2_13.appendView (view_1_2_13_0)
          let view_1_2_13_1 = AutoLayoutFlexibleSpace ()
          view_1_2_13.appendView (view_1_2_13_1)
        }
        view_1_2.appendView (view_1_2_13)
        let view_1_2_14 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_14_0 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small)
          view_1_2_14.appendView (view_1_2_14_0)
          let view_1_2_14_1 = AutoLayoutFlexibleSpace ()
          view_1_2_14.appendView (view_1_2_14_1)
        }
        view_1_2.appendView (view_1_2_14)
        let view_1_2_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_15_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          view_1_2_15.appendView (view_1_2_15_0)
          let view_1_2_15_1 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          view_1_2_15.appendView (view_1_2_15_1)
          let view_1_2_15_2 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          view_1_2_15.appendView (view_1_2_15_2)
          let view_1_2_15_3 = AutoLayoutFlexibleSpace ()
          view_1_2_15.appendView (view_1_2_15_3)
        }
        view_1_2.appendView (view_1_2_15)
        let view_1_2_16 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
          .setFirstBaselineAlignment ()
        do{
          let view_1_2_16_0 = AutoLayoutCheckbox (title: "Pad Holes in PDF file, with diameter", size: .small)
            .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
          view_1_2_16.appendView (view_1_2_16_0)
          let view_1_2_16_1 = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
            .bind_enabled (.id (self.mDataSelection.drawPadHolesInPDF_property))
          view_1_2_16.appendView (view_1_2_16_1)
          let view_1_2_16_2 = AutoLayoutFlexibleSpace ()
          view_1_2_16.appendView (view_1_2_16_2)
        }
        view_1_2.appendView (view_1_2_16)
        let view_1_2_17 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_17_0 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small)
          view_1_2_17.appendView (view_1_2_17_0)
          let view_1_2_17_1 = AutoLayoutFlexibleSpace ()
          view_1_2_17.appendView (view_1_2_17_1)
        }
        view_1_2.appendView (view_1_2_17)
        let view_1_2_18 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_18_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          view_1_2_18.appendView (view_1_2_18_0)
          let view_1_2_18_1 = AutoLayoutFlexibleSpace ()
          view_1_2_18.appendView (view_1_2_18_1)
        }
        view_1_2.appendView (view_1_2_18)
        let view_1_2_19 = AutoLayoutFlexibleSpace ()
        view_1_2.appendView (view_1_2_19)
      }
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkMinimaPage
  //····················································································································

  lazy var mArtworkMinimaPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_2)
        let view_1_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_3)
        let view_1_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_4)
        let view_1_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_5)
        let view_1_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_6)
        let view_1_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_7)
        let view_1_1_8 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_8)
      }
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutStaticImageView (name: "artwork")
      view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_4)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutGridView2 ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_58 (), right: self.computeImplicitView_59 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_60 (), right: self.computeImplicitView_61 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_62 (), right: self.computeImplicitView_63 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_64 (), right: self.computeImplicitView_65 ())
      view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_2)
    }
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_4)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mPDFSettingsPage
  //····················································································································

  lazy var mPDFSettingsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutColorWell ()
        .bind_color (self.rootObject.mPDFBoardBackgroundColor_property, sendContinously:false)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGenerationLogPage
  //····················································································································

  lazy var mGenerationLogPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutTextObserverView ()
    self.mProductFileGenerationLogTextView = view_0 // Outlet
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsGridStep_property, self.rootObject.mBoardLimitsGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mBoardLimitsGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mBoardLimitsGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mBoardLimitsHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mBoardLimitsVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Limit Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsWidth_property, self.rootObject.mBoardLimitsWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardClearance_property, self.rootObject.mBoardClearanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardWidth_property, self.rootObject.mRectangularBoardWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Height", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardHeight_property, self.rootObject.mRectangularBoardHeightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Shape", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BorderCurveShape.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardCurveSelectionController.mShape_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "End Points", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardSelectedCurveDisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mX_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mY_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutLabel (bold: true, size: .small)
        .set (width: 80)
        .set (alignment: .center)
        .bind_title (self.boardCurveSelectionController.p2Xstring_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutLabel (bold: true, size: .small)
        .set (width: 80)
        .set (alignment: .center)
        .bind_title (self.boardCurveSelectionController.p2Ystring_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Control Points", bold: true, size: .small)
      .set (alignment: .left)
      .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
      .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  fileprivate final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  fileprivate final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  fileprivate final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  fileprivate final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (width: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  fileprivate final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  fileprivate final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.rootObject.layerConfigurationString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  fileprivate final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  fileprivate final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_observedValue (self.rootObject.mArtworkVersion_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  fileprivate final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  fileprivate final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutTextObserverView ()
      .expandableWidth ()
      .bind_observedValue (self.rootObject.artworkComments_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  fileprivate final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  fileprivate final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  fileprivate final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  fileprivate final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 42
  //····················································································································

  fileprivate final func computeImplicitView_42 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_value (self.mDataSelection.drawTraversingPads_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 43
  //····················································································································

  fileprivate final func computeImplicitView_43 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 44
  //····················································································································

  fileprivate final func computeImplicitView_44 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 45
  //····················································································································

  fileprivate final func computeImplicitView_45 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 46
  //····················································································································

  fileprivate final func computeImplicitView_46 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 47
  //····················································································································

  fileprivate final func computeImplicitView_47 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 48
  //····················································································································

  fileprivate final func computeImplicitView_48 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 49
  //····················································································································

  fileprivate final func computeImplicitView_49 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 50
  //····················································································································

  fileprivate final func computeImplicitView_50 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 51
  //····················································································································

  fileprivate final func computeImplicitView_51 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 52
  //····················································································································

  fileprivate final func computeImplicitView_52 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 53
  //····················································································································

  fileprivate final func computeImplicitView_53 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 54
  //····················································································································

  fileprivate final func computeImplicitView_54 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 55
  //····················································································································

  fileprivate final func computeImplicitView_55 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 56
  //····················································································································

  fileprivate final func computeImplicitView_56 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 57
  //····················································································································

  fileprivate final func computeImplicitView_57 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 58
  //····················································································································

  fileprivate final func computeImplicitView_58 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 59
  //····················································································································

  fileprivate final func computeImplicitView_59 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 60
  //····················································································································

  fileprivate final func computeImplicitView_60 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 61
  //····················································································································

  fileprivate final func computeImplicitView_61 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 62
  //····················································································································

  fileprivate final func computeImplicitView_62 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 63
  //····················································································································

  fileprivate final func computeImplicitView_63 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 64
  //····················································································································

  fileprivate final func computeImplicitView_64 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 65
  //····················································································································

  fileprivate final func computeImplicitView_65 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
/*    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    } */
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.bind_model (self.rootObject.mBorderCurves_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.bind_selection (model: self.boardCurveObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.bind_model (self.rootObject.mBoardObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.incorrectDocumentFileDetailedErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentFileShouldBeRenamedErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceSymbolNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDevicePackageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceNames
    self.selectedDeviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mNetClasses_property.count_property.selection, unwSelf.netClassController.selectedArray_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveNetClasses (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.addEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentIsUnnamed_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.drillDataFileExtension_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.addEBObserver (self.emptyDrillFileExtension_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mComponents_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_componentCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.addEBObserver (self.componentCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.componentController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canChangePackage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.addEBObserverOf_availablePackages (self.canChangePackage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedFonts
    self.canRemoveSelectedFonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectFontController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedFonts (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectFontController.selectedArray_property.addEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedDevices (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.emptyDrillFileExtension_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.addEBObserver (self.emptyDrillFileExtensionImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mDataController.sortedArray_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.generatedFileCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mComponentsPage.ebCleanUp ()
    self.mLibraryPage.ebCleanUp ()
    self.mLibraryContentView.ebCleanUp ()
    self.mDevicesInLibraryPage.ebCleanUp ()
    self.mFontsInLibraryPage.ebCleanUp ()
    self.mNetClassesPage.ebCleanUp ()
    self.mNetListPage.ebCleanUp ()
    self.mSchematicPage.ebCleanUp ()
    self.mBoardOutlinePage.ebCleanUp ()
    self.mBoardOutlineBaseView.ebCleanUp ()
    self.mBoardOutlineGridAndFlipView.ebCleanUp ()
    self.mBoardOutlineInspectorView.ebCleanUp ()
    self.mBoardShapeBaseView.ebCleanUp ()
    self.mBoardRectangularOutlineView.ebCleanUp ()
    self.mBoardBezierPathOutlineView.ebCleanUp ()
    self.mBoardContentsPage.ebCleanUp ()
    self.mProductPage.ebCleanUp ()
    self.mProductMasterView.ebCleanUp ()
    self.mArtworkDescriptionPage.ebCleanUp ()
    self.mArtworkDataPage.ebCleanUp ()
    self.mArtworkMinimaPage.ebCleanUp ()
    self.mPDFSettingsPage.ebCleanUp ()
    self.mGenerationLogPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: netClassController
    self.netClassController.unbind_model ()
  //--- Array controller property: componentController
    self.componentController.unbind_model ()
  //--- Array controller property: projectFontController
    self.projectFontController.unbind_model ()
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.unbind_model ()
  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.unbind_model ()
  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.unbind_selection ()
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.unbind_model ()
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCount_property)
    // self.documentFileName_property.removeEBObserver (self.incorrectDocumentFileDetailedErrorMessage_property)
    // self.documentFileName_property.removeEBObserver (self.documentFileShouldBeRenamedErrorMessage_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    // self.rootObject.mNetClasses_property.count_property.removeEBObserver (self.canRemoveNetClasses_property)
    // self.netClassController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCountString_property)
    // self.documentFileName_property.removeEBObserver (self.documentIsUnnamed_property)
    // self.rootObject.drillDataFileExtension_property.removeEBObserver (self.emptyDrillFileExtension_property)
    // self.rootObject.mComponents_property.count_property.removeEBObserver (self.componentCount_property)
    // self.componentController.selectedArray_property.removeEBObserverOf_availablePackages (self.canChangePackage_property)
    // self.projectFontController.selectedArray_property.removeEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    // self.emptyDrillFileExtension_property.removeEBObserver (self.emptyDrillFileExtensionImage_property)
    // self.mDataController.sortedArray_property.count_property.removeEBObserver (self.generatedFileCountString_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

