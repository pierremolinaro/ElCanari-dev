//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutProjectDocument) class AutoLayoutProjectDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: netClassController
  //····················································································································

  var netClassController = Controller_AutoLayoutProjectDocument_netClassController ()

  //····················································································································
  //   Array controller: componentController
  //····················································································································

  var componentController = Controller_AutoLayoutProjectDocument_componentController ()

  //····················································································································
  //   Array controller: projectFontController
  //····················································································································

  var projectFontController = Controller_AutoLayoutProjectDocument_projectFontController ()

  //····················································································································
  //   Array controller: projectDeviceController
  //····················································································································

  var projectDeviceController = Controller_AutoLayoutProjectDocument_projectDeviceController ()

  //····················································································································
  //   Array controller: boardObjectsController
  //····················································································································

  var boardObjectsController = Controller_AutoLayoutProjectDocument_boardObjectsController ()

  //····················································································································
  //   Transient property: netCount
  //····················································································································

  final let netCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netCount : Int? {
    switch self.netCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceSymbolNames
  //····················································································································

  final let selectedDeviceSymbolNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  final var selectedDeviceSymbolNames : TwoStringArray? {
    switch self.selectedDeviceSymbolNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDevicePackageNames
  //····················································································································

  final let selectedDevicePackageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDevicePackageNames : StringArray? {
    switch self.selectedDevicePackageNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceNames
  //····················································································································

  final let selectedDeviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDeviceNames : StringArray? {
    switch self.selectedDeviceNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveNetClasses
  //····················································································································

  final let canRemoveNetClasses_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveNetClasses : Bool? {
    switch self.canRemoveNetClasses_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCountString
  //····················································································································

  final let netCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var netCountString : String? {
    switch self.netCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentCount
  //····················································································································

  final let componentCount_property = EBTransientProperty_String ()

  //····················································································································

  final var componentCount : String? {
    switch self.componentCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canChangePackage
  //····················································································································

  final let canChangePackage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canChangePackage : Bool? {
    switch self.canChangePackage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedFonts
  //····················································································································

  final let canRemoveSelectedFonts_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedFonts : Bool? {
    switch self.canRemoveSelectedFonts_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedDevices
  //····················································································································

  final let canRemoveSelectedDevices_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedDevices : Bool? {
    switch self.canRemoveSelectedDevices_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mNetInfoTableView : AutoLayoutCanariNetDescriptionTableView? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.postEvent ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: netClassController
      self.netClassController.addExplorer (name: "netClassController", y:&y, view:view)
    //--- Array controller property: componentController
      self.componentController.addExplorer (name: "componentController", y:&y, view:view)
    //--- Array controller property: projectFontController
      self.projectFontController.addExplorer (name: "projectFontController", y:&y, view:view)
    //--- Array controller property: projectDeviceController
      self.projectDeviceController.addExplorer (name: "projectDeviceController", y:&y, view:view)
    //--- Array controller property: boardObjectsController
      self.boardObjectsController.addExplorer (name: "boardObjectsController", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Components", tooltip: "", pageView: self.mComponentsPage)
          .addPage (title: "Library", tooltip: "", pageView: self.mLibraryPage)
          .addPage (title: "Schematic", tooltip: "", pageView: self.mSchematicPage)
          .addPage (title: "Net Classes", tooltip: "", pageView: self.mNetClassesPage)
          .addPage (title: "Net List", tooltip: "", pageView: self.mNetListPage)
          .addPage (title: "Board Outline", tooltip: "", pageView: self.mBoardOutlinePage)
          .addPage (title: "Board Contents", tooltip: "", pageView: self.mBoardContentsPage)
          .addPage (title: "Product", tooltip: "", pageView: self.mProductPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_2_0_0 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_0)
          let view_0_2_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.schematicStatusImage_property)
            .bind_tooltip (self.rootObject.schematicStatusMessage_property)
          view_0_2_0.appendView (view_0_2_0_1)
          let view_0_2_0_2 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_2)
        }
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Schematic", bold: false, size: .small)
          .set (alignment: .center)
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
      do{
        let view_0_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_3_0_0 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_0)
          let view_0_3_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.boardStatusImage_property)
            .bind_tooltip (self.rootObject.boardStatusMessage_property)
          view_0_3_0.appendView (view_0_3_0_1)
          let view_0_3_0_2 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_2)
        }
        view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutStaticLabel (title: "Board", bold: false, size: .small)
          .set (alignment: .center)
        view_0_3.appendView (view_0_3_1)
      }
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.ercStatusImage_property)
            .bind_tooltip (self.rootObject.ercStatusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "ERC", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mComponentsPage
  //····················································································································

  lazy var mComponentsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutVerticalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentCount_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Add Component from:", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromFileLibraryAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutPullDownButton (title: "Embedded Library…", size: .small)
        .expandableWidth ()
        .bind_items (self.rootObject.deviceNames_property)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromEmbeddedLibraryAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutStaticLabel (title: "On Selected Components", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_6)
      let view_0_7 = AutoLayoutButton (title: "Duplicate", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.duplicateSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_7)
      let view_0_8 = AutoLayoutButton (title: "Rename…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_8)
      let view_0_9 = AutoLayoutButton (title: "Remove", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_9)
      let view_0_10 = AutoLayoutButton (title: "Change Package…", size: .small)
        .expandableWidth ()
        .bind_enabled (.id (self.canChangePackage_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changePackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_10)
      let view_0_11 = AutoLayoutButton (title: "Change Value…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changeValueOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_11)
      let view_0_12 = AutoLayoutButton (title: "Reveal in Board", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.revealPackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_12)
      let view_0_13 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_13)
      let view_0_14 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_14)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.componentController.bind_tableView (view_1)
    hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mLibraryPage
  //····················································································································

  lazy var mLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Remove Embedded Devices", size: .regular)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeEmbeddedDevicesAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Device and Font Versions", size: .regular)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetDevicesAndFontsVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Update Devices and Fonts", size: .regular)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateDevicesAndFontsAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mLibraryContentView, equalWidth: false, size: .regular)
        .addPage (title: "Devices", tooltip: "", pageView: self.mDevicesInLibraryPage)
        .addPage (title: "Fonts", tooltip: "", pageView: self.mFontsInLibraryPage)
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    let view_2 = mLibraryContentView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mLibraryContentView
  //····················································································································

  lazy var mLibraryContentView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDevicesInLibraryPage
  //····················································································································

  lazy var mDevicesInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Edit Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Selected Device Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetSelectedDeviceVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Device", size: .regular)
        .bind_enabled (.id (self.canRemoveSelectedDevices_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Export Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.exportSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Update Selected Device…", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        .set (width: 400)
      self.projectDeviceController.bind_tableView (view_1_0)
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_0_0 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutStaticLabel (title: "Selected Device", bold: false, size: .regular)
          view_1_1_0.appendView (view_1_1_0_1)
          let view_1_1_0_2 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_2)
        }
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalSplitView ()
        do{
          let view_1_1_1_0 = AutoLayoutCanariProjectDeviceTableView (size: .regular)
            .set (width: 150)
            .bind_array (self.selectedDeviceNames_property)
          view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalSplitView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutCanariProjectDeviceSymbolTypeAndNameTableView (size: .regular)
              .set (width: 250)
              .set (height: 200)
              .bind_array (self.selectedDeviceSymbolNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutCanariProjectDevicePackageTableView (size: .regular)
              .set (height: 200)
              .bind_array (self.selectedDevicePackageNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_1)
          }
          view_1_1_1.appendView (view_1_1_1_1)
          let view_1_1_1_2 = AutoLayoutCanariProjectPinPadAssignmentTableView (size: .regular)
            .set (width: 200)
            .bind_array (self.pinPadAssignments_property)
          view_1_1_1.appendView (view_1_1_1_2)
        }
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mFontsInLibraryPage
  //····················································································································

  lazy var mFontsInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Add Font…", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addFontAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Font", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editFontAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Reset Selected Font Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetFontVersionAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Update Selected Fonts", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateFontAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Remove Selected Font", size: .regular)
        .bind_enabled (.boolcmp (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .id (self.canRemoveSelectedFonts_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeFontAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.projectFontController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetClassesPage
  //····················································································································

  lazy var mNetClassesPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "New Net Class", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addNetClassAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Net Class", size: .regular)
        .bind_enabled (.intcmp (.id (self.netClassController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editNetClassAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Net Class", size: .regular)
        .bind_enabled (.id (self.canRemoveNetClasses_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeNetClassAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.netClassController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetListPage
  //····················································································································

  lazy var mNetListPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .regular)
        .bind_title (self.netCountString_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutWarningImageView ()
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutIntObserverField (bold: true, size: .regular)
        .bind_observedValue (self.rootObject.netWarningCount_property)
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Rename Net…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameNetClassAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Select Net Class…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.selectNetClassAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutCanariNetDescriptionTableView ()
        .bind_netInfo (self.rootObject.netsDescription_property)
      self.mNetInfoTableView = view_1_0 // Outlet
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Pins of Selected Net", bold: false, size: .regular)
          .set (width: 200)
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSchematicPage
  //····················································································································

  lazy var mSchematicPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlinePage
  //····················································································································

  lazy var mBoardOutlinePage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProductPage
  //····················································································································

  lazy var mProductPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardContentsPage
  //····················································································································

  lazy var mBoardContentsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
/*    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    } */
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.bind_model (self.rootObject.mBoardObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceSymbolNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDevicePackageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceNames
    self.selectedDeviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mNetClasses_property.count_property.selection, unwSelf.netClassController.selectedArray_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveNetClasses (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.addEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mComponents_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_componentCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.addEBObserver (self.componentCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.componentController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canChangePackage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.addEBObserverOf_availablePackages (self.canChangePackage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedFonts
    self.canRemoveSelectedFonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectFontController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedFonts (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectFontController.selectedArray_property.addEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedDevices (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mComponentsPage.ebCleanUp ()
    self.mLibraryPage.ebCleanUp ()
    self.mLibraryContentView.ebCleanUp ()
    self.mDevicesInLibraryPage.ebCleanUp ()
    self.mFontsInLibraryPage.ebCleanUp ()
    self.mNetClassesPage.ebCleanUp ()
    self.mNetListPage.ebCleanUp ()
    self.mSchematicPage.ebCleanUp ()
    self.mBoardOutlinePage.ebCleanUp ()
    self.mProductPage.ebCleanUp ()
    self.mBoardContentsPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: netClassController
    self.netClassController.unbind_model ()
  //--- Array controller property: componentController
    self.componentController.unbind_model ()
  //--- Array controller property: projectFontController
    self.projectFontController.unbind_model ()
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.unbind_model ()
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.unbind_model ()
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCount_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    // self.rootObject.mNetClasses_property.count_property.removeEBObserver (self.canRemoveNetClasses_property)
    // self.netClassController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCountString_property)
    // self.rootObject.mComponents_property.count_property.removeEBObserver (self.componentCount_property)
    // self.componentController.selectedArray_property.removeEBObserverOf_availablePackages (self.canChangePackage_property)
    // self.projectFontController.selectedArray_property.removeEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

