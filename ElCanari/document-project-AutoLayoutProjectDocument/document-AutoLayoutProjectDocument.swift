//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutProjectDocument) class AutoLayoutProjectDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: netClassController
  //····················································································································

  var netClassController = Controller_AutoLayoutProjectDocument_netClassController ()

  //····················································································································
  //   Array controller: componentController
  //····················································································································

  var componentController = Controller_AutoLayoutProjectDocument_componentController ()

  //····················································································································
  //   Array controller: projectFontController
  //····················································································································

  var projectFontController = Controller_AutoLayoutProjectDocument_projectFontController ()

  //····················································································································
  //   Array controller: projectDeviceController
  //····················································································································

  var projectDeviceController = Controller_AutoLayoutProjectDocument_projectDeviceController ()

  //····················································································································
  //   Array controller: schematicObjectsController
  //····················································································································

  var schematicObjectsController = Controller_AutoLayoutProjectDocument_schematicObjectsController ()

  //····················································································································
  //   Array controller: boardCurveObjectsController
  //····················································································································

  var boardCurveObjectsController = Controller_AutoLayoutProjectDocument_boardCurveObjectsController ()

  //····················································································································
  //   Selection controller: boardCurveSelectionController
  //····················································································································

  var boardCurveSelectionController = SelectionController_AutoLayoutProjectDocument_boardCurveSelectionController ()

  //····················································································································
  //   Array controller: boardObjectsController
  //····················································································································

  var boardObjectsController = Controller_AutoLayoutProjectDocument_boardObjectsController ()

  //····················································································································
  //   Selection controller: boardTrackSelectionController
  //····················································································································

  var boardTrackSelectionController = SelectionController_AutoLayoutProjectDocument_boardTrackSelectionController ()

  //····················································································································
  //   Selection controller: boardConnectorSelectionController
  //····················································································································

  var boardConnectorSelectionController = SelectionController_AutoLayoutProjectDocument_boardConnectorSelectionController ()

  //····················································································································
  //   Selection controller: boardLineSelectionController
  //····················································································································

  var boardLineSelectionController = SelectionController_AutoLayoutProjectDocument_boardLineSelectionController ()

  //····················································································································
  //   Selection controller: restrictRectangleSelectionController
  //····················································································································

  var restrictRectangleSelectionController = SelectionController_AutoLayoutProjectDocument_restrictRectangleSelectionController ()

  //····················································································································
  //   Selection controller: boardTextSelectionController
  //····················································································································

  var boardTextSelectionController = SelectionController_AutoLayoutProjectDocument_boardTextSelectionController ()

  //····················································································································
  //   Selection controller: componentInBoardSelectionController
  //····················································································································

  var componentInBoardSelectionController = SelectionController_AutoLayoutProjectDocument_componentInBoardSelectionController ()

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_AutoLayoutProjectDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_AutoLayoutProjectDocument_mDataSelection ()

  //····················································································································
  //   Transient property: netCount
  //····················································································································

  final let netCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netCount : Int? {
    switch self.netCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetDisplayOneNet
  //····················································································································

  final let rastnetDisplayOneNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var rastnetDisplayOneNet : Bool? {
    switch self.rastnetDisplayOneNet_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetDisplayComponentNet
  //····················································································································

  final let rastnetDisplayComponentNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var rastnetDisplayComponentNet : Bool? {
    switch self.rastnetDisplayComponentNet_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //····················································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    switch self.incorrectDocumentFileDetailedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //····················································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    switch self.documentFileShouldBeRenamedErrorMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceSymbolNames
  //····················································································································

  final let selectedDeviceSymbolNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  final var selectedDeviceSymbolNames : TwoStringArray? {
    switch self.selectedDeviceSymbolNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDevicePackageNames
  //····················································································································

  final let selectedDevicePackageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDevicePackageNames : StringArray? {
    switch self.selectedDevicePackageNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceNames
  //····················································································································

  final let selectedDeviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var selectedDeviceNames : StringArray? {
    switch self.selectedDeviceNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveNetClasses
  //····················································································································

  final let canRemoveNetClasses_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveNetClasses : Bool? {
    switch self.canRemoveNetClasses_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCountString
  //····················································································································

  final let netCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var netCountString : String? {
    switch self.netCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: rastnetShape
  //····················································································································

  final let rastnetShape_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var rastnetShape : EBShape? {
    switch self.rastnetShape_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  final let documentIsUnnamed_property = EBTransientProperty_Bool ()

  //····················································································································

  final var documentIsUnnamed : Bool? {
    switch self.documentIsUnnamed_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtension
  //····················································································································

  final let emptyDrillFileExtension_property = EBTransientProperty_Bool ()

  //····················································································································

  final var emptyDrillFileExtension : Bool? {
    switch self.emptyDrillFileExtension_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentCount
  //····················································································································

  final let componentCount_property = EBTransientProperty_String ()

  //····················································································································

  final var componentCount : String? {
    switch self.componentCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canChangePackage
  //····················································································································

  final let canChangePackage_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canChangePackage : Bool? {
    switch self.canChangePackage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedFonts
  //····················································································································

  final let canRemoveSelectedFonts_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedFonts : Bool? {
    switch self.canRemoveSelectedFonts_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedDevices
  //····················································································································

  final let canRemoveSelectedDevices_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveSelectedDevices : Bool? {
    switch self.canRemoveSelectedDevices_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: overDisplay
  //····················································································································

  final let overDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var overDisplay : EBShape? {
    switch self.overDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackageCount
  //····················································································································

  final let unplacedPackageCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var unplacedPackageCount : Int? {
    switch self.unplacedPackageCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackagesCountString
  //····················································································································

  final let unplacedPackagesCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var unplacedPackagesCountString : String? {
    switch self.unplacedPackagesCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackagesMessageString
  //····················································································································

  final let unplacedPackagesMessageString_property = EBTransientProperty_String ()

  //····················································································································

  final var unplacedPackagesMessageString : String? {
    switch self.unplacedPackagesMessageString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: emptyDrillFileExtensionImage
  //····················································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    switch self.emptyDrillFileExtensionImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: generatedFileCountString
  //····················································································································

  final let generatedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var generatedFileCountString : String? {
    switch self.generatedFileCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mBoardView : AutoLayoutGraphicView? = nil
  weak final var mERCIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mERCLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mNetInfoTableView : AutoLayoutCanariNetDescriptionTableView? = nil
  weak final var mProductFileGenerationLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  weak final var mSchematicsView : AutoLayoutGraphicView? = nil
  weak final var mUnplacedPackageTableView : AutoLayoutElCanariDragSourceTableView? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: netClassController
      self.netClassController.addExplorer (name: "netClassController", y:&y, view:view)
    //--- Array controller property: componentController
      self.componentController.addExplorer (name: "componentController", y:&y, view:view)
    //--- Array controller property: projectFontController
      self.projectFontController.addExplorer (name: "projectFontController", y:&y, view:view)
    //--- Array controller property: projectDeviceController
      self.projectDeviceController.addExplorer (name: "projectDeviceController", y:&y, view:view)
    //--- Array controller property: schematicObjectsController
      self.schematicObjectsController.addExplorer (name: "schematicObjectsController", y:&y, view:view)
    //--- Array controller property: boardCurveObjectsController
      self.boardCurveObjectsController.addExplorer (name: "boardCurveObjectsController", y:&y, view:view)
    //--- Selection controller property: boardCurveSelectionController
      self.boardCurveSelectionController.addExplorer (name: "boardCurveSelectionController", y:&y, view:view)
    //--- Array controller property: boardObjectsController
      self.boardObjectsController.addExplorer (name: "boardObjectsController", y:&y, view:view)
    //--- Selection controller property: boardTrackSelectionController
      self.boardTrackSelectionController.addExplorer (name: "boardTrackSelectionController", y:&y, view:view)
    //--- Selection controller property: boardConnectorSelectionController
      self.boardConnectorSelectionController.addExplorer (name: "boardConnectorSelectionController", y:&y, view:view)
    //--- Selection controller property: boardLineSelectionController
      self.boardLineSelectionController.addExplorer (name: "boardLineSelectionController", y:&y, view:view)
    //--- Selection controller property: restrictRectangleSelectionController
      self.restrictRectangleSelectionController.addExplorer (name: "restrictRectangleSelectionController", y:&y, view:view)
    //--- Selection controller property: boardTextSelectionController
      self.boardTextSelectionController.addExplorer (name: "boardTextSelectionController", y:&y, view:view)
    //--- Selection controller property: componentInBoardSelectionController
      self.componentInBoardSelectionController.addExplorer (name: "componentInBoardSelectionController", y:&y, view:view)
    //--- Array controller property: mDataController
      self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
    //--- Selection controller property: mDataSelection
      self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Components", tooltip: "", pageView: self.mComponentsPage)
          .addPage (title: "Library", tooltip: "", pageView: self.mLibraryPage)
          .addPage (title: "Schematic", tooltip: "", pageView: self.mSchematicPage)
          .addPage (title: "Net Classes", tooltip: "", pageView: self.mNetClassesPage)
          .addPage (title: "Net List", tooltip: "", pageView: self.mNetListPage)
          .addPage (title: "Board Outline", tooltip: "", pageView: self.mBoardOutlinePage)
          .addPage (title: "Board Contents", tooltip: "", pageView: self.mBoardContentsPage)
          .addPage (title: "Product", tooltip: "", pageView: self.mProductPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_2_0_0 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_0)
          let view_0_2_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.schematicStatusImage_property)
            .bind_tooltip (self.rootObject.schematicStatusMessage_property)
          view_0_2_0.appendView (view_0_2_0_1)
          let view_0_2_0_2 = AutoLayoutFlexibleSpace ()
          view_0_2_0.appendView (view_0_2_0_2)
        }
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Schematic", bold: false, size: .small)
          .set (alignment: .center)
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
      do{
        let view_0_3_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_3_0_0 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_0)
          let view_0_3_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.boardStatusImage_property)
            .bind_tooltip (self.rootObject.boardStatusMessage_property)
          view_0_3_0.appendView (view_0_3_0_1)
          let view_0_3_0_2 = AutoLayoutFlexibleSpace ()
          view_0_3_0.appendView (view_0_3_0_2)
        }
        view_0_3.appendView (view_0_3_0)
        let view_0_3_1 = AutoLayoutStaticLabel (title: "Board", bold: false, size: .small)
          .set (alignment: .center)
        view_0_3.appendView (view_0_3_1)
      }
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.rootObject.ercStatusImage_property)
            .bind_tooltip (self.rootObject.ercStatusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "ERC", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mComponentsPage
  //····················································································································

  lazy var mComponentsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutVerticalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentCount_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Add Component from:", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "File Library…", size: .small)
        .expandableWidth ()
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromFileLibraryAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutPullDownButton (title: "Embedded Library…", size: .small)
        .expandableWidth ()
        .bind_items (self.rootObject.deviceNames_property)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addComponentFromEmbeddedLibraryAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_5)
      let view_0_6 = AutoLayoutStaticLabel (title: "On Selected Components", bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .left)
      view_0.appendView (view_0_6)
      let view_0_7 = AutoLayoutButton (title: "Duplicate", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.duplicateSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_7)
      let view_0_8 = AutoLayoutButton (title: "Rename…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_8)
      let view_0_9 = AutoLayoutButton (title: "Remove", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_9)
      let view_0_10 = AutoLayoutButton (title: "Change Package…", size: .small)
        .expandableWidth ()
        .bind_enabled (.id (self.canChangePackage_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changePackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_10)
      let view_0_11 = AutoLayoutButton (title: "Change Value…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.changeValueOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_11)
      let view_0_12 = AutoLayoutButton (title: "Reveal in Board", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.id (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.revealPackageOfSelectedComponentsAction (_:))
        )
      view_0.appendView (view_0_12)
      let view_0_13 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_13)
      let view_0_14 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_14)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.componentController.bind_tableView (view_1)
    hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mLibraryPage
  //····················································································································

  lazy var mLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Remove Embedded Devices", size: .regular)
        .bind_enabled (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeEmbeddedDevicesAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Device and Font Versions", size: .regular)
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetDevicesAndFontsVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Update Devices and Fonts", size: .regular)
        .bind_enabled (.boolcmp (.intcmp (.id (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.id (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateDevicesAndFontsAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mLibraryContentView, equalWidth: false, size: .regular)
        .addPage (title: "Devices", tooltip: "", pageView: self.mDevicesInLibraryPage)
        .addPage (title: "Fonts", tooltip: "", pageView: self.mFontsInLibraryPage)
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    let view_2 = mLibraryContentView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mLibraryContentView
  //····················································································································

  lazy var mLibraryContentView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDevicesInLibraryPage
  //····················································································································

  lazy var mDevicesInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Edit Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Reset Selected Device Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetSelectedDeviceVersionAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Device", size: .regular)
        .bind_enabled (.id (self.canRemoveSelectedDevices_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Export Selected Device", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.exportSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Update Selected Device…", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateSelectedDeviceAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        .set (width: 400)
      self.projectDeviceController.bind_tableView (view_1_0)
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_1_0_0 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutStaticLabel (title: "Selected Device", bold: false, size: .regular)
          view_1_1_0.appendView (view_1_1_0_1)
          let view_1_1_0_2 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_2)
        }
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutHorizontalSplitView ()
        do{
          let view_1_1_1_0 = AutoLayoutCanariProjectDeviceTableView (size: .regular)
            .set (width: 150)
            .bind_array (self.selectedDeviceNames_property)
          view_1_1_1.appendView (view_1_1_1_0)
          let view_1_1_1_1 = AutoLayoutVerticalSplitView ()
          do{
            let view_1_1_1_1_0 = AutoLayoutCanariProjectDeviceSymbolTypeAndNameTableView (size: .regular)
              .set (width: 250)
              .set (height: 200)
              .bind_array (self.selectedDeviceSymbolNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_0)
            let view_1_1_1_1_1 = AutoLayoutCanariProjectDevicePackageTableView (size: .regular)
              .set (height: 200)
              .bind_array (self.selectedDevicePackageNames_property)
            view_1_1_1_1.appendView (view_1_1_1_1_1)
          }
          view_1_1_1.appendView (view_1_1_1_1)
          let view_1_1_1_2 = AutoLayoutCanariProjectPinPadAssignmentTableView (size: .regular)
            .set (width: 200)
            .bind_array (self.pinPadAssignments_property)
          view_1_1_1.appendView (view_1_1_1_2)
        }
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mFontsInLibraryPage
  //····················································································································

  lazy var mFontsInLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Add Font…", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addFontAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Font", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editFontAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Reset Selected Font Version", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.resetFontVersionAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutButton (title: "Update Selected Fonts", size: .regular)
        .bind_enabled (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.updateFontAction (_:))
        )
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Remove Selected Font", size: .regular)
        .bind_enabled (.boolcmp (.intcmp (.id (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .id (self.canRemoveSelectedFonts_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeFontAction (_:))
        )
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.projectFontController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetClassesPage
  //····················································································································

  lazy var mNetClassesPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "New Net Class", size: .regular)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.addNetClassAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Edit Selected Net Class", size: .regular)
        .bind_enabled (.intcmp (.id (self.netClassController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.editNetClassAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Remove Selected Net Class", size: .regular)
        .bind_enabled (.id (self.canRemoveNetClasses_property))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.removeNetClassAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
    self.netClassController.bind_tableView (view_1)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mNetListPage
  //····················································································································

  lazy var mNetListPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, size: .regular)
        .bind_title (self.netCountString_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Rename Net…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameNetAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Select Net Class…", size: .regular)
        .bind_enabled (.intcmp (.id (self.netCount_property), .gt, .literalInt (0)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.selectNetClassAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutWarningImageView ()
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutIntObserverField (bold: true, size: .regular)
        .bind_observedValue (self.rootObject.netWarningCount_property)
        .bind_hidden (.intcmp (.id (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalSplitView ()
    do{
      let view_1_0 = AutoLayoutCanariNetDescriptionTableView ()
        .bind_netInfo (self.rootObject.netsDescription_property)
      self.mNetInfoTableView = view_1_0 // Outlet
      self.configure_netDescriptionTableViewConfigurator (view_1_0) // Configurator
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutStaticLabel (title: "Pins of Selected Net", bold: false, size: .regular)
          .set (alignment: .center)
          .set (minWidth: 300)
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTableView (size: .regular, addControlButtons: false)
        self.configure_pinsOfSelectedNetTableViewConfigurator (view_1_1_1) // Configurator
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSchematicPage
  //····················································································································

  lazy var mSchematicPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "TEMPORARY", bold: false, size: .regular)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutGraphicView (minZoom: 50, maxZoom: 1000)
        .bind_underObjectsDisplay (self.rootObject.schematicBackgroundDisplay_property)
        .bind_overObjectsDisplay (self.rootObject.connectedPoints_property)
        .bind_horizontalFlip (self.rootObject.mSchematicHorizontalFlip_property)
        .bind_verticalFlip (self.rootObject.mSchematicVerticalFlip_property)
        .bind_gridStyle (self.rootObject.mSchematicGridStyle_property)
        .bind_gridDisplayFactor (self.rootObject.mSchematicGridDisplayFactor_property)
        .bind_gridLineColor (preferences_lineColorGridForSchematic_property)
        .bind_gridCrossColor (preferences_dotColorGridForSchematic_property)
        .bind_zoom (self.rootObject.mSchematicZoom_property)
        .bind_backColor (preferences_schematicBackColor_property)
        .bind_graphic_controller (self.schematicObjectsController)
      self.mSchematicsView = view_0_2 // Outlet
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlinePage
  //····················································································································

  lazy var mBoardOutlinePage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mBoardOutlineBaseView, equalWidth: true, size: .small)
        .addPage (title: "", tooltip: "", pageView: self.mBoardOutlineInspectorView)
        .addPage (title: "", tooltip: "", pageView: self.mBoardOutlineGridAndFlipView)
        .bind_selectedPage (self.rootObject.mBoardLimitsSelectedInspector_property)
      self.configure_boardOutlineBaseConfigurator (view_0_0) // Configurator
      view_0.appendView (view_0_0)
      let view_0_1 = mBoardOutlineBaseView
      view_0.appendView (view_0_1)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
      .bind_underObjectsDisplay (self.rootObject.borderViewBackground_property)
      .bind_horizontalFlip (self.rootObject.mBoardLimitsHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mBoardLimitsVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mBoardLimitsGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mBoardLimitsGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForBoard_property)
      .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
      .bind_zoom (self.rootObject.mBoardLimitsZoom_property)
      .bind_backColor (preferences_boardBackgroundColorForBoard_property)
      .bind_mouseGrid (self.rootObject.mBoardLimitsGridStep_property)
      .bind_gridStep (self.rootObject.mBoardLimitsGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mBoardLimitsGridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.boardLimitsGridStepMultipliedByDisplayFactor_property)
      .bind_xPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_yPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
      .bind_graphic_controller (self.boardCurveObjectsController)
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineBaseView
  //····················································································································

  lazy var mBoardOutlineBaseView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineGridAndFlipView
  //····················································································································

  lazy var mBoardOutlineGridAndFlipView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Grid and Flip Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardOutlineInspectorView
  //····················································································································

  lazy var mBoardOutlineInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Board Shape", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mBoardShapeBaseView, equalWidth: true, size: .small)
      .addPage (title: "Rectangular", tooltip: "", pageView: self.mBoardRectangularOutlineView)
      .addPage (title: "Bezier Pathes", tooltip: "", pageView: self.mBoardBezierPathOutlineView)
      .bind_selectedSegment (self.rootObject.mBoardShape_property)
    vStackView.appendView (view_1)
    let view_2 = mBoardShapeBaseView
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutHorizontalStackView ()
    do{
      let view_4_0 = AutoLayoutFlexibleSpace ()
      view_4.appendView (view_4_0)
      let view_4_1 = AutoLayoutStaticLabel (title: "Outlines", bold: true, size: .small)
      view_4.appendView (view_4_1)
      let view_4_2 = AutoLayoutFlexibleSpace ()
      view_4.appendView (view_4_2)
    }
    vStackView.appendView (view_4)
    let view_5 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_12 (), right: self.computeImplicitView_13 ())
    vStackView.appendView (view_5)
    let view_6 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_6)
    let view_7 = AutoLayoutHorizontalStackView ()
    do{
      let view_7_0 = AutoLayoutFlexibleSpace ()
      view_7.appendView (view_7_0)
      let view_7_1 = AutoLayoutStaticLabel (title: "Interior Bounding Box", bold: true, size: .small)
      view_7.appendView (view_7_1)
      let view_7_2 = AutoLayoutFlexibleSpace ()
      view_7.appendView (view_7_2)
    }
    vStackView.appendView (view_7)
    let view_8 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardInteriorTop_property)
      .bind_bottom (self.rootObject.boardInteriorBottom_property)
      .bind_left (self.rootObject.boardInteriorLeft_property)
      .bind_right (self.rootObject.boardInteriorRight_property)
      .bind_unit (self.rootObject.mBoardPointsBoundingBoxUnit_property)
    vStackView.appendView (view_8)
    let view_9 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_9)
    let view_10 = AutoLayoutHorizontalStackView ()
    do{
      let view_10_0 = AutoLayoutFlexibleSpace ()
      view_10.appendView (view_10_0)
      let view_10_1 = AutoLayoutStaticLabel (title: "Board Bounding Box", bold: true, size: .small)
      view_10.appendView (view_10_1)
      let view_10_2 = AutoLayoutFlexibleSpace ()
      view_10.appendView (view_10_2)
    }
    vStackView.appendView (view_10)
    let view_11 = AutoLayoutCanariBoardRectangleView ()
      .bind_top (self.rootObject.boardLimitBorderTop_property)
      .bind_bottom (self.rootObject.boardLimitBorderBottom_property)
      .bind_left (self.rootObject.boardLimitBorderLeft_property)
      .bind_right (self.rootObject.boardLimitBorderRight_property)
      .bind_unit (self.rootObject.mBoardLimitsBoundingBoxUnit_property)
    vStackView.appendView (view_11)
    let view_12 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_12)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardShapeBaseView
  //····················································································································

  lazy var mBoardShapeBaseView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardRectangularOutlineView
  //····················································································································

  lazy var mBoardRectangularOutlineView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardBezierPathOutlineView
  //····················································································································

  lazy var mBoardBezierPathOutlineView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.intcmp (.id (self.boardCurveObjectsController.selectedArray_property.count_property), .ne, .literalInt (0)))
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "No Selected Board Limit Element", bold: false, size: .regular)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_28 (), right: self.computeImplicitView_29 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_30 (), right: self.computeImplicitView_31 ())
      .bind_hidden (.intcmp (.id (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardContentsPage
  //····················································································································

  lazy var mBoardContentsPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (spacing: 0)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .set (spacing: 0)
        .set (margins: 8)
      do{
        let view_0_0_0 = AutoLayoutCanariBoardOperationPullDownButton ()
        self.configure_boardOperationPullDownButtonConfigurator (view_0_0_0) // Configurator
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.")
        self.configure_addRestrictRectangleButton (view_0_0_2) // Configurator
        view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_3)
        let view_0_0_4 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Line in Board;  the layer is set by the contextual menu.")
        self.configure_addLineButton (view_0_0_4) // Configurator
        view_0_0.appendView (view_0_0_4)
        let view_0_0_5 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_5)
        let view_0_0_6 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Text in Board; the layer is set by the contextual menu.")
        self.configure_addTextButton (view_0_0_6) // Configurator
        view_0_0.appendView (view_0_0_6)
        let view_0_0_7 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_7)
        let view_0_0_8 = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.")
        self.configure_addTrackButton (view_0_0_8) // Configurator
        view_0_0.appendView (view_0_0_8)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 8)
          .set (rightMargin: 8)
        do{
          let view_0_1_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mBoardInspectorView, equalWidth: true, size: .small)
            .expandableWidth ()
            .addPage (title: "", tooltip: "Selected Element Inspector", pageView: self.mSelectedElementInspectorView)
            .addPage (title: "", tooltip: "Insert Component in Board", pageView: self.mInsertComponentInBoardView)
            .addPage (title: "", tooltip: "Display Inspector", pageView: self.mBoardDisplayInspectorView)
            .addPage (image: "autorouter", tooltip: "Router Inspector", pageView: self.mBoardRouterInspectorView)
            .addPage (title: "ERC", tooltip: "Electric Rule Check Inspector", pageView: self.mBoardERCInspectorView)
            .bind_selectedPage (self.rootObject.mBoardSelectedInspector_property)
            .bind_segmentTitle (self.unplacedPackagesCountString_property, segmentIndex:1)
          self.configure_boardInspectorConfigurator (view_0_1_0_0) // Configurator
          view_0_1_0.appendView (view_0_1_0_0)
        }
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = mBoardInspectorView
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
      .bind_underObjectsDisplay (self.rootObject.borderOutlineBackground_property)
      .bind_overObjectsDisplay (self.overDisplay_property)
      .bind_horizontalFlip (self.rootObject.mBoardHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mBoardVerticalFlip_property)
      .bind_gridStyle (self.rootObject.mBoardGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mBoardGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorGridForBoard_property)
      .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
      .bind_zoom (self.rootObject.mBoardZoom_property)
      .bind_backColor (preferences_boardBackgroundColorForBoard_property)
      .bind_mouseGrid (self.rootObject.mBoardGridStep_property)
      .bind_gridStep (self.rootObject.mBoardGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mBoardGridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.boardGridStepMultipliedByDisplayFactor_property)
      .bind_xPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
      .bind_yPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
      .bind_graphic_controller (self.boardObjectsController)
    self.mBoardView = view_2 // Outlet
    self.configure_boardView (view_2) // Configurator
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mBoardInspectorView
  //····················································································································

  let mBoardInspectorView : AutoLayoutBase_NSStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mInsertComponentInBoardView
  //····················································································································

  lazy var mInsertComponentInBoardView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: true, size: .small)
        .bind_title (self.unplacedPackagesMessageString_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutElCanariDragSourceTableView ()
      .bind_models (self.rootObject.unplacedPackages_property)
    self.mUnplacedPackageTableView = view_1 // Outlet
    self.configure_packageDragSourceTableViewConfigurator (view_1) // Configurator
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardDisplayInspectorView
  //····················································································································

  lazy var mBoardDisplayInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
      .set (rightMargin: 0)
    let view_0 = AutoLayoutVerticalScrollView (content: self.computeImplicitView_92 ())
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardRouterInspectorView
  //····················································································································

  lazy var mBoardRouterInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutGridView2 ()
      .add (single: self.computeImplicitView_93 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_94 (), right: self.computeImplicitView_95 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_96 (), right: self.computeImplicitView_97 ())
      .add (single: self.computeImplicitView_98 ())
      .add (single: self.computeImplicitView_99 ())
      .add (single: self.computeImplicitView_100 ())
      .add (single: self.computeImplicitView_101 ())
      .add (single: self.computeImplicitView_104 ())
      .add (single: self.computeImplicitView_105 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_106 (), right: self.computeImplicitView_107 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_108 (), right: self.computeImplicitView_109 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_110 (), right: self.computeImplicitView_111 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_112 (), right: self.computeImplicitView_113 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_114 (), right: self.computeImplicitView_115 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_116 (), right: self.computeImplicitView_117 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_118 (), right: self.computeImplicitView_119 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_120 (), right: self.computeImplicitView_121 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_122 (), right: self.computeImplicitView_123 ())
      .add (single: self.computeImplicitView_124 ())
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardERCInspectorView
  //····················································································································

  lazy var mBoardERCInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "ERC Checking", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutCheckbox (title: "Check Clearance\nbetween Pads of the same Net", size: .small)
      .set (width: 200, multiline: true)
      .bind_value (self.rootObject.mCheckClearanceBetweenPadsOfSameNet_property)
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutButton (title: "Design Rule Check", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
      )
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutVerticalSplitView ()
    do{
      let view_3_0 = AutoLayoutTextObserverView ()
      self.mERCLogTextView = view_3_0 // Outlet
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      self.mERCIssueTableView = view_3_1 // Outlet
      self.configure_ercIssueTableViewConfigurator (view_3_1) // Configurator
      view_3.appendView (view_3_1)
    }
    vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSelectedElementInspectorView
  //····················································································································

  lazy var mSelectedElementInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: BoardTrack.self, inspectorView: self.mBoardTrackInspectorView)
      .addObjectInspector (forEntity: BoardConnector.self, inspectorView: self.mBoardConnectorInspectorView)
      .addObjectInspector (forEntity: BoardLine.self, inspectorView: self.mBoardLineInspectorView)
      .addObjectInspector (forEntity: BoardRestrictRectangle.self, inspectorView: self.mRestrictRectangleInspectorView)
      .addObjectInspector (forEntity: BoardText.self, inspectorView: self.mBoardTextInspectorView)
      .addObjectInspector (forEntity: ComponentInProject.self, inspectorView: self.mComponentInBoardInspectorView)
      .bind_graphic_controller (self.boardObjectsController)
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardTrackInspectorView
  //····················································································································

  lazy var mBoardTrackInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Board Track", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_125 (), right: self.computeImplicitView_126 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_127 (), right: self.computeImplicitView_128 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_129 (), right: self.computeImplicitView_130 ())
      .add (single: self.computeImplicitView_131 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_132 (), right: self.computeImplicitView_133 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_134 (), right: self.computeImplicitView_135 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_136 (), right: self.computeImplicitView_137 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_138 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_139 (), right: self.computeImplicitView_140 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_141 (), right: self.computeImplicitView_142 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_143 (), right: self.computeImplicitView_144 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_145 (), right: self.computeImplicitView_146 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_147 (), right: self.computeImplicitView_148 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_149 (), right: self.computeImplicitView_150 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardConnectorInspectorView
  //····················································································································

  lazy var mBoardConnectorInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Via Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_151 (), right: self.computeImplicitView_152 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_153 (), right: self.computeImplicitView_154 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_155 (), right: self.computeImplicitView_156 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_157 (), right: self.computeImplicitView_158 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_159 (), right: self.computeImplicitView_160 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_161 (), right: self.computeImplicitView_162 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_163 (), right: self.computeImplicitView_164 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_165 (), right: self.computeImplicitView_166 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardLineInspectorView
  //····················································································································

  lazy var mBoardLineInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Line Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_167 (), right: self.computeImplicitView_168 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_169 (), right: self.computeImplicitView_170 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_171 (), right: self.computeImplicitView_172 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_173 (), right: self.computeImplicitView_174 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_175 (), right: self.computeImplicitView_176 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_177 (), right: self.computeImplicitView_178 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mRestrictRectangleInspectorView
  //····················································································································

  lazy var mRestrictRectangleInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Restrict Rectangle Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutElCanariRestrictRectangleView ()
      .bind_front (self.restrictRectangleSelectionController.mIsInFrontLayer_property)
      .bind_back (self.restrictRectangleSelectionController.mIsInBackLayer_property)
      .bind_inner1 (self.restrictRectangleSelectionController.mIsInInner1Layer_property)
      .bind_inner2 (self.restrictRectangleSelectionController.mIsInInner2Layer_property)
      .bind_inner3 (self.restrictRectangleSelectionController.mIsInInner3Layer_property)
      .bind_inner4 (self.restrictRectangleSelectionController.mIsInInner4Layer_property)
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBoardTextInspectorView
  //····················································································································

  lazy var mBoardTextInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Text Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_179 (), right: self.computeImplicitView_180 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_181 (), right: self.computeImplicitView_182 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_183 (), right: self.computeImplicitView_184 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_185 (), right: self.computeImplicitView_186 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_187 (), right: self.computeImplicitView_188 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_189 (), right: self.computeImplicitView_190 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_191 (), right: self.computeImplicitView_192 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_193 (), right: self.computeImplicitView_194 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_195 (), right: self.computeImplicitView_196 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mComponentInBoardInspectorView
  //····················································································································

  lazy var mComponentInBoardInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Component Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_197 (), right: self.computeImplicitView_198 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_199 (), right: self.computeImplicitView_200 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_201 (), right: self.computeImplicitView_202 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_203 (), right: self.computeImplicitView_204 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_205 (), right: self.computeImplicitView_206 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_207 (), right: self.computeImplicitView_208 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_209 ())
      .addSeparator ()
      .add (single: self.computeImplicitView_210 ())
      .add (single: self.computeImplicitView_211 ())
      .add (single: self.computeImplicitView_212 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_213 (), right: self.computeImplicitView_214 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_215 (), right: self.computeImplicitView_216 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_217 (), right: self.computeImplicitView_218 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_219 (), right: self.computeImplicitView_220 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_221 (), right: self.computeImplicitView_222 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_223 (), right: self.computeImplicitView_224 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_225 (), right: self.computeImplicitView_226 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_227 (), right: self.computeImplicitView_228 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_229 (), right: self.computeImplicitView_230 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_231 (), right: self.computeImplicitView_232 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_233 (), right: self.computeImplicitView_234 ())
      .addSeparator ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_235 (), right: self.computeImplicitView_236 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProductPage
  //····················································································································

  lazy var mProductPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutButton (title: "Import Artwork…", size: .regular)
          .expandableWidth ()
          .bind_hidden (.not (.id (self.rootObject.mArtwork_none)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importArtworkAction (_:))
          )
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutButton (title: "Detach Artwork", size: .regular)
          .expandableWidth ()
          .bind_hidden (.id (self.rootObject.mArtwork_none))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.detachArtworkAction (_:))
          )
        view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutLabel (bold: true, size: .regular)
          .expandableWidth ()
          .set (alignment: .center)
          .bind_title (self.rootObject.mArtworkName_property)
        view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutButton (title: "Generate Files", size: .regular)
          .expandableWidth ()
          .bind_enabled (.boolcmp (.not (.id (self.rootObject.mArtwork_none)), .and, .not (.id (self.documentIsUnnamed_property))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.generateProductFilesAction (_:))
          )
        view_0_0.appendView (view_0_0_3)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutTextObserverView ()
          .expandableWidth ()
          .setNoBackground ()
          .setNoVerticalScroller ()
          .setNoHorizontalScroller ()
          .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
        view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutFlexibleSpace ()
        view_0_1.appendView (view_0_1_2)
      }
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .bind_hidden (.not (.id (self.rootObject.mArtwork_none)))
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular)
        view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_2)
      }
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView ()
      .bind_hidden (.id (self.rootObject.mArtwork_none))
    do{
      let view_2_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0_0 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutSegmentedControlWithPages (documentView: self.mProductMasterView, equalWidth: true, size: .regular)
          .addPage (title: "Artwork Description", tooltip: "", pageView: self.mArtworkDescriptionPage)
          .addPage (title: "Artwork Minima", tooltip: "", pageView: self.mArtworkMinimaPage)
          .addPage (title: "Artwork Data", tooltip: "", pageView: self.mArtworkDataPage)
          .addPage (title: "PDF Settings", tooltip: "", pageView: self.mPDFSettingsPage)
          .addPage (title: "Generation Log", tooltip: "", pageView: self.mGenerationLogPage)
        self.mProductPageSegmentedControl = view_2_0_1 // Outlet
        view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_2)
      }
      view_2.appendView (view_2_0)
      let view_2_1 = mProductMasterView
      view_2.appendView (view_2_1)
    }
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProductMasterView
  //····················································································································

  lazy var mProductMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkDescriptionPage
  //····················································································································

  lazy var mArtworkDescriptionPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutGridView2 ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_237 (), right: self.computeImplicitView_238 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_239 (), right: self.computeImplicitView_240 ())
      .addCenterYAligned (left: self.computeImplicitView_241 (), right: self.computeImplicitView_242 ())
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkDataPage
  //····················································································································

  lazy var mArtworkDataPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_0_0_0 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
          .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:true)
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutImageObserverView (size: .small)
        .bind_image (self.emptyDrillFileExtensionImage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_0_0 = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.generatedFileCountString_property)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTableView (size: .small, addControlButtons: true)
        self.mDataController.bind_tableView (view_1_0_1)
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutVerticalStackView ()
        .set (topMargin: 8)
      do{
        let view_1_2_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_0_0 = AutoLayoutHorizontalStackView ()
            .setFirstBaselineAlignment ()
          do{
            let view_1_2_0_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small)
            view_1_2_0_0.appendView (view_1_2_0_0_0)
            let view_1_2_0_0_1 = AutoLayoutTextField (minWidth: 56, size: .small)
              .bind_value (self.mDataSelection.fileExtension_property, sendContinously:true)
            view_1_2_0_0.appendView (view_1_2_0_0_1)
          }
          view_1_2_0.appendView (view_1_2_0_0)
          let view_1_2_0_1 = AutoLayoutImageObserverView (size: .small)
            .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
          view_1_2_0.appendView (view_1_2_0_1)
          let view_1_2_0_2 = AutoLayoutFlexibleSpace ()
          view_1_2_0.appendView (view_1_2_0_2)
          let view_1_2_0_3 = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small)
            .setOrangeTextColor ()
            .bind_hidden (.not (.id (self.mDataSelection.hasNoData_property)))
          view_1_2_0.appendView (view_1_2_0_3)
        }
        view_1_2.appendView (view_1_2_0)
        let view_1_2_1 = AutoLayoutFlexibleSpace ()
        view_1_2.appendView (view_1_2_1)
        let view_1_2_2 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_2_0 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small)
          view_1_2_2.appendView (view_1_2_2_0)
          let view_1_2_2_1 = AutoLayoutFlexibleSpace ()
          view_1_2_2.appendView (view_1_2_2_1)
        }
        view_1_2.appendView (view_1_2_2)
        let view_1_2_3 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_3_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_243 (), right: self.computeImplicitView_244 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_245 (), right: self.computeImplicitView_246 ())
          view_1_2_3.appendView (view_1_2_3_0)
          let view_1_2_3_1 = AutoLayoutFlexibleSpace ()
          view_1_2_3.appendView (view_1_2_3_1)
        }
        view_1_2.appendView (view_1_2_3)
        let view_1_2_4 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_4_0 = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
          view_1_2_4.appendView (view_1_2_4_0)
          let view_1_2_4_1 = AutoLayoutFlexibleSpace ()
          view_1_2_4.appendView (view_1_2_4_1)
        }
        view_1_2.appendView (view_1_2_4)
        let view_1_2_5 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_5_0 = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
          view_1_2_5.appendView (view_1_2_5_0)
          let view_1_2_5_1 = AutoLayoutFlexibleSpace ()
          view_1_2_5.appendView (view_1_2_5_1)
        }
        view_1_2.appendView (view_1_2_5)
        let view_1_2_6 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_6_0 = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
          view_1_2_6.appendView (view_1_2_6_0)
          let view_1_2_6_1 = AutoLayoutFlexibleSpace ()
          view_1_2_6.appendView (view_1_2_6_1)
        }
        view_1_2.appendView (view_1_2_6)
        let view_1_2_7 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_7_0 = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small)
          view_1_2_7.appendView (view_1_2_7_0)
          let view_1_2_7_1 = AutoLayoutFlexibleSpace ()
          view_1_2_7.appendView (view_1_2_7_1)
        }
        view_1_2.appendView (view_1_2_7)
        let view_1_2_8 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_8_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_247 (), right: self.computeImplicitView_248 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_249 (), right: self.computeImplicitView_250 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_251 (), right: self.computeImplicitView_252 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_253 (), right: self.computeImplicitView_254 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_255 (), right: self.computeImplicitView_256 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_257 (), right: self.computeImplicitView_258 ())
          view_1_2_8.appendView (view_1_2_8_0)
          let view_1_2_8_1 = AutoLayoutFlexibleSpace ()
          view_1_2_8.appendView (view_1_2_8_1)
        }
        view_1_2.appendView (view_1_2_8)
        let view_1_2_9 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_9_0 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small)
          view_1_2_9.appendView (view_1_2_9_0)
          let view_1_2_9_1 = AutoLayoutFlexibleSpace ()
          view_1_2_9.appendView (view_1_2_9_1)
        }
        view_1_2.appendView (view_1_2_9)
        let view_1_2_10 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_10_0 = AutoLayoutGridView2 ()
            .set (leftMargin: 20)
            .addFirstBaseLineAligned (left: self.computeImplicitView_259 (), right: self.computeImplicitView_260 ())
            .addFirstBaseLineAligned (left: self.computeImplicitView_261 (), right: self.computeImplicitView_262 ())
          view_1_2_10.appendView (view_1_2_10_0)
          let view_1_2_10_1 = AutoLayoutFlexibleSpace ()
          view_1_2_10.appendView (view_1_2_10_1)
        }
        view_1_2.appendView (view_1_2_10)
        let view_1_2_11 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_11_0 = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
            .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
          view_1_2_11.appendView (view_1_2_11_0)
          let view_1_2_11_1 = AutoLayoutFlexibleSpace ()
          view_1_2_11.appendView (view_1_2_11_1)
        }
        view_1_2.appendView (view_1_2_11)
        let view_1_2_12 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_12_0 = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
            .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
          view_1_2_12.appendView (view_1_2_12_0)
          let view_1_2_12_1 = AutoLayoutFlexibleSpace ()
          view_1_2_12.appendView (view_1_2_12_1)
        }
        view_1_2.appendView (view_1_2_12)
        let view_1_2_13 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_13_0 = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
            .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
          view_1_2_13.appendView (view_1_2_13_0)
          let view_1_2_13_1 = AutoLayoutFlexibleSpace ()
          view_1_2_13.appendView (view_1_2_13_1)
        }
        view_1_2.appendView (view_1_2_13)
        let view_1_2_14 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_14_0 = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small)
          view_1_2_14.appendView (view_1_2_14_0)
          let view_1_2_14_1 = AutoLayoutFlexibleSpace ()
          view_1_2_14.appendView (view_1_2_14_1)
        }
        view_1_2.appendView (view_1_2_14)
        let view_1_2_15 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_15_0 = AutoLayoutCheckbox (title: "Vias", size: .small)
            .bind_value (self.mDataSelection.drawVias_property)
          view_1_2_15.appendView (view_1_2_15_0)
          let view_1_2_15_1 = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
          view_1_2_15.appendView (view_1_2_15_1)
          let view_1_2_15_2 = AutoLayoutCheckbox (title: "Board Limits", size: .small)
            .bind_value (self.mDataSelection.drawBoardLimits_property)
          view_1_2_15.appendView (view_1_2_15_2)
          let view_1_2_15_3 = AutoLayoutFlexibleSpace ()
          view_1_2_15.appendView (view_1_2_15_3)
        }
        view_1_2.appendView (view_1_2_15)
        let view_1_2_16 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
          .setFirstBaselineAlignment ()
        do{
          let view_1_2_16_0 = AutoLayoutCheckbox (title: "Pad Holes in PDF file, with diameter", size: .small)
            .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
          view_1_2_16.appendView (view_1_2_16_0)
          let view_1_2_16_1 = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
            .bind_enabled (.id (self.mDataSelection.drawPadHolesInPDF_property))
          view_1_2_16.appendView (view_1_2_16_1)
          let view_1_2_16_2 = AutoLayoutFlexibleSpace ()
          view_1_2_16.appendView (view_1_2_16_2)
        }
        view_1_2.appendView (view_1_2_16)
        let view_1_2_17 = AutoLayoutHorizontalStackView ()
        do{
          let view_1_2_17_0 = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small)
          view_1_2_17.appendView (view_1_2_17_0)
          let view_1_2_17_1 = AutoLayoutFlexibleSpace ()
          view_1_2_17.appendView (view_1_2_17_1)
        }
        view_1_2.appendView (view_1_2_17)
        let view_1_2_18 = AutoLayoutHorizontalStackView ()
          .set (leftMargin: 20)
        do{
          let view_1_2_18_0 = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
            .bind_value (self.mDataSelection.horizontalMirror_property)
          view_1_2_18.appendView (view_1_2_18_0)
          let view_1_2_18_1 = AutoLayoutFlexibleSpace ()
          view_1_2_18.appendView (view_1_2_18_1)
        }
        view_1_2.appendView (view_1_2_18)
        let view_1_2_19 = AutoLayoutFlexibleSpace ()
        view_1_2.appendView (view_1_2_19)
      }
      view_1.appendView (view_1_2)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArtworkMinimaPage
  //····················································································································

  lazy var mArtworkMinimaPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutVerticalStackView ()
      do{
        let view_1_1_0 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_1)
        let view_1_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_2)
        let view_1_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_3)
        let view_1_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_4)
        let view_1_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_5)
        let view_1_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_6)
        let view_1_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
        view_1_1.appendView (view_1_1_7)
        let view_1_1_8 = AutoLayoutFlexibleSpace ()
        view_1_1.appendView (view_1_1_8)
      }
      view_1.appendView (view_1_1)
      let view_1_2 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_2)
      let view_1_3 = AutoLayoutStaticImageView (name: "artwork")
      view_1.appendView (view_1_3)
      let view_1_4 = AutoLayoutFlexibleSpace ()
      view_1.appendView (view_1_4)
    }
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutHorizontalStackView ()
    do{
      let view_3_0 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_0)
      let view_3_1 = AutoLayoutGridView2 ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_263 (), right: self.computeImplicitView_264 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_265 (), right: self.computeImplicitView_266 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_267 (), right: self.computeImplicitView_268 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_269 (), right: self.computeImplicitView_270 ())
      view_3.appendView (view_3_1)
      let view_3_2 = AutoLayoutFlexibleSpace ()
      view_3.appendView (view_3_2)
    }
    vStackView.appendView (view_3)
    let view_4 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_4)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mPDFSettingsPage
  //····················································································································

  lazy var mPDFSettingsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutColorWell ()
        .bind_color (self.rootObject.mPDFBoardBackgroundColor_property, sendContinously:false)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGenerationLogPage
  //····················································································································

  lazy var mGenerationLogPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutTextObserverView ()
    self.mProductFileGenerationLogTextView = view_0 // Outlet
    vStackView.appendView (view_0)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsGridStep_property, self.rootObject.mBoardLimitsGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mBoardLimitsGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mBoardLimitsGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mBoardLimitsHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mBoardLimitsVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Limit Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardLimitsWidth_property, self.rootObject.mBoardLimitsWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardClearance_property, self.rootObject.mBoardClearanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardWidth_property, self.rootObject.mRectangularBoardWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Board Height", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mRectangularBoardHeight_property, self.rootObject.mRectangularBoardHeightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Shape", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BorderCurveShape.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardCurveSelectionController.mShape_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "End Points", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardSelectedCurveDisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mX_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mY_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutLabel (bold: true, size: .small)
        .set (minWidth: 80)
        .set (alignment: .center)
        .bind_title (self.boardCurveSelectionController.p2Xstring_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
      view.appendView (view_0)
      let view_1 = AutoLayoutLabel (bold: true, size: .small)
        .set (minWidth: 80)
        .set (alignment: .center)
        .bind_title (self.boardCurveSelectionController.p2Ystring_property)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Control Points", bold: true, size: .small)
      .set (alignment: .left)
      .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
      .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  fileprivate final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  fileprivate final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  fileprivate final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  fileprivate final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
        .expandableWidth ()
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariDimensionField (minWidth: 80, size: .small)
        .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        .bind_hidden (.id (self.boardCurveSelectionController.isLine_property))
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  fileprivate final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Grid and Flip Inspector", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  fileprivate final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  fileprivate final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mBoardGridStep_property, self.rootObject.mBoardGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  fileprivate final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Display", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  fileprivate final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mBoardGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  fileprivate final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Every", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  fileprivate final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mBoardGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  fileprivate final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  fileprivate final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mBoardHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  fileprivate final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 42
  //····················································································································

  fileprivate final func computeImplicitView_42 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mBoardVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 43
  //····················································································································

  fileprivate final func computeImplicitView_43 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Rastnet", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 44
  //····················································································································

  fileprivate final func computeImplicitView_44 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: RastnetDisplay.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mRastnetDisplay_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 45
  //····················································································································

  fileprivate final func computeImplicitView_45 () -> NSView {
    let view = AutoLayoutElCanariSelectionPopUpButton (size: .small)
      .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedNetName_property, self.rootObject.netNamesArray_property)
      .bind_hidden (.not (.id (self.rastnetDisplayOneNet_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 46
  //····················································································································

  fileprivate final func computeImplicitView_46 () -> NSView {
    let view = AutoLayoutElCanariSelectionPopUpButton (size: .small)
      .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedComponentName_property, self.rootObject.placedComponentNameArray_property)
      .bind_hidden (.not (.id (self.rastnetDisplayComponentNet_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 47
  //····················································································································

  fileprivate final func computeImplicitView_47 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Warning and Error Circle", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 48
  //····················································································································

  fileprivate final func computeImplicitView_48 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 0, max: 24, ticks: 13)
      .bind_doubleValue (self.rootObject.mErrorOrWarningIssueSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 49
  //····················································································································

  fileprivate final func computeImplicitView_49 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Contextual Click Diameter", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 50
  //····················································································································

  fileprivate final func computeImplicitView_50 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 10, max: 200, ticks: 10)
      .bind_doubleValue (self.rootObject.mControlKeyHiliteDiameter_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 51
  //····················································································································

  fileprivate final func computeImplicitView_51 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 52
  //····················································································································

  fileprivate final func computeImplicitView_52 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_frontSidePadColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 53
  //····················································································································

  fileprivate final func computeImplicitView_53 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayFrontPadsForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 54
  //····················································································································

  fileprivate final func computeImplicitView_54 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_backSidePadColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 55
  //····················································································································

  fileprivate final func computeImplicitView_55 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayBackPadsForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 56
  //····················································································································

  fileprivate final func computeImplicitView_56 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_padNumberColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 57
  //····················································································································

  fileprivate final func computeImplicitView_57 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Pad Numbers", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayPadNumbersForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 58
  //····················································································································

  fileprivate final func computeImplicitView_58 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_frontSideLegendColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 59
  //····················································································································

  fileprivate final func computeImplicitView_59 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Legend", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayFrontLegendForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 60
  //····················································································································

  fileprivate final func computeImplicitView_60 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_backSideLegendColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 61
  //····················································································································

  fileprivate final func computeImplicitView_61 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Legend", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayFrontLegendForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 62
  //····················································································································

  fileprivate final func computeImplicitView_62 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_frontSideLayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 63
  //····················································································································

  fileprivate final func computeImplicitView_63 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayFrontLayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 64
  //····················································································································

  fileprivate final func computeImplicitView_64 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner1LayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 65
  //····················································································································

  fileprivate final func computeImplicitView_65 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner1LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 66
  //····················································································································

  fileprivate final func computeImplicitView_66 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner2LayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 67
  //····················································································································

  fileprivate final func computeImplicitView_67 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner2LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 68
  //····················································································································

  fileprivate final func computeImplicitView_68 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner3LayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 69
  //····················································································································

  fileprivate final func computeImplicitView_69 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner3LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 70
  //····················································································································

  fileprivate final func computeImplicitView_70 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner4LayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 71
  //····················································································································

  fileprivate final func computeImplicitView_71 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner4LayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 72
  //····················································································································

  fileprivate final func computeImplicitView_72 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_backSideLayoutColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 73
  //····················································································································

  fileprivate final func computeImplicitView_73 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Layout", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayBackLayoutForBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 74
  //····················································································································

  fileprivate final func computeImplicitView_74 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_frontSideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 75
  //····················································································································

  fileprivate final func computeImplicitView_75 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayFrontRestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 76
  //····················································································································

  fileprivate final func computeImplicitView_76 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_backSideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 77
  //····················································································································

  fileprivate final func computeImplicitView_77 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayBackRestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 78
  //····················································································································

  fileprivate final func computeImplicitView_78 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner1SideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 79
  //····················································································································

  fileprivate final func computeImplicitView_79 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner1 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner1RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 80
  //····················································································································

  fileprivate final func computeImplicitView_80 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner2SideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 81
  //····················································································································

  fileprivate final func computeImplicitView_81 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner2 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner2RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 82
  //····················································································································

  fileprivate final func computeImplicitView_82 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner3SideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 83
  //····················································································································

  fileprivate final func computeImplicitView_83 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner3 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner3RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 84
  //····················································································································

  fileprivate final func computeImplicitView_84 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_inner4SideRestrictRectangleColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 85
  //····················································································································

  fileprivate final func computeImplicitView_85 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner4 Layer Restrict Rect.", size: .small)
      .expandableHeight ()
      .bind_value (preferences_displayInner4RestrictRectangles_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 86
  //····················································································································

  fileprivate final func computeImplicitView_86 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_boardLimitsColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 87
  //····················································································································

  fileprivate final func computeImplicitView_87 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Board Limits", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 88
  //····················································································································

  fileprivate final func computeImplicitView_88 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_boardClearanceColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 89
  //····················································································································

  fileprivate final func computeImplicitView_89 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 90
  //····················································································································

  fileprivate final func computeImplicitView_90 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutFlexibleSpace ()
      view.appendView (view_0)
      let view_1 = AutoLayoutColorWell ()
        .bind_color (preferences_boardBackgroundColorForBoard_property, sendContinously:true)
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 91
  //····················································································································

  fileprivate final func computeImplicitView_91 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 92
  //····················································································································

  fileprivate final func computeImplicitView_92 () -> NSView {
    let view = AutoLayoutGridView2 ()
      .add (single: self.computeImplicitView_32 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_33 (), right: self.computeImplicitView_34 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_35 (), right: self.computeImplicitView_36 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_37 (), right: self.computeImplicitView_38 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_39 (), right: self.computeImplicitView_40 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_41 (), right: self.computeImplicitView_42 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_43 (), right: self.computeImplicitView_44 ())
      .add (single: self.computeImplicitView_45 ())
      .add (single: self.computeImplicitView_46 ())
      .add (single: self.computeImplicitView_47 ())
      .add (single: self.computeImplicitView_48 ())
      .add (single: self.computeImplicitView_49 ())
      .add (single: self.computeImplicitView_50 ())
      .add (single: self.computeImplicitView_51 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_52 (), right: self.computeImplicitView_53 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_54 (), right: self.computeImplicitView_55 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_56 (), right: self.computeImplicitView_57 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_58 (), right: self.computeImplicitView_59 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_60 (), right: self.computeImplicitView_61 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_62 (), right: self.computeImplicitView_63 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_64 (), right: self.computeImplicitView_65 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_66 (), right: self.computeImplicitView_67 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_68 (), right: self.computeImplicitView_69 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_70 (), right: self.computeImplicitView_71 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_72 (), right: self.computeImplicitView_73 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_74 (), right: self.computeImplicitView_75 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_76 (), right: self.computeImplicitView_77 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_78 (), right: self.computeImplicitView_79 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_80 (), right: self.computeImplicitView_81 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_82 (), right: self.computeImplicitView_83 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_84 (), right: self.computeImplicitView_85 ())
      .addCenterYAligned (left: self.computeImplicitView_86 (), right: self.computeImplicitView_87 ())
      .addCenterYAligned (left: self.computeImplicitView_88 (), right: self.computeImplicitView_89 ())
      .addCenterYAligned (left: self.computeImplicitView_90 (), right: self.computeImplicitView_91 ())
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 93
  //····················································································································

  fileprivate final func computeImplicitView_93 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Board Settings", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 94
  //····················································································································

  fileprivate final func computeImplicitView_94 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layers", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 95
  //····················································································································

  fileprivate final func computeImplicitView_95 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mLayerConfiguration_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.changeLayerConfigurationAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 96
  //····················································································································

  fileprivate final func computeImplicitView_96 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Clearance", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 97
  //····················································································································

  fileprivate final func computeImplicitView_97 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.mLayoutClearance_property, self.rootObject.mLayoutClearanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 98
  //····················································································································

  fileprivate final func computeImplicitView_98 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Autorouter Settings", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 99
  //····················································································································

  fileprivate final func computeImplicitView_99 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: AutorouterPreferredDirections.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mAutoRouterPreferredDirections_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 100
  //····················································································································

  fileprivate final func computeImplicitView_100 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: AutorouterSnapAngle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mAutorouterSnapAngle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 101
  //····················································································································

  fileprivate final func computeImplicitView_101 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Route", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutEnumPopUpButton (titles: RouteDirection.popupTitles (), size: .small)
        .bind_selectedIndex (self.rootObject.mRouteDirection_property)
      view.appendView (view_2)
      let view_3 = AutoLayoutFlexibleSpace ()
      view.appendView (view_3)
      let view_4 = AutoLayoutEnumPopUpButton (titles: RouteOrigin.popupTitles (), size: .small)
        .bind_selectedIndex (self.rootObject.mRouteOrigin_property)
      view.appendView (view_4)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 102
  //····················································································································

  fileprivate final func computeImplicitView_102 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    do{
      let view_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_0_0 = AutoLayoutFlexibleSpace ()
        view_0.appendView (view_0_0)
        let view_0_1 = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
          .bind_value (self.rootObject.mExportExistingTracksAndVias_property)
        view_0.appendView (view_0_1)
        let view_0_2 = AutoLayoutFlexibleSpace ()
        view_0.appendView (view_0_2)
      }
      view.appendView (view_0)
      let view_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0 = AutoLayoutFlexibleSpace ()
        view_1.appendView (view_1_0)
        let view_1_1 = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithRouterDocument (_:))
          )
        view_1.appendView (view_1_1)
        let view_1_2 = AutoLayoutFlexibleSpace ()
        view_1.appendView (view_1_2)
      }
      view.appendView (view_1)
      let view_2 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0 = AutoLayoutFlexibleSpace ()
        view_2.appendView (view_2_0)
        let view_2_1 = AutoLayoutButton (title: "Import SES File", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importSESFromBasicTabAction (_:))
          )
        view_2.appendView (view_2_1)
        let view_2_2 = AutoLayoutFlexibleSpace ()
        view_2.appendView (view_2_2)
      }
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 103
  //····················································································································

  fileprivate final func computeImplicitView_103 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
      .set (margins: 12)
    do{
      let view_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_0_0 = AutoLayoutFlexibleSpace ()
        view_0.appendView (view_0_0)
        let view_0_1 = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
          .bind_value (self.rootObject.mExportExistingTracksAndVias2_property)
        view_0.appendView (view_0_1)
        let view_0_2 = AutoLayoutFlexibleSpace ()
        view_0.appendView (view_0_2)
      }
      view.appendView (view_0)
      let view_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0 = AutoLayoutFlexibleSpace ()
        view_1.appendView (view_1_0)
        let view_1_1 = AutoLayoutButton (title: "Export DSN File…", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.exportDSNFileAction (_:))
          )
        view_1.appendView (view_1_1)
        let view_1_2 = AutoLayoutFlexibleSpace ()
        view_1.appendView (view_1_2)
      }
      view.appendView (view_1)
      let view_2 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_0 = AutoLayoutFlexibleSpace ()
        view_2.appendView (view_2_0)
        let view_2_1 = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithoutAnyDocument (_:))
          )
        view_2.appendView (view_2_1)
        let view_2_2 = AutoLayoutFlexibleSpace ()
        view_2.appendView (view_2_2)
      }
      view.appendView (view_2)
      let view_3 = AutoLayoutHorizontalStackView ()
      do{
        let view_3_0 = AutoLayoutFlexibleSpace ()
        view_3.appendView (view_3_0)
        let view_3_1 = AutoLayoutButton (title: "Import SES File…", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.importSESFromExtendedTabAction (_:))
          )
        view_3.appendView (view_3_1)
        let view_3_2 = AutoLayoutFlexibleSpace ()
        view_3.appendView (view_3_2)
      }
      view.appendView (view_3)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 104
  //····················································································································

  fileprivate final func computeImplicitView_104 () -> NSView {
    let view = AutoLayoutTabView (equalWidth: true, size: .small)
      .addTab (title: "Basic", tooltip: "Autorouter Basic Configuration", contentView: self.computeImplicitView_102 ())
      .addTab (title: "Advanced", tooltip: "Autorouter Advanced Configuration", contentView: self.computeImplicitView_103 ())
      .bind_selectedPage (self.rootObject.mAutorouterInterfaceMode_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 105
  //····················································································································

  fileprivate final func computeImplicitView_105 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Tracks", bold: true, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 106
  //····················································································································

  fileprivate final func computeImplicitView_106 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Top Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 107
  //····················································································································

  fileprivate final func computeImplicitView_107 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.topSideTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 108
  //····················································································································

  fileprivate final func computeImplicitView_108 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 1 Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 109
  //····················································································································

  fileprivate final func computeImplicitView_109 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner1LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 110
  //····················································································································

  fileprivate final func computeImplicitView_110 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 2 Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 111
  //····················································································································

  fileprivate final func computeImplicitView_111 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner2LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 112
  //····················································································································

  fileprivate final func computeImplicitView_112 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 3 Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 113
  //····················································································································

  fileprivate final func computeImplicitView_113 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner3LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 114
  //····················································································································

  fileprivate final func computeImplicitView_114 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Inner 4 Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 115
  //····················································································································

  fileprivate final func computeImplicitView_115 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.inner4LayerTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 116
  //····················································································································

  fileprivate final func computeImplicitView_116 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Back Layer Tracks", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 117
  //····················································································································

  fileprivate final func computeImplicitView_117 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.backSideTrackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 118
  //····················································································································

  fileprivate final func computeImplicitView_118 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Total", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 119
  //····················································································································

  fileprivate final func computeImplicitView_119 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.trackCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 120
  //····················································································································

  fileprivate final func computeImplicitView_120 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Trace Length", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 121
  //····················································································································

  fileprivate final func computeImplicitView_121 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutLabel (bold: true, size: .small)
        .bind_title (self.rootObject.trackLengthString_property)
      view.appendView (view_0)
      let view_1 = AutoLayoutCanariUnitPopUpButton (size: .small)
        .bind_unit (self.rootObject.mTrackLengthUnit_property)
      view.appendView (view_1)
      let view_2 = AutoLayoutFlexibleSpace ()
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 122
  //····················································································································

  fileprivate final func computeImplicitView_122 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Via Count", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 123
  //····················································································································

  fileprivate final func computeImplicitView_123 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .bind_title (self.rootObject.viaCountString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 124
  //····················································································································

  fileprivate final func computeImplicitView_124 () -> NSView {
    let view = AutoLayoutButton (title: "Design Rule Check", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 125
  //····················································································································

  fileprivate final func computeImplicitView_125 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 126
  //····················································································································

  fileprivate final func computeImplicitView_126 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardTrackSelectionController.netName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 127
  //····················································································································

  fileprivate final func computeImplicitView_127 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 128
  //····················································································································

  fileprivate final func computeImplicitView_128 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardTrackSelectionController.netClassName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 129
  //····················································································································

  fileprivate final func computeImplicitView_129 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 130
  //····················································································································

  fileprivate final func computeImplicitView_130 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: TrackSide.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTrackSelectionController.mSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 131
  //····················································································································

  fileprivate final func computeImplicitView_131 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Is Preserved by Auto Router", size: .small)
      .bind_value (self.boardTrackSelectionController.mIsPreservedByAutoRouter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 132
  //····················································································································

  fileprivate final func computeImplicitView_132 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Track Width", bold: false, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 133
  //····················································································································

  fileprivate final func computeImplicitView_133 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 134
  //····················································································································

  fileprivate final func computeImplicitView_134 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small)
      .bind_hidden (.id (self.boardTrackSelectionController.mUsesCustomTrackWidth_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 135
  //····················································································································

  fileprivate final func computeImplicitView_135 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.netClassTrackWidth_property, self.boardTrackSelectionController.mDefaultTrackWidthUnit_property)
      .bind_hidden (.id (self.boardTrackSelectionController.mUsesCustomTrackWidth_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 136
  //····················································································································

  fileprivate final func computeImplicitView_136 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small)
      .bind_hidden (.not (.id (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 137
  //····················································································································

  fileprivate final func computeImplicitView_137 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.mCustomTrackWidth_property, self.boardTrackSelectionController.mCustomTrackWidthUnit_property)
      .bind_hidden (.not (.id (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 138
  //····················································································································

  fileprivate final func computeImplicitView_138 () -> NSView {
    let view = AutoLayoutElCanariTrackLockView ()
      .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
      .bind_manualLockP1 (self.boardTrackSelectionController.mManualLockP1_property)
      .bind_manualLockP2 (self.boardTrackSelectionController.mManualLockP2_property)
      .bind_p1ConnectedToSomePad (self.boardTrackSelectionController.p1ConnectedToSomePad_property)
      .bind_p2ConnectedToSomePad (self.boardTrackSelectionController.p2ConnectedToSomePad_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 139
  //····················································································································

  fileprivate final func computeImplicitView_139 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "On Knob Dragging", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 140
  //····················································································································

  fileprivate final func computeImplicitView_140 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: TrackLockDirection.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTrackSelectionController.mDirectionLockOnKnobDragging_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 141
  //····················································································································

  fileprivate final func computeImplicitView_141 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Track Angle", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 142
  //····················································································································

  fileprivate final func computeImplicitView_142 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
      .bind_enabled (.id (self.boardTrackSelectionController.trackCanRotate_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 143
  //····················································································································

  fileprivate final func computeImplicitView_143 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "P1", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 144
  //····················································································································

  fileprivate final func computeImplicitView_144 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1X_property, self.boardTrackSelectionController.mP1XUnit_property)
      .bind_enabled (.id (self.boardTrackSelectionController.p1CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 145
  //····················································································································

  fileprivate final func computeImplicitView_145 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 146
  //····················································································································

  fileprivate final func computeImplicitView_146 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1Y_property, self.boardTrackSelectionController.mP1YUnit_property)
      .bind_enabled (.id (self.boardTrackSelectionController.p1CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 147
  //····················································································································

  fileprivate final func computeImplicitView_147 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "P2", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 148
  //····················································································································

  fileprivate final func computeImplicitView_148 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2X_property, self.boardTrackSelectionController.mP2XUnit_property)
      .bind_enabled (.id (self.boardTrackSelectionController.p2CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 149
  //····················································································································

  fileprivate final func computeImplicitView_149 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 150
  //····················································································································

  fileprivate final func computeImplicitView_150 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2Y_property, self.boardTrackSelectionController.mP2YUnit_property)
      .bind_enabled (.id (self.boardTrackSelectionController.p2CanMove_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 151
  //····················································································································

  fileprivate final func computeImplicitView_151 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 152
  //····················································································································

  fileprivate final func computeImplicitView_152 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardConnectorSelectionController.netNameFromTracks_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 153
  //····················································································································

  fileprivate final func computeImplicitView_153 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 154
  //····················································································································

  fileprivate final func computeImplicitView_154 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.boardConnectorSelectionController.netClassName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 155
  //····················································································································

  fileprivate final func computeImplicitView_155 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Diameter", bold: false, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 156
  //····················································································································

  fileprivate final func computeImplicitView_156 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 157
  //····················································································································

  fileprivate final func computeImplicitView_157 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small)
      .bind_hidden (.id (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 158
  //····················································································································

  fileprivate final func computeImplicitView_158 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultHoleDiameter_property, self.boardConnectorSelectionController.mDefaultHoleDiameterUnit_property)
      .bind_hidden (.id (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 159
  //····················································································································

  fileprivate final func computeImplicitView_159 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small)
      .bind_hidden (.not (.id (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 160
  //····················································································································

  fileprivate final func computeImplicitView_160 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomHoleDiameter_property, self.boardConnectorSelectionController.mCustomHoleDiameterUnit_property)
      .bind_hidden (.not (.id (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 161
  //····················································································································

  fileprivate final func computeImplicitView_161 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Diameter", bold: false, size: .small)
      .set (alignment: .left)
      .expandableWidth ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 162
  //····················································································································

  fileprivate final func computeImplicitView_162 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
      .bind_value (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 163
  //····················································································································

  fileprivate final func computeImplicitView_163 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small)
      .bind_hidden (.id (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 164
  //····················································································································

  fileprivate final func computeImplicitView_164 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultPadDiameter_property, self.boardConnectorSelectionController.mDefaultPadDiameterUnit_property)
      .bind_hidden (.id (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 165
  //····················································································································

  fileprivate final func computeImplicitView_165 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small)
      .bind_hidden (.not (.id (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 166
  //····················································································································

  fileprivate final func computeImplicitView_166 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomPadDiameter_property, self.boardConnectorSelectionController.mCustomPadDiameterUnit_property)
      .bind_hidden (.not (.id (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 167
  //····················································································································

  fileprivate final func computeImplicitView_167 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 168
  //····················································································································

  fileprivate final func computeImplicitView_168 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mWidth_property, self.boardLineSelectionController.mWidthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 169
  //····················································································································

  fileprivate final func computeImplicitView_169 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 170
  //····················································································································

  fileprivate final func computeImplicitView_170 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BoardLineLayer.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardLineSelectionController.mLayer_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 171
  //····················································································································

  fileprivate final func computeImplicitView_171 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "P1", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 172
  //····················································································································

  fileprivate final func computeImplicitView_172 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mX1_property, self.boardLineSelectionController.mX1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 173
  //····················································································································

  fileprivate final func computeImplicitView_173 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 174
  //····················································································································

  fileprivate final func computeImplicitView_174 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mY1_property, self.boardLineSelectionController.mY1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 175
  //····················································································································

  fileprivate final func computeImplicitView_175 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "P2", bold: false, size: .small)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutStaticLabel (title: "X", bold: false, size: .small)
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 176
  //····················································································································

  fileprivate final func computeImplicitView_176 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mX2_property, self.boardLineSelectionController.mX2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 177
  //····················································································································

  fileprivate final func computeImplicitView_177 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 178
  //····················································································································

  fileprivate final func computeImplicitView_178 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.boardLineSelectionController.mY2_property, self.boardLineSelectionController.mY2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 179
  //····················································································································

  fileprivate final func computeImplicitView_179 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Text", bold: false, size: .small)
      .expandableHeight ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 180
  //····················································································································

  fileprivate final func computeImplicitView_180 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.boardTextSelectionController.mText_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 181
  //····················································································································

  fileprivate final func computeImplicitView_181 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 182
  //····················································································································

  fileprivate final func computeImplicitView_182 () -> NSView {
    let view = AutoLayoutElCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.boardTextSelectionController.fontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setBoardTextFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 183
  //····················································································································

  fileprivate final func computeImplicitView_183 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 184
  //····················································································································

  fileprivate final func computeImplicitView_184 () -> NSView {
    let view = AutoLayoutDoubleField (minWidth: 64, size: .small)
      .bind_value (self.boardTextSelectionController.mFontSize_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 185
  //····················································································································

  fileprivate final func computeImplicitView_185 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Weight", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 186
  //····················································································································

  fileprivate final func computeImplicitView_186 () -> NSView {
    let view = AutoLayoutDoubleField (minWidth: 64, size: .small)
      .bind_value (self.boardTextSelectionController.mWeight_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 187
  //····················································································································

  fileprivate final func computeImplicitView_187 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 188
  //····················································································································

  fileprivate final func computeImplicitView_188 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Oblique", size: .small)
      .bind_value (self.boardTextSelectionController.mOblique_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 189
  //····················································································································

  fileprivate final func computeImplicitView_189 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Horizontal", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 190
  //····················································································································

  fileprivate final func computeImplicitView_190 () -> NSView {
    let view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
      .bind_alignment (self.boardTextSelectionController.mHorizontalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 191
  //····················································································································

  fileprivate final func computeImplicitView_191 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Vertical", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 192
  //····················································································································

  fileprivate final func computeImplicitView_192 () -> NSView {
    let view = AutoLayoutCanariVerticalAlignmentSegmentedControl (size: .small)
      .bind_alignment (self.boardTextSelectionController.mVerticalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 193
  //····················································································································

  fileprivate final func computeImplicitView_193 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 194
  //····················································································································

  fileprivate final func computeImplicitView_194 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.boardTextSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 195
  //····················································································································

  fileprivate final func computeImplicitView_195 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 196
  //····················································································································

  fileprivate final func computeImplicitView_196 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: BoardTextLayer.popupTitles (), size: .small)
      .bind_selectedIndex (self.boardTextSelectionController.mLayer_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 197
  //····················································································································

  fileprivate final func computeImplicitView_197 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Name", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 198
  //····················································································································

  fileprivate final func computeImplicitView_198 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .small)
      .set (alignment: .left)
      .bind_title (self.componentInBoardSelectionController.componentName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 199
  //····················································································································

  fileprivate final func computeImplicitView_199 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 200
  //····················································································································

  fileprivate final func computeImplicitView_200 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Name", size: .small)
      .bind_value (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 201
  //····················································································································

  fileprivate final func computeImplicitView_201 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 202
  //····················································································································

  fileprivate final func computeImplicitView_202 () -> NSView {
    let view = AutoLayoutDoubleField (minWidth: 64, size: .small)
      .bind_value (self.componentInBoardSelectionController.mNameFontSize_property, sendContinously:false)
      .bind_enabled (.id (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 203
  //····················································································································

  fileprivate final func computeImplicitView_203 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 204
  //····················································································································

  fileprivate final func computeImplicitView_204 () -> NSView {
    let view = AutoLayoutElCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.componentInBoardSelectionController.componentNameFontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setComponentNameFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 205
  //····················································································································

  fileprivate final func computeImplicitView_205 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 206
  //····················································································································

  fileprivate final func computeImplicitView_206 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 207
  //····················································································································

  fileprivate final func computeImplicitView_207 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 208
  //····················································································································

  fileprivate final func computeImplicitView_208 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
      .bind_enabled (.id (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 209
  //····················································································································

  fileprivate final func computeImplicitView_209 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Draw Component Legend", size: .small)
      .bind_value (self.componentInBoardSelectionController.mDisplayLegend_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 210
  //····················································································································

  fileprivate final func computeImplicitView_210 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 211
  //····················································································································

  fileprivate final func computeImplicitView_211 () -> NSView {
    let view = AutoLayoutElCanariBoardComponentPackagePopUpButton ()
    self.configure_componentPackagePopUpButtonConfigurator (view) // Configurator
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 212
  //····················································································································

  fileprivate final func computeImplicitView_212 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Show Rotation Knob", size: .small)
      .bind_value (preferences_mShowRotationKnobInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 213
  //····················································································································

  fileprivate final func computeImplicitView_213 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 214
  //····················································································································

  fileprivate final func computeImplicitView_214 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 215
  //····················································································································

  fileprivate final func computeImplicitView_215 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 216
  //····················································································································

  fileprivate final func computeImplicitView_216 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 217
  //····················································································································

  fileprivate final func computeImplicitView_217 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Center X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 218
  //····················································································································

  fileprivate final func computeImplicitView_218 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.componentInBoardSelectionController.mX_property, self.componentInBoardSelectionController.mXUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 219
  //····················································································································

  fileprivate final func computeImplicitView_219 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Center Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 220
  //····················································································································

  fileprivate final func computeImplicitView_220 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.componentInBoardSelectionController.mY_property, self.componentInBoardSelectionController.mYUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 221
  //····················································································································

  fileprivate final func computeImplicitView_221 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Value", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 222
  //····················································································································

  fileprivate final func computeImplicitView_222 () -> NSView {
    let view = AutoLayoutTextField (minWidth: 150, size: .small)
      .automaticallyAdjustHeight (maxWidth: 150)
      .bind_value (self.componentInBoardSelectionController.mComponentValue_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 223
  //····················································································································

  fileprivate final func computeImplicitView_223 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 224
  //····················································································································

  fileprivate final func computeImplicitView_224 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Display Value", size: .small)
      .bind_value (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 225
  //····················································································································

  fileprivate final func computeImplicitView_225 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 226
  //····················································································································

  fileprivate final func computeImplicitView_226 () -> NSView {
    let view = AutoLayoutDoubleField (minWidth: 64, size: .small)
      .bind_value (self.componentInBoardSelectionController.mValueFontSize_property, sendContinously:false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 227
  //····················································································································

  fileprivate final func computeImplicitView_227 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 228
  //····················································································································

  fileprivate final func computeImplicitView_228 () -> NSView {
    let view = AutoLayoutElCanariBoardFontPopUpButton ()
      .bind_currentFontName (self.componentInBoardSelectionController.componentValueFontName_property)
      .bind_fontNames (self.rootObject.fontNameArray_property)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.setComponentValueFontAction (_:))
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 229
  //····················································································································

  fileprivate final func computeImplicitView_229 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 230
  //····················································································································

  fileprivate final func computeImplicitView_230 () -> NSView {
    let view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
      .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 231
  //····················································································································

  fileprivate final func computeImplicitView_231 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 232
  //····················································································································

  fileprivate final func computeImplicitView_232 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
      .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
      .bind_enabled (.id (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 233
  //····················································································································

  fileprivate final func computeImplicitView_233 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Slave Pads", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 234
  //····················································································································

  fileprivate final func computeImplicitView_234 () -> NSView {
    let view = AutoLayoutBoolPopUpButton (title0: "should be insulated", title1: "should be routed")
      .bind_value (self.componentInBoardSelectionController.mSlavePadsShouldBeRouted_property)
      .bind_enabled (.id (self.componentInBoardSelectionController.hasSlavePads_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 235
  //····················································································································

  fileprivate final func computeImplicitView_235 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Side", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 236
  //····················································································································

  fileprivate final func computeImplicitView_236 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: ComponentSide.popupTitles (), size: .small)
      .bind_selectedIndex (self.componentInBoardSelectionController.mSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 237
  //····················································································································

  fileprivate final func computeImplicitView_237 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 238
  //····················································································································

  fileprivate final func computeImplicitView_238 () -> NSView {
    let view = AutoLayoutLabel (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_title (self.rootObject.layerConfigurationString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 239
  //····················································································································

  fileprivate final func computeImplicitView_239 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 240
  //····················································································································

  fileprivate final func computeImplicitView_240 () -> NSView {
    let view = AutoLayoutIntObserverField (bold: true, size: .regular)
      .set (alignment: .left)
      .expandableWidth ()
      .bind_observedValue (self.rootObject.mArtworkVersion_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 241
  //····················································································································

  fileprivate final func computeImplicitView_241 () -> NSView {
    let view = AutoLayoutVerticalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 242
  //····················································································································

  fileprivate final func computeImplicitView_242 () -> NSView {
    let view = AutoLayoutTextObserverView ()
      .expandableWidth ()
      .bind_observedValue (self.rootObject.artworkComments_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 243
  //····················································································································

  fileprivate final func computeImplicitView_243 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 244
  //····················································································································

  fileprivate final func computeImplicitView_244 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 245
  //····················································································································

  fileprivate final func computeImplicitView_245 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 246
  //····················································································································

  fileprivate final func computeImplicitView_246 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsTopSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 247
  //····················································································································

  fileprivate final func computeImplicitView_247 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_value (self.mDataSelection.drawTraversingPads_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 248
  //····················································································································

  fileprivate final func computeImplicitView_248 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 249
  //····················································································································

  fileprivate final func computeImplicitView_249 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 250
  //····················································································································

  fileprivate final func computeImplicitView_250 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 251
  //····················································································································

  fileprivate final func computeImplicitView_251 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 252
  //····················································································································

  fileprivate final func computeImplicitView_252 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasInnerElements_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 253
  //····················································································································

  fileprivate final func computeImplicitView_253 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 254
  //····················································································································

  fileprivate final func computeImplicitView_254 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasInnerElements_property))
      .bind_hidden (.id (self.rootObject.hasInnerElements_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 255
  //····················································································································

  fileprivate final func computeImplicitView_255 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 256
  //····················································································································

  fileprivate final func computeImplicitView_256 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
      .bind_hidden (.not (.id (self.rootObject.hasSixLayers_property)))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 257
  //····················································································································

  fileprivate final func computeImplicitView_257 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 258
  //····················································································································

  fileprivate final func computeImplicitView_258 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
      .bind_enabled (.id (self.rootObject.hasSixLayers_property))
      .bind_hidden (.id (self.rootObject.hasSixLayers_property))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 259
  //····················································································································

  fileprivate final func computeImplicitView_259 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 260
  //····················································································································

  fileprivate final func computeImplicitView_260 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
      .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 261
  //····················································································································

  fileprivate final func computeImplicitView_261 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
      .bind_value (self.mDataSelection.drawTracksBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 262
  //····················································································································

  fileprivate final func computeImplicitView_262 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
      .bind_value (self.mDataSelection.drawPadsBottomSide_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 263
  //····················································································································

  fileprivate final func computeImplicitView_263 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 264
  //····················································································································

  fileprivate final func computeImplicitView_264 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 265
  //····················································································································

  fileprivate final func computeImplicitView_265 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 266
  //····················································································································

  fileprivate final func computeImplicitView_266 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 267
  //····················································································································

  fileprivate final func computeImplicitView_267 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 268
  //····················································································································

  fileprivate final func computeImplicitView_268 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 269
  //····················································································································

  fileprivate final func computeImplicitView_269 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 270
  //····················································································································

  fileprivate final func computeImplicitView_270 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
/*    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    } */
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.bind_model (self.rootObject.selectedSheetObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.bind_model (self.rootObject.mBorderCurves_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.bind_selection (model: self.boardCurveObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.bind_model (self.rootObject.mBoardObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardTrackSelectionController
    self.boardTrackSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardConnectorSelectionController
    self.boardConnectorSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardLineSelectionController
    self.boardLineSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: restrictRectangleSelectionController
    self.restrictRectangleSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: boardTextSelectionController
    self.boardTextSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: componentInBoardSelectionController
    self.componentInBoardSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: rastnetDisplayOneNet
    self.rastnetDisplayOneNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mRastnetDisplay_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayOneNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetDisplayOneNet_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: rastnetDisplayComponentNet
    self.rastnetDisplayComponentNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mRastnetDisplay_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayComponentNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetDisplayComponentNet_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.incorrectDocumentFileDetailedErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentFileShouldBeRenamedErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceSymbolNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDevicePackageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: selectedDeviceNames
    self.selectedDeviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mNetClasses_property.count_property.selection, unwSelf.netClassController.selectedArray_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveNetClasses (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.addEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: rastnetShape
    self.rastnetShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mRastnetDisplay_property.selection, unwSelf.rootObject.mRastnetDisplayedNetName_property.selection, unwSelf.rootObject.mRastnetDisplayedComponentName_property.selection, unwSelf.rootObject.mBoardObjects_property.selection, unwSelf.boardObjectsController.selectedArray_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetShape (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedNetName_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedComponentName_property.addEBObserver (self.rastnetShape_property)
    self.rootObject.mBoardObjects_property.addEBObserverOf_netNameAndPadLocation (self.rastnetShape_property)
    self.boardObjectsController.selectedArray_property.addEBObserverOf_componentName (self.rastnetShape_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.documentFileName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.addEBObserver (self.documentIsUnnamed_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.drillDataFileExtension_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.addEBObserver (self.emptyDrillFileExtension_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.mComponents_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_componentCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.addEBObserver (self.componentCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.componentController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canChangePackage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.addEBObserverOf_availablePackages (self.canChangePackage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedFonts
    self.canRemoveSelectedFonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectFontController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedFonts (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectFontController.selectedArray_property.addEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.projectDeviceController.selectedArray_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedDevices (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: overDisplay
    self.overDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rastnetShape_property.selection, unwSelf.rootObject.boardIssues_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_overDisplay (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rastnetShape_property.addEBObserver (self.overDisplay_property)
    self.rootObject.boardIssues_property.addEBObserver (self.overDisplay_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: unplacedPackageCount
    self.unplacedPackageCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.unplacedPackages_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackageCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedPackages_property.addEBObserver (self.unplacedPackageCount_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: unplacedPackagesCountString
    self.unplacedPackagesCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.unplacedPackageCount_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.addEBObserver (self.unplacedPackagesCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: unplacedPackagesMessageString
    self.unplacedPackagesMessageString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.unplacedPackageCount_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesMessageString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.addEBObserver (self.unplacedPackagesMessageString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.emptyDrillFileExtension_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.addEBObserver (self.emptyDrillFileExtensionImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mDataController.sortedArray_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.generatedFileCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mComponentsPage.ebCleanUp ()
    self.mLibraryPage.ebCleanUp ()
    self.mLibraryContentView.ebCleanUp ()
    self.mDevicesInLibraryPage.ebCleanUp ()
    self.mFontsInLibraryPage.ebCleanUp ()
    self.mNetClassesPage.ebCleanUp ()
    self.mNetListPage.ebCleanUp ()
    self.mSchematicPage.ebCleanUp ()
    self.mBoardOutlinePage.ebCleanUp ()
    self.mBoardOutlineBaseView.ebCleanUp ()
    self.mBoardOutlineGridAndFlipView.ebCleanUp ()
    self.mBoardOutlineInspectorView.ebCleanUp ()
    self.mBoardShapeBaseView.ebCleanUp ()
    self.mBoardRectangularOutlineView.ebCleanUp ()
    self.mBoardBezierPathOutlineView.ebCleanUp ()
    self.mBoardContentsPage.ebCleanUp ()
    self.mBoardInspectorView.ebCleanUp ()
    self.mInsertComponentInBoardView.ebCleanUp ()
    self.mBoardDisplayInspectorView.ebCleanUp ()
    self.mBoardRouterInspectorView.ebCleanUp ()
    self.mBoardERCInspectorView.ebCleanUp ()
    self.mSelectedElementInspectorView.ebCleanUp ()
    self.mBoardTrackInspectorView.ebCleanUp ()
    self.mBoardConnectorInspectorView.ebCleanUp ()
    self.mBoardLineInspectorView.ebCleanUp ()
    self.mRestrictRectangleInspectorView.ebCleanUp ()
    self.mBoardTextInspectorView.ebCleanUp ()
    self.mComponentInBoardInspectorView.ebCleanUp ()
    self.mProductPage.ebCleanUp ()
    self.mProductMasterView.ebCleanUp ()
    self.mArtworkDescriptionPage.ebCleanUp ()
    self.mArtworkDataPage.ebCleanUp ()
    self.mArtworkMinimaPage.ebCleanUp ()
    self.mPDFSettingsPage.ebCleanUp ()
    self.mGenerationLogPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: netClassController
    self.netClassController.unbind_model ()
  //--- Array controller property: componentController
    self.componentController.unbind_model ()
  //--- Array controller property: projectFontController
    self.projectFontController.unbind_model ()
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.unbind_model ()
  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.unbind_model ()
  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.unbind_model ()
  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.unbind_selection ()
  //--- Array controller property: boardObjectsController
    self.boardObjectsController.unbind_model ()
  //--- Selection controller property: boardTrackSelectionController
    self.boardTrackSelectionController.unbind_selection ()
  //--- Selection controller property: boardConnectorSelectionController
    self.boardConnectorSelectionController.unbind_selection ()
  //--- Selection controller property: boardLineSelectionController
    self.boardLineSelectionController.unbind_selection ()
  //--- Selection controller property: restrictRectangleSelectionController
    self.restrictRectangleSelectionController.unbind_selection ()
  //--- Selection controller property: boardTextSelectionController
    self.boardTextSelectionController.unbind_selection ()
  //--- Selection controller property: componentInBoardSelectionController
    self.componentInBoardSelectionController.unbind_selection ()
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCount_property)
    // self.rootObject.mRastnetDisplay_property.removeEBObserver (self.rastnetDisplayOneNet_property)
    // self.rootObject.mRastnetDisplay_property.removeEBObserver (self.rastnetDisplayComponentNet_property)
    // self.documentFileName_property.removeEBObserver (self.incorrectDocumentFileDetailedErrorMessage_property)
    // self.documentFileName_property.removeEBObserver (self.documentFileShouldBeRenamedErrorMessage_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceNames_property)
    // self.rootObject.mNetClasses_property.count_property.removeEBObserver (self.canRemoveNetClasses_property)
    // self.netClassController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    // self.rootObject.netsDescription_property.removeEBObserver (self.netCountString_property)
    // self.rootObject.mRastnetDisplay_property.removeEBObserver (self.rastnetShape_property)
    // self.rootObject.mRastnetDisplayedNetName_property.removeEBObserver (self.rastnetShape_property)
    // self.rootObject.mRastnetDisplayedComponentName_property.removeEBObserver (self.rastnetShape_property)
    // self.rootObject.mBoardObjects_property.removeEBObserverOf_netNameAndPadLocation (self.rastnetShape_property)
    // self.boardObjectsController.selectedArray_property.removeEBObserverOf_componentName (self.rastnetShape_property)
    // self.documentFileName_property.removeEBObserver (self.documentIsUnnamed_property)
    // self.rootObject.drillDataFileExtension_property.removeEBObserver (self.emptyDrillFileExtension_property)
    // self.rootObject.mComponents_property.count_property.removeEBObserver (self.componentCount_property)
    // self.componentController.selectedArray_property.removeEBObserverOf_availablePackages (self.canChangePackage_property)
    // self.projectFontController.selectedArray_property.removeEBObserverOf_canRemoveFont (self.canRemoveSelectedFonts_property)
    // self.projectDeviceController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    // self.rastnetShape_property.removeEBObserver (self.overDisplay_property)
    // self.rootObject.boardIssues_property.removeEBObserver (self.overDisplay_property)
    // self.rootObject.unplacedPackages_property.removeEBObserver (self.unplacedPackageCount_property)
    // self.unplacedPackageCount_property.removeEBObserver (self.unplacedPackagesCountString_property)
    // self.unplacedPackageCount_property.removeEBObserver (self.unplacedPackagesMessageString_property)
    // self.emptyDrillFileExtension_property.removeEBObserver (self.emptyDrillFileExtensionImage_property)
    // self.mDataController.sortedArray_property.count_property.removeEBObserver (self.generatedFileCountString_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

