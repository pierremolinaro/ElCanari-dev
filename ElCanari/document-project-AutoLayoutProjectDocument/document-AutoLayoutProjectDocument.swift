//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutProjectDocument) class AutoLayoutProjectDocument : AutoLayoutProjectDocumentSuperClass {
  
  //································································································
  //   Array controller: netClassController
  //································································································

  final var netClassController = Controller_AutoLayoutProjectDocument_netClassController ()

  //································································································
  //   Array controller: componentController
  //································································································

  final var componentController = Controller_AutoLayoutProjectDocument_componentController ()

  //································································································
  //   Array controller: projectFontController
  //································································································

  final var projectFontController = Controller_AutoLayoutProjectDocument_projectFontController ()

  //································································································
  //   Array controller: projectDeviceController
  //································································································

  final var projectDeviceController = Controller_AutoLayoutProjectDocument_projectDeviceController ()

  //································································································
  //   Array controller: schematicObjectsController
  //································································································

  final var schematicObjectsController = Controller_AutoLayoutProjectDocument_schematicObjectsController ()

  //································································································
  //   Selection controller: wireInSchematicSelectionController
  //································································································

  final var wireInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_wireInSchematicSelectionController ()

  //································································································
  //   Selection controller: ncInSchematicSelectionController
  //································································································

  final var ncInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_ncInSchematicSelectionController ()

  //································································································
  //   Selection controller: schematicLabelSelectionController
  //································································································

  final var schematicLabelSelectionController = SelectionController_AutoLayoutProjectDocument_schematicLabelSelectionController ()

  //································································································
  //   Selection controller: commentInSchematicSelectionController
  //································································································

  final var commentInSchematicSelectionController = SelectionController_AutoLayoutProjectDocument_commentInSchematicSelectionController ()

  //································································································
  //   Selection controller: componentSymbolSelectionController
  //································································································

  final var componentSymbolSelectionController = SelectionController_AutoLayoutProjectDocument_componentSymbolSelectionController ()

  //································································································
  //   Array controller: boardCurveObjectsController
  //································································································

  final var boardCurveObjectsController = Controller_AutoLayoutProjectDocument_boardCurveObjectsController ()

  //································································································
  //   Selection controller: boardCurveSelectionController
  //································································································

  final var boardCurveSelectionController = SelectionController_AutoLayoutProjectDocument_boardCurveSelectionController ()

  //································································································
  //   Array controller: boardObjectsController
  //································································································

  final var boardObjectsController = Controller_AutoLayoutProjectDocument_boardObjectsController ()

  //································································································
  //   Selection controller: boardTrackSelectionController
  //································································································

  final var boardTrackSelectionController = SelectionController_AutoLayoutProjectDocument_boardTrackSelectionController ()

  //································································································
  //   Selection controller: boardConnectorSelectionController
  //································································································

  final var boardConnectorSelectionController = SelectionController_AutoLayoutProjectDocument_boardConnectorSelectionController ()

  //································································································
  //   Selection controller: boardLineSelectionController
  //································································································

  final var boardLineSelectionController = SelectionController_AutoLayoutProjectDocument_boardLineSelectionController ()

  //································································································
  //   Selection controller: restrictRectSelController
  //································································································

  final var restrictRectSelController = SelectionController_AutoLayoutProjectDocument_restrictRectSelController ()

  //································································································
  //   Selection controller: boardImageSelectionController
  //································································································

  final var boardImageSelectionController = SelectionController_AutoLayoutProjectDocument_boardImageSelectionController ()

  //································································································
  //   Selection controller: boardQRCodeSelectionController
  //································································································

  final var boardQRCodeSelectionController = SelectionController_AutoLayoutProjectDocument_boardQRCodeSelectionController ()

  //································································································
  //   Selection controller: boardTextSelectionController
  //································································································

  final var boardTextSelectionController = SelectionController_AutoLayoutProjectDocument_boardTextSelectionController ()

  //································································································
  //   Selection controller: componentInBoardSelectionController
  //································································································

  final var componentInBoardSelectionController = SelectionController_AutoLayoutProjectDocument_componentInBoardSelectionController ()

  //································································································
  //   Array controller: mDataController
  //································································································

  final var mDataController = Controller_AutoLayoutProjectDocument_mDataController ()

  //································································································
  //   Selection controller: mDataSelection
  //································································································

  final var mDataSelection = SelectionController_AutoLayoutProjectDocument_mDataSelection ()

  //································································································
  //   Transient property: netCount
  //································································································

  final let netCount_property = EBTransientProperty <Int> ()

  //································································································

  final var netCount : Int? {
    return self.netCount_property.optionalValue
  }

  //································································································
  //   Transient property: rastnetDisplayOneNet
  //································································································

  final let rastnetDisplayOneNet_property = EBTransientProperty <Bool> ()

  //································································································

  final var rastnetDisplayOneNet : Bool? {
    return self.rastnetDisplayOneNet_property.optionalValue
  }

  //································································································
  //   Transient property: rastnetDisplayComponentNet
  //································································································

  final let rastnetDisplayComponentNet_property = EBTransientProperty <Bool> ()

  //································································································

  final var rastnetDisplayComponentNet : Bool? {
    return self.rastnetDisplayComponentNet_property.optionalValue
  }

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: incorrectDocumentFileDetailedErrorMessage
  //································································································

  final let incorrectDocumentFileDetailedErrorMessage_property = EBTransientProperty <String> ()

  //································································································

  final var incorrectDocumentFileDetailedErrorMessage : String? {
    return self.incorrectDocumentFileDetailedErrorMessage_property.optionalValue
  }

  //································································································
  //   Transient property: documentFileShouldBeRenamedErrorMessage
  //································································································

  final let documentFileShouldBeRenamedErrorMessage_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileShouldBeRenamedErrorMessage : String? {
    return self.documentFileShouldBeRenamedErrorMessage_property.optionalValue
  }

  //································································································
  //   Transient property: pinPadAssignments
  //································································································

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray> ()

  //································································································

  final var pinPadAssignments : ThreeStringArray? {
    return self.pinPadAssignments_property.optionalValue
  }

  //································································································
  //   Transient property: selectedDeviceSymbolNames
  //································································································

  final let selectedDeviceSymbolNames_property = EBTransientProperty <TwoStringArray> ()

  //································································································

  final var selectedDeviceSymbolNames : TwoStringArray? {
    return self.selectedDeviceSymbolNames_property.optionalValue
  }

  //································································································
  //   Transient property: selectedDevicePackageNames
  //································································································

  final let selectedDevicePackageNames_property = EBTransientProperty <StringArray> ()

  //································································································

  final var selectedDevicePackageNames : StringArray? {
    return self.selectedDevicePackageNames_property.optionalValue
  }

  //································································································
  //   Transient property: selectedDeviceNames
  //································································································

  final let selectedDeviceNames_property = EBTransientProperty <StringArray> ()

  //································································································

  final var selectedDeviceNames : StringArray? {
    return self.selectedDeviceNames_property.optionalValue
  }

  //································································································
  //   Transient property: canRemoveNetClasses
  //································································································

  final let canRemoveNetClasses_property = EBTransientProperty <Bool> ()

  //································································································

  final var canRemoveNetClasses : Bool? {
    return self.canRemoveNetClasses_property.optionalValue
  }

  //································································································
  //   Transient property: netCountString
  //································································································

  final let netCountString_property = EBTransientProperty <String> ()

  //································································································

  final var netCountString : String? {
    return self.netCountString_property.optionalValue
  }

  //································································································
  //   Transient property: schematicSheetOrientationIsCustom
  //································································································

  final let schematicSheetOrientationIsCustom_property = EBTransientProperty <Bool> ()

  //································································································

  final var schematicSheetOrientationIsCustom : Bool? {
    return self.schematicSheetOrientationIsCustom_property.optionalValue
  }

  //································································································
  //   Transient property: rastnetShape
  //································································································

  final let rastnetShape_property = EBTransientProperty <EBShape> ()

  //································································································

  final var rastnetShape : EBShape? {
    return self.rastnetShape_property.optionalValue
  }

  //································································································
  //   Transient property: documentIsUnnamed
  //································································································

  final let documentIsUnnamed_property = EBTransientProperty <Bool> ()

  //································································································

  final var documentIsUnnamed : Bool? {
    return self.documentIsUnnamed_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtension
  //································································································

  final let emptyDrillFileExtension_property = EBTransientProperty <Bool> ()

  //································································································

  final var emptyDrillFileExtension : Bool? {
    return self.emptyDrillFileExtension_property.optionalValue
  }

  //································································································
  //   Transient property: componentCount
  //································································································

  final let componentCount_property = EBTransientProperty <String> ()

  //································································································

  final var componentCount : String? {
    return self.componentCount_property.optionalValue
  }

  //································································································
  //   Transient property: canChangePackage
  //································································································

  final let canChangePackage_property = EBTransientProperty <Bool> ()

  //································································································

  final var canChangePackage : Bool? {
    return self.canChangePackage_property.optionalValue
  }

  //································································································
  //   Transient property: canRemoveSelectedFonts
  //································································································

  final let canRemoveSelectedFonts_property = EBTransientProperty <Bool> ()

  //································································································

  final var canRemoveSelectedFonts : Bool? {
    return self.canRemoveSelectedFonts_property.optionalValue
  }

  //································································································
  //   Transient property: canRemoveSelectedDevices
  //································································································

  final let canRemoveSelectedDevices_property = EBTransientProperty <Bool> ()

  //································································································

  final var canRemoveSelectedDevices : Bool? {
    return self.canRemoveSelectedDevices_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedSymbolsCount
  //································································································

  final let unplacedSymbolsCount_property = EBTransientProperty <Int> ()

  //································································································

  final var unplacedSymbolsCount : Int? {
    return self.unplacedSymbolsCount_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedSymbolsCountString
  //································································································

  final let unplacedSymbolsCountString_property = EBTransientProperty <String> ()

  //································································································

  final var unplacedSymbolsCountString : String? {
    return self.unplacedSymbolsCountString_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedSymbolsSegmentImage
  //································································································

  final let unplacedSymbolsSegmentImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var unplacedSymbolsSegmentImage : NSImage? {
    return self.unplacedSymbolsSegmentImage_property.optionalValue
  }

  //································································································
  //   Transient property: boardOutlineOverDisplay
  //································································································

  final let boardOutlineOverDisplay_property = EBTransientProperty <EBShape> ()

  //································································································

  final var boardOutlineOverDisplay : EBShape? {
    return self.boardOutlineOverDisplay_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedPackageCount
  //································································································

  final let unplacedPackageCount_property = EBTransientProperty <Int> ()

  //································································································

  final var unplacedPackageCount : Int? {
    return self.unplacedPackageCount_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedPackagesCountString
  //································································································

  final let unplacedPackagesCountString_property = EBTransientProperty <String> ()

  //································································································

  final var unplacedPackagesCountString : String? {
    return self.unplacedPackagesCountString_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedPackagesSegmentImage
  //································································································

  final let unplacedPackagesSegmentImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var unplacedPackagesSegmentImage : NSImage? {
    return self.unplacedPackagesSegmentImage_property.optionalValue
  }

  //································································································
  //   Transient property: unplacedPackagesMessageString
  //································································································

  final let unplacedPackagesMessageString_property = EBTransientProperty <String> ()

  //································································································

  final var unplacedPackagesMessageString : String? {
    return self.unplacedPackagesMessageString_property.optionalValue
  }

  //································································································
  //   Transient property: emptyDrillFileExtensionImage
  //································································································

  final let emptyDrillFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var emptyDrillFileExtensionImage : NSImage? {
    return self.emptyDrillFileExtensionImage_property.optionalValue
  }

  //································································································
  //   Transient property: generatedFileCountString
  //································································································

  final let generatedFileCountString_property = EBTransientProperty <String> ()

  //································································································

  final var generatedFileCountString : String? {
    return self.generatedFileCountString_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var mAddBottomSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddLabelToAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddLeftLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddNCSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddNCToAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddRightLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddTopLabelSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mAddWirePointSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mBoardView : AutoLayoutGraphicView? = nil
  final var mConnectAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mConnectSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mDisconnectAllSymbolPinsSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mDisconnectSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mERCIssueTableViewArray = EBWeakReferenceArray <AutoLayoutCanariIssueTableView> ()
  final var mERCLogTextViewArray = EBWeakReferenceArray <AutoLayoutTextObserverView> ()
  final var mExchangeSymbolSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mNetInfoTableView : AutoLayoutCanariNetDescriptionTableView? = nil
  weak final var mProductFileGenerationLogTextView : AutoLayoutTextObserverView? = nil
  weak final var mProductPageSegmentedControl : AutoLayoutTabView? = nil
  final var mRemoveWirePointSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  weak final var mSchematicsView : AutoLayoutGraphicView? = nil
  final var mShowHideSymbolValueSchematicHotKeyTextField = EBWeakReferenceArray <AutoLayoutStaticLabel> ()
  final var mUnplacedPackageTableViewArray = EBWeakReferenceArray <AutoLayoutCanariDragSourceTableView> ()
  final var mUnplacedSymbolsTableViewArray = EBWeakReferenceArray <AutoLayoutCanariDragSourceTableView> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW pageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func pageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: .zero)
    let pageMasterView = self.pageMasterView ()
    let componentsPage = self.componentsPage ()
    let libraryPage = self.libraryPage ()
    let schematicPage = self.schematicsPage ()
    let netClassesPage = self.netClassesPage ()
    let netListPage = self.netListPage ()
    let boardOutlinePage = self.boardOutlinePage ()
    let boardContentsPage = self.boardContentsPage ()
    let productPage = self.productPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
            .addPage (title: "Components", tooltip: "", pageView: componentsPage)
            .addPage (title: "Library", tooltip: "", pageView: libraryPage)
            .addPage (title: "Schematic", tooltip: "", pageView: schematicPage)
            .addPage (title: "Net Classes", tooltip: "", pageView: netClassesPage)
            .addPage (title: "Net List", tooltip: "", pageView: netListPage)
            .addPage (title: "Board Outline", tooltip: "", pageView: boardOutlinePage)
            .addPage (title: "Board Contents", tooltip: "", pageView: boardContentsPage)
            .addPage (title: "Product", tooltip: "", pageView: productPage)
            .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
            .bind_segmentImage (self.rootObject.segmentedControlSchematicIssueImage_property, segmentIndex:2)
            .bind_segmentImage (self.rootObject.segmentedControlNetListIssueImage_property, segmentIndex:4)
            .bind_segmentImage (self.rootObject.segmentedControlBoardIssueImage_property, segmentIndex:6)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Page", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.rootObject.schematicStatusMessage_property)
            .bind_errorCount (self.rootObject.schematicErrorCount_property)
            .bind_warningCount (self.rootObject.schematicWarningCount_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Schematic", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusBadgeView ()
            .bind_tooltip (self.rootObject.boardStatusMessage_property)
            .bind_errorCount (self.rootObject.boardStatusErrorCount_property)
            .bind_warningCount (self.rootObject.boardStatusWarningCount_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Board", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (spacing: .zero)
        do{
          let vStackView_view_view_view = AutoLayoutStatusView ()
            .bind_tooltip (self.rootObject.ercStatusMessage_property)
            .bind_status (self.rootObject.ercStatusValue_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "ERC", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    _ = vStackView.appendView (pageMasterView)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW componentsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func componentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .regular)
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
      do{
        let hStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .expandableWidth ()
          .set (alignment: .center)
          .bind_title (self.componentCount_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Add Component from:", bold: true, size: .small, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "File Library…", size: .small)
          .expandableWidth ()
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.addComponentFromFileLibraryAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutPullDownButton (title: "Embedded Library…", size: .small)
          .expandableWidth ()
          .bind_items (self.rootObject.deviceNames_property)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.addComponentFromEmbeddedLibraryAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "On Selected Components", bold: true, size: .small, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Duplicate", size: .small)
          .set (commandKeyEquivalent: "d")
          .expandableWidth ()
          .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.duplicateSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Rename…", size: .small)
          .expandableWidth ()
          .set (commandKeyEquivalent: "r")
          .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.renameSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Remove", size: .small)
          .expandableWidth ()
          .setDeleteKeyAsKeyEquivalent ()
          .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.removeSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Change Package…", size: .small)
          .expandableWidth ()
          .set (controlCommandKeyEquivalent: "c")
          .bind_enabled (.prop (self.canChangePackage_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.changePackageOfSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Change Value…", size: .small)
          .expandableWidth ()
          .set (controlCommandKeyEquivalent: "v")
          .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.changeValueOfSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutButton (title: "Reveal in Board", size: .small)
          .expandableWidth ()
          .set (controlCommandKeyEquivalent: "b")
          .bind_enabled (.intcmp (.prop (self.componentController.selectedArray_property.count_property), .eq, .literalInt (1)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.revealPackageOfSelectedComponentsAction (_:))
          )
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    do{
      let hStackView_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
      self.componentController.bind_tableView (hStackView_view)
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW libraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func libraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let devicesInLibraryPage = self.DevicesInLibraryPage ()
    let fontsInLibraryPage = self.FontsInLibraryPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Remove Embedded Devices", size: .regular)
          .set (controlCommandKeyEquivalent: "r")
          .bind_enabled (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.removeEmbeddedDevicesAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Device and Font Versions", size: .regular)
          .set (controlCommandKeyEquivalent: "v")
          .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.resetDevicesAndFontsVersionAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Update Devices and Fonts", size: .regular)
          .set (controlCommandKeyEquivalent: "u")
          .bind_enabled (.boolcmp (.intcmp (.prop (self.rootObject.mDevices_property.count_property), .gt, .literalInt (0)), .or, .intcmp (.prop (self.rootObject.mFonts_property.count_property), .gt, .literalInt (0))))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.updateDevicesAndFontsAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTabView (size: .regular)
        .addTab (title: "Devices", tooltip: "", contentView: devicesInLibraryPage)
        .addTab (title: "Fonts", tooltip: "", contentView: fontsInLibraryPage)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DevicesInLibraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DevicesInLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
      .expandableWidth ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Edit Selected Device", size: .regular)
          .set (shiftCommandKeyEquivalent: "e")
          .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.editSelectedDeviceAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Selected Device Version", size: .regular)
          .set (shiftCommandKeyEquivalent: "r")
          .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.resetSelectedDeviceVersionAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Export Selected Device", size: .regular)
          .set (shiftCommandKeyEquivalent: "x")
          .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.exportSelectedDeviceAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Update Selected Device…", size: .regular)
          .set (shiftCommandKeyEquivalent: "u")
          .bind_enabled (.intcmp (.prop (self.projectDeviceController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.updateSelectedDeviceAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
          .expandableWidth ()
          .set (minWidth: 400)
        self.projectDeviceController.bind_tableView (vStackView_view_view)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendDivider ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Selected Device", bold: false, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariProjectDeviceTableView (size: .regular)
              .expandableWidth ()
              .set (minWidth: 150)
              .bind_array (self.selectedDeviceNames_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendDivider ()
          do{
            let vStackView_view_view_view_view = AutoLayoutVerticalStackView ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutCanariProjectDeviceSymbolTypeAndNameTableView (size: .regular)
                .expandableWidth ()
                .set (minWidth: 150)
                .set (minHeight: 150)
                .bind_array (self.selectedDeviceSymbolNames_property)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view_view.appendDivider ()
            do{
              let vStackView_view_view_view_view_view = AutoLayoutCanariProjectDevicePackageTableView (size: .regular)
                .set (minHeight: 150)
                .expandableWidth ()
                .bind_array (self.selectedDevicePackageNames_property)
              _ = vStackView_view_view_view_view .appendView (vStackView_view_view_view_view_view)
            }
            _ = vStackView_view_view_view.appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendDivider ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariProjectPinPadAssignmentTableView (size: .regular)
              .expandableWidth ()
              .set (minWidth: 200)
              .bind_array (self.pinPadAssignments_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW FontsInLibraryPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func FontsInLibraryPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Add Font…", size: .regular)
          .set (shiftCommandKeyEquivalent: "a")
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.addFontAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Edit Selected Font", size: .regular)
          .set (shiftCommandKeyEquivalent: "e")
          .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.editFontAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Reset Selected Font Version", size: .regular)
          .set (shiftCommandKeyEquivalent: "r")
          .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.resetFontVersionAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Update Selected Fonts", size: .regular)
          .set (shiftCommandKeyEquivalent: "u")
          .bind_enabled (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.updateFontAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Remove Selected Font", size: .regular)
          .setDeleteKeyAsKeyEquivalent ()
          .bind_enabled (.boolcmp (.intcmp (.prop (self.projectFontController.selectedArray_property.count_property), .gt, .literalInt (0)), .and, .prop (self.canRemoveSelectedFonts_property)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.removeFontAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
      self.projectFontController.bind_tableView (vStackView_view)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW netClassesPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func netClassesPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "New Net Class", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.addNetClassAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Edit Selected Net Class", size: .regular)
          .bind_enabled (.intcmp (.prop (self.netClassController.selectedArray_property.count_property), .eq, .literalInt (1)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.editNetClassAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Remove Selected Net Class", size: .regular)
          .setDeleteKeyAsKeyEquivalent ()
          .bind_enabled (.prop (self.canRemoveNetClasses_property))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.removeNetClassAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTableView (size: .regular, addControlButtons: false)
      self.netClassController.bind_tableView (vStackView_view)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW netListPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func netListPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .regular)
          .bind_title (self.netCountString_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Rename Net…", size: .regular)
          .set (commandKeyEquivalent: "r")
          .bind_enabled (.intcmp (.prop (self.netCount_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.renameNetAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Select Net Class…", size: .regular)
          .set (commandKeyEquivalent: "k")
          .bind_enabled (.intcmp (.prop (self.netCount_property), .gt, .literalInt (0)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.selectNetClassAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutWarningImageView ()
          .bind_hidden (.intcmp (.prop (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutIntObserverField (bold: true, size: .regular)
          .bind_observedValue (self.rootObject.netWarningCount_property)
          .bind_hidden (.intcmp (.prop (self.rootObject.netWarningCount_property), .eq, .literalInt (0)))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutCanariNetDescriptionTableView ()
          .set (minWidth: 300)
          .bind_netInfo (self.rootObject.netsDescription_property)
        self.mNetInfoTableView = vStackView_view_view // Outlet
        self.configure_netDescriptionTableViewConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendDivider ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Selected Net Inspector", bold: true, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutVerticalStackView (verticalScroller: true)
            .set (margins: .regular)
            .set (width: 300)
          _ = vStackView_view_view.appendView (vStackView_view_view_view)
          self.configure_selectedNetVerticalScrollViewConfigurator (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let schematicLateralBar = self.schematicsLateralBar ()
    _ = hStackView.appendView (schematicLateralBar)
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 50, maxZoom: 1000)
        .prepend (toTopHStack: { () -> NSView in let toTopHStack = AutoLayoutPullDownButton (title: "", size: .small)
  .add (item: AutoLayoutMenuItemDescriptor (title: "Select all Connected Elements", target: self, selector: #selector (AutoLayoutProjectDocument.selectAllConnectedElementsInSchematicsAction (_:)), enableBinding: .alwaysTrue))
  .add (item: AutoLayoutMenuItemDescriptor (title: "Move Selected Elements to Sheet…", target: self, selector: #selector (AutoLayoutProjectDocument.moveSelectedToSheetInSchematicsAction (_:)), enableBinding: .alwaysTrue))
self.configure_schematicPullDownButtonConfigurator (toTopHStack) // Configurator
 ; return toTopHStack } ())
        .prepend (toTopHStack: { () -> NSView in let toTopHStack = AutoLayoutPopUpButton (size: .small)
self.configure_sheetPopUpButtonConfigurator2 (toTopHStack) // Configurator
 ; return toTopHStack } ())
        .bind_underObjectsDisplay (self.rootObject.schematicBackgroundDisplay_property)
        .bind_overObjectsDisplay (self.rootObject.schematicOverDisplay_property)
        .bind_tooltips (self.rootObject.schematicTooltips_property)
        .bind_horizontalFlip (self.rootObject.mSchematicHorizontalFlip_property)
        .bind_verticalFlip (self.rootObject.mSchematicVerticalFlip_property)
        .bind_gridStyle (self.rootObject.mSchematicGridStyle_property)
        .bind_gridDisplayFactor (self.rootObject.mSchematicGridDisplayFactor_property)
        .bind_gridLineColor (preferences_lineColorGridForSchematic_property)
        .bind_gridCrossColor (preferences_dotColorGridForSchematic_property)
        .bind_zoom (self.rootObject.mSchematicZoom_property)
        .bind_backColor (preferences_schematicBackColor_property)
        .bind_graphic_controller (self.schematicObjectsController)
      self.mSchematicsView = hStackView_view // Outlet
      self.configure_schematicView (hStackView_view) // Configurator
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsLateralBar
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsLateralBar () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (width: 250)
    let selectedSchematicElementInspectorView = self.selectedSchematicElementInspectorView ()
    let schematicsInspectorView = self.schematicsInspectorView ()
    let schematicHotKeysInspectorView = self.schematicsHotKeysInspectorView ()
    let insertSymbolInSchematicView = self.schematicsInsertSymbolInSchematicView ()
    let schematicsDisplayInspectorView = self.schematicsDisplayInspectorView ()
    let schematicsSheetInspectorView = self.schematicsSheetInspectorView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .set (margins: .regular)
        .set (spacing: .small)
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Wire; hint: option click starts a new wire.")
        self.configure_addWireInschematicsButton (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Comment")
        self.configure_addCommentInSchematicsButton (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
        .set (leftMargin: .regular)
        .set (rightMargin: .regular)
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Enable Line Column Hilite", size: .small)
          .bind_value (self.rootObject.mSchematicEnableHiliteColumnAndRow_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: schematicsInspectorView, equalWidth: false, size: .small)
            .expandableWidth ()
            .addPage (title: "🛠", tooltip: "Selected Element Inspector", pageView: selectedSchematicElementInspectorView)
            .addPage (title: "🄰", tooltip: "Hot Keys", pageView: schematicHotKeysInspectorView)
            .addPage (title: "", tooltip: "Insert Symbol in Schematic", pageView: insertSymbolInSchematicView)
            .addPage (title: "🔍", tooltip: "Display Inspector", pageView: schematicsDisplayInspectorView)
            .addPage (title: "Sheets", tooltip: "Sheet Inspector", pageView: schematicsSheetInspectorView)
            .bind_selectedPage (self.rootObject.mSelectedSchematicInspector_property)
            .bind_segmentTitle (self.unplacedSymbolsCountString_property, segmentIndex:2)
            .bind_segmentImage (self.unplacedSymbolsSegmentImage_property, segmentIndex:2)
            .bind_segmentImage (self.rootObject.segmentedControlSheetIssueImage_property, segmentIndex:4)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendView (schematicsInspectorView)
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsHotKeysInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsHotKeysInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewSchematicHotKeysInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Hot Keys", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewSchematicHotKeysInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[A] Connect all Symbol Pins", bold: false, size: .small, alignment: .left)
      self.mConnectAllSymbolPinsSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[B] Add Bottom Label", bold: false, size: .small, alignment: .left)
      self.mAddBottomSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[C] Connect", bold: false, size: .small, alignment: .left)
      self.mConnectSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[D] Disconnect", bold: false, size: .small, alignment: .left)
      self.mDisconnectSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[E] Disconnect All Symbol Pins", bold: false, size: .small, alignment: .left)
      self.mDisconnectAllSymbolPinsSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[F] Add Label to Symbol Pins", bold: false, size: .small, alignment: .left)
      self.mAddLabelToAllSymbolPinsSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[L] Add Left Label", bold: false, size: .small, alignment: .left)
      self.mAddLeftLabelSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[M] Set NC to Symbol Pins", bold: false, size: .small, alignment: .left)
      self.mAddNCToAllSymbolPinsSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[N] Set NC", bold: false, size: .small, alignment: .left)
      self.mAddNCSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[P] Remove Wire Point", bold: false, size: .small, alignment: .left)
      self.mRemoveWirePointSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[R] Add Right Label", bold: false, size: .small, alignment: .left)
      self.mAddRightLabelSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[T] Add Top Label", bold: false, size: .small, alignment: .left)
      self.mAddTopLabelSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[V] Show / Hide Component Value", bold: false, size: .small, alignment: .left)
      self.mShowHideSymbolValueSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[X] Exchange Symbol…", bold: false, size: .small, alignment: .left)
      self.mExchangeSymbolSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "[W] Insert Wire Point", bold: false, size: .small, alignment: .left)
      self.mAddWirePointSchematicHotKeyTextField.append (vStackView_view) // Outlet Array
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsInsertSymbolInSchematicView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsInsertSymbolInSchematicView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewSchematicInsertSymbolInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Insert Symbol Inspector", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewSchematicInsertSymbolInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariDragSourceTableView ()
        .bind_models (self.rootObject.unplacedSymbols_property)
      self.mUnplacedSymbolsTableViewArray.append (vStackView_view) // Outlet Array
      self.configure_symbolDragSourceTableViewConfigurator (vStackView_view) // Configurator
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsDisplayInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsDisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewSchematicDisplayInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Display Inspector", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewSchematicDisplayInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTabView (size: .small)
        .addTab (title: "Grid, Flip", tooltip: "Grid and Flip", contentView: { () -> NSView in let contentView = AutoLayoutVerticalStackView ()
  .set (margins: .regular)
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "50 mils", bold: true, size: .small, alignment: .left)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.mSchematicGridStyle_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Every", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.mSchematicGridDisplayFactor_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.mSchematicHorizontalFlip_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.mSchematicVerticalFlip_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Cross Grid Color", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_dotColorGridForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Line Grid Color", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_lineColorGridForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
 ; return contentView } ())
        .addTab (title: "Colors, Font", tooltip: "Colors and Font", contentView: { () -> NSView in let contentView = AutoLayoutVerticalStackView ()
  .set (margins: .regular)
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Symbols, unplaced Component", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_symbolColorForUnplacedComponentsForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Symbols, placed Component", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_symbolColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Symbols Drawing Width", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  do{
    let contentView_view_view = AutoLayoutTaggedPopUpButton (size: .small)
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Point", withTag: 20)
      .add (title: "2.5 Point", withTag: 25)
      .bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTenForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Component Name", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_componentNameColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutFontButton (width: 125, size: .small)
    .bind_fontValue (preferences_componentNameFontForSchematic_property)
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Component Value", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_componentValueColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutFontButton (width: 125, size: .small)
    .bind_fontValue (preferences_componentValueFontForSchematic_property)
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Pin Name", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_pinNameColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutFontButton (width: 125, size: .small)
    .bind_fontValue (preferences_pinNameFontForSchematic_property)
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Pin Number", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_pinNumberColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutFontButton (width: 125, size: .small)
    .bind_fontValue (preferences_pinNumberFontForSchematic_property)
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Connection", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_connectionColorForSchematic_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
_ = contentView.appendSeparator ()
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Background Color", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_schematicBackColor_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  do{
    let contentView_view_view = AutoLayoutStaticLabel (title: "Frame Color", bold: false, size: .small, alignment: .right)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendGutter ()
  do{
    let contentView_view_view = AutoLayoutColorWell ()
      .set (toolTip: "Stored in Preferences")
      .bind_color (preferences_schematicFrameColor_property)
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView .appendView (contentView_view)
}
 ; return contentView } ())
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsSheetInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsSheetInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewSchematicSheetInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Sheet Inspector", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewSchematicSheetInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutPopUpButton (size: .small)
        self.configure_sheetPopUpButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutImageObserverView (size: .small)
          .bind_image (self.rootObject.segmentedControlSchematicIssueImage_property)
          .bind_hidden (.not (.prop (self.rootObject.hasSchematicIssue_property)))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStepper ()
        self.configure_sheetStepperConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "New Sheet", size: .small)
          .expandableHeight ()
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.newSheetAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Up", size: .small)
            .expandableWidth ()
          self.configure_moveSheetUp (vStackView_view_view_view) // Configurator
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Down", size: .small)
          self.configure_moveSheetDown (vStackView_view_view_view) // Configurator
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Delete Sheet", size: .small)
          .expandableHeight ()
          .bind_enabled (.intcmp (.prop (self.rootObject.mSheets_property.count_property), .gt, .literalInt (1)))
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.deleteSheetAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Selected Sheet Name", bold: false, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 150, size: .small)
        .automaticallyAdjustHeight (maxWidth: 150)
        .bind_value (self.rootObject.selectedSheetTitle_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Title", bold: false, size: .small, alignment: .right)
          .expandableHeight ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutTextField (minWidth: 150, size: .small)
          .automaticallyAdjustHeight (maxWidth: 150)
          .bind_value (self.rootObject.mSchematicTitle_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutTextField (minWidth: 150, size: .small)
          .bind_value (self.rootObject.mSchematicVersion_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Date", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Set…", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.openSetDateDialogAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Set to Now", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.setDateToNowAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumSegmentedControl (titles: SchematicSheetOrientation.popupTitles (), equalWidth: false, size: .small)
          .bind_selectedSegment (self.rootObject.mSchematicSheetOrientation_property)
        self.configure_sheetOrientationSegmentedControlConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.rootObject.mSchematicCustomWidth_property, self.rootObject.mSchematicCustomWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.schematicSheetOrientationIsCustom_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.rootObject.mSchematicCustomHeight_property, self.rootObject.mSchematicCustomHeightUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW selectedSchematicElementInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func selectedSchematicElementInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (topMargin: .regular)
      .set (bottomMargin: .regular)
    let schematicsWireInspectorView = self.schematicsWireInspectorView ()
    let ncInSchematicsInspectorView = self.ncInSchematicsInspectorView ()
    let schematicsLabelInspectorView = self.schematicsLabelInspectorView ()
    let commentInSchematicsInspectorView = self.commentInSchematicsInspectorView ()
    let componentSymbolInspectorView = self.componentSymbolInspectorView ()
    do{
      let vStackView_view = AutoLayoutObjectInspectorView ()
        .addObjectInspector (forEntity: WireInSchematic.self, inspectorView: schematicsWireInspectorView)
        .addObjectInspector (forEntity: NCInSchematic.self, inspectorView: ncInSchematicsInspectorView)
        .addObjectInspector (forEntity: LabelInSchematic.self, inspectorView: schematicsLabelInspectorView)
        .addObjectInspector (forEntity: CommentInSchematic.self, inspectorView: commentInSchematicsInspectorView)
        .addObjectInspector (forEntity: ComponentSymbolInProject.self, inspectorView: componentSymbolInspectorView)
        .bind_graphic_controller (self.schematicObjectsController)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsWireInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsWireInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Wire Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .expandableWidth ()
          .set (alignment: .left)
          .bind_title (self.wireInSchematicSelectionController.netName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Rename Net…", size: .small)
        .expandableWidth ()
        .set (commandKeyEquivalent: "r")
        .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSchematicWireNetAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Rename Net with Automatic Name", size: .small)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameWireNetWithNewAutomaticNameAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Class", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutPopUpButton (size: .small)
          .expandableWidth ()
        self.configure_selectedWireNetPopUpButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutButton (title: "Merge Subnet into Existing Net…", size: .small)
        .expandableWidth ()
        .set (commandKeyEquivalent: "m")
        .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.mergeSubnetIntoAnExistingNetForSelectedWireAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Insulate Subnet from Current Net", size: .small)
        .expandableWidth ()
        .bind_enabled (.boolcmp (.intcmp (.prop (self.wireInSchematicSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .prop (self.wireInSchematicSelectionController.hasNet_property)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.insulateSubnetFromCurrentNetForSelectedWireAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ncInSchematicsInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ncInSchematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "NC Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.directionTitles (), equalWidth: true, size: .small)
        .bind_selectedSegment (self.ncInSchematicSelectionController.mOrientation_property)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW schematicsLabelInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func schematicsLabelInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Label Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.directionTitles (), equalWidth: true, size: .small)
        .bind_selectedSegment (self.schematicLabelSelectionController.mOrientation_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net", bold: false, size: .small, alignment: .center)
          .notExpandableWidth ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .expandableWidth ()
          .set (alignment: .left)
          .bind_title (self.schematicLabelSelectionController.netName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Rename Net…", size: .small)
        .expandableWidth ()
        .set (commandKeyEquivalent: "r")
        .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameSchematicLabelNetAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Rename Net with Automatic Name", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameLabelNetWithNewAutomaticNameAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Class", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutPopUpButton (size: .small)
          .expandableWidth ()
        self.configure_selectedLabelNetPopUpButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutButton (title: "Merge Subnet into Existing Net…", size: .small)
        .expandableWidth ()
        .set (commandKeyEquivalent: "m")
        .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.mergeSubnetIntoAnExistingNetForSelectedLabelAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Insulate Subnet from Current Net", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.prop (self.schematicLabelSelectionController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.insulateSubnetFromCurrentNetForSelectedLabelAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW commentInSchematicsInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func commentInSchematicsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Comment Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 210, size: .small)
        .automaticallyAdjustHeight (maxWidth: 210)
        .bind_value (self.commentInSchematicSelectionController.mComment_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Bold", size: .small)
        .bind_value (self.commentInSchematicSelectionController.mBold_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Color", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutColorWell ()
          .bind_color (self.commentInSchematicSelectionController.mColor_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
          .bind_angle (self.commentInSchematicSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
          .bind_angle (self.commentInSchematicSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Size", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutDoubleField (width: 64, size: .small)
          .bind_value (self.commentInSchematicSelectionController.mSize_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutLinearSlider (min: 4, max: 20, ticks: 17)
        .setAllowsTickMarkValuesOnly ()
        .bind_doubleValue (self.commentInSchematicSelectionController.mSize_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Alignment", bold: true, size: .small, alignment: .left)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutEnumSegmentedControl (titles: HorizontalAlignment.popupTitles (), equalWidth: true, size: .small)
        .bind_selectedSegment (self.commentInSchematicSelectionController.mHorizontalAlignment_property)
      self.configure_labelHAlignmentSegmendControlConfigurator (vStackView_view) // Configurator
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutEnumSegmentedControl (titles: VerticalAlignment.popupTitles (), equalWidth: true, size: .small)
        .bind_selectedSegment (self.commentInSchematicSelectionController.mVerticalAlignment_property)
      self.configure_labelVAlignmentSegmendControlConfigurator (vStackView_view) // Configurator
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW componentSymbolInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func componentSymbolInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Orientation", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumSegmentedControl (titles: QuadrantRotation.degreesTitles (), equalWidth: false, size: .small)
          .bind_selectedSegment (self.componentSymbolSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Mirror", size: .small)
          .bind_value (self.componentSymbolSelectionController.mMirror_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Component Name", bold: false, size: .small, alignment: .center)
          .notExpandableWidth ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .expandableWidth ()
          .set (alignment: .left)
          .bind_title (self.componentSymbolSelectionController.componentName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Rename Component…", size: .small)
        .expandableWidth ()
        .bind_enabled (.intcmp (.prop (self.schematicObjectsController.selectedArray_property.count_property), .eq, .literalInt (1)))
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.renameComponentFromSelectedSymbolAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Component Value", bold: false, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Show Component Value", size: .small)
        .bind_value (self.componentSymbolSelectionController.mDisplayComponentValue_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 100, size: .small)
        .expandableWidth ()
        .bind_value (self.componentSymbolSelectionController.componentValueProxy_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Instance Name", bold: false, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentSymbolSelectionController.mSymbolInstanceName_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Symbol Type Name", bold: false, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentSymbolSelectionController.mSymbolTypeName_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Device Name", bold: false, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .expandableWidth ()
        .set (alignment: .center)
        .bind_title (self.componentSymbolSelectionController.deviceName_property)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW boardOutlinePage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func boardOutlinePage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView (verticalScroller: true)
        .set (margins: .regular)
        .set (width: 250)
      let boardShapeBaseView = self.BoardShapeBaseView ()
      let boardRectangularOutlineView = self.BoardRectangularOutlineView ()
      let boardBezierPathOutlineView = self.BoardBezierPathOutlineView ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Board Shape", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutSegmentedControlWithPages (documentView: boardShapeBaseView, equalWidth: false, size: .small)
          .addPage (title: "Rectangular", tooltip: "", pageView: boardRectangularOutlineView)
          .addPage (title: "Bezier Pathes", tooltip: "", pageView: boardBezierPathOutlineView)
          .bind_selectedSegment (self.rootObject.mBoardShape_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendView (boardShapeBaseView)
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Outlines", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Board Limit Width", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.mBoardLimitsWidth_property, self.rootObject.mBoardLimitsWidthUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.mBoardClearance_property, self.rootObject.mBoardClearanceUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Interior Bounding Box", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutCanariBoardRectangleView ()
          .bind_top (self.rootObject.boardInteriorTop_property)
          .bind_bottom (self.rootObject.boardInteriorBottom_property)
          .bind_left (self.rootObject.boardInteriorLeft_property)
          .bind_right (self.rootObject.boardInteriorRight_property)
          .bind_unit (self.rootObject.mBoardPointsBoundingBoxUnit_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Board Bounding Box", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutCanariBoardRectangleView ()
          .bind_top (self.rootObject.boardLimitBorderTop_property)
          .bind_bottom (self.rootObject.boardLimitBorderBottom_property)
          .bind_left (self.rootObject.boardLimitBorderLeft_property)
          .bind_right (self.rootObject.boardLimitBorderRight_property)
          .bind_unit (self.rootObject.mBoardLimitsBoundingBoxUnit_property)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Grid and Flip Inspector", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.mBoardLimitsGridStep_property, self.rootObject.mBoardLimitsGridStepUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Display Grid", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
            .expandableWidth ()
            .bind_selectedIndex (self.rootObject.mBoardLimitsGridStyle_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutTaggedPopUpButton (size: .small)
            .expandableWidth ()
            .add (title: "1 Step", withTag: 1)
            .add (title: "2 Steps", withTag: 2)
            .add (title: "4 Steps", withTag: 4)
            .add (title: "5 Steps", withTag: 5)
            .add (title: "8 Steps", withTag: 8)
            .add (title: "10 Steps", withTag: 10)
            .bind_selectedTag (self.rootObject.mBoardLimitsGridDisplayFactor_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
            .expandableWidth ()
            .bind_value (self.rootObject.mBoardLimitsHorizontalFlip_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view_view.appendGutter ()
        do{
          let hStackView_view_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
            .expandableWidth ()
            .bind_value (self.rootObject.mBoardLimitsVerticalFlip_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendSeparator ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Board Contents Opacity", bold: true, size: .small, alignment: .center)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutLinearSlider (min: 0, max: 1, ticks: 11)
          .bind_doubleValue (self.rootObject.mContentOpacityInBoardOutline_property, sendContinously:true)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutStaticLabels (left: "Transparent", right: "Opaque", bold: false, size: .mini)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
        .bind_underObjectsDisplay (self.rootObject.borderViewBackground_property)
        .bind_horizontalFlip (self.rootObject.mBoardLimitsHorizontalFlip_property)
        .bind_verticalFlip (self.rootObject.mBoardLimitsVerticalFlip_property)
        .bind_gridStyle (self.rootObject.mBoardLimitsGridStyle_property)
        .bind_gridDisplayFactor (self.rootObject.mBoardLimitsGridDisplayFactor_property)
        .bind_gridLineColor (preferences_lineColorGridForBoard_property)
        .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
        .bind_workingAreaColor (preferences_workingAreaColorForBoard_property)
        .bind_workingAreaRectString (self.rootObject.mWorkingAreaRectString_property)
        .bind_zoom (self.rootObject.mBoardLimitsZoom_property)
        .bind_backColor (preferences_boardBackgroundColorForBoard_property)
        .bind_mouseGrid (self.rootObject.mBoardLimitsGridStep_property)
        .bind_gridStep (self.rootObject.mBoardLimitsGridStep_property)
        .bind_arrowKeyMagnitude (self.rootObject.mBoardLimitsGridStep_property)
        .bind_shiftArrowKeyMagnitude (self.rootObject.boardLimitsGridStepMultipliedByDisplayFactor_property)
        .bind_xPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
        .bind_yPlacardUnit (self.rootObject.mBoardLimitsGridStepUnit_property)
        .bind_graphic_controller (self.boardCurveObjectsController)
      self.configure_boardOutlineView (hStackView_view) // Configurator
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardShapeBaseView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardShapeBaseView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardRectangularOutlineView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardRectangularOutlineView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Board Width", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.rootObject.mRectangularBoardWidth_property, self.rootObject.mRectangularBoardWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Board Height", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.rootObject.mRectangularBoardHeight_property, self.rootObject.mRectangularBoardHeightUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardBezierPathOutlineView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardBezierPathOutlineView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutLabel (bold: true, size: .small)
        .bind_title (self.rootObject.borderElementCountString_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "For editing Board limits, click on a line, use contextual click on a line.", bold: false, size: .small, alignment: .center)
        .expandableHeight ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Selected Board Limit Element", bold: true, size: .small, alignment: .center)
        .bind_hidden (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Shape", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BorderCurveShape.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardCurveSelectionController.mShape_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "End Points", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariUnitPopUpButton (size: .small)
          .bind_unit (self.rootObject.mBoardSelectedCurveDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)), .or, .not (.prop (self.boardCurveSelectionController.isLine_property))))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mX_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mY_property, self.rootObject.mBoardSelectedCurveDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)), .or, .prop (self.boardCurveSelectionController.isLine_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutDoubleObserverField (width: 72, bold: true, size: .small)
          .bind_observedValue (self.boardCurveSelectionController.p2Xvalue_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutDoubleObserverField (width: 72, bold: true, size: .small)
          .bind_observedValue (self.boardCurveSelectionController.p2Yvalue_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)), .or, .prop (self.boardCurveSelectionController.isLine_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Control Points", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariUnitPopUpButton (size: .small)
          .bind_unit (self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)), .or, .prop (self.boardCurveSelectionController.isLine_property)))
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY1_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.boolcmp (.intcmp (.prop (self.boardCurveObjectsController.selectedArray_property.count_property), .eq, .literalInt (0)), .or, .prop (self.boardCurveSelectionController.isLine_property)))
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPX2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionField (size: .small)
          .bind_dimensionAndUnit (self.boardCurveSelectionController.mCPY2_property, self.rootObject.mBoardLimitControlPointsDisplayUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW boardContentsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func boardContentsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let boardInspectorView = self.BoardInspectorView ()
    let selectedElementInspectorView = self.selectedElementInspectorView ()
    let insertComponentInBoardView = self.insertComponentInBoardView ()
    let boardDisplayInspectorView = self.boardDisplayInspectorView ()
    let boardRouterInspectorView = self.boardRouterInspectorView ()
    let boardERCInspectorView = self.boardERCInspectorView ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (width: 250)
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
          .set (margins: .regular)
          .set (spacing: .small)
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Image; the layer is set by the contextual menu.")
          self.configure_addBoardImageButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add QR Code; the layer is set by the contextual menu.")
          self.configure_addQRCodeButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.")
          self.configure_addRestrictRectangleButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Line;  the layer is set by the contextual menu.")
          self.configure_addLineButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Text; the layer is set by the contextual menu.")
          self.configure_addTextButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        do{
          let hStackView_view_view_view = AutoLayoutDragSourceButtonWithMenus (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.")
          self.configure_addTrackButton (hStackView_view_view_view) // Configurator
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
            .set (leftMargin: .regular)
            .set (rightMargin: .regular)
          do{
            let hStackView_view_view_view_view = AutoLayoutSegmentedControlWithPages (documentView: boardInspectorView, equalWidth: false, size: .small)
              .expandableWidth ()
              .addPage (title: "🛠", tooltip: "Selected Element Inspector", pageView: selectedElementInspectorView)
              .addPage (title: "", tooltip: "Insert Component in Board", pageView: insertComponentInBoardView)
              .addPage (title: "🔍", tooltip: "Display Inspector", pageView: boardDisplayInspectorView)
              .addPage (image: "autorouter", title: "", tooltip: "Router Inspector", pageView: boardRouterInspectorView)
              .addPage (title: "ERC", tooltip: "Electric Rule Check Inspector", pageView: boardERCInspectorView)
              .bind_selectedPage (self.rootObject.mBoardSelectedInspector_property)
              .bind_segmentTitle (self.unplacedPackagesCountString_property, segmentIndex:1)
              .bind_segmentImage (self.unplacedPackagesSegmentImage_property, segmentIndex:1)
              .bind_segmentImage (self.rootObject.ercStatusImageOrNoneOnSuccess_property, segmentIndex:4)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendView (boardInspectorView)
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendSeparator ()
    do{
      let hStackView_view = AutoLayoutGraphicView (minZoom: 10, maxZoom: 20000)
        .prepend (toTopHStack: { () -> NSView in let toTopHStack = AutoLayoutCanariBoardOperationPullDownButton (size: .small)
self.configure_boardOperationPullDownButtonConfigurator (toTopHStack) // Configurator
 ; return toTopHStack } ())
        .bind_underObjectsDisplay (self.rootObject.borderOutlineBackground_property)
        .bind_overObjectsDisplay (self.boardOutlineOverDisplay_property)
        .bind_horizontalFlip (self.rootObject.mBoardHorizontalFlip_property)
        .bind_verticalFlip (self.rootObject.mBoardVerticalFlip_property)
        .bind_gridStyle (self.rootObject.mBoardGridStyle_property)
        .bind_gridDisplayFactor (self.rootObject.mBoardGridDisplayFactor_property)
        .bind_gridLineColor (preferences_lineColorGridForBoard_property)
        .bind_gridCrossColor (preferences_crossColorGridForBoard_property)
        .bind_workingAreaColor (preferences_workingAreaColorForBoard_property)
        .bind_workingAreaRectString (self.rootObject.mWorkingAreaRectString_property)
        .bind_zoom (self.rootObject.mBoardZoom_property)
        .bind_backColor (preferences_boardBackgroundColorForBoard_property)
        .bind_mouseGrid (self.rootObject.mBoardGridStep_property)
        .bind_gridStep (self.rootObject.mBoardGridStep_property)
        .bind_arrowKeyMagnitude (self.rootObject.mBoardGridStep_property)
        .bind_shiftArrowKeyMagnitude (self.rootObject.boardGridStepMultipliedByDisplayFactor_property)
        .bind_xPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
        .bind_yPlacardUnit (self.rootObject.mBoardGridStepUnit_property)
        .bind_graphic_controller (self.boardObjectsController)
      self.mBoardView = hStackView_view // Outlet
      self.configure_boardView (hStackView_view) // Configurator
      _ = hStackView .appendView (hStackView_view)
    }
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW insertComponentInBoardView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func insertComponentInBoardView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewInsertComponentInBoardInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .bind_title (self.unplacedPackagesMessageString_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewInsertComponentInBoardInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariDragSourceTableView ()
        .bind_models (self.rootObject.unplacedPackages_property)
      self.mUnplacedPackageTableViewArray.append (vStackView_view) // Outlet Array
      self.configure_packageDragSourceTableViewConfigurator (vStackView_view) // Configurator
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW boardDisplayInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func boardDisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
      .set (rightMargin: .zero)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewBoardDisplayInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Board Display", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewBoardDisplayInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView (verticalScroller: true)
        .set (rightMargin: .small)
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Grid and Flip", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.mBoardGridStep_property, self.rootObject.mBoardGridStepUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Display", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
            .bind_selectedIndex (self.rootObject.mBoardGridStyle_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Every", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutTaggedPopUpButton (size: .small)
            .add (title: "1 Step", withTag: 1)
            .add (title: "2 Steps", withTag: 2)
            .add (title: "4 Steps", withTag: 4)
            .add (title: "5 Steps", withTag: 5)
            .add (title: "8 Steps", withTag: 8)
            .add (title: "10 Steps", withTag: 10)
            .bind_selectedTag (self.rootObject.mBoardGridDisplayFactor_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
            .set (width: 125)
            .bind_value (self.rootObject.mBoardHorizontalFlip_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
            .bind_value (self.rootObject.mBoardVerticalFlip_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .expandableWidth ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_crossColorGridForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Line Grid", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .expandableWidth ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_lineColorGridForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Rastnet", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: RastnetDisplay.popupTitles (), size: .small)
          .bind_selectedIndex (self.rootObject.mRastnetDisplay_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariSelectionPopUpButton (size: .small)
          .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedNetName_property, self.rootObject.netNamesArray_property)
          .bind_hidden (.not (.prop (self.rastnetDisplayOneNet_property)))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariSelectionPopUpButton (size: .small)
          .bind_selectedNameInArray (self.rootObject.mRastnetDisplayedComponentName_property, self.rootObject.placedComponentNameArray_property)
          .bind_hidden (.not (.prop (self.rastnetDisplayComponentNet_property)))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Warning and Error Circle", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutLinearSlider (min: 0, max: 24, ticks: 13)
          .bind_doubleValue (self.rootObject.mErrorOrWarningIssueSize_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Contextual Click Diameter", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutLinearSlider (min: 10, max: 200, ticks: 10)
          .bind_doubleValue (self.rootObject.mControlKeyHiliteDiameter_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Pad Number", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutFontButton (width: 125, size: .small)
          .bind_fontValue (preferences_padNumberFontForBoard_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Package Width", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutTaggedPopUpButton (size: .small)
          .add (title: "0.5 Point", withTag: 5)
          .add (title: "1.0 Point", withTag: 10)
          .add (title: "1.5 Point", withTag: 15)
          .add (title: "2.0 Point", withTag: 20)
          .add (title: "2.5 Point", withTag: 25)
          .bind_selectedTag (self.rootObject.packageDrawingWidthMultpliedByTenForBoard_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandFrontSideBoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Front side Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandFrontSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_frontSidePadColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Pads", size: .small)
            .bind_value (self.rootObject.displayFrontPadsForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandFrontSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_frontSideLegendColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Component + Legend", size: .small)
            .bind_value (self.rootObject.displayFrontLegendForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandFrontSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_frontSideLayoutColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayFrontLayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandFrontSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_frontSideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayFrontRestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandBackSideBoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Back Side Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandBackSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_backSidePadColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Pads", size: .small)
            .bind_value (self.rootObject.displayBackPadsForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandBackSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_backSideLegendColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Component + Legend", size: .small)
            .bind_value (self.rootObject.displayBackLegendForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandBackSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_backSideLayoutColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayBackLayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandBackSideBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_backSideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayBackRestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandInner1BoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 1 Layer Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner1BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner1LayoutColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayInner1LayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner1BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner1SideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayInner1RestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandInner2BoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 2 Layer Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner2BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner2LayoutColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayInner2LayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner2BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner2SideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayInner2RestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandInner3BoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 3 Layer Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner3BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner3LayoutColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayInner3LayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner3BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner3SideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayInner3RestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandInner4BoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 4 Layer Display", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner4BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Layout", size: .small)
            .bind_value (self.rootObject.displayInner4LayoutForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandInner4BoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_inner4SideRestrictRectangleColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Restrict Rectangle", size: .small)
            .bind_value (self.rootObject.displayInner4RestrictRectangles_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutDisclosureTriangle (size: .small)
            .bind_expanded (self.rootObject.mExpandOtherBoardSettings_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Other", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_padNumberColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Pad Numbers", size: .small)
            .bind_value (self.rootObject.displayPadNumbersForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_boardLimitsColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Board Limits", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_boardClearanceColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Board Clearance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_rastnetColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Rastnet", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_workingAreaColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Working Area", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_boardBackgroundColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_errorBackgroundColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Error Background", size: .small)
            .bind_value (self.rootObject.drawErrorBackgroundForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
          .bind_hidden (.not (.prop (self.rootObject.mExpandOtherBoardSettings_property)))
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutColorWell ()
            .set (toolTip: "Stored in Preferences")
            .bind_color (preferences_warningBackgroundColorForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Warning Background", size: .small)
            .bind_value (preferences_drawWarningBackgroundForBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW boardRouterInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func boardRouterInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "◀︎+", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.prependNewBoardSettingsInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Autorouter Settings", bold: true, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutButton (title: "+▶︎", size: .regular)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.appendNewBoardSettingsInspectorAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView (verticalScroller: true)
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Layers", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: LayerConfiguration.popupTitles (), size: .small)
            .bind_selectedIndex (self.rootObject.mLayerConfiguration_property)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutProjectDocument.changeLayerConfigurationAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Clearance", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.rootObject.mLayoutClearance_property, self.rootObject.mLayoutClearanceUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: AutorouterPreferredDirections.popupTitles (), size: .small)
          .bind_selectedIndex (self.rootObject.mAutoRouterPreferredDirections_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: AutorouterSnapAngle.popupTitles (), size: .small)
          .bind_selectedIndex (self.rootObject.mAutorouterSnapAngle_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Route", bold: false, size: .small, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: RouteDirection.popupTitles (), size: .small)
            .bind_selectedIndex (self.rootObject.mRouteDirection_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: RouteOrigin.popupTitles (), size: .small)
            .bind_selectedIndex (self.rootObject.mRouteOrigin_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Allow Via at SMD", size: .small)
          .expandableWidth ()
          .bind_value (self.rootObject.mAllowViaAtSMD_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutTabView (size: .small)
          .addTab (title: "Basic", tooltip: "Autorouter Basic Configuration", contentView: { () -> NSView in let contentView = AutoLayoutVerticalStackView ()
  .set (margins: .large)
do{
  let contentView_view = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
    .expandableWidth ()
    .bind_value (self.rootObject.mExportExistingTracksAndVias_property)
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 150, height: 48)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithRouterDocument (_:))
      )
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutButton (title: "Import SES File", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.importSESFromBasicTabAction (_:))
      )
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
 ; return contentView } ())
          .addTab (title: "Advanced", tooltip: "Autorouter Advanced Configuration", contentView: { () -> NSView in let contentView = AutoLayoutVerticalStackView ()
  .set (margins: .large)
do{
  let contentView_view = AutoLayoutCheckbox (title: "Export Tracks and Vias", size: .small)
    .expandableWidth ()
    .bind_value (self.rootObject.mExportExistingTracksAndVias_property)
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutButton (title: "Export DSN File…", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.exportDSNFileAction (_:))
      )
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 150, height: 48)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.launchFreeRouterWithoutAnyDocument (_:))
      )
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
do{
  let contentView_view = AutoLayoutHorizontalStackView ()
  _ = contentView_view.appendFlexibleSpace ()
  do{
    let contentView_view_view = AutoLayoutButton (title: "Import SES File…", size: .small)
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutProjectDocument.importSESFromExtendedTabAction (_:))
      )
    _ = contentView_view .appendView (contentView_view_view)
  }
  _ = contentView_view.appendFlexibleSpace ()
  _ = contentView .appendView (contentView_view)
}
 ; return contentView } ())
          .bind_selectedPage (self.rootObject.mAutorouterInterfaceMode_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Tracks", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Top Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.topSideTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 1 Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.inner1LayerTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 2 Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.inner2LayerTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 3 Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.inner3LayerTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Inner 4 Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.inner4LayerTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Back Layer Tracks", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.backSideTrackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Total", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.trackCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Trace Length", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.trackLengthString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCanariUnitPopUpButton (size: .small)
            .bind_unit (self.rootObject.mTrackLengthUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Via Count", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.viaCountString_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutButton (title: "Design Rule Check", size: .small)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW boardERCInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func boardERCInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "ERC Checking", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Check Clearance\nbetween Pads of the same Net", size: .small)
        .set (width: 200)
        .bind_value (self.rootObject.mCheckClearanceBetweenPadsOfSameNet_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutButton (title: "Design Rule Check", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutProjectDocument.performERCCheckingAction (_:))
        )
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
      do{
        let vStackView_view_view = AutoLayoutTextObserverView (size: .small)
          .set (minHeight: 100)
        self.mERCLogTextViewArray.append (vStackView_view_view) // Outlet Array
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendDivider ()
      do{
        let vStackView_view_view = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
        self.mERCIssueTableViewArray.append (vStackView_view_view) // Outlet Array
        self.configure_ercIssueTableViewConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW selectedElementInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func selectedElementInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let boardTrackInspectorView = self.BoardTrackInspectorView ()
    let boardConnectorInspectorView = self.BoardConnectorInspectorView ()
    let boardLineInspectorView = self.BoardLineInspectorView ()
    let restrictRectangleInspectorView = self.RestrictRectangleInspectorView ()
    let boardTextInspectorView = self.BoardTextInspectorView ()
    let boardQRCodeInspectorView = self.BoardQRCodeInspectorView ()
    let boardImageInspectorView = self.BoardImageInspectorView ()
    let componentInBoardInspectorView = self.ComponentInBoardInspectorView ()
    do{
      let vStackView_view = AutoLayoutObjectInspectorView ()
        .addObjectInspector (forEntity: BoardTrack.self, inspectorView: boardTrackInspectorView)
        .addObjectInspector (forEntity: BoardConnector.self, inspectorView: boardConnectorInspectorView)
        .addObjectInspector (forEntity: BoardLine.self, inspectorView: boardLineInspectorView)
        .addObjectInspector (forEntity: BoardRestrictRectangle.self, inspectorView: restrictRectangleInspectorView)
        .addObjectInspector (forEntity: BoardText.self, inspectorView: boardTextInspectorView)
        .addObjectInspector (forEntity: BoardQRCode.self, inspectorView: boardQRCodeInspectorView)
        .addObjectInspector (forEntity: BoardImage.self, inspectorView: boardImageInspectorView)
        .addObjectInspector (forEntity: ComponentInProject.self, inspectorView: componentInBoardInspectorView)
        .bind_graphic_controller (self.boardObjectsController)
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardTrackInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardTrackInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Board Track", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.boardTrackSelectionController.netName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.boardTrackSelectionController.netClassName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: TrackSide.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardTrackSelectionController.mSide_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Expose Copper (as Pad)", size: .small)
        .bind_value (self.boardTrackSelectionController.mAddedToSolderMask_property)
        .bind_enabled (.prop (self.boardTrackSelectionController.trackIsOnFrontOrBackLayer_property))
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Is Preserved by Auto Router", size: .small)
        .bind_value (self.boardTrackSelectionController.mIsPreservedByAutoRouter_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutCanariTrackLockView ()
        .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
        .bind_manualLockP1 (self.boardTrackSelectionController.mManualLockP1_property)
        .bind_manualLockP2 (self.boardTrackSelectionController.mManualLockP2_property)
        .bind_p1ConnectedToSomePad (self.boardTrackSelectionController.p1ConnectedToSomePad_property)
        .bind_p2ConnectedToSomePad (self.boardTrackSelectionController.p2ConnectedToSomePad_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "On Knob Dragging", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: TrackLockDirection.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardTrackSelectionController.mDirectionLockOnKnobDragging_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Track Angle", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
          .bind_angle (self.boardTrackSelectionController.trackDirectionInDegrees_property)
          .bind_enabled (.prop (self.boardTrackSelectionController.trackCanRotate_property))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
        .bind_setter6 (self.boardTrackSelectionController.mP1XUnit_property, self.boardTrackSelectionController.mP1YUnit_property, self.boardTrackSelectionController.mP2XUnit_property, self.boardTrackSelectionController.mP2YUnit_property, self.boardTrackSelectionController.mDefaultTrackWidthUnit_property, self.boardTrackSelectionController.mCustomTrackWidthUnit_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Track Width", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
          .bind_value (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.netClassTrackWidth_property, self.boardTrackSelectionController.mDefaultTrackWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.boardTrackSelectionController.mUsesCustomTrackWidth_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Custom Width", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.mCustomTrackWidth_property, self.boardTrackSelectionController.mCustomTrackWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "End Style", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: TrackEndStyle.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardTrackSelectionController.mEndStyle_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabels (left: "P1", right: "X", bold: false, size: .small)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1X_property, self.boardTrackSelectionController.mP1XUnit_property)
          .bind_enabled (.prop (self.boardTrackSelectionController.p1CanMove_property))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP1Y_property, self.boardTrackSelectionController.mP1YUnit_property)
          .bind_enabled (.prop (self.boardTrackSelectionController.p1CanMove_property))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabels (left: "P2", right: "X", bold: false, size: .small)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2X_property, self.boardTrackSelectionController.mP2XUnit_property)
          .bind_enabled (.prop (self.boardTrackSelectionController.p2CanMove_property))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTrackSelectionController.computedP2Y_property, self.boardTrackSelectionController.mP2YUnit_property)
          .bind_enabled (.prop (self.boardTrackSelectionController.p2CanMove_property))
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardConnectorInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardConnectorInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Via Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Name", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.boardConnectorSelectionController.netNameFromTracks_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Net Class Name", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.boardConnectorSelectionController.netClassName_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Hole Diameter", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
          .bind_value (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultHoleDiameter_property, self.boardConnectorSelectionController.mDefaultHoleDiameterUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomHoleDiameter_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomHoleDiameter_property, self.boardConnectorSelectionController.mCustomHoleDiameterUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Pad Diameter", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Use Custom", size: .small)
          .bind_value (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "From Net Class", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardConnectorSelectionController.viaDefaultPadDiameter_property, self.boardConnectorSelectionController.mDefaultPadDiameterUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.boardConnectorSelectionController.mUsesCustomPadDiameter_property)))
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Custom", bold: false, size: .small, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardConnectorSelectionController.mCustomPadDiameter_property, self.boardConnectorSelectionController.mCustomPadDiameterUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardLineInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardLineInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Line Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardLineSelectionController.mWidth_property, self.boardLineSelectionController.mWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BoardLineLayer.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardLineSelectionController.mLayer_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabels (left: "P1", right: "X", bold: false, size: .small)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardLineSelectionController.mX1_property, self.boardLineSelectionController.mX1Unit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardLineSelectionController.mY1_property, self.boardLineSelectionController.mY1Unit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabels (left: "P2", right: "X", bold: false, size: .small)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardLineSelectionController.mX2_property, self.boardLineSelectionController.mX2Unit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardLineSelectionController.mY2_property, self.boardLineSelectionController.mY2Unit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW RestrictRectangleInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func RestrictRectangleInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Restrict Rectangle Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariRestrictRectangleView ()
        .bind_frontBackInner1Inner2Inner3Inner4 (self.restrictRectSelController.mIsInFrontLayer_property, self.restrictRectSelController.mIsInBackLayer_property, self.restrictRectSelController.mIsInInner1Layer_property, self.restrictRectSelController.mIsInInner2Layer_property, self.restrictRectSelController.mIsInInner3Layer_property, self.restrictRectSelController.mIsInInner4Layer_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
        .bind_setter4 (self.restrictRectSelController.mXUnit_property, self.restrictRectSelController.mYUnit_property, self.restrictRectSelController.mWidthUnit_property, self.restrictRectSelController.mHeightUnit_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Left", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.restrictRectSelController.mX_property, self.restrictRectSelController.mXUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Bottom", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.restrictRectSelController.mY_property, self.restrictRectSelController.mYUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Width", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.restrictRectSelController.mWidth_property, self.restrictRectSelController.mWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Height", bold: false, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.restrictRectSelController.mHeight_property, self.restrictRectSelController.mHeightUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardImageInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardImageInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Image Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Display", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BoardImageDisplay.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardImageSelectionController.mImageDisplay_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutDroppableImageView (removeButton: false)
        .set (maxWidth: 220)
        .set (maxHeight: 350)
        .bind_imageData (self.boardImageSelectionController.computedDataImage_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Image Data", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .bind_title (self.boardImageSelectionController.imageDataByteCount_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Image Width", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .bind_title (self.boardImageSelectionController.boardOriginalImageWidth_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Image Height", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .bind_title (self.boardImageSelectionController.boardOriginalImageHeight_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Scale", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutDoubleField (width: 64, size: .small)
          .bind_value (self.boardImageSelectionController.mScale_property, sendContinously:false)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Scaled Image Width", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .bind_title (self.boardImageSelectionController.boardScaledImageWidth_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Scaled Image Height", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .small)
          .set (alignment: .left)
          .bind_title (self.boardImageSelectionController.boardScaledImageHeight_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Threshold", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLinearSlider (min: 0, max: 255, ticks: 9)
          .bind_intValue (self.boardImageSelectionController.mThreshold_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Invert", size: .small)
          .bind_value (self.boardImageSelectionController.mInvert_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
          .bind_value (self.boardImageSelectionController.mHorizontalFlip_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Vertical", size: .small)
          .bind_value (self.boardImageSelectionController.mVerticalFlip_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Pixel Size", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardImageSelectionController.mPixelSize_property, self.boardImageSelectionController.mPixelSizeUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Actual Image Width", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardImageSelectionController.boardActualImageWidth_property, self.boardImageSelectionController.mActualWidthUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Actual Image Height", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardImageSelectionController.boardActualImageHeight_property, self.boardImageSelectionController.mActualHeightUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Layer", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BoardQRCodeLayer.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardImageSelectionController.mLayer_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
          .bind_angle (self.boardImageSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Center X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardImageSelectionController.mCenterX_property, self.boardImageSelectionController.mXUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Center Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardImageSelectionController.mCenterY_property, self.boardImageSelectionController.mYUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardQRCodeInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardQRCodeInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "QRCode Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Contents", bold: false, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 150, size: .small)
        .automaticallyAdjustHeight (maxWidth: 150)
        .bind_value (self.boardQRCodeSelectionController.mText_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Correction Level", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: QRCodeCorrectionLevel.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardQRCodeSelectionController.mCorrectionLevel_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Draw Frame", size: .small)
          .bind_value (self.boardQRCodeSelectionController.mDrawFrame_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Module Count", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutIntObserverField (bold: true, size: .small)
          .bind_observedValue (self.boardQRCodeSelectionController.moduleCount_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Module Size", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardQRCodeSelectionController.mModuleSize_property, self.boardQRCodeSelectionController.mModuleSizeUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Actual Image Size", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardQRCodeSelectionController.actualImageSize_property, self.boardQRCodeSelectionController.mActualSizeUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Layer", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BoardQRCodeLayer.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardQRCodeSelectionController.mLayer_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
          .bind_angle (self.boardQRCodeSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Center X", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardQRCodeSelectionController.mCenterX_property, self.boardQRCodeSelectionController.mXUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Center Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardQRCodeSelectionController.mCenterY_property, self.boardQRCodeSelectionController.mYUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW BoardTextInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func BoardTextInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Text Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutTextField (minWidth: 150, size: .small)
        .automaticallyAdjustHeight (maxWidth: 150)
        .bind_value (self.boardTextSelectionController.mText_property, sendContinously:true)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabels (left: "Origin", right: "X", bold: false, size: .small)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTextSelectionController.mX_property, self.boardTextSelectionController.mXUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
          .bind_dimensionAndUnit (self.boardTextSelectionController.mY_property, self.boardTextSelectionController.mYUnit_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariBoardFontPopUpButton ()
          .bind_currentFontName (self.boardTextSelectionController.fontName_property)
          .bind_fontNames (self.rootObject.fontNameArray_property)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutProjectDocument.setBoardTextFontAction (_:))
          )
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutDoubleField (width: 64, size: .small)
          .bind_value (self.boardTextSelectionController.mFontSize_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Weight", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutDoubleField (width: 64, size: .small)
          .bind_value (self.boardTextSelectionController.mWeight_property, sendContinously:true)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCheckbox (title: "Oblique", size: .small)
          .bind_value (self.boardTextSelectionController.mOblique_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Horizontal", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
          .bind_alignment (self.boardTextSelectionController.mHorizontalAlignment_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Vertical", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariVerticalAlignmentSegmentedControl (size: .small)
          .bind_alignment (self.boardTextSelectionController.mVerticalAlignment_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
          .bind_angle (self.boardTextSelectionController.mRotation_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Side", bold: false, size: .small, alignment: .right)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutEnumPopUpButton (titles: BoardTextLayer.popupTitles (), size: .small)
          .bind_selectedIndex (self.boardTextSelectionController.mLayer_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Show Rotation Knob", size: .small)
        .set (toolTip: "Common to all texts, stored in Preferences")
        .bind_value (preferences_mShowTextRotationKnobInBoard_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ComponentInBoardInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ComponentInBoardInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutStaticLabel (title: "Component Inspector", bold: true, size: .small, alignment: .center)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Display Name", size: .small)
            .expandableWidth ()
            .bind_value (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Display Value", size: .small)
            .expandableWidth ()
            .bind_value (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCheckbox (title: "Display Legend", size: .small)
            .expandableWidth ()
            .bind_value (self.componentInBoardSelectionController.mDisplayLegend_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Name, value and legend are actually displayed if \"Component + Legend\" check box is checked (see 🔍 inspector).", bold: false, size: .mini, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCheckbox (title: "Show Rotation Knob", size: .small)
        .expandableWidth ()
        .set (toolTip: "Common to all packages, stored in Preferences")
        .bind_value (preferences_mShowComponentRotationKnobInBoard_property)
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutCanariDimensionUnitSetterPullDownButton (size: .small)
        .bind_setter6 (self.componentInBoardSelectionController.mXUnit_property, self.componentInBoardSelectionController.mYUnit_property, self.componentInBoardSelectionController.mXNameUnit_property, self.componentInBoardSelectionController.mYNameUnit_property, self.componentInBoardSelectionController.mXValueUnit_property, self.componentInBoardSelectionController.mYValueUnit_property)
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendSeparator ()
    do{
      let vStackView_view = AutoLayoutVerticalStackView (verticalScroller: true)
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Package", bold: true, size: .small, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabels (left: "Center", right: "X", bold: false, size: .small)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mX_property, self.componentInBoardSelectionController.mXUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mY_property, self.componentInBoardSelectionController.mYUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutCanariBoardComponentPackagePopUpButton ()
        self.configure_componentPackagePopUpButtonConfigurator (vStackView_view_view) // Configurator
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
            .bind_angle (self.componentInBoardSelectionController.mRotation_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
            .bind_angle (self.componentInBoardSelectionController.mRotation_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Name", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .set (alignment: .left)
            .bind_title (self.componentInBoardSelectionController.componentName_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabels (left: "Center", right: "∆X", bold: false, size: .small)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mXName_property, self.componentInBoardSelectionController.mXNameUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "∆Y", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mYName_property, self.componentInBoardSelectionController.mYNameUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutDoubleField (width: 64, size: .small)
            .bind_value (self.componentInBoardSelectionController.mNameFontSize_property, sendContinously:false)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariBoardFontPopUpButton ()
            .bind_currentFontName (self.componentInBoardSelectionController.componentNameFontName_property)
            .bind_fontNames (self.rootObject.fontNameArray_property)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutProjectDocument.setComponentNameFontAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
            .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
            .bind_angle (self.componentInBoardSelectionController.mNameRotation_property)
            .bind_enabled (.prop (self.componentInBoardSelectionController.mNameIsVisibleInBoard_property))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Value", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutTextField (minWidth: 150, size: .small)
            .automaticallyAdjustHeight (maxWidth: 150)
            .bind_value (self.componentInBoardSelectionController.mComponentValue_property, sendContinously:true)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabels (left: "Center", right: "∆X", bold: false, size: .small)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mXValue_property, self.componentInBoardSelectionController.mXValueUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "∆Y", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariDimensionAndPopUp (size: .small)
            .bind_dimensionAndUnit (self.componentInBoardSelectionController.mYValue_property, self.componentInBoardSelectionController.mYValueUnit_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Size", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutDoubleField (width: 64, size: .small)
            .bind_value (self.componentInBoardSelectionController.mValueFontSize_property, sendContinously:false)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Font", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariBoardFontPopUpButton ()
            .bind_currentFontName (self.componentInBoardSelectionController.componentValueFontName_property)
            .bind_fontNames (self.rootObject.fontNameArray_property)
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutProjectDocument.setComponentValueFontAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Rotation", bold: false, size: .small, alignment: .right)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariPreferredDirectionSegmentedControl ()
            .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutCanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small)
            .bind_angle (self.componentInBoardSelectionController.mValueRotation_property)
            .bind_enabled (.prop (self.componentInBoardSelectionController.mValueIsVisibleInBoard_property))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Slave Pads", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutBoolPopUpButton (title0: "should be insulated", title1: "should be routed")
            .bind_value (self.componentInBoardSelectionController.mSlavePadsShouldBeRouted_property)
            .bind_enabled (.prop (self.componentInBoardSelectionController.hasSlavePads_property))
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendSeparator ()
      do{
        let vStackView_view_view = AutoLayoutHorizontalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "Side", bold: true, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendGutter ()
        do{
          let vStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: ComponentSide.popupTitles (), size: .small)
            .bind_selectedIndex (self.componentInBoardSelectionController.mSide_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW productPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func productPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .regular)
    let artworkDescriptionPage = self.ArtworkDescriptionPage ()
    let artworkMinimaPage = self.ArtworkMinimaPage ()
    let artworkDataPage = self.ArtworkDataPage ()
    let pdfSettingsPage = self.PDFSettingsPage ()
    let generationLogPage = self.GenerationLogPage ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Import Artwork…", size: .regular)
            .expandableWidth ()
            .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutProjectDocument.importArtworkAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutButton (title: "Detach Artwork", size: .regular)
            .expandableWidth ()
            .bind_hidden (.prop (self.rootObject.mArtwork_none))
            .bind_run (
              target: self,
              selector: #selector (AutoLayoutProjectDocument.detachArtworkAction (_:))
            )
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
            .expandableWidth ()
            .set (alignment: .center)
            .bind_title (self.rootObject.mArtworkName_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Merger Archive", size: .regular)
              .bind_value (self.rootObject.mGenerateMergerArchive_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "Gerber, PDF", size: .regular)
              .bind_value (self.rootObject.mGenerateGerberAndPDF_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutCheckbox (title: "BOM", size: .regular)
              .bind_value (self.rootObject.mGenerateBOM_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          do{
            let vStackView_view_view_view_view = AutoLayoutButton (title: "Generate Files", size: .regular)
              .expandableWidth ()
              .bind_enabled (.boolcmp (.not (.prop (self.rootObject.mArtwork_none)), .and, .not (.prop (self.documentIsUnnamed_property))))
              .bind_run (
                target: self,
                selector: #selector (AutoLayoutProjectDocument.generateProductFilesAction (_:))
              )
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        do{
          let vStackView_view_view_view = AutoLayoutLabel (bold: true, size: .regular)
            .set (alignment: .left)
            .expandableWidth ()
            .bind_title (self.documentFileShouldBeRenamedErrorMessage_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutTextObserverView (size: .small)
            .expandableWidth ()
            .setNoBackground ()
            .setNoVerticalScroller ()
            .setNoHorizontalScroller ()
            .bind_observedValue (self.incorrectDocumentFileDetailedErrorMessage_property)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
        .bind_hidden (.not (.prop (self.rootObject.mArtwork_none)))
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "No Artwork", bold: true, size: .regular, alignment: .center)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutVerticalStackView ()
        .bind_hidden (.prop (self.rootObject.mArtwork_none))
      do{
        let vStackView_view_view = AutoLayoutTabView (size: .regular)
          .addTab (title: "Gerber and PDF Settings", tooltip: "", contentView: pdfSettingsPage)
          .addTab (title: "Artwork Description", tooltip: "", contentView: artworkDescriptionPage)
          .addTab (title: "Artwork Minima", tooltip: "", contentView: artworkMinimaPage)
          .addTab (title: "Artwork Data", tooltip: "", contentView: artworkDataPage)
          .addTab (title: "Generation Log", tooltip: "", contentView: generationLogPage)
        self.mProductPageSegmentedControl = vStackView_view_view // Outlet
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView.appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ProductMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ProductMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkDescriptionPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkDescriptionPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Layer Description", bold: false, size: .regular, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutLabel (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_title (self.rootObject.layerConfigurationString_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Artwork Version", bold: false, size: .regular, alignment: .center)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutIntObserverField (bold: true, size: .regular)
          .set (alignment: .left)
          .expandableWidth ()
          .bind_observedValue (self.rootObject.mArtworkVersion_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      do{
        let vStackView_view_view = AutoLayoutStaticLabel (title: "Comment", bold: false, size: .regular, alignment: .left)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendGutter ()
      do{
        let vStackView_view_view = AutoLayoutTextObserverView (size: .small)
          .expandableWidth ()
          .bind_observedValue (self.rootObject.artworkComments_property)
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkDataPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkDataPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .zero)
    _ = hStackView.appendFlexibleSpace ()
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
        .set (spacing: .zero)
        .set (margins: .zero)
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
          .set (margins: .regular)
        do{
          let hStackView_view_view_view = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, size: .small, alignment: .center)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutLabel (bold: true, size: .small)
            .bind_title (self.rootObject.drillDataFileExtension_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutImageObserverView (size: .mini)
            .bind_image (self.emptyDrillFileExtensionImage_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutHorizontalStackView ()
          .set (leftMargin: .regular)
          .set (rightMargin: .regular)
          .set (topMargin: .zero)
        do{
          let hStackView_view_view_view = AutoLayoutVerticalStackView ()
            .set (topMargin: .regular)
          do{
            let hStackView_view_view_view_view = AutoLayoutLabel (bold: true, size: .small)
              .bind_title (self.generatedFileCountString_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutTableView (size: .small, addControlButtons: false)
            self.mDataController.bind_tableView (hStackView_view_view_view_view)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view.appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendSeparator ()
        do{
          let hStackView_view_view_view = AutoLayoutVerticalStackView ()
            .set (topMargin: .regular)
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let hStackView_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                .set (topMargin: .zero)
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutStaticLabel (title: "File Extension", bold: true, size: .small, alignment: .center)
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutLabel (bold: true, size: .small)
                  .bind_title (self.mDataSelection.fileExtension_property)
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            do{
              let hStackView_view_view_view_view_view = AutoLayoutImageObserverView (size: .mini)
                .bind_image (self.mDataSelection.emptyFileExtensionImage_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            do{
              let hStackView_view_view_view_view_view = AutoLayoutStaticLabel (title: "Empty Data File", bold: true, size: .small, alignment: .center)
                .setOrangeTextColor ()
                .bind_hidden (.not (.prop (self.mDataSelection.hasNoData_property)))
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, size: .small, alignment: .left)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let hStackView_view_view_view_view_view = AutoLayoutVerticalStackView ()
                .set (leftMargin: .large)
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Images", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawImagesTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side QRCodes", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawQRCodesTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Front Side Texts", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Front Side Texts", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Pads", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawPadsTopSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              _ = hStackView_view_view_view_view.appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Names", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Component Values", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Front Side Package Legends", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Inner Elements", bold: true, size: .small, alignment: .left)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let hStackView_view_view_view_view_view = AutoLayoutVerticalStackView ()
                .set (leftMargin: .large)
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTraversingPads_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                _ = hStackView_view_view_view_view_view_view.appendFlexibleSpace ()
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Traversing Pads", size: .small)
                    .set (enabled: false)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                _ = hStackView_view_view_view_view_view_view.appendFlexibleSpace ()
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.not (.prop (self.rootObject.hasInnerElements_property)))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksInner1Layer_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksInner2Layer_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.prop (self.rootObject.hasInnerElements_property))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 1 Layer Tracks", size: .small)
                    .set (enabled: false)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 2 Layer Tracks", size: .small)
                    .set (enabled: false)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.not (.prop (self.rootObject.hasSixLayers_property)))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksInner3Layer_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksInner4Layer_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                  .bind_hidden (.prop (self.rootObject.hasSixLayers_property))
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 3 Layer Tracks", size: .small)
                    .set (enabled: false)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Inner 4 Layer Tracks", size: .small)
                    .set (enabled: false)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              _ = hStackView_view_view_view_view.appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, size: .small, alignment: .left)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
            do{
              let hStackView_view_view_view_view_view = AutoLayoutVerticalStackView ()
                .set (leftMargin: .large)
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Images", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawImagesBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side QRCodes", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawQRCodesBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Legend Back Side Texts", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Layout Back Side Texts", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              do{
                let hStackView_view_view_view_view_view_view = AutoLayoutHorizontalStackView ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Tracks", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawTracksBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view_view.appendGutter ()
                do{
                  let hStackView_view_view_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Pads", size: .small)
                    .set (enabled: false)
                    .bind_value (self.mDataSelection.drawPadsBottomSide_property)
                  _ = hStackView_view_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view_view)
                }
                _ = hStackView_view_view_view_view_view .appendView (hStackView_view_view_view_view_view_view)
              }
              _ = hStackView_view_view_view_view.appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Names", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Component Values", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Back Side Package Legends", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Other Elements", bold: true, size: .small, alignment: .left)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Vias", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawVias_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Internal Board Limits", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Board Limits", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.drawBoardLimits_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Option", bold: true, size: .small, alignment: .left)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutHorizontalStackView ()
              .set (leftMargin: .large)
            do{
              let hStackView_view_view_view_view_view = AutoLayoutCheckbox (title: "Horizontal Mirror", size: .small)
                .set (enabled: false)
                .bind_value (self.mDataSelection.horizontalMirror_property)
              _ = hStackView_view_view_view_view .appendView (hStackView_view_view_view_view_view)
            }
            _ = hStackView_view_view_view_view.appendFlexibleSpace ()
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view.appendView (hStackView_view_view_view)
        }
        _ = hStackView_view_view.appendFlexibleSpace ()
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendFlexibleSpace ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW ArtworkMinimaPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func ArtworkMinimaPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
        _ = vStackView_view_view.appendFlexibleSpace ()
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, size: .small, alignment: .left)
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view_view.appendFlexibleSpace ()
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      do{
        let vStackView_view_view = AutoLayoutStaticImageView (name: "artwork")
        _ = vStackView_view .appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    do{
      let vStackView_view = AutoLayoutHorizontalStackView ()
      _ = vStackView_view.appendFlexibleSpace ()
      do{
        let vStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
          .set (rightMargin: .large)
          .set (topMargin: .regular)
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        do{
          let vStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let vStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, size: .regular, alignment: .center)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view_view.appendGutter ()
          do{
            let vStackView_view_view_view_view = AutoLayoutCanariObservedDimensionAndPopUp (size: .small)
              .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
            _ = vStackView_view_view_view .appendView (vStackView_view_view_view_view)
          }
          _ = vStackView_view_view .appendView (vStackView_view_view_view)
        }
        _ = vStackView_view.appendView (vStackView_view_view)
      }
      _ = vStackView_view.appendFlexibleSpace ()
      _ = vStackView .appendView (vStackView_view)
    }
    _ = vStackView.appendFlexibleSpace ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PDFSettingsPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PDFSettingsPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: .large)
    do{
      let hStackView_view = AutoLayoutVerticalStackView ()
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "Gerber Settings", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
        do{
          let hStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: GerberUnit.popupTitles (), size: .regular)
            .bind_selectedIndex (self.rootObject.mGerberProductUnit_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutStaticLabel (title: "PDF Settings", bold: true, size: .regular, alignment: .left)
        _ = hStackView_view .appendView (hStackView_view_view)
      }
      do{
        let hStackView_view_view = AutoLayoutVerticalStackView ()
          .set (leftMargin: .large)
        do{
          let hStackView_view_view_view = AutoLayoutHorizontalStackView ()
          do{
            let hStackView_view_view_view_view = AutoLayoutColorWell ()
              .bind_color (self.rootObject.mPDFBoardBackgroundColor_property)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          do{
            let hStackView_view_view_view_view = AutoLayoutStaticLabel (title: "Board Background Color", bold: false, size: .regular, alignment: .center)
            _ = hStackView_view_view_view .appendView (hStackView_view_view_view_view)
          }
          _ = hStackView_view_view_view.appendFlexibleSpace ()
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        do{
          let hStackView_view_view_view = AutoLayoutEnumPopUpButton (titles: PDFProductGrid.popupTitles (), size: .regular)
            .bind_selectedIndex (self.rootObject.mPDFProductGrid_property)
          _ = hStackView_view_view .appendView (hStackView_view_view_view)
        }
        _ = hStackView_view.appendView (hStackView_view_view)
      }
      _ = hStackView_view.appendFlexibleSpace ()
      _ = hStackView.appendView (hStackView_view)
    }
    _ = hStackView.appendFlexibleSpace ()
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW GenerationLogPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func GenerationLogPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: .large)
    do{
      let vStackView_view = AutoLayoutTextObserverView (size: .regular)
      self.mProductFileGenerationLogTextView = vStackView_view // Outlet
      _ = vStackView .appendView (vStackView_view)
    }
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.setContentView (mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.undoManager)

  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.undoManager)

  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.undoManager)

  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.undoManager)

  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.bind_model (self.rootObject.selectedSheetObjects_property, self.undoManager)

  //--- Selection controller property: wireInSchematicSelectionController
    self.wireInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: ncInSchematicSelectionController
    self.ncInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: schematicLabelSelectionController
    self.schematicLabelSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: commentInSchematicSelectionController
    self.commentInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Selection controller property: componentSymbolSelectionController
    self.componentSymbolSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property)

  //--- Array controller property: boardCurveObjectsController
    self.boardCurveObjectsController.bind_model (self.rootObject.mBorderCurves_property, self.undoManager)

  //--- Selection controller property: boardCurveSelectionController
    self.boardCurveSelectionController.bind_selection (model: self.boardCurveObjectsController.selectedArray_property)

  //--- Array controller property: boardObjectsController
    self.boardObjectsController.bind_model (self.rootObject.mBoardObjects_property, self.undoManager)

  //--- Selection controller property: boardTrackSelectionController
    self.boardTrackSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardConnectorSelectionController
    self.boardConnectorSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardLineSelectionController
    self.boardLineSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: restrictRectSelController
    self.restrictRectSelController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardImageSelectionController
    self.boardImageSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardQRCodeSelectionController
    self.boardQRCodeSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: boardTextSelectionController
    self.boardTextSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Selection controller property: componentInBoardSelectionController
    self.componentInBoardSelectionController.bind_selection (model: self.boardObjectsController.selectedArray_property)

  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.undoManager)

  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)

  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.netsDescription_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.startsBeingObserved (by: self.netCount_property)

  //--- Atomic property: rastnetDisplayOneNet
    self.rastnetDisplayOneNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayOneNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.startsBeingObserved (by: self.rastnetDisplayOneNet_property)

  //--- Atomic property: rastnetDisplayComponentNet
    self.rastnetDisplayComponentNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetDisplayComponentNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.startsBeingObserved (by: self.rastnetDisplayComponentNet_property)


  //--- Atomic property: incorrectDocumentFileDetailedErrorMessage
    self.incorrectDocumentFileDetailedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_incorrectDocumentFileDetailedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.incorrectDocumentFileDetailedErrorMessage_property)

  //--- Atomic property: documentFileShouldBeRenamedErrorMessage
    self.documentFileShouldBeRenamedErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentFileShouldBeRenamedErrorMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentFileShouldBeRenamedErrorMessage_property)

  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.toMany_pinPadAssignments_StartsBeingObserved (by: self.pinPadAssignments_property)

  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceSymbolNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.toMany_symbolAndTypesNames_StartsBeingObserved (by: self.selectedDeviceSymbolNames_property)

  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDevicePackageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.toMany_packageNames_StartsBeingObserved (by: self.selectedDevicePackageNames_property)

  //--- Atomic property: selectedDeviceNames
    self.selectedDeviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_selectedDeviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.toMany_symbolAndTypesNames_StartsBeingObserved (by: self.selectedDeviceNames_property)

  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mNetClasses_property.count_property.selection
        let s1 = unwSelf.netClassController.selectedArray_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveNetClasses (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.startsBeingObserved (by: self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.toMany_canRemove_StartsBeingObserved (by: self.canRemoveNetClasses_property)

  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.netsDescription_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_netCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.startsBeingObserved (by: self.netCountString_property)

  //--- Atomic property: schematicSheetOrientationIsCustom
    self.schematicSheetOrientationIsCustom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mSchematicSheetOrientation_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_schematicSheetOrientationIsCustom (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mSchematicSheetOrientation_property.startsBeingObserved (by: self.schematicSheetOrientationIsCustom_property)

  //--- Atomic property: rastnetShape
    self.rastnetShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mRastnetDisplay_property.selection
        let s1 = unwSelf.rootObject.mRastnetDisplayedNetName_property.selection
        let s2 = unwSelf.rootObject.mRastnetDisplayedComponentName_property.selection
        let s3 = unwSelf.rootObject.mBoardObjects_property.selection
        let s4 = preferences_rastnetColorForBoard_property.selection
        let s5 = unwSelf.boardObjectsController.selectedArray_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_AutoLayoutProjectDocument_rastnetShape (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mRastnetDisplay_property.startsBeingObserved (by: self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedNetName_property.startsBeingObserved (by: self.rastnetShape_property)
    self.rootObject.mRastnetDisplayedComponentName_property.startsBeingObserved (by: self.rastnetShape_property)
    self.rootObject.mBoardObjects_property.toMany_netNameAndPadLocation_StartsBeingObserved (by: self.rastnetShape_property)
    preferences_rastnetColorForBoard_property.startsBeingObserved (by: self.rastnetShape_property)
    self.boardObjectsController.selectedArray_property.toMany_componentName_StartsBeingObserved (by: self.rastnetShape_property)

  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.documentFileName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_documentIsUnnamed (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.documentFileName_property.startsBeingObserved (by: self.documentIsUnnamed_property)

  //--- Atomic property: emptyDrillFileExtension
    self.emptyDrillFileExtension_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.drillDataFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtension (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.drillDataFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtension_property)

  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.mComponents_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_componentCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.startsBeingObserved (by: self.componentCount_property)

  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.componentController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canChangePackage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.toMany_availablePackages_StartsBeingObserved (by: self.canChangePackage_property)

  //--- Atomic property: canRemoveSelectedFonts
    self.canRemoveSelectedFonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectFontController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedFonts (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectFontController.selectedArray_property.toMany_canRemoveFont_StartsBeingObserved (by: self.canRemoveSelectedFonts_property)

  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.projectDeviceController.selectedArray_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_canRemoveSelectedDevices (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.toMany_canRemove_StartsBeingObserved (by: self.canRemoveSelectedDevices_property)

  //--- Atomic property: unplacedSymbolsCount
    self.unplacedSymbolsCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unplacedSymbols_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedSymbolsCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedSymbols_property.startsBeingObserved (by: self.unplacedSymbolsCount_property)

  //--- Atomic property: unplacedSymbolsCountString
    self.unplacedSymbolsCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbolsCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedSymbolsCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbolsCount_property.startsBeingObserved (by: self.unplacedSymbolsCountString_property)

  //--- Atomic property: unplacedSymbolsSegmentImage
    self.unplacedSymbolsSegmentImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbolsCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedSymbolsSegmentImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbolsCount_property.startsBeingObserved (by: self.unplacedSymbolsSegmentImage_property)

  //--- Atomic property: boardOutlineOverDisplay
    self.boardOutlineOverDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rastnetShape_property.selection
        let s1 = unwSelf.rootObject.boardIssues_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutProjectDocument_boardOutlineOverDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rastnetShape_property.startsBeingObserved (by: self.boardOutlineOverDisplay_property)
    self.rootObject.boardIssues_property.startsBeingObserved (by: self.boardOutlineOverDisplay_property)

  //--- Atomic property: unplacedPackageCount
    self.unplacedPackageCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.unplacedPackages_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackageCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedPackages_property.startsBeingObserved (by: self.unplacedPackageCount_property)

  //--- Atomic property: unplacedPackagesCountString
    self.unplacedPackagesCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedPackageCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.startsBeingObserved (by: self.unplacedPackagesCountString_property)

  //--- Atomic property: unplacedPackagesSegmentImage
    self.unplacedPackagesSegmentImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedPackageCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesSegmentImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.startsBeingObserved (by: self.unplacedPackagesSegmentImage_property)

  //--- Atomic property: unplacedPackagesMessageString
    self.unplacedPackagesMessageString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedPackageCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_unplacedPackagesMessageString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedPackageCount_property.startsBeingObserved (by: self.unplacedPackagesMessageString_property)

  //--- Atomic property: emptyDrillFileExtensionImage
    self.emptyDrillFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.emptyDrillFileExtension_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_emptyDrillFileExtensionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.emptyDrillFileExtension_property.startsBeingObserved (by: self.emptyDrillFileExtensionImage_property)

  //--- Atomic property: generatedFileCountString
    self.generatedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDataController.sortedArray_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutProjectDocument_generatedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.startsBeingObserved (by: self.generatedFileCountString_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

