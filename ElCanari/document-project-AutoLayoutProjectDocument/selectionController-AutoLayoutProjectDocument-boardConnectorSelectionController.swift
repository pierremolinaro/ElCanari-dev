//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument boardConnectorSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutProjectDocument_boardConnectorSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: mComponentPadName
  //····················································································································

  final let mComponentPadName_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: mPadIndex
  //····················································································································

  final let mPadIndex_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mX
  //····················································································································

  final let mX_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY
  //····················································································································

  final let mY_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mDefaultHoleDiameterUnit
  //····················································································································

  final let mDefaultHoleDiameterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCustomHoleDiameter
  //····················································································································

  final let mCustomHoleDiameter_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCustomHoleDiameterUnit
  //····················································································································

  final let mCustomHoleDiameterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mUsesCustomHoleDiameter
  //····················································································································

  final let mUsesCustomHoleDiameter_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mDefaultPadDiameterUnit
  //····················································································································

  final let mDefaultPadDiameterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCustomPadDiameter
  //····················································································································

  final let mCustomPadDiameter_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCustomPadDiameterUnit
  //····················································································································

  final let mCustomPadDiameterUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mUsesCustomPadDiameter
  //····················································································································

  final let mUsesCustomPadDiameter_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: isConnectedToSomePad
  //····················································································································

  final let isConnectedToSomePad_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: location
  //····················································································································

  final let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································
  //   Selection observable property: netNameFromComponentPad
  //····················································································································

  final let netNameFromComponentPad_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: netNameAndPadLocation
  //····················································································································

  final let netNameAndPadLocation_property = EBTransientProperty_RastnetInfoArray ()

  //····················································································································
  //   Selection observable property: side
  //····················································································································

  final let side_property = EBTransientProperty_ConnectorSide ()

  //····················································································································
  //   Selection observable property: isVia
  //····················································································································

  final let isVia_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: viaDefaultHoleDiameter
  //····················································································································

  final let viaDefaultHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: viaDefaultPadDiameter
  //····················································································································

  final let viaDefaultPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: netNameFromTracks
  //····················································································································

  final let netNameFromTracks_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: connectedToComponent
  //····················································································································

  final let connectedToComponent_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: actualHoleDiameter
  //····················································································································

  final let actualHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: actualPadDiameter
  //····················································································································

  final let actualPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <BoardConnector> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardConnector <BoardObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mComponentPadName ()
    self.bind_property_mPadIndex ()
    self.bind_property_mX ()
    self.bind_property_mY ()
    self.bind_property_mDefaultHoleDiameterUnit ()
    self.bind_property_mCustomHoleDiameter ()
    self.bind_property_mCustomHoleDiameterUnit ()
    self.bind_property_mUsesCustomHoleDiameter ()
    self.bind_property_mDefaultPadDiameterUnit ()
    self.bind_property_mCustomPadDiameter ()
    self.bind_property_mCustomPadDiameterUnit ()
    self.bind_property_mUsesCustomPadDiameter ()
    self.bind_property_isConnectedToSomePad ()
    self.bind_property_location ()
    self.bind_property_netNameFromComponentPad ()
    self.bind_property_netNameAndPadLocation ()
    self.bind_property_side ()
    self.bind_property_isVia ()
    self.bind_property_issues ()
    self.bind_property_viaDefaultHoleDiameter ()
    self.bind_property_viaDefaultPadDiameter ()
    self.bind_property_netNameFromTracks ()
    self.bind_property_netClassName ()
    self.bind_property_connectedToComponent ()
    self.bind_property_actualHoleDiameter ()
    self.bind_property_actualPadDiameter ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_signatureForERCChecking ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mComponentPadName
    self.mComponentPadName_property.mReadModelFunction = nil 
    self.mComponentPadName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mComponentPadName (self.mComponentPadName_property)
  //--- mPadIndex
    self.mPadIndex_property.mReadModelFunction = nil 
    self.mPadIndex_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mPadIndex (self.mPadIndex_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mX (self.mX_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mY (self.mY_property)
  //--- mDefaultHoleDiameterUnit
    self.mDefaultHoleDiameterUnit_property.mReadModelFunction = nil 
    self.mDefaultHoleDiameterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDefaultHoleDiameterUnit (self.mDefaultHoleDiameterUnit_property)
  //--- mCustomHoleDiameter
    self.mCustomHoleDiameter_property.mReadModelFunction = nil 
    self.mCustomHoleDiameter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomHoleDiameter (self.mCustomHoleDiameter_property)
  //--- mCustomHoleDiameterUnit
    self.mCustomHoleDiameterUnit_property.mReadModelFunction = nil 
    self.mCustomHoleDiameterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomHoleDiameterUnit (self.mCustomHoleDiameterUnit_property)
  //--- mUsesCustomHoleDiameter
    self.mUsesCustomHoleDiameter_property.mReadModelFunction = nil 
    self.mUsesCustomHoleDiameter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mUsesCustomHoleDiameter (self.mUsesCustomHoleDiameter_property)
  //--- mDefaultPadDiameterUnit
    self.mDefaultPadDiameterUnit_property.mReadModelFunction = nil 
    self.mDefaultPadDiameterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDefaultPadDiameterUnit (self.mDefaultPadDiameterUnit_property)
  //--- mCustomPadDiameter
    self.mCustomPadDiameter_property.mReadModelFunction = nil 
    self.mCustomPadDiameter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomPadDiameter (self.mCustomPadDiameter_property)
  //--- mCustomPadDiameterUnit
    self.mCustomPadDiameterUnit_property.mReadModelFunction = nil 
    self.mCustomPadDiameterUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomPadDiameterUnit (self.mCustomPadDiameterUnit_property)
  //--- mUsesCustomPadDiameter
    self.mUsesCustomPadDiameter_property.mReadModelFunction = nil 
    self.mUsesCustomPadDiameter_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mUsesCustomPadDiameter (self.mUsesCustomPadDiameter_property)
  //--- isConnectedToSomePad
    self.isConnectedToSomePad_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_isConnectedToSomePad (self.isConnectedToSomePad_property)
  //--- location
    self.location_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_location (self.location_property)
  //--- netNameFromComponentPad
    self.netNameFromComponentPad_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netNameFromComponentPad (self.netNameFromComponentPad_property)
  //--- netNameAndPadLocation
    self.netNameAndPadLocation_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netNameAndPadLocation (self.netNameAndPadLocation_property)
  //--- side
    self.side_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_side (self.side_property)
  //--- isVia
    self.isVia_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_isVia (self.isVia_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_issues (self.issues_property)
  //--- viaDefaultHoleDiameter
    self.viaDefaultHoleDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_viaDefaultHoleDiameter (self.viaDefaultHoleDiameter_property)
  //--- viaDefaultPadDiameter
    self.viaDefaultPadDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_viaDefaultPadDiameter (self.viaDefaultPadDiameter_property)
  //--- netNameFromTracks
    self.netNameFromTracks_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netNameFromTracks (self.netNameFromTracks_property)
  //--- netClassName
    self.netClassName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netClassName (self.netClassName_property)
  //--- connectedToComponent
    self.connectedToComponent_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_connectedToComponent (self.connectedToComponent_property)
  //--- actualHoleDiameter
    self.actualHoleDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_actualHoleDiameter (self.actualHoleDiameter_property)
  //--- actualPadDiameter
    self.actualPadDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_actualPadDiameter (self.actualPadDiameter_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
  } */

  //····················································································································

  private final func bind_property_mComponentPadName () {
    self.selectedArray_property.addEBObserverOf_mComponentPadName (self.mComponentPadName_property)
    self.mComponentPadName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mComponentPadName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponentPadName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mComponentPadName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mPadIndex () {
    self.selectedArray_property.addEBObserverOf_mPadIndex (self.mPadIndex_property)
    self.mPadIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mPadIndex_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mPadIndex_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX () {
    self.selectedArray_property.addEBObserverOf_mX (self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mY () {
    self.selectedArray_property.addEBObserverOf_mY (self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDefaultHoleDiameterUnit () {
    self.selectedArray_property.addEBObserverOf_mDefaultHoleDiameterUnit (self.mDefaultHoleDiameterUnit_property)
    self.mDefaultHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDefaultHoleDiameterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDefaultHoleDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDefaultHoleDiameterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomHoleDiameter () {
    self.selectedArray_property.addEBObserverOf_mCustomHoleDiameter (self.mCustomHoleDiameter_property)
    self.mCustomHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomHoleDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomHoleDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomHoleDiameter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomHoleDiameterUnit () {
    self.selectedArray_property.addEBObserverOf_mCustomHoleDiameterUnit (self.mCustomHoleDiameterUnit_property)
    self.mCustomHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomHoleDiameterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomHoleDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomHoleDiameterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mUsesCustomHoleDiameter () {
    self.selectedArray_property.addEBObserverOf_mUsesCustomHoleDiameter (self.mUsesCustomHoleDiameter_property)
    self.mUsesCustomHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mUsesCustomHoleDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mUsesCustomHoleDiameter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mUsesCustomHoleDiameter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDefaultPadDiameterUnit () {
    self.selectedArray_property.addEBObserverOf_mDefaultPadDiameterUnit (self.mDefaultPadDiameterUnit_property)
    self.mDefaultPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDefaultPadDiameterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDefaultPadDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDefaultPadDiameterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomPadDiameter () {
    self.selectedArray_property.addEBObserverOf_mCustomPadDiameter (self.mCustomPadDiameter_property)
    self.mCustomPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomPadDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomPadDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomPadDiameter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomPadDiameterUnit () {
    self.selectedArray_property.addEBObserverOf_mCustomPadDiameterUnit (self.mCustomPadDiameterUnit_property)
    self.mCustomPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomPadDiameterUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomPadDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomPadDiameterUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mUsesCustomPadDiameter () {
    self.selectedArray_property.addEBObserverOf_mUsesCustomPadDiameter (self.mUsesCustomPadDiameter_property)
    self.mUsesCustomPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mUsesCustomPadDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mUsesCustomPadDiameter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mUsesCustomPadDiameter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_isConnectedToSomePad () {
    self.selectedArray_property.addEBObserverOf_isConnectedToSomePad (self.isConnectedToSomePad_property)
    self.isConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.isConnectedToSomePad_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_location () {
    self.selectedArray_property.addEBObserverOf_location (self.location_property)
    self.location_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariPoint> ()
          var isMultipleSelection = false
          for object in v {
            switch object.location_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netNameFromComponentPad () {
    self.selectedArray_property.addEBObserverOf_netNameFromComponentPad (self.netNameFromComponentPad_property)
    self.netNameFromComponentPad_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netNameFromComponentPad_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netNameAndPadLocation () {
    self.selectedArray_property.addEBObserverOf_netNameAndPadLocation (self.netNameAndPadLocation_property)
    self.netNameAndPadLocation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <RastnetInfoArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netNameAndPadLocation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_side () {
    self.selectedArray_property.addEBObserverOf_side (self.side_property)
    self.side_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ConnectorSide> ()
          var isMultipleSelection = false
          for object in v {
            switch object.side_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_isVia () {
    self.selectedArray_property.addEBObserverOf_isVia (self.isVia_property)
    self.isVia_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.isVia_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_viaDefaultHoleDiameter () {
    self.selectedArray_property.addEBObserverOf_viaDefaultHoleDiameter (self.viaDefaultHoleDiameter_property)
    self.viaDefaultHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaDefaultHoleDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_viaDefaultPadDiameter () {
    self.selectedArray_property.addEBObserverOf_viaDefaultPadDiameter (self.viaDefaultPadDiameter_property)
    self.viaDefaultPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaDefaultPadDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netNameFromTracks () {
    self.selectedArray_property.addEBObserverOf_netNameFromTracks (self.netNameFromTracks_property)
    self.netNameFromTracks_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netNameFromTracks_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netClassName () {
    self.selectedArray_property.addEBObserverOf_netClassName (self.netClassName_property)
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_connectedToComponent () {
    self.selectedArray_property.addEBObserverOf_connectedToComponent (self.connectedToComponent_property)
    self.connectedToComponent_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.connectedToComponent_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_actualHoleDiameter () {
    self.selectedArray_property.addEBObserverOf_actualHoleDiameter (self.actualHoleDiameter_property)
    self.actualHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.actualHoleDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_actualPadDiameter () {
    self.selectedArray_property.addEBObserverOf_actualPadDiameter (self.actualPadDiameter_property)
    self.actualPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.actualPadDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.addEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

