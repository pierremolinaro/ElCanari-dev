//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutProjectDocument boardCurveSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutProjectDocument_boardCurveSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: descriptor
  //····················································································································

  var descriptor_property = EBTransientProperty_BorderCurveDescriptor ()

  //····················································································································
  //   Selection observable property: isLine
  //····················································································································

  var isLine_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: mCPX1
  //····················································································································

  var mCPX1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCPX2
  //····················································································································

  var mCPX2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCPY1
  //····················································································································

  var mCPY1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCPY2
  //····················································································································

  var mCPY2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mNext
  //····················································································································

  //····················································································································
  //   Selection observable property: mNextX
  //····················································································································

  var mNextX_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mNextY
  //····················································································································

  var mNextY_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mPrevious
  //····················································································································

  //····················································································································
  //   Selection observable property: mRoot
  //····················································································································

  //····················································································································
  //   Selection observable property: mShape
  //····················································································································

  var mShape_property = EBComputedProperty_BorderCurveShape ()

  //····················································································································
  //   Selection observable property: mX
  //····················································································································

  var mX_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY
  //····················································································································

  var mY_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: p2Xvalue
  //····················································································································

  var p2Xvalue_property = EBTransientProperty_Double ()

  //····················································································································
  //   Selection observable property: p2Yvalue
  //····················································································································

  var p2Yvalue_property = EBTransientProperty_Double ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_BorderCurve? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BorderCurve) {
    self.mModel = model
    self.bind_property_descriptor (model: model)
    self.bind_property_isLine (model: model)
    self.bind_property_mCPX1 (model: model)
    self.bind_property_mCPX2 (model: model)
    self.bind_property_mCPY1 (model: model)
    self.bind_property_mCPY2 (model: model)
    self.bind_property_mNextX (model: model)
    self.bind_property_mNextY (model: model)
    self.bind_property_mShape (model: model)
    self.bind_property_mX (model: model)
    self.bind_property_mY (model: model)
    self.bind_property_objectDisplay (model: model)
    self.bind_property_p2Xvalue (model: model)
    self.bind_property_p2Yvalue (model: model)
    self.bind_property_selectionDisplay (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
  //--- descriptor
    self.descriptor_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_descriptor (self.descriptor_property)
  //--- isLine
    self.isLine_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_isLine (self.isLine_property)
  //--- mCPX1
    self.mCPX1_property.mReadModelFunction = nil 
    self.mCPX1_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPX1 (self.mCPX1_property)
  //--- mCPX2
    self.mCPX2_property.mReadModelFunction = nil 
    self.mCPX2_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPX2 (self.mCPX2_property)
  //--- mCPY1
    self.mCPY1_property.mReadModelFunction = nil 
    self.mCPY1_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPY1 (self.mCPY1_property)
  //--- mCPY2
    self.mCPY2_property.mReadModelFunction = nil 
    self.mCPY2_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPY2 (self.mCPY2_property)
  //--- mNextX
    self.mNextX_property.mReadModelFunction = nil 
    self.mNextX_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mNextX (self.mNextX_property)
  //--- mNextY
    self.mNextY_property.mReadModelFunction = nil 
    self.mNextY_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mNextY (self.mNextY_property)
  //--- mShape
    self.mShape_property.mReadModelFunction = nil 
    self.mShape_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mShape (self.mShape_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mX (self.mX_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mY (self.mY_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- p2Xvalue
    self.p2Xvalue_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_p2Xvalue (self.p2Xvalue_property)
  //--- p2Yvalue
    self.p2Yvalue_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_p2Yvalue (self.p2Yvalue_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //---
    self.mModel = nil
  } */

  //···················································································································*

  private final func bind_property_descriptor (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_descriptor (self.descriptor_property)
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BorderCurveDescriptor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.descriptor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_isLine (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_isLine (self.isLine_property)
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.isLine_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPX1 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPX1 (self.mCPX1_property)
    self.mCPX1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPX1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPX1_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPX2 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPX2 (self.mCPX2_property)
    self.mCPX2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPX2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPX2_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPY1 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPY1 (self.mCPY1_property)
    self.mCPY1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPY1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPY1_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPY2 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPY2 (self.mCPY2_property)
    self.mCPY2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPY2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPY2_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mNextX (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mNextX (self.mNextX_property)
    self.mNextX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNextX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNextX_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mNextY (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mNextY (self.mNextY_property)
    self.mNextY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNextY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNextY_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mShape (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mShape (self.mShape_property)
    self.mShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BorderCurveShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mShape_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mShape_property.mWriteModelFunction = { [weak self] (inValue : BorderCurveShape) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mShape_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mX (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mX (self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_mY (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mY (self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_p2Xvalue (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_p2Xvalue (self.p2Xvalue_property)
    self.p2Xvalue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2Xvalue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_p2Yvalue (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_p2Yvalue (self.p2Yvalue_property)
    self.p2Yvalue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2Yvalue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

