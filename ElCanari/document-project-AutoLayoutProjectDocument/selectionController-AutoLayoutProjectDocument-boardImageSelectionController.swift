//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument boardImageSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_boardImageSelectionController {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: mXUnit
  //····················································································································

  final let mXUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCenterY
  //····················································································································

  final let mCenterY_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mYUnit
  //····················································································································

  final let mYUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mThreshold
  //····················································································································

  final let mThreshold_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mImageData
  //····················································································································

  final let mImageData_property = EBComputedProperty_Data ()

  //····················································································································
  //   Selection observable property: mInvert
  //····················································································································

  final let mInvert_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mHorizontalFlip
  //····················································································································

  final let mHorizontalFlip_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mVerticalFlip
  //····················································································································

  final let mVerticalFlip_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mScale
  //····················································································································

  final let mScale_property = EBComputedProperty_Double ()

  //····················································································································
  //   Selection observable property: mPixelSize
  //····················································································································

  final let mPixelSize_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mPixelSizeUnit
  //····················································································································

  final let mPixelSizeUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mActualWidthUnit
  //····················································································································

  final let mActualWidthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mActualHeightUnit
  //····················································································································

  final let mActualHeightUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mImageDisplay
  //····················································································································

  final let mImageDisplay_property = EBComputedProperty_BoardImageDisplay ()

  //····················································································································
  //   Selection observable property: mLayer
  //····················································································································

  final let mLayer_property = EBComputedProperty_BoardQRCodeLayer ()

  //····················································································································
  //   Selection observable property: mText
  //····················································································································

  final let mText_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: mRotation
  //····················································································································

  final let mRotation_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCenterX
  //····················································································································

  final let mCenterX_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: computedDataImage
  //····················································································································

  final let computedDataImage_property = EBComputedProperty_Data ()

  //····················································································································
  //   Selection observable property: imageDataByteCount
  //····················································································································

  final let imageDataByteCount_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: boardImageCodeDescriptor
  //····················································································································

  final let boardImageCodeDescriptor_property = EBTransientProperty <BoardImageDescriptor> ()

  //····················································································································
  //   Selection observable property: boardOriginalImageWidth
  //····················································································································

  final let boardOriginalImageWidth_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: boardOriginalImageHeight
  //····················································································································

  final let boardOriginalImageHeight_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: boardScaledImageWidth
  //····················································································································

  final let boardScaledImageWidth_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: boardScaledImageHeight
  //····················································································································

  final let boardScaledImageHeight_property = EBTransientProperty <String> ()

  //····················································································································
  //   Selection observable property: boardActualImageWidth
  //····················································································································

  final let boardActualImageWidth_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: boardActualImageHeight
  //····················································································································

  final let boardActualImageHeight_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <BoardImage> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardImage <BoardObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mXUnit ()
    self.bind_property_mCenterY ()
    self.bind_property_mYUnit ()
    self.bind_property_mThreshold ()
    self.bind_property_mImageData ()
    self.bind_property_mInvert ()
    self.bind_property_mHorizontalFlip ()
    self.bind_property_mVerticalFlip ()
    self.bind_property_mScale ()
    self.bind_property_mPixelSize ()
    self.bind_property_mPixelSizeUnit ()
    self.bind_property_mActualWidthUnit ()
    self.bind_property_mActualHeightUnit ()
    self.bind_property_mImageDisplay ()
    self.bind_property_mLayer ()
    self.bind_property_mText ()
    self.bind_property_mRotation ()
    self.bind_property_mCenterX ()
    self.bind_property_computedDataImage ()
    self.bind_property_imageDataByteCount ()
    self.bind_property_boardImageCodeDescriptor ()
    self.bind_property_boardOriginalImageWidth ()
    self.bind_property_boardOriginalImageHeight ()
    self.bind_property_boardScaledImageWidth ()
    self.bind_property_boardScaledImageHeight ()
    self.bind_property_boardActualImageWidth ()
    self.bind_property_boardActualImageHeight ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_signatureForERCChecking ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mXUnit
    self.mXUnit_property.mReadModelFunction = nil 
    self.mXUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXUnit_StopsBeingObserved (by: self.mXUnit_property)
  //--- mCenterY
    self.mCenterY_property.mReadModelFunction = nil 
    self.mCenterY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterY_StopsBeingObserved (by: self.mCenterY_property)
  //--- mYUnit
    self.mYUnit_property.mReadModelFunction = nil 
    self.mYUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYUnit_StopsBeingObserved (by: self.mYUnit_property)
  //--- mThreshold
    self.mThreshold_property.mReadModelFunction = nil 
    self.mThreshold_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mThreshold_StopsBeingObserved (by: self.mThreshold_property)
  //--- mImageData
    self.mImageData_property.mReadModelFunction = nil 
    self.mImageData_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mImageData_StopsBeingObserved (by: self.mImageData_property)
  //--- mInvert
    self.mInvert_property.mReadModelFunction = nil 
    self.mInvert_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mInvert_StopsBeingObserved (by: self.mInvert_property)
  //--- mHorizontalFlip
    self.mHorizontalFlip_property.mReadModelFunction = nil 
    self.mHorizontalFlip_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mHorizontalFlip_StopsBeingObserved (by: self.mHorizontalFlip_property)
  //--- mVerticalFlip
    self.mVerticalFlip_property.mReadModelFunction = nil 
    self.mVerticalFlip_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mVerticalFlip_StopsBeingObserved (by: self.mVerticalFlip_property)
  //--- mScale
    self.mScale_property.mReadModelFunction = nil 
    self.mScale_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mScale_StopsBeingObserved (by: self.mScale_property)
  //--- mPixelSize
    self.mPixelSize_property.mReadModelFunction = nil 
    self.mPixelSize_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mPixelSize_StopsBeingObserved (by: self.mPixelSize_property)
  //--- mPixelSizeUnit
    self.mPixelSizeUnit_property.mReadModelFunction = nil 
    self.mPixelSizeUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mPixelSizeUnit_StopsBeingObserved (by: self.mPixelSizeUnit_property)
  //--- mActualWidthUnit
    self.mActualWidthUnit_property.mReadModelFunction = nil 
    self.mActualWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mActualWidthUnit_StopsBeingObserved (by: self.mActualWidthUnit_property)
  //--- mActualHeightUnit
    self.mActualHeightUnit_property.mReadModelFunction = nil 
    self.mActualHeightUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mActualHeightUnit_StopsBeingObserved (by: self.mActualHeightUnit_property)
  //--- mImageDisplay
    self.mImageDisplay_property.mReadModelFunction = nil 
    self.mImageDisplay_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mImageDisplay_StopsBeingObserved (by: self.mImageDisplay_property)
  //--- mLayer
    self.mLayer_property.mReadModelFunction = nil 
    self.mLayer_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mLayer_StopsBeingObserved (by: self.mLayer_property)
  //--- mText
    self.mText_property.mReadModelFunction = nil 
    self.mText_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mText_StopsBeingObserved (by: self.mText_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mCenterX
    self.mCenterX_property.mReadModelFunction = nil 
    self.mCenterX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterX_StopsBeingObserved (by: self.mCenterX_property)
  //--- computedDataImage
    self.computedDataImage_property.mReadModelFunction = nil 
    self.computedDataImage_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_computedDataImage_StopsBeingObserved (by: self.computedDataImage_property)
  //--- imageDataByteCount
    self.imageDataByteCount_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_imageDataByteCount_StopsBeingObserved (by: self.imageDataByteCount_property)
  //--- boardImageCodeDescriptor
    self.boardImageCodeDescriptor_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardImageCodeDescriptor_StopsBeingObserved (by: self.boardImageCodeDescriptor_property)
  //--- boardOriginalImageWidth
    self.boardOriginalImageWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardOriginalImageWidth_StopsBeingObserved (by: self.boardOriginalImageWidth_property)
  //--- boardOriginalImageHeight
    self.boardOriginalImageHeight_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardOriginalImageHeight_StopsBeingObserved (by: self.boardOriginalImageHeight_property)
  //--- boardScaledImageWidth
    self.boardScaledImageWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardScaledImageWidth_StopsBeingObserved (by: self.boardScaledImageWidth_property)
  //--- boardScaledImageHeight
    self.boardScaledImageHeight_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardScaledImageHeight_StopsBeingObserved (by: self.boardScaledImageHeight_property)
  //--- boardActualImageWidth
    self.boardActualImageWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardActualImageWidth_StopsBeingObserved (by: self.boardActualImageWidth_property)
  //--- boardActualImageHeight
    self.boardActualImageHeight_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_boardActualImageHeight_StopsBeingObserved (by: self.boardActualImageHeight_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_signatureForERCChecking_StopsBeingObserved (by: self.signatureForERCChecking_property)
  } */

  //····················································································································

  private final func bind_property_mXUnit () {
    self.selectedArray_property.toMany_mXUnit_StartsToBeObserved (by: self.mXUnit_property)
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCenterY () {
    self.selectedArray_property.toMany_mCenterY_StartsToBeObserved (by: self.mCenterY_property)
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mYUnit () {
    self.selectedArray_property.toMany_mYUnit_StartsToBeObserved (by: self.mYUnit_property)
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mThreshold () {
    self.selectedArray_property.toMany_mThreshold_StartsToBeObserved (by: self.mThreshold_property)
    self.mThreshold_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mThreshold_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mThreshold_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mThreshold_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mImageData () {
    self.selectedArray_property.toMany_mImageData_StartsToBeObserved (by: self.mImageData_property)
    self.mImageData_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Data> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mImageData_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.mWriteModelFunction = { [weak self] (inValue : Data) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mImageData_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mInvert () {
    self.selectedArray_property.toMany_mInvert_StartsToBeObserved (by: self.mInvert_property)
    self.mInvert_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mInvert_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mInvert_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mInvert_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mHorizontalFlip () {
    self.selectedArray_property.toMany_mHorizontalFlip_StartsToBeObserved (by: self.mHorizontalFlip_property)
    self.mHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mHorizontalFlip_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mHorizontalFlip_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mVerticalFlip () {
    self.selectedArray_property.toMany_mVerticalFlip_StartsToBeObserved (by: self.mVerticalFlip_property)
    self.mVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mVerticalFlip_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mVerticalFlip_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mScale () {
    self.selectedArray_property.toMany_mScale_StartsToBeObserved (by: self.mScale_property)
    self.mScale_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mScale_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mScale_property.mWriteModelFunction = { [weak self] (inValue : Double) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mScale_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mPixelSize () {
    self.selectedArray_property.toMany_mPixelSize_StartsToBeObserved (by: self.mPixelSize_property)
    self.mPixelSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mPixelSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mPixelSize_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mPixelSize_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mPixelSizeUnit () {
    self.selectedArray_property.toMany_mPixelSizeUnit_StartsToBeObserved (by: self.mPixelSizeUnit_property)
    self.mPixelSizeUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mPixelSizeUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mPixelSizeUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mPixelSizeUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mActualWidthUnit () {
    self.selectedArray_property.toMany_mActualWidthUnit_StartsToBeObserved (by: self.mActualWidthUnit_property)
    self.mActualWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mActualWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mActualWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mActualWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mActualHeightUnit () {
    self.selectedArray_property.toMany_mActualHeightUnit_StartsToBeObserved (by: self.mActualHeightUnit_property)
    self.mActualHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mActualHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mActualHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mActualHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mImageDisplay () {
    self.selectedArray_property.toMany_mImageDisplay_StartsToBeObserved (by: self.mImageDisplay_property)
    self.mImageDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BoardImageDisplay> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mImageDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mImageDisplay_property.mWriteModelFunction = { [weak self] (inValue : BoardImageDisplay) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mImageDisplay_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mLayer () {
    self.selectedArray_property.toMany_mLayer_StartsToBeObserved (by: self.mLayer_property)
    self.mLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BoardQRCodeLayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.mWriteModelFunction = { [weak self] (inValue : BoardQRCodeLayer) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mLayer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mText () {
    self.selectedArray_property.toMany_mText_StartsToBeObserved (by: self.mText_property)
    self.mText_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mText_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mText_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mText_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsToBeObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCenterX () {
    self.selectedArray_property.toMany_mCenterX_StartsToBeObserved (by: self.mCenterX_property)
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_computedDataImage () {
    self.selectedArray_property.toMany_computedDataImage_StartsToBeObserved (by: self.computedDataImage_property)
    self.computedDataImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Data> ()
          var isMultipleSelection = false
          for object in v {
            switch object.computedDataImage_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.computedDataImage_property.mWriteModelFunction = { [weak self] (inValue : Data) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.computedDataImage_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_imageDataByteCount () {
    self.selectedArray_property.toMany_imageDataByteCount_StartsToBeObserved (by: self.imageDataByteCount_property)
    self.imageDataByteCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.imageDataByteCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardImageCodeDescriptor () {
    self.selectedArray_property.toMany_boardImageCodeDescriptor_StartsToBeObserved (by: self.boardImageCodeDescriptor_property)
    self.boardImageCodeDescriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BoardImageDescriptor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardImageCodeDescriptor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardOriginalImageWidth () {
    self.selectedArray_property.toMany_boardOriginalImageWidth_StartsToBeObserved (by: self.boardOriginalImageWidth_property)
    self.boardOriginalImageWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardOriginalImageWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardOriginalImageHeight () {
    self.selectedArray_property.toMany_boardOriginalImageHeight_StartsToBeObserved (by: self.boardOriginalImageHeight_property)
    self.boardOriginalImageHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardOriginalImageHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardScaledImageWidth () {
    self.selectedArray_property.toMany_boardScaledImageWidth_StartsToBeObserved (by: self.boardScaledImageWidth_property)
    self.boardScaledImageWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardScaledImageWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardScaledImageHeight () {
    self.selectedArray_property.toMany_boardScaledImageHeight_StartsToBeObserved (by: self.boardScaledImageHeight_property)
    self.boardScaledImageHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardScaledImageHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardActualImageWidth () {
    self.selectedArray_property.toMany_boardActualImageWidth_StartsToBeObserved (by: self.boardActualImageWidth_property)
    self.boardActualImageWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardActualImageWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_boardActualImageHeight () {
    self.selectedArray_property.toMany_boardActualImageHeight_StartsToBeObserved (by: self.boardActualImageHeight_property)
    self.boardActualImageHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardActualImageHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsToBeObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsToBeObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.toMany_signatureForERCChecking_StartsToBeObserved (by: self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

