//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument boardLineSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_boardLineSelectionController {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: mWidthUnit
  //····················································································································

  final let mWidthUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mX1
  //····················································································································

  final let mX1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mX1Unit
  //····················································································································

  final let mX1Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY1
  //····················································································································

  final let mY1_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY1Unit
  //····················································································································

  final let mY1Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mX2
  //····················································································································

  final let mX2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mX2Unit
  //····················································································································

  final let mX2Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY2
  //····················································································································

  final let mY2_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mY2Unit
  //····················································································································

  final let mY2Unit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mLayer
  //····················································································································

  final let mLayer_property = EBComputedProperty_BoardLineLayer ()

  //····················································································································
  //   Selection observable property: mWidth
  //····················································································································

  final let mWidth_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <BoardLine> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardLine <BoardObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mWidthUnit ()
    self.bind_property_mX1 ()
    self.bind_property_mX1Unit ()
    self.bind_property_mY1 ()
    self.bind_property_mY1Unit ()
    self.bind_property_mX2 ()
    self.bind_property_mX2Unit ()
    self.bind_property_mY2 ()
    self.bind_property_mY2Unit ()
    self.bind_property_mLayer ()
    self.bind_property_mWidth ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mWidthUnit
    self.mWidthUnit_property.mReadModelFunction = nil 
    self.mWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mWidthUnit_StopsBeingObserved (by: self.mWidthUnit_property)
  //--- mX1
    self.mX1_property.mReadModelFunction = nil 
    self.mX1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX1_StopsBeingObserved (by: self.mX1_property)
  //--- mX1Unit
    self.mX1Unit_property.mReadModelFunction = nil 
    self.mX1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX1Unit_StopsBeingObserved (by: self.mX1Unit_property)
  //--- mY1
    self.mY1_property.mReadModelFunction = nil 
    self.mY1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY1_StopsBeingObserved (by: self.mY1_property)
  //--- mY1Unit
    self.mY1Unit_property.mReadModelFunction = nil 
    self.mY1Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY1Unit_StopsBeingObserved (by: self.mY1Unit_property)
  //--- mX2
    self.mX2_property.mReadModelFunction = nil 
    self.mX2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX2_StopsBeingObserved (by: self.mX2_property)
  //--- mX2Unit
    self.mX2Unit_property.mReadModelFunction = nil 
    self.mX2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX2Unit_StopsBeingObserved (by: self.mX2Unit_property)
  //--- mY2
    self.mY2_property.mReadModelFunction = nil 
    self.mY2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY2_StopsBeingObserved (by: self.mY2_property)
  //--- mY2Unit
    self.mY2Unit_property.mReadModelFunction = nil 
    self.mY2Unit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY2Unit_StopsBeingObserved (by: self.mY2Unit_property)
  //--- mLayer
    self.mLayer_property.mReadModelFunction = nil 
    self.mLayer_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mLayer_StopsBeingObserved (by: self.mLayer_property)
  //--- mWidth
    self.mWidth_property.mReadModelFunction = nil 
    self.mWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mWidth_StopsBeingObserved (by: self.mWidth_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  } */

  //····················································································································

  private final func bind_property_mWidthUnit () {
    self.selectedArray_property.toMany_mWidthUnit_StartsBeingObserved (by: self.mWidthUnit_property)
    self.mWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX1 () {
    self.selectedArray_property.toMany_mX1_StartsBeingObserved (by: self.mX1_property)
    self.mX1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX1Unit () {
    self.selectedArray_property.toMany_mX1Unit_StartsBeingObserved (by: self.mX1Unit_property)
    self.mX1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mY1 () {
    self.selectedArray_property.toMany_mY1_StartsBeingObserved (by: self.mY1_property)
    self.mY1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mY1Unit () {
    self.selectedArray_property.toMany_mY1Unit_StartsBeingObserved (by: self.mY1Unit_property)
    self.mY1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY1Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY1Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX2 () {
    self.selectedArray_property.toMany_mX2_StartsBeingObserved (by: self.mX2_property)
    self.mX2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX2Unit () {
    self.selectedArray_property.toMany_mX2Unit_StartsBeingObserved (by: self.mX2Unit_property)
    self.mX2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mY2 () {
    self.selectedArray_property.toMany_mY2_StartsBeingObserved (by: self.mY2_property)
    self.mY2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mY2Unit () {
    self.selectedArray_property.toMany_mY2Unit_StartsBeingObserved (by: self.mY2Unit_property)
    self.mY2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY2Unit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY2Unit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mLayer () {
    self.selectedArray_property.toMany_mLayer_StartsBeingObserved (by: self.mLayer_property)
    self.mLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BoardLineLayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.mWriteModelFunction = { [weak self] (inValue : BoardLineLayer) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mLayer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mWidth () {
    self.selectedArray_property.toMany_mWidth_StartsBeingObserved (by: self.mWidth_property)
    self.mWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

