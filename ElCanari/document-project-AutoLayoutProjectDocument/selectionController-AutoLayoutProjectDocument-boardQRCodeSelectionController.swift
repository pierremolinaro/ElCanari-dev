//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument boardQRCodeSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_boardQRCodeSelectionController {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: mXUnit
  //····················································································································

  final let mXUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCenterY
  //····················································································································

  final let mCenterY_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mYUnit
  //····················································································································

  final let mYUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mDrawFrame
  //····················································································································

  final let mDrawFrame_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mModuleSize
  //····················································································································

  final let mModuleSize_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mModuleSizeUnit
  //····················································································································

  final let mModuleSizeUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mActualSizeUnit
  //····················································································································

  final let mActualSizeUnit_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mLayer
  //····················································································································

  final let mLayer_property = EBComputedProperty_BoardQRCodeLayer ()

  //····················································································································
  //   Selection observable property: mText
  //····················································································································

  final let mText_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: mCorrectionLevel
  //····················································································································

  final let mCorrectionLevel_property = EBComputedProperty_QRCodeCorrectionLevel ()

  //····················································································································
  //   Selection observable property: mRotation
  //····················································································································

  final let mRotation_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: mCenterX
  //····················································································································

  final let mCenterX_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: qrCodeDescriptor
  //····················································································································

  final let qrCodeDescriptor_property = EBTransientProperty <QRCodeDescriptor> ()

  //····················································································································
  //   Selection observable property: moduleCount
  //····················································································································

  final let moduleCount_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: actualImageSize
  //····················································································································

  final let actualImageSize_property = EBTransientProperty <Int> ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //····················································································································
  //   Selection observable property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <BoardQRCode> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardQRCode <BoardObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mXUnit ()
    self.bind_property_mCenterY ()
    self.bind_property_mYUnit ()
    self.bind_property_mDrawFrame ()
    self.bind_property_mModuleSize ()
    self.bind_property_mModuleSizeUnit ()
    self.bind_property_mActualSizeUnit ()
    self.bind_property_mLayer ()
    self.bind_property_mText ()
    self.bind_property_mCorrectionLevel ()
    self.bind_property_mRotation ()
    self.bind_property_mCenterX ()
    self.bind_property_qrCodeDescriptor ()
    self.bind_property_moduleCount ()
    self.bind_property_actualImageSize ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_signatureForERCChecking ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mXUnit
    self.mXUnit_property.mReadModelFunction = nil 
    self.mXUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXUnit_StopsBeingObserved (by: self.mXUnit_property)
  //--- mCenterY
    self.mCenterY_property.mReadModelFunction = nil 
    self.mCenterY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterY_StopsBeingObserved (by: self.mCenterY_property)
  //--- mYUnit
    self.mYUnit_property.mReadModelFunction = nil 
    self.mYUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYUnit_StopsBeingObserved (by: self.mYUnit_property)
  //--- mDrawFrame
    self.mDrawFrame_property.mReadModelFunction = nil 
    self.mDrawFrame_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDrawFrame_StopsBeingObserved (by: self.mDrawFrame_property)
  //--- mModuleSize
    self.mModuleSize_property.mReadModelFunction = nil 
    self.mModuleSize_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mModuleSize_StopsBeingObserved (by: self.mModuleSize_property)
  //--- mModuleSizeUnit
    self.mModuleSizeUnit_property.mReadModelFunction = nil 
    self.mModuleSizeUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mModuleSizeUnit_StopsBeingObserved (by: self.mModuleSizeUnit_property)
  //--- mActualSizeUnit
    self.mActualSizeUnit_property.mReadModelFunction = nil 
    self.mActualSizeUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mActualSizeUnit_StopsBeingObserved (by: self.mActualSizeUnit_property)
  //--- mLayer
    self.mLayer_property.mReadModelFunction = nil 
    self.mLayer_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mLayer_StopsBeingObserved (by: self.mLayer_property)
  //--- mText
    self.mText_property.mReadModelFunction = nil 
    self.mText_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mText_StopsBeingObserved (by: self.mText_property)
  //--- mCorrectionLevel
    self.mCorrectionLevel_property.mReadModelFunction = nil 
    self.mCorrectionLevel_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCorrectionLevel_StopsBeingObserved (by: self.mCorrectionLevel_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mCenterX
    self.mCenterX_property.mReadModelFunction = nil 
    self.mCenterX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterX_StopsBeingObserved (by: self.mCenterX_property)
  //--- qrCodeDescriptor
    self.qrCodeDescriptor_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_qrCodeDescriptor_StopsBeingObserved (by: self.qrCodeDescriptor_property)
  //--- moduleCount
    self.moduleCount_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_moduleCount_StopsBeingObserved (by: self.moduleCount_property)
  //--- actualImageSize
    self.actualImageSize_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_actualImageSize_StopsBeingObserved (by: self.actualImageSize_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_signatureForERCChecking_StopsBeingObserved (by: self.signatureForERCChecking_property)
  } */

  //····················································································································

  private final func bind_property_mXUnit () {
    self.selectedArray_property.toMany_mXUnit_StartsToBeObserved (by: self.mXUnit_property)
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCenterY () {
    self.selectedArray_property.toMany_mCenterY_StartsToBeObserved (by: self.mCenterY_property)
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mYUnit () {
    self.selectedArray_property.toMany_mYUnit_StartsToBeObserved (by: self.mYUnit_property)
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDrawFrame () {
    self.selectedArray_property.toMany_mDrawFrame_StartsToBeObserved (by: self.mDrawFrame_property)
    self.mDrawFrame_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDrawFrame_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDrawFrame_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDrawFrame_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mModuleSize () {
    self.selectedArray_property.toMany_mModuleSize_StartsToBeObserved (by: self.mModuleSize_property)
    self.mModuleSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mModuleSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mModuleSize_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mModuleSize_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mModuleSizeUnit () {
    self.selectedArray_property.toMany_mModuleSizeUnit_StartsToBeObserved (by: self.mModuleSizeUnit_property)
    self.mModuleSizeUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mModuleSizeUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mModuleSizeUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mModuleSizeUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mActualSizeUnit () {
    self.selectedArray_property.toMany_mActualSizeUnit_StartsToBeObserved (by: self.mActualSizeUnit_property)
    self.mActualSizeUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mActualSizeUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mActualSizeUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mActualSizeUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mLayer () {
    self.selectedArray_property.toMany_mLayer_StartsToBeObserved (by: self.mLayer_property)
    self.mLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BoardQRCodeLayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.mWriteModelFunction = { [weak self] (inValue : BoardQRCodeLayer) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mLayer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mText () {
    self.selectedArray_property.toMany_mText_StartsToBeObserved (by: self.mText_property)
    self.mText_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mText_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mText_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mText_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCorrectionLevel () {
    self.selectedArray_property.toMany_mCorrectionLevel_StartsToBeObserved (by: self.mCorrectionLevel_property)
    self.mCorrectionLevel_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <QRCodeCorrectionLevel> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCorrectionLevel_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCorrectionLevel_property.mWriteModelFunction = { [weak self] (inValue : QRCodeCorrectionLevel) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCorrectionLevel_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsToBeObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCenterX () {
    self.selectedArray_property.toMany_mCenterX_StartsToBeObserved (by: self.mCenterX_property)
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_qrCodeDescriptor () {
    self.selectedArray_property.toMany_qrCodeDescriptor_StartsToBeObserved (by: self.qrCodeDescriptor_property)
    self.qrCodeDescriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <QRCodeDescriptor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.qrCodeDescriptor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_moduleCount () {
    self.selectedArray_property.toMany_moduleCount_StartsToBeObserved (by: self.moduleCount_property)
    self.moduleCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.moduleCount_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_actualImageSize () {
    self.selectedArray_property.toMany_actualImageSize_StartsToBeObserved (by: self.actualImageSize_property)
    self.actualImageSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.actualImageSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsToBeObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsToBeObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.toMany_signatureForERCChecking_StartsToBeObserved (by: self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

