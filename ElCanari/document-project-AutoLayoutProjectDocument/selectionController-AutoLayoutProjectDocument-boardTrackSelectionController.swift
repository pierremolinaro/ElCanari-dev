//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument boardTrackSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_boardTrackSelectionController {

  //································································································

  init () {
    noteObjectAllocation (self)
  }

  //································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //································································································
  //   Selection observable property: mSide
  //································································································

  final let mSide_property = EBComputedProperty_TrackSide ()

  //································································································
  //   Selection observable property: mDefaultTrackWidthUnit
  //································································································

  final let mDefaultTrackWidthUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mCustomTrackWidth
  //································································································

  final let mCustomTrackWidth_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mCustomTrackWidthUnit
  //································································································

  final let mCustomTrackWidthUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mUsesCustomTrackWidth
  //································································································

  final let mUsesCustomTrackWidth_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mIsPreservedByAutoRouter
  //································································································

  final let mIsPreservedByAutoRouter_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mP1XUnit
  //································································································

  final let mP1XUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mP1YUnit
  //································································································

  final let mP1YUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mP2XUnit
  //································································································

  final let mP2XUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mP2YUnit
  //································································································

  final let mP2YUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mManualLockP1
  //································································································

  final let mManualLockP1_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mManualLockP2
  //································································································

  final let mManualLockP2_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mAddedToSolderMask
  //································································································

  final let mAddedToSolderMask_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mEndStyle
  //································································································

  final let mEndStyle_property = EBComputedProperty_TrackEndStyle ()

  //································································································
  //   Selection observable property: mDirectionLockOnKnobDragging
  //································································································

  final let mDirectionLockOnKnobDragging_property = EBComputedProperty_TrackLockDirection ()

  //································································································
  //   Selection observable property: actualTrackWidth
  //································································································

  final let actualTrackWidth_property = EBTransientProperty <Int> ()

  //································································································
  //   Selection observable property: netName
  //································································································

  final let netName_property = EBTransientProperty <String> ()

  //································································································
  //   Selection observable property: netClassName
  //································································································

  final let netClassName_property = EBTransientProperty <String> ()

  //································································································
  //   Selection observable property: netClassTrackWidth
  //································································································

  final let netClassTrackWidth_property = EBTransientProperty <Int> ()

  //································································································
  //   Selection observable property: netClassViaHoleDiameter
  //································································································

  final let netClassViaHoleDiameter_property = EBTransientProperty <Int> ()

  //································································································
  //   Selection observable property: netClassViaPadDiameter
  //································································································

  final let netClassViaPadDiameter_property = EBTransientProperty <Int> ()

  //································································································
  //   Selection observable property: trackLengthInCanariUnit
  //································································································

  final let trackLengthInCanariUnit_property = EBTransientProperty <Double> ()

  //································································································
  //   Selection observable property: trackSide
  //································································································

  final let trackSide_property = EBTransientProperty <TrackSide> ()

  //································································································
  //   Selection observable property: trackIsOnFrontOrBackLayer
  //································································································

  final let trackIsOnFrontOrBackLayer_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: signatureForERCChecking
  //································································································

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //································································································
  //   Selection observable property: p1ConnectedToSomePad
  //································································································

  final let p1ConnectedToSomePad_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: p2ConnectedToSomePad
  //································································································

  final let p2ConnectedToSomePad_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: trackDirectionInDegrees
  //································································································

  final let trackDirectionInDegrees_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: computedP1X
  //································································································

  final let computedP1X_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: computedP1Y
  //································································································

  final let computedP1Y_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: computedP2X
  //································································································

  final let computedP2X_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: computedP2Y
  //································································································

  final let computedP2Y_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: objectDisplay
  //································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selection observable property: p1CanMove
  //································································································

  final let p1CanMove_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: p2CanMove
  //································································································

  final let p2CanMove_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: trackCanRotate
  //································································································

  final let trackCanRotate_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: selectionDisplay
  //································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selected array (not observable)
  //································································································

  var selectedArray : EBReferenceArray <BoardTrack> { return self.selectedArray_property.propval }

  //································································································
  //   BIND SELECTION
  //································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardTrack <BoardObject> ()

  //································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mSide ()
    self.bind_property_mDefaultTrackWidthUnit ()
    self.bind_property_mCustomTrackWidth ()
    self.bind_property_mCustomTrackWidthUnit ()
    self.bind_property_mUsesCustomTrackWidth ()
    self.bind_property_mIsPreservedByAutoRouter ()
    self.bind_property_mP1XUnit ()
    self.bind_property_mP1YUnit ()
    self.bind_property_mP2XUnit ()
    self.bind_property_mP2YUnit ()
    self.bind_property_mManualLockP1 ()
    self.bind_property_mManualLockP2 ()
    self.bind_property_mAddedToSolderMask ()
    self.bind_property_mEndStyle ()
    self.bind_property_mDirectionLockOnKnobDragging ()
    self.bind_property_actualTrackWidth ()
    self.bind_property_netName ()
    self.bind_property_netClassName ()
    self.bind_property_netClassTrackWidth ()
    self.bind_property_netClassViaHoleDiameter ()
    self.bind_property_netClassViaPadDiameter ()
    self.bind_property_trackLengthInCanariUnit ()
    self.bind_property_trackSide ()
    self.bind_property_trackIsOnFrontOrBackLayer ()
    self.bind_property_signatureForERCChecking ()
    self.bind_property_p1ConnectedToSomePad ()
    self.bind_property_p2ConnectedToSomePad ()
    self.bind_property_trackDirectionInDegrees ()
    self.bind_property_computedP1X ()
    self.bind_property_computedP1Y ()
    self.bind_property_computedP2X ()
    self.bind_property_computedP2Y ()
    self.bind_property_objectDisplay ()
    self.bind_property_p1CanMove ()
    self.bind_property_p2CanMove ()
    self.bind_property_trackCanRotate ()
    self.bind_property_selectionDisplay ()
  }

  //································································································
  //   UNBIND SELECTION
  //································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mSide
    self.mSide_property.mReadModelFunction = nil 
    self.mSide_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSide_StopsBeingObserved (by: self.mSide_property)
  //--- mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = nil 
    self.mDefaultTrackWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDefaultTrackWidthUnit_StopsBeingObserved (by: self.mDefaultTrackWidthUnit_property)
  //--- mCustomTrackWidth
    self.mCustomTrackWidth_property.mReadModelFunction = nil 
    self.mCustomTrackWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCustomTrackWidth_StopsBeingObserved (by: self.mCustomTrackWidth_property)
  //--- mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.mReadModelFunction = nil 
    self.mCustomTrackWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCustomTrackWidthUnit_StopsBeingObserved (by: self.mCustomTrackWidthUnit_property)
  //--- mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.mReadModelFunction = nil 
    self.mUsesCustomTrackWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mUsesCustomTrackWidth_StopsBeingObserved (by: self.mUsesCustomTrackWidth_property)
  //--- mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.mReadModelFunction = nil 
    self.mIsPreservedByAutoRouter_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mIsPreservedByAutoRouter_StopsBeingObserved (by: self.mIsPreservedByAutoRouter_property)
  //--- mP1XUnit
    self.mP1XUnit_property.mReadModelFunction = nil 
    self.mP1XUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mP1XUnit_StopsBeingObserved (by: self.mP1XUnit_property)
  //--- mP1YUnit
    self.mP1YUnit_property.mReadModelFunction = nil 
    self.mP1YUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mP1YUnit_StopsBeingObserved (by: self.mP1YUnit_property)
  //--- mP2XUnit
    self.mP2XUnit_property.mReadModelFunction = nil 
    self.mP2XUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mP2XUnit_StopsBeingObserved (by: self.mP2XUnit_property)
  //--- mP2YUnit
    self.mP2YUnit_property.mReadModelFunction = nil 
    self.mP2YUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mP2YUnit_StopsBeingObserved (by: self.mP2YUnit_property)
  //--- mManualLockP1
    self.mManualLockP1_property.mReadModelFunction = nil 
    self.mManualLockP1_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mManualLockP1_StopsBeingObserved (by: self.mManualLockP1_property)
  //--- mManualLockP2
    self.mManualLockP2_property.mReadModelFunction = nil 
    self.mManualLockP2_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mManualLockP2_StopsBeingObserved (by: self.mManualLockP2_property)
  //--- mAddedToSolderMask
    self.mAddedToSolderMask_property.mReadModelFunction = nil 
    self.mAddedToSolderMask_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mAddedToSolderMask_StopsBeingObserved (by: self.mAddedToSolderMask_property)
  //--- mEndStyle
    self.mEndStyle_property.mReadModelFunction = nil 
    self.mEndStyle_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mEndStyle_StopsBeingObserved (by: self.mEndStyle_property)
  //--- mDirectionLockOnKnobDragging
    self.mDirectionLockOnKnobDragging_property.mReadModelFunction = nil 
    self.mDirectionLockOnKnobDragging_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDirectionLockOnKnobDragging_StopsBeingObserved (by: self.mDirectionLockOnKnobDragging_property)
  //--- actualTrackWidth
    self.actualTrackWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_actualTrackWidth_StopsBeingObserved (by: self.actualTrackWidth_property)
  //--- netName
    self.netName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netName_StopsBeingObserved (by: self.netName_property)
  //--- netClassName
    self.netClassName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netClassName_StopsBeingObserved (by: self.netClassName_property)
  //--- netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netClassTrackWidth_StopsBeingObserved (by: self.netClassTrackWidth_property)
  //--- netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netClassViaHoleDiameter_StopsBeingObserved (by: self.netClassViaHoleDiameter_property)
  //--- netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netClassViaPadDiameter_StopsBeingObserved (by: self.netClassViaPadDiameter_property)
  //--- trackLengthInCanariUnit
    self.trackLengthInCanariUnit_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_trackLengthInCanariUnit_StopsBeingObserved (by: self.trackLengthInCanariUnit_property)
  //--- trackSide
    self.trackSide_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_trackSide_StopsBeingObserved (by: self.trackSide_property)
  //--- trackIsOnFrontOrBackLayer
    self.trackIsOnFrontOrBackLayer_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_trackIsOnFrontOrBackLayer_StopsBeingObserved (by: self.trackIsOnFrontOrBackLayer_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_signatureForERCChecking_StopsBeingObserved (by: self.signatureForERCChecking_property)
  //--- p1ConnectedToSomePad
    self.p1ConnectedToSomePad_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_p1ConnectedToSomePad_StopsBeingObserved (by: self.p1ConnectedToSomePad_property)
  //--- p2ConnectedToSomePad
    self.p2ConnectedToSomePad_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_p2ConnectedToSomePad_StopsBeingObserved (by: self.p2ConnectedToSomePad_property)
  //--- trackDirectionInDegrees
    self.trackDirectionInDegrees_property.mReadModelFunction = nil 
    self.trackDirectionInDegrees_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_trackDirectionInDegrees_StopsBeingObserved (by: self.trackDirectionInDegrees_property)
  //--- computedP1X
    self.computedP1X_property.mReadModelFunction = nil 
    self.computedP1X_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_computedP1X_StopsBeingObserved (by: self.computedP1X_property)
  //--- computedP1Y
    self.computedP1Y_property.mReadModelFunction = nil 
    self.computedP1Y_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_computedP1Y_StopsBeingObserved (by: self.computedP1Y_property)
  //--- computedP2X
    self.computedP2X_property.mReadModelFunction = nil 
    self.computedP2X_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_computedP2X_StopsBeingObserved (by: self.computedP2X_property)
  //--- computedP2Y
    self.computedP2Y_property.mReadModelFunction = nil 
    self.computedP2Y_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_computedP2Y_StopsBeingObserved (by: self.computedP2Y_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- p1CanMove
    self.p1CanMove_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_p1CanMove_StopsBeingObserved (by: self.p1CanMove_property)
  //--- p2CanMove
    self.p2CanMove_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_p2CanMove_StopsBeingObserved (by: self.p2CanMove_property)
  //--- trackCanRotate
    self.trackCanRotate_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_trackCanRotate_StopsBeingObserved (by: self.trackCanRotate_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  } */

  //································································································

  private final func bind_property_mSide () {
    self.selectedArray_property.toMany_mSide_StartsBeingObserved (by: self.mSide_property)
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <TrackSide> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.mWriteModelFunction = { [weak self] (inValue : TrackSide) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSide_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mDefaultTrackWidthUnit () {
    self.selectedArray_property.toMany_mDefaultTrackWidthUnit_StartsBeingObserved (by: self.mDefaultTrackWidthUnit_property)
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDefaultTrackWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDefaultTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDefaultTrackWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mCustomTrackWidth () {
    self.selectedArray_property.toMany_mCustomTrackWidth_StartsBeingObserved (by: self.mCustomTrackWidth_property)
    self.mCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomTrackWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomTrackWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mCustomTrackWidthUnit () {
    self.selectedArray_property.toMany_mCustomTrackWidthUnit_StartsBeingObserved (by: self.mCustomTrackWidthUnit_property)
    self.mCustomTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomTrackWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomTrackWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mUsesCustomTrackWidth () {
    self.selectedArray_property.toMany_mUsesCustomTrackWidth_StartsBeingObserved (by: self.mUsesCustomTrackWidth_property)
    self.mUsesCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mUsesCustomTrackWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mUsesCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mUsesCustomTrackWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mIsPreservedByAutoRouter () {
    self.selectedArray_property.toMany_mIsPreservedByAutoRouter_StartsBeingObserved (by: self.mIsPreservedByAutoRouter_property)
    self.mIsPreservedByAutoRouter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsPreservedByAutoRouter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsPreservedByAutoRouter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsPreservedByAutoRouter_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mP1XUnit () {
    self.selectedArray_property.toMany_mP1XUnit_StartsBeingObserved (by: self.mP1XUnit_property)
    self.mP1XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mP1XUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mP1XUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mP1XUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mP1YUnit () {
    self.selectedArray_property.toMany_mP1YUnit_StartsBeingObserved (by: self.mP1YUnit_property)
    self.mP1YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mP1YUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mP1YUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mP1YUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mP2XUnit () {
    self.selectedArray_property.toMany_mP2XUnit_StartsBeingObserved (by: self.mP2XUnit_property)
    self.mP2XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mP2XUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mP2XUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mP2XUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mP2YUnit () {
    self.selectedArray_property.toMany_mP2YUnit_StartsBeingObserved (by: self.mP2YUnit_property)
    self.mP2YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mP2YUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mP2YUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mP2YUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mManualLockP1 () {
    self.selectedArray_property.toMany_mManualLockP1_StartsBeingObserved (by: self.mManualLockP1_property)
    self.mManualLockP1_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mManualLockP1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP1_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mManualLockP1_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mManualLockP2 () {
    self.selectedArray_property.toMany_mManualLockP2_StartsBeingObserved (by: self.mManualLockP2_property)
    self.mManualLockP2_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mManualLockP2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP2_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mManualLockP2_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mAddedToSolderMask () {
    self.selectedArray_property.toMany_mAddedToSolderMask_StartsBeingObserved (by: self.mAddedToSolderMask_property)
    self.mAddedToSolderMask_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mAddedToSolderMask_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mAddedToSolderMask_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mAddedToSolderMask_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mEndStyle () {
    self.selectedArray_property.toMany_mEndStyle_StartsBeingObserved (by: self.mEndStyle_property)
    self.mEndStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <TrackEndStyle> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mEndStyle_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mEndStyle_property.mWriteModelFunction = { [weak self] (inValue : TrackEndStyle) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mEndStyle_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mDirectionLockOnKnobDragging () {
    self.selectedArray_property.toMany_mDirectionLockOnKnobDragging_StartsBeingObserved (by: self.mDirectionLockOnKnobDragging_property)
    self.mDirectionLockOnKnobDragging_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <TrackLockDirection> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDirectionLockOnKnobDragging_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDirectionLockOnKnobDragging_property.mWriteModelFunction = { [weak self] (inValue : TrackLockDirection) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDirectionLockOnKnobDragging_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_actualTrackWidth () {
    self.selectedArray_property.toMany_actualTrackWidth_StartsBeingObserved (by: self.actualTrackWidth_property)
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.actualTrackWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netName () {
    self.selectedArray_property.toMany_netName_StartsBeingObserved (by: self.netName_property)
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netClassName () {
    self.selectedArray_property.toMany_netClassName_StartsBeingObserved (by: self.netClassName_property)
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netClassTrackWidth () {
    self.selectedArray_property.toMany_netClassTrackWidth_StartsBeingObserved (by: self.netClassTrackWidth_property)
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassTrackWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netClassViaHoleDiameter () {
    self.selectedArray_property.toMany_netClassViaHoleDiameter_StartsBeingObserved (by: self.netClassViaHoleDiameter_property)
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassViaHoleDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netClassViaPadDiameter () {
    self.selectedArray_property.toMany_netClassViaPadDiameter_StartsBeingObserved (by: self.netClassViaPadDiameter_property)
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassViaPadDiameter_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_trackLengthInCanariUnit () {
    self.selectedArray_property.toMany_trackLengthInCanariUnit_StartsBeingObserved (by: self.trackLengthInCanariUnit_property)
    self.trackLengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackLengthInCanariUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_trackSide () {
    self.selectedArray_property.toMany_trackSide_StartsBeingObserved (by: self.trackSide_property)
    self.trackSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <TrackSide> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_trackIsOnFrontOrBackLayer () {
    self.selectedArray_property.toMany_trackIsOnFrontOrBackLayer_StartsBeingObserved (by: self.trackIsOnFrontOrBackLayer_property)
    self.trackIsOnFrontOrBackLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackIsOnFrontOrBackLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.toMany_signatureForERCChecking_StartsBeingObserved (by: self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_p1ConnectedToSomePad () {
    self.selectedArray_property.toMany_p1ConnectedToSomePad_StartsBeingObserved (by: self.p1ConnectedToSomePad_property)
    self.p1ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p1ConnectedToSomePad_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_p2ConnectedToSomePad () {
    self.selectedArray_property.toMany_p2ConnectedToSomePad_StartsBeingObserved (by: self.p2ConnectedToSomePad_property)
    self.p2ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2ConnectedToSomePad_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_trackDirectionInDegrees () {
    self.selectedArray_property.toMany_trackDirectionInDegrees_StartsBeingObserved (by: self.trackDirectionInDegrees_property)
    self.trackDirectionInDegrees_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackDirectionInDegrees_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.trackDirectionInDegrees_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.trackDirectionInDegrees_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_computedP1X () {
    self.selectedArray_property.toMany_computedP1X_StartsBeingObserved (by: self.computedP1X_property)
    self.computedP1X_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.computedP1X_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP1X_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.computedP1X_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_computedP1Y () {
    self.selectedArray_property.toMany_computedP1Y_StartsBeingObserved (by: self.computedP1Y_property)
    self.computedP1Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.computedP1Y_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP1Y_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.computedP1Y_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_computedP2X () {
    self.selectedArray_property.toMany_computedP2X_StartsBeingObserved (by: self.computedP2X_property)
    self.computedP2X_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.computedP2X_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP2X_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.computedP2X_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_computedP2Y () {
    self.selectedArray_property.toMany_computedP2Y_StartsBeingObserved (by: self.computedP2Y_property)
    self.computedP2Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.computedP2Y_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP2Y_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.computedP2Y_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_p1CanMove () {
    self.selectedArray_property.toMany_p1CanMove_StartsBeingObserved (by: self.p1CanMove_property)
    self.p1CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p1CanMove_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_p2CanMove () {
    self.selectedArray_property.toMany_p2CanMove_StartsBeingObserved (by: self.p2CanMove_property)
    self.p2CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2CanMove_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_trackCanRotate () {
    self.selectedArray_property.toMany_trackCanRotate_StartsBeingObserved (by: self.trackCanRotate_property)
    self.trackCanRotate_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackCanRotate_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

