//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument componentSymbolSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutProjectDocument_componentSymbolSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: mCenterX
  //····················································································································

  let mCenterX_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mCenterY
  //····················································································································

  let mCenterY_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mRotation
  //····················································································································

  let mRotation_property = EBPropertyProxy_QuadrantRotation ()

  //····················································································································
  //   Selection observable property: mMirror
  //····················································································································

  let mMirror_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: mSymbolInstanceName
  //····················································································································

  let mSymbolInstanceName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: mSymbolTypeName
  //····················································································································

  let mSymbolTypeName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: mDisplayComponentNameOffsetX
  //····················································································································

  let mDisplayComponentNameOffsetX_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mDisplayComponentNameOffsetY
  //····················································································································

  let mDisplayComponentNameOffsetY_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mDisplayComponentValue
  //····················································································································

  let mDisplayComponentValue_property = EBPropertyProxy_Bool ()

  //····················································································································
  //   Selection observable property: mDisplayComponentValueOffsetX
  //····················································································································

  let mDisplayComponentValueOffsetX_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mDisplayComponentValueOffsetY
  //····················································································································

  let mDisplayComponentValueOffsetY_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Atomic proxy property: componentValueProxy
  //····················································································································

  let componentValueProxy_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: symbolInfo
  //····················································································································

  let symbolInfo_property = EBTransientProperty_ComponentSymbolInfo ()

  //····················································································································
  //   Selection observable property: pinPadAssignments
  //····················································································································

  let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: symbolInSchematic
  //····················································································································

  let symbolInSchematic_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <ComponentSymbolInProject> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_ComponentSymbolInProject <SchematicObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_SchematicObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mCenterX ()
    self.bind_property_mCenterY ()
    self.bind_property_mRotation ()
    self.bind_property_mMirror ()
    self.bind_property_mSymbolInstanceName ()
    self.bind_property_mSymbolTypeName ()
    self.bind_property_mDisplayComponentNameOffsetX ()
    self.bind_property_mDisplayComponentNameOffsetY ()
    self.bind_property_mDisplayComponentValue ()
    self.bind_property_mDisplayComponentValueOffsetX ()
    self.bind_property_mDisplayComponentValueOffsetY ()
    self.bind_property_componentValueProxy ()
    self.bind_property_componentName ()
    self.bind_property_deviceName ()
    self.bind_property_symbolInfo ()
    self.bind_property_pinPadAssignments ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_symbolInSchematic ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mCenterX
    self.mCenterX_property.mReadModelFunction = nil 
    self.mCenterX_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCenterX (self.mCenterX_property)
  //--- mCenterY
    self.mCenterY_property.mReadModelFunction = nil 
    self.mCenterY_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCenterY (self.mCenterY_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mRotation (self.mRotation_property)
  //--- mMirror
    self.mMirror_property.mReadModelFunction = nil 
    self.mMirror_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mMirror (self.mMirror_property)
  //--- mSymbolInstanceName
    self.mSymbolInstanceName_property.mReadModelFunction = nil 
    self.mSymbolInstanceName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mSymbolInstanceName (self.mSymbolInstanceName_property)
  //--- mSymbolTypeName
    self.mSymbolTypeName_property.mReadModelFunction = nil 
    self.mSymbolTypeName_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mSymbolTypeName (self.mSymbolTypeName_property)
  //--- mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.mReadModelFunction = nil 
    self.mDisplayComponentNameOffsetX_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDisplayComponentNameOffsetX (self.mDisplayComponentNameOffsetX_property)
  //--- mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.mReadModelFunction = nil 
    self.mDisplayComponentNameOffsetY_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDisplayComponentNameOffsetY (self.mDisplayComponentNameOffsetY_property)
  //--- mDisplayComponentValue
    self.mDisplayComponentValue_property.mReadModelFunction = nil 
    self.mDisplayComponentValue_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDisplayComponentValue (self.mDisplayComponentValue_property)
  //--- mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.mReadModelFunction = nil 
    self.mDisplayComponentValueOffsetX_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDisplayComponentValueOffsetX (self.mDisplayComponentValueOffsetX_property)
  //--- mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.mReadModelFunction = nil 
    self.mDisplayComponentValueOffsetY_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDisplayComponentValueOffsetY (self.mDisplayComponentValueOffsetY_property)
  //--- componentName
    self.componentName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_componentName (self.componentName_property)
  //--- deviceName
    self.deviceName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_deviceName (self.deviceName_property)
  //--- symbolInfo
    self.symbolInfo_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_symbolInfo (self.symbolInfo_property)
  //--- pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- symbolInSchematic
    self.symbolInSchematic_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_symbolInSchematic (self.symbolInSchematic_property)
  } */

  //····················································································································

  private final func bind_property_mCenterX () {
    self.selectedArray_property.addEBObserverOf_mCenterX (self.mCenterX_property)
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mCenterY () {
    self.selectedArray_property.addEBObserverOf_mCenterY (self.mCenterY_property)
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mRotation () {
    self.selectedArray_property.addEBObserverOf_mRotation (self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <QuadrantRotation> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : QuadrantRotation) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mMirror () {
    self.selectedArray_property.addEBObserverOf_mMirror (self.mMirror_property)
    self.mMirror_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mMirror_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mMirror_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mMirror_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mSymbolInstanceName () {
    self.selectedArray_property.addEBObserverOf_mSymbolInstanceName (self.mSymbolInstanceName_property)
    self.mSymbolInstanceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSymbolInstanceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSymbolInstanceName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mSymbolTypeName () {
    self.selectedArray_property.addEBObserverOf_mSymbolTypeName (self.mSymbolTypeName_property)
    self.mSymbolTypeName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSymbolTypeName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypeName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSymbolTypeName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDisplayComponentNameOffsetX () {
    self.selectedArray_property.addEBObserverOf_mDisplayComponentNameOffsetX (self.mDisplayComponentNameOffsetX_property)
    self.mDisplayComponentNameOffsetX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentNameOffsetX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentNameOffsetX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDisplayComponentNameOffsetY () {
    self.selectedArray_property.addEBObserverOf_mDisplayComponentNameOffsetY (self.mDisplayComponentNameOffsetY_property)
    self.mDisplayComponentNameOffsetY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentNameOffsetY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentNameOffsetY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDisplayComponentValue () {
    self.selectedArray_property.addEBObserverOf_mDisplayComponentValue (self.mDisplayComponentValue_property)
    self.mDisplayComponentValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValue_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValue_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDisplayComponentValueOffsetX () {
    self.selectedArray_property.addEBObserverOf_mDisplayComponentValueOffsetX (self.mDisplayComponentValueOffsetX_property)
    self.mDisplayComponentValueOffsetX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValueOffsetX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValueOffsetX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mDisplayComponentValueOffsetY () {
    self.selectedArray_property.addEBObserverOf_mDisplayComponentValueOffsetY (self.mDisplayComponentValueOffsetY_property)
    self.mDisplayComponentValueOffsetY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValueOffsetY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValueOffsetY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_componentValueProxy () {
    self.selectedArray_property.addEBObserverOf_componentValueProxy (self.componentValueProxy_property)
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentValueProxy_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.componentValueProxy_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_componentName () {
    self.selectedArray_property.addEBObserverOf_componentName (self.componentName_property)
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_deviceName () {
    self.selectedArray_property.addEBObserverOf_deviceName (self.deviceName_property)
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_symbolInfo () {
    self.selectedArray_property.addEBObserverOf_symbolInfo (self.symbolInfo_property)
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ComponentSymbolInfo> ()
          var isMultipleSelection = false
          for object in v {
            switch object.symbolInfo_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_pinPadAssignments () {
    self.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ThreeStringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinPadAssignments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_symbolInSchematic () {
    self.selectedArray_property.addEBObserverOf_symbolInSchematic (self.symbolInSchematic_property)
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.symbolInSchematic_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

