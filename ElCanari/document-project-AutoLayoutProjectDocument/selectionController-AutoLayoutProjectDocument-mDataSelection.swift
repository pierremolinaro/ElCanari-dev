//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutProjectDocument mDataSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_mDataSelection {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //   Selection observable property: drawBoardLimits
  //····················································································································

  var drawBoardLimits_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawComponentNamesBottomSide
  //····················································································································

  var drawComponentNamesBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawComponentNamesTopSide
  //····················································································································

  var drawComponentNamesTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawComponentValuesBottomSide
  //····················································································································

  var drawComponentValuesBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawComponentValuesTopSide
  //····················································································································

  var drawComponentValuesTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawInternalBoardLimits
  //····················································································································

  var drawInternalBoardLimits_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawPackageLegendBottomSide
  //····················································································································

  var drawPackageLegendBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawPackageLegendTopSide
  //····················································································································

  var drawPackageLegendTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawPadHolesInPDF
  //····················································································································

  var drawPadHolesInPDF_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawPadsBottomSide
  //····················································································································

  var drawPadsBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawPadsTopSide
  //····················································································································

  var drawPadsTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTextsLayoutBottomSide
  //····················································································································

  var drawTextsLayoutBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTextsLayoutTopSide
  //····················································································································

  var drawTextsLayoutTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTextsLegendBottomSide
  //····················································································································

  var drawTextsLegendBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTextsLegendTopSide
  //····················································································································

  var drawTextsLegendTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksBottomSide
  //····················································································································

  var drawTracksBottomSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksInner1Layer
  //····················································································································

  var drawTracksInner1Layer_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksInner2Layer
  //····················································································································

  var drawTracksInner2Layer_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksInner3Layer
  //····················································································································

  var drawTracksInner3Layer_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksInner4Layer
  //····················································································································

  var drawTracksInner4Layer_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTracksTopSide
  //····················································································································

  var drawTracksTopSide_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawTraversingPads
  //····················································································································

  var drawTraversingPads_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: drawVias
  //····················································································································

  var drawVias_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: emptyFileExtensionImage
  //····················································································································

  var emptyFileExtensionImage_property = EBTransientProperty <NSImage> ()

  //····················································································································
  //   Selection observable property: fileExtension
  //····················································································································

  var fileExtension_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: hasNoData
  //····················································································································

  var hasNoData_property = EBTransientProperty <Bool> ()

  //····················································································································
  //   Selection observable property: horizontalMirror
  //····················································································································

  var horizontalMirror_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: mArtwork
  //····················································································································

  //····················································································································
  //   Selection observable property: measurementUnitForPadHoleInPDF
  //····················································································································

  var measurementUnitForPadHoleInPDF_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: name
  //····················································································································

  var name_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: padHoleDiameterInPDF
  //····················································································································

  var padHoleDiameterInPDF_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: parameterStatusImage
  //····················································································································

  var parameterStatusImage_property = EBTransientProperty <NSImage> ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_ArtworkFileGenerationParameters? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    self.mModel = model
    self.bind_property_drawBoardLimits (model: model)
    self.bind_property_drawComponentNamesBottomSide (model: model)
    self.bind_property_drawComponentNamesTopSide (model: model)
    self.bind_property_drawComponentValuesBottomSide (model: model)
    self.bind_property_drawComponentValuesTopSide (model: model)
    self.bind_property_drawInternalBoardLimits (model: model)
    self.bind_property_drawPackageLegendBottomSide (model: model)
    self.bind_property_drawPackageLegendTopSide (model: model)
    self.bind_property_drawPadHolesInPDF (model: model)
    self.bind_property_drawPadsBottomSide (model: model)
    self.bind_property_drawPadsTopSide (model: model)
    self.bind_property_drawTextsLayoutBottomSide (model: model)
    self.bind_property_drawTextsLayoutTopSide (model: model)
    self.bind_property_drawTextsLegendBottomSide (model: model)
    self.bind_property_drawTextsLegendTopSide (model: model)
    self.bind_property_drawTracksBottomSide (model: model)
    self.bind_property_drawTracksInner1Layer (model: model)
    self.bind_property_drawTracksInner2Layer (model: model)
    self.bind_property_drawTracksInner3Layer (model: model)
    self.bind_property_drawTracksInner4Layer (model: model)
    self.bind_property_drawTracksTopSide (model: model)
    self.bind_property_drawTraversingPads (model: model)
    self.bind_property_drawVias (model: model)
    self.bind_property_emptyFileExtensionImage (model: model)
    self.bind_property_fileExtension (model: model)
    self.bind_property_hasNoData (model: model)
    self.bind_property_horizontalMirror (model: model)
    self.bind_property_measurementUnitForPadHoleInPDF (model: model)
    self.bind_property_name (model: model)
    self.bind_property_padHoleDiameterInPDF (model: model)
    self.bind_property_parameterStatusImage (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
  //--- drawBoardLimits
    self.drawBoardLimits_property.mReadModelFunction = nil 
    self.drawBoardLimits_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawBoardLimits_StopsBeingObserved (by: self.drawBoardLimits_property)
  //--- drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.mReadModelFunction = nil 
    self.drawComponentNamesBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawComponentNamesBottomSide_StopsBeingObserved (by: self.drawComponentNamesBottomSide_property)
  //--- drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.mReadModelFunction = nil 
    self.drawComponentNamesTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawComponentNamesTopSide_StopsBeingObserved (by: self.drawComponentNamesTopSide_property)
  //--- drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.mReadModelFunction = nil 
    self.drawComponentValuesBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawComponentValuesBottomSide_StopsBeingObserved (by: self.drawComponentValuesBottomSide_property)
  //--- drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.mReadModelFunction = nil 
    self.drawComponentValuesTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawComponentValuesTopSide_StopsBeingObserved (by: self.drawComponentValuesTopSide_property)
  //--- drawInternalBoardLimits
    self.drawInternalBoardLimits_property.mReadModelFunction = nil 
    self.drawInternalBoardLimits_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawInternalBoardLimits_StopsBeingObserved (by: self.drawInternalBoardLimits_property)
  //--- drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.mReadModelFunction = nil 
    self.drawPackageLegendBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawPackageLegendBottomSide_StopsBeingObserved (by: self.drawPackageLegendBottomSide_property)
  //--- drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.mReadModelFunction = nil 
    self.drawPackageLegendTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawPackageLegendTopSide_StopsBeingObserved (by: self.drawPackageLegendTopSide_property)
  //--- drawPadHolesInPDF
    self.drawPadHolesInPDF_property.mReadModelFunction = nil 
    self.drawPadHolesInPDF_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawPadHolesInPDF_StopsBeingObserved (by: self.drawPadHolesInPDF_property)
  //--- drawPadsBottomSide
    self.drawPadsBottomSide_property.mReadModelFunction = nil 
    self.drawPadsBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawPadsBottomSide_StopsBeingObserved (by: self.drawPadsBottomSide_property)
  //--- drawPadsTopSide
    self.drawPadsTopSide_property.mReadModelFunction = nil 
    self.drawPadsTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawPadsTopSide_StopsBeingObserved (by: self.drawPadsTopSide_property)
  //--- drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.mReadModelFunction = nil 
    self.drawTextsLayoutBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTextsLayoutBottomSide_StopsBeingObserved (by: self.drawTextsLayoutBottomSide_property)
  //--- drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.mReadModelFunction = nil 
    self.drawTextsLayoutTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTextsLayoutTopSide_StopsBeingObserved (by: self.drawTextsLayoutTopSide_property)
  //--- drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.mReadModelFunction = nil 
    self.drawTextsLegendBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTextsLegendBottomSide_StopsBeingObserved (by: self.drawTextsLegendBottomSide_property)
  //--- drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.mReadModelFunction = nil 
    self.drawTextsLegendTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTextsLegendTopSide_StopsBeingObserved (by: self.drawTextsLegendTopSide_property)
  //--- drawTracksBottomSide
    self.drawTracksBottomSide_property.mReadModelFunction = nil 
    self.drawTracksBottomSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksBottomSide_StopsBeingObserved (by: self.drawTracksBottomSide_property)
  //--- drawTracksInner1Layer
    self.drawTracksInner1Layer_property.mReadModelFunction = nil 
    self.drawTracksInner1Layer_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksInner1Layer_StopsBeingObserved (by: self.drawTracksInner1Layer_property)
  //--- drawTracksInner2Layer
    self.drawTracksInner2Layer_property.mReadModelFunction = nil 
    self.drawTracksInner2Layer_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksInner2Layer_StopsBeingObserved (by: self.drawTracksInner2Layer_property)
  //--- drawTracksInner3Layer
    self.drawTracksInner3Layer_property.mReadModelFunction = nil 
    self.drawTracksInner3Layer_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksInner3Layer_StopsBeingObserved (by: self.drawTracksInner3Layer_property)
  //--- drawTracksInner4Layer
    self.drawTracksInner4Layer_property.mReadModelFunction = nil 
    self.drawTracksInner4Layer_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksInner4Layer_StopsBeingObserved (by: self.drawTracksInner4Layer_property)
  //--- drawTracksTopSide
    self.drawTracksTopSide_property.mReadModelFunction = nil 
    self.drawTracksTopSide_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTracksTopSide_StopsBeingObserved (by: self.drawTracksTopSide_property)
  //--- drawTraversingPads
    self.drawTraversingPads_property.mReadModelFunction = nil 
    self.drawTraversingPads_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawTraversingPads_StopsBeingObserved (by: self.drawTraversingPads_property)
  //--- drawVias
    self.drawVias_property.mReadModelFunction = nil 
    self.drawVias_property.mWriteModelFunction = nil 
    self.mModel?.toMany_drawVias_StopsBeingObserved (by: self.drawVias_property)
  //--- emptyFileExtensionImage
    self.emptyFileExtensionImage_property.mReadModelFunction = nil 
    self.mModel?.toMany_emptyFileExtensionImage_StopsBeingObserved (by: self.emptyFileExtensionImage_property)
  //--- fileExtension
    self.fileExtension_property.mReadModelFunction = nil 
    self.fileExtension_property.mWriteModelFunction = nil 
    self.mModel?.toMany_fileExtension_StopsBeingObserved (by: self.fileExtension_property)
  //--- hasNoData
    self.hasNoData_property.mReadModelFunction = nil 
    self.mModel?.toMany_hasNoData_StopsBeingObserved (by: self.hasNoData_property)
  //--- horizontalMirror
    self.horizontalMirror_property.mReadModelFunction = nil 
    self.horizontalMirror_property.mWriteModelFunction = nil 
    self.mModel?.toMany_horizontalMirror_StopsBeingObserved (by: self.horizontalMirror_property)
  //--- measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.mReadModelFunction = nil 
    self.measurementUnitForPadHoleInPDF_property.mWriteModelFunction = nil 
    self.mModel?.toMany_measurementUnitForPadHoleInPDF_StopsBeingObserved (by: self.measurementUnitForPadHoleInPDF_property)
  //--- name
    self.name_property.mReadModelFunction = nil 
    self.name_property.mWriteModelFunction = nil 
    self.mModel?.toMany_name_StopsBeingObserved (by: self.name_property)
  //--- padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.mReadModelFunction = nil 
    self.padHoleDiameterInPDF_property.mWriteModelFunction = nil 
    self.mModel?.toMany_padHoleDiameterInPDF_StopsBeingObserved (by: self.padHoleDiameterInPDF_property)
  //--- parameterStatusImage
    self.parameterStatusImage_property.mReadModelFunction = nil 
    self.mModel?.toMany_parameterStatusImage_StopsBeingObserved (by: self.parameterStatusImage_property)
  //---
    self.mModel = nil
  } */

  //···················································································································*

  private final func bind_property_drawBoardLimits (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawBoardLimits_StartsToBeObserved (by: self.drawBoardLimits_property)
    self.drawBoardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawBoardLimits_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawBoardLimits_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawBoardLimits_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawComponentNamesBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawComponentNamesBottomSide_StartsToBeObserved (by: self.drawComponentNamesBottomSide_property)
    self.drawComponentNamesBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawComponentNamesBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawComponentNamesBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawComponentNamesBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawComponentNamesTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawComponentNamesTopSide_StartsToBeObserved (by: self.drawComponentNamesTopSide_property)
    self.drawComponentNamesTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawComponentNamesTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawComponentNamesTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawComponentNamesTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawComponentValuesBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawComponentValuesBottomSide_StartsToBeObserved (by: self.drawComponentValuesBottomSide_property)
    self.drawComponentValuesBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawComponentValuesBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawComponentValuesBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawComponentValuesBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawComponentValuesTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawComponentValuesTopSide_StartsToBeObserved (by: self.drawComponentValuesTopSide_property)
    self.drawComponentValuesTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawComponentValuesTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawComponentValuesTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawComponentValuesTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawInternalBoardLimits (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawInternalBoardLimits_StartsToBeObserved (by: self.drawInternalBoardLimits_property)
    self.drawInternalBoardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawInternalBoardLimits_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawInternalBoardLimits_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawInternalBoardLimits_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawPackageLegendBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawPackageLegendBottomSide_StartsToBeObserved (by: self.drawPackageLegendBottomSide_property)
    self.drawPackageLegendBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawPackageLegendBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawPackageLegendBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawPackageLegendBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawPackageLegendTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawPackageLegendTopSide_StartsToBeObserved (by: self.drawPackageLegendTopSide_property)
    self.drawPackageLegendTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawPackageLegendTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawPackageLegendTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawPackageLegendTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawPadHolesInPDF (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawPadHolesInPDF_StartsToBeObserved (by: self.drawPadHolesInPDF_property)
    self.drawPadHolesInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawPadHolesInPDF_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawPadHolesInPDF_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawPadHolesInPDF_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawPadsBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawPadsBottomSide_StartsToBeObserved (by: self.drawPadsBottomSide_property)
    self.drawPadsBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawPadsBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawPadsBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawPadsBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawPadsTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawPadsTopSide_StartsToBeObserved (by: self.drawPadsTopSide_property)
    self.drawPadsTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawPadsTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawPadsTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawPadsTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTextsLayoutBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTextsLayoutBottomSide_StartsToBeObserved (by: self.drawTextsLayoutBottomSide_property)
    self.drawTextsLayoutBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTextsLayoutBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTextsLayoutBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTextsLayoutBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTextsLayoutTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTextsLayoutTopSide_StartsToBeObserved (by: self.drawTextsLayoutTopSide_property)
    self.drawTextsLayoutTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTextsLayoutTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTextsLayoutTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTextsLayoutTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTextsLegendBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTextsLegendBottomSide_StartsToBeObserved (by: self.drawTextsLegendBottomSide_property)
    self.drawTextsLegendBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTextsLegendBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTextsLegendBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTextsLegendBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTextsLegendTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTextsLegendTopSide_StartsToBeObserved (by: self.drawTextsLegendTopSide_property)
    self.drawTextsLegendTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTextsLegendTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTextsLegendTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTextsLegendTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksBottomSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksBottomSide_StartsToBeObserved (by: self.drawTracksBottomSide_property)
    self.drawTracksBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksBottomSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksBottomSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksInner1Layer (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksInner1Layer_StartsToBeObserved (by: self.drawTracksInner1Layer_property)
    self.drawTracksInner1Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksInner1Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksInner1Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksInner1Layer_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksInner2Layer (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksInner2Layer_StartsToBeObserved (by: self.drawTracksInner2Layer_property)
    self.drawTracksInner2Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksInner2Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksInner2Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksInner2Layer_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksInner3Layer (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksInner3Layer_StartsToBeObserved (by: self.drawTracksInner3Layer_property)
    self.drawTracksInner3Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksInner3Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksInner3Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksInner3Layer_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksInner4Layer (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksInner4Layer_StartsToBeObserved (by: self.drawTracksInner4Layer_property)
    self.drawTracksInner4Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksInner4Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksInner4Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksInner4Layer_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTracksTopSide (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTracksTopSide_StartsToBeObserved (by: self.drawTracksTopSide_property)
    self.drawTracksTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTracksTopSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTracksTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTracksTopSide_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawTraversingPads (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawTraversingPads_StartsToBeObserved (by: self.drawTraversingPads_property)
    self.drawTraversingPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawTraversingPads_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawTraversingPads_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawTraversingPads_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_drawVias (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_drawVias_StartsToBeObserved (by: self.drawVias_property)
    self.drawVias_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.drawVias_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.drawVias_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.drawVias_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_emptyFileExtensionImage (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_emptyFileExtensionImage_StartsToBeObserved (by: self.emptyFileExtensionImage_property)
    self.emptyFileExtensionImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSImage> ()
          var isMultipleSelection = false
          for object in v {
            switch object.emptyFileExtensionImage_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_fileExtension (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_fileExtension_StartsToBeObserved (by: self.fileExtension_property)
    self.fileExtension_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.fileExtension_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.fileExtension_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.fileExtension_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_hasNoData (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_hasNoData_StartsToBeObserved (by: self.hasNoData_property)
    self.hasNoData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.hasNoData_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_horizontalMirror (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_horizontalMirror_StartsToBeObserved (by: self.horizontalMirror_property)
    self.horizontalMirror_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.horizontalMirror_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.horizontalMirror_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.horizontalMirror_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_measurementUnitForPadHoleInPDF (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_measurementUnitForPadHoleInPDF_StartsToBeObserved (by: self.measurementUnitForPadHoleInPDF_property)
    self.measurementUnitForPadHoleInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.measurementUnitForPadHoleInPDF_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.measurementUnitForPadHoleInPDF_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.measurementUnitForPadHoleInPDF_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_name_StartsToBeObserved (by: self.name_property)
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.name_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_padHoleDiameterInPDF (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_padHoleDiameterInPDF_StartsToBeObserved (by: self.padHoleDiameterInPDF_property)
    self.padHoleDiameterInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padHoleDiameterInPDF_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padHoleDiameterInPDF_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padHoleDiameterInPDF_property.setProp (inValue)
          }
        }
      }
    }
  }

  //···················································································································*

  private final func bind_property_parameterStatusImage (model : ReadOnlyArrayOf_ArtworkFileGenerationParameters) {
    model.toMany_parameterStatusImage_StartsToBeObserved (by: self.parameterStatusImage_property)
    self.parameterStatusImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSImage> ()
          var isMultipleSelection = false
          for object in v {
            switch object.parameterStatusImage_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

