//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller AutoLayoutProjectDocument mDeviceSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutProjectDocument_mDeviceSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: canExport
  //····················································································································

  var canExport_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: canRemove
  //····················································································································

  var canRemove_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: deviceComponentCountString
  //····················································································································

  var deviceComponentCountString_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: deviceSymbolDictionary
  //····················································································································

  var deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································
  //   Selection observable property: mComponents
  //····················································································································

  //····················································································································
  //   Selection observable property: mDeviceFileData
  //····················································································································

  var mDeviceFileData_property = EBPropertyProxy_Data ()

  //····················································································································
  //   Selection observable property: mDeviceName
  //····················································································································

  var mDeviceName_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: mDeviceVersion
  //····················································································································

  var mDeviceVersion_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mPackages
  //····················································································································

  //····················································································································
  //   Selection observable property: mPadAssignments
  //····················································································································

  //····················································································································
  //   Selection observable property: mPrefix
  //····················································································································

  var mPrefix_property = EBPropertyProxy_String ()

  //····················································································································
  //   Selection observable property: mSymbols
  //····················································································································

  //····················································································································
  //   Selection observable property: packageNames
  //····················································································································

  var packageNames_property = EBTransientProperty_StringArray ()

  //····················································································································
  //   Selection observable property: pinPadAssignments
  //····················································································································

  var pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································
  //   Selection observable property: sizeString
  //····················································································································

  var sizeString_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: symbolAndTypesNames
  //····················································································································

  var symbolAndTypesNames_property = EBTransientProperty_SymbolInProjectIdentifierArray ()

  //····················································································································
  //   Selection observable property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private var mModel : ReadOnlyArrayOf_DeviceInProject? = nil

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_DeviceInProject) {
    self.mModel = model
    self.bind_property_canExport (model: model)
    self.bind_property_canRemove (model: model)
    self.bind_property_deviceComponentCountString (model: model)
    self.bind_property_deviceSymbolDictionary (model: model)
    self.bind_property_mDeviceFileData (model: model)
    self.bind_property_mDeviceName (model: model)
    self.bind_property_mDeviceVersion (model: model)
    self.bind_property_mPrefix (model: model)
    self.bind_property_packageNames (model: model)
    self.bind_property_pinPadAssignments (model: model)
    self.bind_property_sizeString (model: model)
    self.bind_property_symbolAndTypesNames (model: model)
    self.bind_property_versionString (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
  //--- canExport
    self.canExport_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_canExport (self.canExport_property)
  //--- canRemove
    self.canRemove_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_canRemove (self.canRemove_property)
  //--- deviceComponentCountString
    self.deviceComponentCountString_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_deviceComponentCountString (self.deviceComponentCountString_property)
  //--- deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- mDeviceFileData
    self.mDeviceFileData_property.mReadModelFunction = nil 
    self.mDeviceFileData_property.mWriteModelFunction = nil 
    self.mDeviceFileData_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mDeviceFileData (self.mDeviceFileData_property)
  //--- mDeviceName
    self.mDeviceName_property.mReadModelFunction = nil 
    self.mDeviceName_property.mWriteModelFunction = nil 
    self.mDeviceName_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mDeviceName (self.mDeviceName_property)
  //--- mDeviceVersion
    self.mDeviceVersion_property.mReadModelFunction = nil 
    self.mDeviceVersion_property.mWriteModelFunction = nil 
    self.mDeviceVersion_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mDeviceVersion (self.mDeviceVersion_property)
  //--- mPrefix
    self.mPrefix_property.mReadModelFunction = nil 
    self.mPrefix_property.mWriteModelFunction = nil 
    self.mPrefix_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mPrefix (self.mPrefix_property)
  //--- packageNames
    self.packageNames_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_packageNames (self.packageNames_property)
  //--- pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
  //--- sizeString
    self.sizeString_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_sizeString (self.sizeString_property)
  //--- symbolAndTypesNames
    self.symbolAndTypesNames_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_symbolAndTypesNames (self.symbolAndTypesNames_property)
  //--- versionString
    self.versionString_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_versionString (self.versionString_property)
  //---
    self.mModel = nil
  }

  //····················································································································
  //    Explorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mValueExplorer : NSButton?
    private var mExplorerWindow : NSWindow?
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
      let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
      let tf = NSTextField (frame:secondColumn (y))
      tf.isEnabled = true
      tf.isEditable = false
      tf.stringValue = name
      tf.font = font
      view.addSubview (tf)
      let valueExplorer = NSButton (frame:thirdColumn (y))
      valueExplorer.font = font
      valueExplorer.title = self.explorerIndexString + " " + String (describing: type (of: self))
      valueExplorer.target = self
      valueExplorer.action = #selector(SelectionController_AutoLayoutProjectDocument_mDeviceSelectionController.showObjectWindowFromExplorerButton(_:))
      view.addSubview (valueExplorer)
      mValueExplorer = valueExplorer
      y += EXPLORER_ROW_HEIGHT
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func buildExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
      mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
    //-------------------------------------------------- Adding properties
      let view = NSView (frame:r)
      var y : CGFloat = 0.0
      createEntryForPropertyNamed (
        "mDeviceFileData",
        object: self.mDeviceFileData_property,
        y: &y,
        view: view,
        observerExplorer: &self.mDeviceFileData_property.mObserverExplorer,
        valueExplorer: &self.mDeviceFileData_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mDeviceName",
        object: self.mDeviceName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mDeviceName_property.mObserverExplorer,
        valueExplorer: &self.mDeviceName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mDeviceVersion",
        object: self.mDeviceVersion_property,
        y: &y,
        view: view,
        observerExplorer: &self.mDeviceVersion_property.mObserverExplorer,
        valueExplorer: &self.mDeviceVersion_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPrefix",
        object: self.mPrefix_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPrefix_property.mObserverExplorer,
        valueExplorer: &self.mPrefix_property.mValueExplorer
      )
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      view.frame = viewFrame
    //--- Set content size
      mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(SelectionController_AutoLayoutProjectDocument_mDeviceSelectionController.deleteSelectionControllerWindowAction(_:))
    //--- Set window title
      let windowTitle = self.explorerIndexString + " " + String (describing: type (of: self))
      mExplorerWindow!.title = windowTitle
    //--- Add Scroll view
      let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
      let sw = NSScrollView (frame:frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      mExplorerWindow!.contentView = sw
    }
  #endif
  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showObjectWindowFromExplorerButton (_ : Any) {
      if mExplorerWindow == nil {
        buildExplorerWindow ()
      }
      mExplorerWindow?.makeKeyAndOrderFront(nil)
    }
  #endif

  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteSelectionControllerWindowAction (_ : Any) {
      clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func clearObjectExplorer () {
      let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton!.target = nil
      mExplorerWindow?.orderOut (nil)
      mExplorerWindow = nil
    }
  #endif

  //···················································································································*

  private final func bind_property_canExport (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_canExport (self.canExport_property)
    self.canExport_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.canExport_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_canRemove (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_canRemove (self.canRemove_property)
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.canRemove_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_deviceComponentCountString (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_deviceComponentCountString (self.deviceComponentCountString_property)
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceComponentCountString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_deviceSymbolDictionary (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <DeviceSymbolDictionary> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceSymbolDictionary_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_mDeviceFileData (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_mDeviceFileData (self.mDeviceFileData_property)
    self.mDeviceFileData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Data> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDeviceFileData_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.mWriteModelFunction = { [weak self] (inValue : Data) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDeviceFileData_property.setProp (inValue)
          }
        }
      }
    }
//    self.mDeviceFileData_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Data, windowForSheet : NSWindow?) in
//      if let model = self?.mModel {
//        switch model.selection {
//        case .empty, .multiple :
//          return false
//        case .single (let v) :
//          for object in v {
//            let result = object.mDeviceFileData_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
//            if !result {
//              return false
//            }
//          }
//          return true
//        }
//      }else{
//        return false
//      }
//    }
  }

  //···················································································································*

  private final func bind_property_mDeviceName (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_mDeviceName (self.mDeviceName_property)
    self.mDeviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDeviceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDeviceName_property.setProp (inValue)
          }
        }
      }
    }
//    self.mDeviceName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
//      if let model = self?.mModel {
//        switch model.selection {
//        case .empty, .multiple :
//          return false
//        case .single (let v) :
//          for object in v {
//            let result = object.mDeviceName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
//            if !result {
//              return false
//            }
//          }
//          return true
//        }
//      }else{
//        return false
//      }
//    }
  }

  //···················································································································*

  private final func bind_property_mDeviceVersion (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_mDeviceVersion (self.mDeviceVersion_property)
    self.mDeviceVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDeviceVersion_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDeviceVersion_property.setProp (inValue)
          }
        }
      }
    }
//    self.mDeviceVersion_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
//      if let model = self?.mModel {
//        switch model.selection {
//        case .empty, .multiple :
//          return false
//        case .single (let v) :
//          for object in v {
//            let result = object.mDeviceVersion_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
//            if !result {
//              return false
//            }
//          }
//          return true
//        }
//      }else{
//        return false
//      }
//    }
  }

  //···················································································································*

  private final func bind_property_mPrefix (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_mPrefix (self.mPrefix_property)
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mPrefix_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mPrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mPrefix_property.setProp (inValue)
          }
        }
      }
    }
//    self.mPrefix_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
//      if let model = self?.mModel {
//        switch model.selection {
//        case .empty, .multiple :
//          return false
//        case .single (let v) :
//          for object in v {
//            let result = object.mPrefix_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
//            if !result {
//              return false
//            }
//          }
//          return true
//        }
//      }else{
//        return false
//      }
//    }
  }

  //···················································································································*

  private final func bind_property_packageNames (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_packageNames (self.packageNames_property)
    self.packageNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <StringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.packageNames_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_pinPadAssignments (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ThreeStringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinPadAssignments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_sizeString (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_sizeString (self.sizeString_property)
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.sizeString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_symbolAndTypesNames (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_symbolAndTypesNames (self.symbolAndTypesNames_property)
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <SymbolInProjectIdentifierArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.symbolAndTypesNames_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_versionString (model : ReadOnlyArrayOf_DeviceInProject) {
    model.addEBObserverOf_versionString (self.versionString_property)
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.versionString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

