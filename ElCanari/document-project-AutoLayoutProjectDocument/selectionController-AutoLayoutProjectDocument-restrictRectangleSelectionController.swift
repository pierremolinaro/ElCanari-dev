//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument restrictRectangleSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutProjectDocument_restrictRectangleSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: mY
  //····················································································································

  let mY_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: mWidth
  //····················································································································

  let mWidth_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: mHeight
  //····················································································································

  let mHeight_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: mIsInFrontLayer
  //····················································································································

  let mIsInFrontLayer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mIsInBackLayer
  //····················································································································

  let mIsInBackLayer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mIsInInner1Layer
  //····················································································································

  let mIsInInner1Layer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mIsInInner2Layer
  //····················································································································

  let mIsInInner2Layer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mIsInInner3Layer
  //····················································································································

  let mIsInInner3Layer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mIsInInner4Layer
  //····················································································································

  let mIsInInner4Layer_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: mX
  //····················································································································

  let mX_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: signatureForERCChecking
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <BoardRestrictRectangle> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardRestrictRectangle <BoardObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mY ()
    self.bind_property_mWidth ()
    self.bind_property_mHeight ()
    self.bind_property_mIsInFrontLayer ()
    self.bind_property_mIsInBackLayer ()
    self.bind_property_mIsInInner1Layer ()
    self.bind_property_mIsInInner2Layer ()
    self.bind_property_mIsInInner3Layer ()
    self.bind_property_mIsInInner4Layer ()
    self.bind_property_mX ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_signatureForERCChecking ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mY (self.mY_property)
  //--- mWidth
    self.mWidth_property.mReadModelFunction = nil 
    self.mWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mWidth (self.mWidth_property)
  //--- mHeight
    self.mHeight_property.mReadModelFunction = nil 
    self.mHeight_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mHeight (self.mHeight_property)
  //--- mIsInFrontLayer
    self.mIsInFrontLayer_property.mReadModelFunction = nil 
    self.mIsInFrontLayer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInFrontLayer (self.mIsInFrontLayer_property)
  //--- mIsInBackLayer
    self.mIsInBackLayer_property.mReadModelFunction = nil 
    self.mIsInBackLayer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInBackLayer (self.mIsInBackLayer_property)
  //--- mIsInInner1Layer
    self.mIsInInner1Layer_property.mReadModelFunction = nil 
    self.mIsInInner1Layer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInInner1Layer (self.mIsInInner1Layer_property)
  //--- mIsInInner2Layer
    self.mIsInInner2Layer_property.mReadModelFunction = nil 
    self.mIsInInner2Layer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInInner2Layer (self.mIsInInner2Layer_property)
  //--- mIsInInner3Layer
    self.mIsInInner3Layer_property.mReadModelFunction = nil 
    self.mIsInInner3Layer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInInner3Layer (self.mIsInInner3Layer_property)
  //--- mIsInInner4Layer
    self.mIsInInner4Layer_property.mReadModelFunction = nil 
    self.mIsInInner4Layer_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mIsInInner4Layer (self.mIsInInner4Layer_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mX (self.mX_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
  }

  //····················································································································

  private final func bind_property_mY () {
    self.selectedArray_property.addEBObserverOf_mY (self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mWidth () {
    self.selectedArray_property.addEBObserverOf_mWidth (self.mWidth_property)
    self.mWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mHeight () {
    self.selectedArray_property.addEBObserverOf_mHeight (self.mHeight_property)
    self.mHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mHeight_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInFrontLayer () {
    self.selectedArray_property.addEBObserverOf_mIsInFrontLayer (self.mIsInFrontLayer_property)
    self.mIsInFrontLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInFrontLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInFrontLayer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInFrontLayer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInBackLayer () {
    self.selectedArray_property.addEBObserverOf_mIsInBackLayer (self.mIsInBackLayer_property)
    self.mIsInBackLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInBackLayer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInBackLayer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInBackLayer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInInner1Layer () {
    self.selectedArray_property.addEBObserverOf_mIsInInner1Layer (self.mIsInInner1Layer_property)
    self.mIsInInner1Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInInner1Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInInner1Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInInner1Layer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInInner2Layer () {
    self.selectedArray_property.addEBObserverOf_mIsInInner2Layer (self.mIsInInner2Layer_property)
    self.mIsInInner2Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInInner2Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInInner2Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInInner2Layer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInInner3Layer () {
    self.selectedArray_property.addEBObserverOf_mIsInInner3Layer (self.mIsInInner3Layer_property)
    self.mIsInInner3Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInInner3Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInInner3Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInInner3Layer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mIsInInner4Layer () {
    self.selectedArray_property.addEBObserverOf_mIsInInner4Layer (self.mIsInInner4Layer_property)
    self.mIsInInner4Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mIsInInner4Layer_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsInInner4Layer_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mIsInInner4Layer_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_mX () {
    self.selectedArray_property.addEBObserverOf_mX (self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.addEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

