//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutProjectDocument wireInSchematicSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_AutoLayoutProjectDocument_wireInSchematicSelectionController {

  //································································································

  init () {
    noteObjectAllocation (self)
  }

  //································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //································································································
  //   Selection observable property: objectDisplay
  //································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selection observable property: netName
  //································································································

  final let netName_property = EBTransientProperty <String> ()

  //································································································
  //   Selection observable property: netClassName
  //································································································

  final let netClassName_property = EBTransientProperty <String> ()

  //································································································
  //   Selection observable property: hasNet
  //································································································

  final let hasNet_property = EBTransientProperty <Bool> ()

  //································································································
  //   Selection observable property: wires
  //································································································

  final let wires_property = EBTransientProperty <CanariWireArray> ()

  //································································································
  //   Selection observable property: selectionDisplay
  //································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selected array (not observable)
  //································································································

  var selectedArray : EBReferenceArray <WireInSchematic> { return self.selectedArray_property.propval }

  //································································································
  //   BIND SELECTION
  //································································································

   let selectedArray_property = TransientArrayOfSuperOf_WireInSchematic <SchematicObject> ()

  //································································································

  final func bind_selection (model : ReadOnlyArrayOf_SchematicObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_objectDisplay ()
    self.bind_property_netName ()
    self.bind_property_netClassName ()
    self.bind_property_hasNet ()
    self.bind_property_wires ()
    self.bind_property_selectionDisplay ()
  }

  //································································································
  //   UNBIND SELECTION
  //································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- netName
    self.netName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netName_StopsBeingObserved (by: self.netName_property)
  //--- netClassName
    self.netClassName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_netClassName_StopsBeingObserved (by: self.netClassName_property)
  //--- hasNet
    self.hasNet_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_hasNet_StopsBeingObserved (by: self.hasNet_property)
  //--- wires
    self.wires_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_wires_StopsBeingObserved (by: self.wires_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  } */

  //································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netName () {
    self.selectedArray_property.toMany_netName_StartsBeingObserved (by: self.netName_property)
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_netClassName () {
    self.selectedArray_property.toMany_netClassName_StartsBeingObserved (by: self.netClassName_property)
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_hasNet () {
    self.selectedArray_property.toMany_hasNet_StartsBeingObserved (by: self.hasNet_property)
    self.hasNet_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.hasNet_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_wires () {
    self.selectedArray_property.toMany_wires_StartsBeingObserved (by: self.wires_property)
    self.wires_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariWireArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.wires_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

