//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller ProjectDocument boardCurveSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_ProjectDocument_boardCurveSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: descriptor
  //····················································································································

  var descriptor_property = EBTransientProperty_BorderCurveDescriptor ()

  //····················································································································
  //   Selection observable property: isLine
  //····················································································································

  var isLine_property = EBTransientProperty_Bool ()

  //····················································································································
  //   Selection observable property: mCPX1
  //····················································································································

  var mCPX1_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mCPX2
  //····················································································································

  var mCPX2_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mCPY1
  //····················································································································

  var mCPY1_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mCPY2
  //····················································································································

  var mCPY2_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mNext
  //····················································································································

  //····················································································································
  //   Selection observable property: mNextX
  //····················································································································

  var mNextX_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mNextY
  //····················································································································

  var mNextY_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mPrevious
  //····················································································································

  //····················································································································
  //   Selection observable property: mRoot
  //····················································································································

  //····················································································································
  //   Selection observable property: mShape
  //····················································································································

  var mShape_property = EBPropertyProxy_BorderCurveShape ()

  //····················································································································
  //   Selection observable property: mX
  //····················································································································

  var mX_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: mY
  //····················································································································

  var mY_property = EBPropertyProxy_Int ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: p2Xstring
  //····················································································································

  var p2Xstring_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: p2Ystring
  //····················································································································

  var p2Ystring_property = EBTransientProperty_String ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private var mModel : ReadOnlyArrayOf_BorderCurve? = nil

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_BorderCurve) {
    self.mModel = model
    self.bind_property_descriptor (model: model)
    self.bind_property_isLine (model: model)
    self.bind_property_mCPX1 (model: model)
    self.bind_property_mCPX2 (model: model)
    self.bind_property_mCPY1 (model: model)
    self.bind_property_mCPY2 (model: model)
    self.bind_property_mNextX (model: model)
    self.bind_property_mNextY (model: model)
    self.bind_property_mShape (model: model)
    self.bind_property_mX (model: model)
    self.bind_property_mY (model: model)
    self.bind_property_objectDisplay (model: model)
    self.bind_property_p2Xstring (model: model)
    self.bind_property_p2Ystring (model: model)
    self.bind_property_selectionDisplay (model: model)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
  //--- descriptor
    self.descriptor_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_descriptor (self.descriptor_property)
  //--- isLine
    self.isLine_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_isLine (self.isLine_property)
  //--- mCPX1
    self.mCPX1_property.mReadModelFunction = nil 
    self.mCPX1_property.mWriteModelFunction = nil 
    self.mCPX1_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPX1 (self.mCPX1_property)
  //--- mCPX2
    self.mCPX2_property.mReadModelFunction = nil 
    self.mCPX2_property.mWriteModelFunction = nil 
    self.mCPX2_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPX2 (self.mCPX2_property)
  //--- mCPY1
    self.mCPY1_property.mReadModelFunction = nil 
    self.mCPY1_property.mWriteModelFunction = nil 
    self.mCPY1_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPY1 (self.mCPY1_property)
  //--- mCPY2
    self.mCPY2_property.mReadModelFunction = nil 
    self.mCPY2_property.mWriteModelFunction = nil 
    self.mCPY2_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mCPY2 (self.mCPY2_property)
  //--- mNextX
    self.mNextX_property.mReadModelFunction = nil 
    self.mNextX_property.mWriteModelFunction = nil 
    self.mNextX_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mNextX (self.mNextX_property)
  //--- mNextY
    self.mNextY_property.mReadModelFunction = nil 
    self.mNextY_property.mWriteModelFunction = nil 
    self.mNextY_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mNextY (self.mNextY_property)
  //--- mShape
    self.mShape_property.mReadModelFunction = nil 
    self.mShape_property.mWriteModelFunction = nil 
    self.mShape_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mShape (self.mShape_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.mX_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mX (self.mX_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.mY_property.mValidateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_mY (self.mY_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- p2Xstring
    self.p2Xstring_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_p2Xstring (self.p2Xstring_property)
  //--- p2Ystring
    self.p2Ystring_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_p2Ystring (self.p2Ystring_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.mModel?.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //---
    self.mModel = nil
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_ProjectDocument_boardCurveSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }

  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "mCPX1",
      idx: self.mCPX1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPX1_property.mObserverExplorer,
      valueExplorer: &self.mCPX1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPX2",
      idx: self.mCPX2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPX2_property.mObserverExplorer,
      valueExplorer: &self.mCPX2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPY1",
      idx: self.mCPY1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPY1_property.mObserverExplorer,
      valueExplorer: &self.mCPY1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPY2",
      idx: self.mCPY2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPY2_property.mObserverExplorer,
      valueExplorer: &self.mCPY2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNextX",
      idx: self.mNextX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNextX_property.mObserverExplorer,
      valueExplorer: &self.mNextX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNextY",
      idx: self.mNextY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNextY_property.mObserverExplorer,
      valueExplorer: &self.mNextY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShape",
      idx: self.mShape_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShape_property.mObserverExplorer,
      valueExplorer: &self.mShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_ProjectDocument_boardCurveSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }

  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_descriptor (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_descriptor (self.descriptor_property)
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BorderCurveDescriptor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.descriptor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_isLine (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_isLine (self.isLine_property)
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.isLine_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPX1 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPX1 (self.mCPX1_property)
    self.mCPX1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPX1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPX1_property.setProp (inValue)
          }
        }
      }
    }
    self.mCPX1_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCPX1_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPX2 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPX2 (self.mCPX2_property)
    self.mCPX2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPX2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPX2_property.setProp (inValue)
          }
        }
      }
    }
    self.mCPX2_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCPX2_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPY1 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPY1 (self.mCPY1_property)
    self.mCPY1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPY1_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY1_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPY1_property.setProp (inValue)
          }
        }
      }
    }
    self.mCPY1_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCPY1_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mCPY2 (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mCPY2 (self.mCPY2_property)
    self.mCPY2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCPY2_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY2_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCPY2_property.setProp (inValue)
          }
        }
      }
    }
    self.mCPY2_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCPY2_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mNextX (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mNextX (self.mNextX_property)
    self.mNextX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNextX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNextX_property.setProp (inValue)
          }
        }
      }
    }
    self.mNextX_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mNextX_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mNextY (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mNextY (self.mNextY_property)
    self.mNextY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNextY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNextY_property.setProp (inValue)
          }
        }
      }
    }
    self.mNextY_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mNextY_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mShape (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mShape (self.mShape_property)
    self.mShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BorderCurveShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mShape_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mShape_property.mWriteModelFunction = { [weak self] (inValue : BorderCurveShape) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mShape_property.setProp (inValue)
          }
        }
      }
    }
    self.mShape_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : BorderCurveShape, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mShape_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mX (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mX (self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
    self.mX_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mX_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_mY (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_mY (self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
    self.mY_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mModel {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mY_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_p2Xstring (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_p2Xstring (self.p2Xstring_property)
    self.p2Xstring_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2Xstring_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_p2Ystring (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_p2Ystring (self.p2Ystring_property)
    self.p2Ystring_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.p2Ystring_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_BorderCurve) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mModel {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

