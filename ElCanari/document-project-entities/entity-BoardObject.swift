//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_isPlacedInBoard : AnyObject {
  var isPlacedInBoard : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_isVia : AnyObject {
  var isVia : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_trackLengthInCanariUnit : AnyObject {
  var trackLengthInCanariUnit : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_netNameAndPadLocation : AnyObject {
  var netNameAndPadLocation : RastnetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_componentName : AnyObject {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_errorOrWarningIssueSize : AnyObject {
  var errorOrWarningIssueSize : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_trackSide : AnyObject {
  var trackSide : TrackSide? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardObject : EBGraphicManagedObject,
         BoardObject_isPlacedInBoard,
         BoardObject_issues,
         BoardObject_isVia,
         BoardObject_trackLengthInCanariUnit,
         BoardObject_signatureForERCChecking,
         BoardObject_netNameAndPadLocation,
         BoardObject_componentName,
         BoardObject_selectionDisplay,
         BoardObject_objectDisplay,
         BoardObject_errorOrWarningIssueSize,
         BoardObject_trackSide {

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false)

  //····················································································································

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: isPlacedInBoard
  //····················································································································

  final let isPlacedInBoard_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isPlacedInBoard : Bool? {
    switch self.isPlacedInBoard_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isVia
  //····················································································································

  final let isVia_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isVia : Bool? {
    switch self.isVia_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackLengthInCanariUnit
  //····················································································································

  final let trackLengthInCanariUnit_property = EBTransientProperty_Double ()

  //····················································································································

  final var trackLengthInCanariUnit : Double? {
    switch self.trackLengthInCanariUnit_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································

  final var signatureForERCChecking : UInt32? {
    switch self.signatureForERCChecking_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netNameAndPadLocation
  //····················································································································

  final let netNameAndPadLocation_property = EBTransientProperty_RastnetInfoArray ()

  //····················································································································

  final var netNameAndPadLocation : RastnetInfoArray? {
    switch self.netNameAndPadLocation_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  final let componentName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentName : String? {
    switch self.componentName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: errorOrWarningIssueSize
  //····················································································································

  final let errorOrWarningIssueSize_property = EBTransientProperty_Double ()

  //····················································································································

  final var errorOrWarningIssueSize : Double? {
    switch self.errorOrWarningIssueSize_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackSide
  //····················································································································

  final let trackSide_property = EBTransientProperty_TrackSide ()

  //····················································································································

  final var trackSide : TrackSide? {
    switch self.trackSide_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.mRoot_none)
  //--- To one property: mRoot (has opposite to many relationship: mBoardObjects)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.remove (me) } }
    )
  //--- Atomic property: isPlacedInBoard
    self.isPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mRoot_none.selection) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_isPlacedInBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.isPlacedInBoard_property)
  //--- Atomic property: errorOrWarningIssueSize
    self.errorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mRoot_property.mErrorOrWarningIssueSize_property.selection) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_errorOrWarningIssueSize (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.mErrorOrWarningIssueSize_property.addEBObserver (self.errorOrWarningIssueSize_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mRoot_property.removeEBObserver (self.isPlacedInBoard_property)
    // self.mRoot_property.mErrorOrWarningIssueSize_property.removeEBObserver (self.errorOrWarningIssueSize_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "isPlacedInBoard",
        object: self.isPlacedInBoard_property,
        y: &y,
        view: view,
        observerExplorer: &self.isPlacedInBoard_property.mObserverExplorer,
        valueExplorer: &self.isPlacedInBoard_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        object: self.issues_property,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "isVia",
        object: self.isVia_property,
        y: &y,
        view: view,
        observerExplorer: &self.isVia_property.mObserverExplorer,
        valueExplorer: &self.isVia_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "trackLengthInCanariUnit",
        object: self.trackLengthInCanariUnit_property,
        y: &y,
        view: view,
        observerExplorer: &self.trackLengthInCanariUnit_property.mObserverExplorer,
        valueExplorer: &self.trackLengthInCanariUnit_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "signatureForERCChecking",
        object: self.signatureForERCChecking_property,
        y: &y,
        view: view,
        observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
        valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "netNameAndPadLocation",
        object: self.netNameAndPadLocation_property,
        y: &y,
        view: view,
        observerExplorer: &self.netNameAndPadLocation_property.mObserverExplorer,
        valueExplorer: &self.netNameAndPadLocation_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "componentName",
        object: self.componentName_property,
        y: &y,
        view: view,
        observerExplorer: &self.componentName_property.mObserverExplorer,
        valueExplorer: &self.componentName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "errorOrWarningIssueSize",
        object: self.errorOrWarningIssueSize_property,
        y: &y,
        view: view,
        observerExplorer: &self.errorOrWarningIssueSize_property.mObserverExplorer,
        valueExplorer: &self.errorOrWarningIssueSize_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "trackSide",
        object: self.trackSide_property,
        y: &y,
        view: view,
        observerExplorer: &self.trackSide_property.mObserverExplorer,
        valueExplorer: &self.trackSide_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForToOneRelationshipNamed (
        "mRoot",
        object: self.mRoot_property,
        y: &y,
        view: view,
        valueExplorer:&self.mRoot_property.mValueExplorer
      )
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
    //--- To one property: mRoot
      self.mRoot_property.mObserverExplorer = nil
      self.mRoot_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
  //--- To one relationships
    ioString += "mRoot\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
    //--- To one relationships
      if let range = inDictionary ["mRoot"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! ProjectRoot
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mRoot = object }
      }
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //  Cursor
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_BoardObject ((knob: inKnobIndex)
  } */

  //····················································································································
  //  Translation
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> ObjcCanariPoint {
    return acceptedTranslation_BoardObject (xBy: inDx, yBy: inDy)
  } */

  //····················································································································

/*  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_BoardObject (xBy: inDx, yBy: inDy)
  } */

  //····················································································································

/*  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : ObjcObjectSet) {
    translate_BoardObject (xBy: inDx, yBy: inDy, userSet: ioSet)
  } */

  //····················································································································
  //  Knob
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : ObjcCanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : ObjcCanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : ObjcCanariPoint,
                         shift inShift : Bool) -> ObjcCanariPoint {
    return canMove_BoardObject (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  } */

  //····················································································································

/*  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_BoardObject (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  } */

  //····················································································································
  //  Snap to grid
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_BoardObject (inGrid)
  } */

  //····················································································································

/*  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_BoardObject (inGrid)
  } */

  //····················································································································
  //  HORIZONTAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func flipHorizontally () {
    flipHorizontally_BoardObject ()
  } */

  //····················································································································

/*  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_BoardObject ()
  } */

  //····················································································································
  //  VERTICAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func flipVertically () {
    flipVertically_BoardObject ()
  } */

  //····················································································································

/*  override func canFlipVertically () -> Bool {
    return canFlipVertically_BoardObject ()
  } */

  //····················································································································
  //  ROTATE 90
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canRotate90 (accumulatedPoints : ObjcCanariPointSet) -> Bool {
    return canRotate90_BoardObject (accumulatedPoints: accumulatedPoints)
  } */

  //····················································································································

/*  override func rotate90Clockwise (from inRotationCenter : ObjcCanariPoint, userSet ioSet : ObjcObjectSet) {
    rotate90Clockwise_BoardObject (from: inRotationCenter, userSet: ioSet)
  } */

  //····················································································································

/*  override func rotate90CounterClockwise (from inRotationCenter : ObjcCanariPoint, userSet ioSet : ObjcObjectSet) {
    rotate90CounterClockwise_BoardObject (from: inRotationCenter, userSet: ioSet)
  } */

  //····················································································································
  //  Save into additional dictionary
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_BoardObject (ioDictionary)
  } */

  //····················································································································
  //  COPY AND PASTE
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

 /* override func canCopyAndPaste () -> Bool {
    return canCopyAndPaste_BoardObject ()
  } */

  //····················································································································

/*  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_BoardObject (additionalDictionary: inDictionary, objectArray: inObjectArray)
  } */

  //····················································································································
  //  Alignment Points
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func alignmentPoints () -> ObjcCanariPointSet {
    return alignmentPoints_BoardObject ()
  } */

  //····················································································································
  //  Can be deleted
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canBeDeleted () -> Bool {
    return canBeDeleted_BoardObject ()
  } */

  //····················································································································

/*  override func operationBeforeRemoving () {
    operationBeforeRemoving_BoardObject ()
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

