//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mIsInFrontLayer : AnyObject {
  var mIsInFrontLayer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mIsInBackLayer : AnyObject {
  var mIsInBackLayer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardRestrictRectangle_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardRestrictRectangle : BoardObject,
         BoardRestrictRectangle_mY,
         BoardRestrictRectangle_mWidth,
         BoardRestrictRectangle_mHeight,
         BoardRestrictRectangle_mIsInFrontLayer,
         BoardRestrictRectangle_mIsInBackLayer,
         BoardRestrictRectangle_mX,
         BoardRestrictRectangle_objectDisplay,
         BoardRestrictRectangle_selectionDisplay,
         BoardRestrictRectangle_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 2286000
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHeight
  //····················································································································

  final let mHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHeight_toDefaultValue () {
    self.mHeight = 2286000
  }

  //····················································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mIsInFrontLayer
  //····················································································································

  final let mIsInFrontLayer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mIsInFrontLayer_toDefaultValue () {
    self.mIsInFrontLayer = true
  }

  //····················································································································

  final var mIsInFrontLayer : Bool {
    get { return self.mIsInFrontLayer_property.propval }
    set { self.mIsInFrontLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mIsInBackLayer
  //····················································································································

  final let mIsInBackLayer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mIsInBackLayer_toDefaultValue () {
    self.mIsInBackLayer = true
  }

  //····················································································································

  final var mIsInBackLayer : Bool {
    get { return self.mIsInBackLayer_property.propval }
    set { self.mIsInBackLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 2286000, undoManager: ebUndoManager)
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 2286000, undoManager: ebUndoManager)
    self.mIsInFrontLayer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mIsInBackLayer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mWidth_property.selection, unwSelf.mHeight_property.selection, unwSelf.mIsInFrontLayer_property.selection, unwSelf.mIsInBackLayer_property.selection, preferences_displayFrontRestrictRectangles_property.selection, preferences_displayBackRestrictRectangles_property.selection, preferences_frontSideRestrictRectangleColorForBoard_property.selection, preferences_backSideRestrictRectangleColorForBoard_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
          return .single (transient_BoardRestrictRectangle_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mWidth_property.addEBObserver (self.objectDisplay_property)
    self.mHeight_property.addEBObserver (self.objectDisplay_property)
    self.mIsInFrontLayer_property.addEBObserver (self.objectDisplay_property)
    self.mIsInBackLayer_property.addEBObserver (self.objectDisplay_property)
    preferences_displayFrontRestrictRectangles_property.addEBObserver (self.objectDisplay_property)
    preferences_displayBackRestrictRectangles_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideRestrictRectangleColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideRestrictRectangleColorForBoard_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mWidth_property.selection, unwSelf.mHeight_property.selection, unwSelf.mIsInFrontLayer_property.selection, unwSelf.mIsInBackLayer_property.selection, preferences_hiliteWidthMultipliedByTen_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
          return .single (transient_BoardRestrictRectangle_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mWidth_property.addEBObserver (self.selectionDisplay_property)
    self.mHeight_property.addEBObserver (self.selectionDisplay_property)
    self.mIsInFrontLayer_property.addEBObserver (self.selectionDisplay_property)
    self.mIsInBackLayer_property.addEBObserver (self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mWidth_property.selection, unwSelf.mHeight_property.selection, unwSelf.mIsInFrontLayer_property.selection, unwSelf.mIsInBackLayer_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
          return .single (transient_BoardRestrictRectangle_signatureForERCChecking (v0, v1, v2, v3, v4, v5))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.signatureForERCChecking_property)
    self.mY_property.addEBObserver (self.signatureForERCChecking_property)
    self.mWidth_property.addEBObserver (self.signatureForERCChecking_property)
    self.mHeight_property.addEBObserver (self.signatureForERCChecking_property)
    self.mIsInFrontLayer_property.addEBObserver (self.signatureForERCChecking_property)
    self.mIsInBackLayer_property.addEBObserver (self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mX_property.removeEBObserver (self.objectDisplay_property)
    // self.mY_property.removeEBObserver (self.objectDisplay_property)
    // self.mWidth_property.removeEBObserver (self.objectDisplay_property)
    // self.mHeight_property.removeEBObserver (self.objectDisplay_property)
    // self.mIsInFrontLayer_property.removeEBObserver (self.objectDisplay_property)
    // self.mIsInBackLayer_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayFrontRestrictRectangles_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayBackRestrictRectangles_property.removeEBObserver (self.objectDisplay_property)
    // preferences_frontSideRestrictRectangleColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_backSideRestrictRectangleColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // self.mX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mY_property.removeEBObserver (self.selectionDisplay_property)
    // self.mWidth_property.removeEBObserver (self.selectionDisplay_property)
    // self.mHeight_property.removeEBObserver (self.selectionDisplay_property)
    // self.mIsInFrontLayer_property.removeEBObserver (self.selectionDisplay_property)
    // self.mIsInBackLayer_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_hiliteWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    // self.mX_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mY_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mWidth_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mHeight_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mIsInFrontLayer_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mIsInBackLayer_property.removeEBObserver (self.signatureForERCChecking_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mY",
        idx: self.mY_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mY_property.mObserverExplorer,
        valueExplorer: &self.mY_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mWidth",
        idx: self.mWidth_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mWidth_property.mObserverExplorer,
        valueExplorer: &self.mWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mHeight",
        idx: self.mHeight_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mHeight_property.mObserverExplorer,
        valueExplorer: &self.mHeight_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mIsInFrontLayer",
        idx: self.mIsInFrontLayer_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mIsInFrontLayer_property.mObserverExplorer,
        valueExplorer: &self.mIsInFrontLayer_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mIsInBackLayer",
        idx: self.mIsInBackLayer_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mIsInBackLayer_property.mObserverExplorer,
        valueExplorer: &self.mIsInBackLayer_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mX",
        idx: self.mX_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.mX_property.mObserverExplorer,
        valueExplorer: &self.mX_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "objectDisplay",
        idx: self.objectDisplay_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        idx: self.selectionDisplay_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "signatureForERCChecking",
        idx: self.signatureForERCChecking_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
        valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mWidth
    self.mWidth_property.mObserverExplorer = nil
    self.mWidth_property.mValueExplorer = nil
  //--- Atomic property: mHeight
    self.mHeight_property.mObserverExplorer = nil
    self.mHeight_property.mValueExplorer = nil
  //--- Atomic property: mIsInFrontLayer
    self.mIsInFrontLayer_property.mObserverExplorer = nil
    self.mIsInFrontLayer_property.mValueExplorer = nil
  //--- Atomic property: mIsInBackLayer
    self.mIsInBackLayer_property.mObserverExplorer = nil
    self.mIsInBackLayer_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mWidth
      self.mWidth_property.storeIn (dictionary: ioDictionary, forKey: "mWidth")
    //--- Atomic property: mHeight
      self.mHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHeight")
    //--- Atomic property: mIsInFrontLayer
      self.mIsInFrontLayer_property.storeIn (dictionary: ioDictionary, forKey: "mIsInFrontLayer")
    //--- Atomic property: mIsInBackLayer
      self.mIsInBackLayer_property.storeIn (dictionary: ioDictionary, forKey: "mIsInBackLayer")
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mWidth
    self.mWidth_property.readFrom (dictionary: inDictionary, forKey: "mWidth")
  //--- Atomic property: mHeight
    self.mHeight_property.readFrom (dictionary: inDictionary, forKey: "mHeight")
  //--- Atomic property: mIsInFrontLayer
    self.mIsInFrontLayer_property.readFrom (dictionary: inDictionary, forKey: "mIsInFrontLayer")
  //--- Atomic property: mIsInBackLayer
    self.mIsInBackLayer_property.readFrom (dictionary: inDictionary, forKey: "mIsInBackLayer")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mY\n"
    ioString += "mWidth\n"
    ioString += "mHeight\n"
    ioString += "mIsInFrontLayer\n"
    ioString += "mIsInBackLayer\n"
    ioString += "mX\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mIsInFrontLayer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mIsInBackLayer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY = value
      }
      if let range = inDictionary ["mWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidth = value
      }
      if let range = inDictionary ["mHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHeight = value
      }
      if let range = inDictionary ["mIsInFrontLayer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mIsInFrontLayer = value
      }
      if let range = inDictionary ["mIsInBackLayer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mIsInBackLayer = value
      }
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

