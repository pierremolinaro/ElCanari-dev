//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPX1 : AnyObject {
  var mCPX1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPY1 : AnyObject {
  var mCPY1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPX2 : AnyObject {
  var mCPX2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPY2 : AnyObject {
  var mCPY2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mShape : AnyObject {
  var mShape : BorderCurveShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mNextX : AnyObject {
  var mNextX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mNextY : AnyObject {
  var mNextY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p2Xstring : AnyObject {
  var p2Xstring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p2Ystring : AnyObject {
  var p2Ystring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_descriptor : AnyObject {
  var descriptor : BorderCurveDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_isLine : AnyObject {
  var isLine : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BorderCurve : EBGraphicManagedObject,
         BorderCurve_mX,
         BorderCurve_mY,
         BorderCurve_mCPX1,
         BorderCurve_mCPY1,
         BorderCurve_mCPX2,
         BorderCurve_mCPY2,
         BorderCurve_mShape,
         BorderCurve_mNextX,
         BorderCurve_mNextY,
         BorderCurve_p2Xstring,
         BorderCurve_p2Ystring,
         BorderCurve_descriptor,
         BorderCurve_objectDisplay,
         BorderCurve_isLine,
         BorderCurve_selectionDisplay {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPX1
  //····················································································································

  final let mCPX1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPX1_toDefaultValue () {
    self.mCPX1 = 0
  }

  //····················································································································

  final var mCPX1 : Int {
    get { return self.mCPX1_property.propval }
    set { self.mCPX1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPY1
  //····················································································································

  final let mCPY1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPY1_toDefaultValue () {
    self.mCPY1 = 0
  }

  //····················································································································

  final var mCPY1 : Int {
    get { return self.mCPY1_property.propval }
    set { self.mCPY1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPX2
  //····················································································································

  final let mCPX2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPX2_toDefaultValue () {
    self.mCPX2 = 0
  }

  //····················································································································

  final var mCPX2 : Int {
    get { return self.mCPX2_property.propval }
    set { self.mCPX2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPY2
  //····················································································································

  final let mCPY2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPY2_toDefaultValue () {
    self.mCPY2 = 0
  }

  //····················································································································

  final var mCPY2 : Int {
    get { return self.mCPY2_property.propval }
    set { self.mCPY2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_BorderCurveShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = BorderCurveShape.line
  }

  //····················································································································

  final var mShape : BorderCurveShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: mNextX
  //····················································································································

  let mNextX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mNextX : Int? {
    get {
      switch self.mNextX_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mNextX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mNextY
  //····················································································································

  let mNextY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mNextY : Int? {
    get {
      switch self.mNextY_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mNextY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false)

  //····················································································································

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mNext
  //····················································································································

  final let mNext_property = StoredObject_BorderCurve (usedForSignature: false)

  //····················································································································

  final var mNext : BorderCurve? {
    get {
      return self.mNext_property.propval
    }
    set {
      if self.mNext_property.propval != nil {
        self.mNext_property.setProp (nil)
      }
      if newValue != nil {
        self.mNext_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mNext_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mPrevious
  //····················································································································

  final let mPrevious_property = StoredObject_BorderCurve (usedForSignature: false)

  //····················································································································

  final var mPrevious : BorderCurve? {
    get {
      return self.mPrevious_property.propval
    }
    set {
      if self.mPrevious_property.propval != nil {
        self.mPrevious_property.setProp (nil)
      }
      if newValue != nil {
        self.mPrevious_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mPrevious_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: p2Xstring
  //····················································································································

  final let p2Xstring_property = EBTransientProperty_String ()

  //····················································································································

  final var p2Xstring : String? {
    switch self.p2Xstring_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2Ystring
  //····················································································································

  final let p2Ystring_property = EBTransientProperty_String ()

  //····················································································································

  final var p2Ystring : String? {
    switch self.p2Ystring_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_BorderCurveDescriptor ()

  //····················································································································

  final var descriptor : BorderCurveDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isLine
  //····················································································································

  final let isLine_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isLine : Bool? {
    switch self.isLine_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCPX1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCPY1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCPX2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCPY2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mShape_property = EBStoredProperty_BorderCurveShape (defaultValue: BorderCurveShape.line, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.mRoot_none)
    self.mNext_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mNext_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNext_property.addEBObserver (self.mNext_none)
    self.mPrevious_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mPrevious_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPrevious_property.addEBObserver (self.mPrevious_none)
  //--- Atomic proxy property: mNextX
    self.mNextX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mNext_property {
        switch object.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mNext?.mX = inValue
    }
    self.mNextX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mNext?.mX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mNext_property.mX_property.addEBObserver (self.mNextX_property)
  //--- Atomic proxy property: mNextY
    self.mNextY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mNext_property {
        switch object.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mNext?.mY = inValue
    }
    self.mNextY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mNext?.mY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mNext_property.mY_property.addEBObserver (self.mNextY_property)
  //--- To one property: mRoot (has opposite to many relationship: mBorderCurves)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.remove (me) } }
    )
  //--- To one property: mNext (has opposite to one relationship: mPrevious)
    self.mNext_property.ebUndoManager = self.ebUndoManager
    self.mNext_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPrevious_property.setProp (me) } },
      resetter: { inObject in inObject.mPrevious_property.setProp (nil) }
    )
  //--- To one property: mPrevious (has opposite to one relationship: mNext)
    self.mPrevious_property.ebUndoManager = self.ebUndoManager
    self.mPrevious_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNext_property.setProp (me) } },
      resetter: { inObject in inObject.mNext_property.setProp (nil) }
    )
  //--- Atomic property: p2Xstring
    self.p2Xstring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNext_property.mX_property.selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_BorderCurve_p2Xstring (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.mX_property.addEBObserver (self.p2Xstring_property)
    self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.p2Xstring_property)
  //--- Atomic property: p2Ystring
    self.p2Ystring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNext_property.mY_property.selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_BorderCurve_p2Ystring (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.mY_property.addEBObserver (self.p2Ystring_property)
    self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.p2Ystring_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mNext_property.mX_property.selection, unwSelf.mNext_property.mY_property.selection, unwSelf.mCPX1_property.selection, unwSelf.mCPY1_property.selection, unwSelf.mCPX2_property.selection, unwSelf.mCPY2_property.selection, unwSelf.mShape_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
          return .single (transient_BorderCurve_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.descriptor_property)
    self.mY_property.addEBObserver (self.descriptor_property)
    self.mNext_property.mX_property.addEBObserver (self.descriptor_property)
    self.mNext_property.mY_property.addEBObserver (self.descriptor_property)
    self.mCPX1_property.addEBObserver (self.descriptor_property)
    self.mCPY1_property.addEBObserver (self.descriptor_property)
    self.mCPX2_property.addEBObserver (self.descriptor_property)
    self.mCPY2_property.addEBObserver (self.descriptor_property)
    self.mShape_property.addEBObserver (self.descriptor_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mNext_property.mX_property.selection, unwSelf.mNext_property.mY_property.selection, unwSelf.mCPX1_property.selection, unwSelf.mCPY1_property.selection, unwSelf.mCPX2_property.selection, unwSelf.mCPY2_property.selection, unwSelf.mShape_property.selection, unwSelf.mRoot_property.mBoardLimitsWidth_property.selection, unwSelf.mRoot_property.mBoardClearance_property.selection, unwSelf.mRoot_property.mBoardShape_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
          return .single (transient_BorderCurve_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mNext_property.mX_property.addEBObserver (self.objectDisplay_property)
    self.mNext_property.mY_property.addEBObserver (self.objectDisplay_property)
    self.mCPX1_property.addEBObserver (self.objectDisplay_property)
    self.mCPY1_property.addEBObserver (self.objectDisplay_property)
    self.mCPX2_property.addEBObserver (self.objectDisplay_property)
    self.mCPY2_property.addEBObserver (self.objectDisplay_property)
    self.mShape_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardLimitsWidth_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardClearance_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardShape_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: isLine
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mShape_property.selection) {
        case (.single (let v0)) :
          return .single (transient_BorderCurve_isLine (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mShape_property.addEBObserver (self.isLine_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mX_property.selection, unwSelf.mY_property.selection, unwSelf.mNext_property.mX_property.selection, unwSelf.mNext_property.mY_property.selection, unwSelf.mCPX1_property.selection, unwSelf.mCPY1_property.selection, unwSelf.mCPX2_property.selection, unwSelf.mCPY2_property.selection, unwSelf.mShape_property.selection, unwSelf.mRoot_property.mBoardShape_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
          return .single (transient_BorderCurve_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mNext_property.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mNext_property.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mCPX1_property.addEBObserver (self.selectionDisplay_property)
    self.mCPY1_property.addEBObserver (self.selectionDisplay_property)
    self.mCPX2_property.addEBObserver (self.selectionDisplay_property)
    self.mCPY2_property.addEBObserver (self.selectionDisplay_property)
    self.mShape_property.addEBObserver (self.selectionDisplay_property)
    self.mRoot_property.mBoardShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: mNextX
    self.mNextX_property.mReadModelFunction = nil
    self.mNextX_property.mWriteModelFunction = nil
    self.mNextX_property.mValidateAndWriteModelFunction = nil
    self.mNext_property.mX_property.removeEBObserver (self.mNextX_property)
  //--- Atomic proxy property: mNextY
    self.mNextY_property.mReadModelFunction = nil
    self.mNextY_property.mWriteModelFunction = nil
    self.mNextY_property.mValidateAndWriteModelFunction = nil
    self.mNext_property.mY_property.removeEBObserver (self.mNextY_property)
    // self.mNext_property.mX_property.removeEBObserver (self.p2Xstring_property)
    // self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (self.p2Xstring_property)
    // self.mNext_property.mY_property.removeEBObserver (self.p2Ystring_property)
    // self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (self.p2Ystring_property)
    // self.mX_property.removeEBObserver (self.descriptor_property)
    // self.mY_property.removeEBObserver (self.descriptor_property)
    // self.mNext_property.mX_property.removeEBObserver (self.descriptor_property)
    // self.mNext_property.mY_property.removeEBObserver (self.descriptor_property)
    // self.mCPX1_property.removeEBObserver (self.descriptor_property)
    // self.mCPY1_property.removeEBObserver (self.descriptor_property)
    // self.mCPX2_property.removeEBObserver (self.descriptor_property)
    // self.mCPY2_property.removeEBObserver (self.descriptor_property)
    // self.mShape_property.removeEBObserver (self.descriptor_property)
    // self.mX_property.removeEBObserver (self.objectDisplay_property)
    // self.mY_property.removeEBObserver (self.objectDisplay_property)
    // self.mNext_property.mX_property.removeEBObserver (self.objectDisplay_property)
    // self.mNext_property.mY_property.removeEBObserver (self.objectDisplay_property)
    // self.mCPX1_property.removeEBObserver (self.objectDisplay_property)
    // self.mCPY1_property.removeEBObserver (self.objectDisplay_property)
    // self.mCPX2_property.removeEBObserver (self.objectDisplay_property)
    // self.mCPY2_property.removeEBObserver (self.objectDisplay_property)
    // self.mShape_property.removeEBObserver (self.objectDisplay_property)
    // self.mRoot_property.mBoardLimitsWidth_property.removeEBObserver (self.objectDisplay_property)
    // self.mRoot_property.mBoardClearance_property.removeEBObserver (self.objectDisplay_property)
    // self.mRoot_property.mBoardShape_property.removeEBObserver (self.objectDisplay_property)
    // self.mShape_property.removeEBObserver (self.isLine_property)
    // self.mX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mY_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNext_property.mX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNext_property.mY_property.removeEBObserver (self.selectionDisplay_property)
    // self.mCPX1_property.removeEBObserver (self.selectionDisplay_property)
    // self.mCPY1_property.removeEBObserver (self.selectionDisplay_property)
    // self.mCPX2_property.removeEBObserver (self.selectionDisplay_property)
    // self.mCPY2_property.removeEBObserver (self.selectionDisplay_property)
    // self.mShape_property.removeEBObserver (self.selectionDisplay_property)
    // self.mRoot_property.mBoardShape_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mX",
        object: self.mX_property,
        y: &y,
        view: view,
        observerExplorer: &self.mX_property.mObserverExplorer,
        valueExplorer: &self.mX_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mY",
        object: self.mY_property,
        y: &y,
        view: view,
        observerExplorer: &self.mY_property.mObserverExplorer,
        valueExplorer: &self.mY_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mCPX1",
        object: self.mCPX1_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCPX1_property.mObserverExplorer,
        valueExplorer: &self.mCPX1_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mCPY1",
        object: self.mCPY1_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCPY1_property.mObserverExplorer,
        valueExplorer: &self.mCPY1_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mCPX2",
        object: self.mCPX2_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCPX2_property.mObserverExplorer,
        valueExplorer: &self.mCPX2_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mCPY2",
        object: self.mCPY2_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCPY2_property.mObserverExplorer,
        valueExplorer: &self.mCPY2_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShape",
        object: self.mShape_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShape_property.mObserverExplorer,
        valueExplorer: &self.mShape_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "p2Xstring",
        object: self.p2Xstring_property,
        y: &y,
        view: view,
        observerExplorer: &self.p2Xstring_property.mObserverExplorer,
        valueExplorer: &self.p2Xstring_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "p2Ystring",
        object: self.p2Ystring_property,
        y: &y,
        view: view,
        observerExplorer: &self.p2Ystring_property.mObserverExplorer,
        valueExplorer: &self.p2Ystring_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "descriptor",
        object: self.descriptor_property,
        y: &y,
        view: view,
        observerExplorer: &self.descriptor_property.mObserverExplorer,
        valueExplorer: &self.descriptor_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "isLine",
        object: self.isLine_property,
        y: &y,
        view: view,
        observerExplorer: &self.isLine_property.mObserverExplorer,
        valueExplorer: &self.isLine_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForToOneRelationshipNamed (
        "mRoot",
        object: self.mRoot_property,
        y: &y,
        view: view,
        valueExplorer:&self.mRoot_property.mValueExplorer
      )
      createEntryForToOneRelationshipNamed (
        "mNext",
        object: self.mNext_property,
        y: &y,
        view: view,
        valueExplorer:&self.mNext_property.mValueExplorer
      )
      createEntryForToOneRelationshipNamed (
        "mPrevious",
        object: self.mPrevious_property,
        y: &y,
        view: view,
        valueExplorer:&self.mPrevious_property.mValueExplorer
      )
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mCPX1
    self.mCPX1_property.mObserverExplorer = nil
    self.mCPX1_property.mValueExplorer = nil
  //--- Atomic property: mCPY1
    self.mCPY1_property.mObserverExplorer = nil
    self.mCPY1_property.mValueExplorer = nil
  //--- Atomic property: mCPX2
    self.mCPX2_property.mObserverExplorer = nil
    self.mCPX2_property.mValueExplorer = nil
  //--- Atomic property: mCPY2
    self.mCPY2_property.mObserverExplorer = nil
    self.mCPY2_property.mValueExplorer = nil
  //--- Atomic property: mShape
    self.mShape_property.mObserverExplorer = nil
    self.mShape_property.mValueExplorer = nil
    //--- Atomic proxy property: mNextX
      self.mNextX_property.mObserverExplorer = nil
      self.mNextX_property.mValueExplorer = nil
    //--- Atomic proxy property: mNextY
      self.mNextY_property.mObserverExplorer = nil
      self.mNextY_property.mValueExplorer = nil
    //--- To one property: mRoot
      self.mRoot_property.mObserverExplorer = nil
      self.mRoot_property.mValueExplorer = nil
    //--- To one property: mNext
      self.mNext_property.mObserverExplorer = nil
      self.mNext_property.mValueExplorer = nil
    //--- To one property: mPrevious
      self.mPrevious_property.mObserverExplorer = nil
      self.mPrevious_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
    self.mNext = nil
    self.mPrevious = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mCPX1
      self.mCPX1_property.storeIn (dictionary: ioDictionary, forKey: "mCPX1")
    //--- Atomic property: mCPY1
      self.mCPY1_property.storeIn (dictionary: ioDictionary, forKey: "mCPY1")
    //--- Atomic property: mCPX2
      self.mCPX2_property.storeIn (dictionary: ioDictionary, forKey: "mCPX2")
    //--- Atomic property: mCPY2
      self.mCPY2_property.storeIn (dictionary: ioDictionary, forKey: "mCPY2")
    //--- Atomic property: mShape
      self.mShape_property.storeIn (dictionary: ioDictionary, forKey: "mShape")
  //--- To one property: mNext // Opposite is toOne mPrevious
    self.store (managedObject:self.mNext_property.propval,
      relationshipName: "mNext",
      intoDictionary: ioDictionary)
  //--- To one property: mPrevious // Opposite is toOne mNext
    self.store (managedObject:self.mPrevious_property.propval,
      relationshipName: "mPrevious",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  //--- To one property: mNext
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNext",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mNext_property.setProp (entity)
      }
    }
  //--- To one property: mPrevious
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPrevious",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mPrevious_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mCPX1
    self.mCPX1_property.readFrom (dictionary: inDictionary, forKey: "mCPX1")
  //--- Atomic property: mCPY1
    self.mCPY1_property.readFrom (dictionary: inDictionary, forKey: "mCPY1")
  //--- Atomic property: mCPX2
    self.mCPX2_property.readFrom (dictionary: inDictionary, forKey: "mCPX2")
  //--- Atomic property: mCPY2
    self.mCPY2_property.readFrom (dictionary: inDictionary, forKey: "mCPY2")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey: "mShape")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mCPX1\n"
    ioString += "mCPY1\n"
    ioString += "mCPX2\n"
    ioString += "mCPY2\n"
    ioString += "mShape\n"
  //--- To one relationships
    ioString += "mRoot\n"
    ioString += "mNext\n"
    ioString += "mPrevious\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPX1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPY1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPX2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPY2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNext {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mPrevious {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX = value
      }
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY = value
      }
      if let range = inDictionary ["mCPX1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCPX1 = value
      }
      if let range = inDictionary ["mCPY1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCPY1 = value
      }
      if let range = inDictionary ["mCPX2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCPX2 = value
      }
      if let range = inDictionary ["mCPY2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCPY2 = value
      }
      if let range = inDictionary ["mShape"], let value = BorderCurveShape.unarchiveFromDataRange (inData, range) {
        self.mShape = value
      }
    //--- To one relationships
      if let range = inDictionary ["mRoot"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! ProjectRoot
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mRoot = object }
      }
      if let range = inDictionary ["mNext"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! BorderCurve
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mNext = object }
      }
      if let range = inDictionary ["mPrevious"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! BorderCurve
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mPrevious = object }
      }
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  //--- To one property: mNext
    if let object = self.mNext {
      objects.append (object)
    }
  //--- To one property: mPrevious
    if let object = self.mPrevious {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  //--- To one property: mNext
    if let object = self.mNext {
      objects.append (object)
    }
  //--- To one property: mPrevious
    if let object = self.mPrevious {
      objects.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_BorderCurve (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_BorderCurve (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_BorderCurve (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    translate_BorderCurve (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_BorderCurve (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_BorderCurve (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_BorderCurve (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_BorderCurve (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_BorderCurve ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_BorderCurve ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_BorderCurve ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_BorderCurve ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_BorderCurve (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90Clockwise_BorderCurve (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90CounterClockwise_BorderCurve (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_BorderCurve (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_BorderCurve (additionalDictionary: inDictionary, objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_BorderCurve ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_BorderCurve ()
  }

  //····················································································································
  //  Can be deleted
  //····················································································································

  override func canBeDeleted () -> Bool {
    return false
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

