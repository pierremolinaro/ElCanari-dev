//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mRotation : AnyObject {
  var mRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mMirror : AnyObject {
  var mMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolInstanceName : AnyObject {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolTypeName : AnyObject {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetX : AnyObject {
  var mDisplayComponentNameOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetY : AnyObject {
  var mDisplayComponentNameOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValue : AnyObject {
  var mDisplayComponentValue : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetX : AnyObject {
  var mDisplayComponentValueOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetY : AnyObject {
  var mDisplayComponentValueOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentValueProxy : AnyObject {
  var componentValueProxy : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentName : AnyObject {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_deviceName : AnyObject {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInfo : AnyObject {
  var symbolInfo : ComponentSymbolInfo? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_pinPadAssignments : AnyObject {
  var pinPadAssignments : ThreeStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInSchematic : AnyObject {
  var symbolInSchematic : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ComponentSymbolInProject : SchematicObject,
         ComponentSymbolInProject_mCenterX,
         ComponentSymbolInProject_mCenterY,
         ComponentSymbolInProject_mRotation,
         ComponentSymbolInProject_mMirror,
         ComponentSymbolInProject_mSymbolInstanceName,
         ComponentSymbolInProject_mSymbolTypeName,
         ComponentSymbolInProject_mDisplayComponentNameOffsetX,
         ComponentSymbolInProject_mDisplayComponentNameOffsetY,
         ComponentSymbolInProject_mDisplayComponentValue,
         ComponentSymbolInProject_mDisplayComponentValueOffsetX,
         ComponentSymbolInProject_mDisplayComponentValueOffsetY,
         ComponentSymbolInProject_componentValueProxy,
         ComponentSymbolInProject_componentName,
         ComponentSymbolInProject_deviceName,
         ComponentSymbolInProject_symbolInfo,
         ComponentSymbolInProject_pinPadAssignments,
         ComponentSymbolInProject_objectDisplay,
         ComponentSymbolInProject_selectionDisplay,
         ComponentSymbolInProject_symbolInSchematic {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_QuadrantRotation

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = QuadrantRotation.rotation0
  }

  //····················································································································

  final var mRotation : QuadrantRotation {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mMirror
  //····················································································································

  final let mMirror_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mMirror_toDefaultValue () {
    self.mMirror = false
  }

  //····················································································································

  final var mMirror : Bool {
    get { return self.mMirror_property.propval }
    set { self.mMirror_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  final let mSymbolInstanceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolInstanceName_toDefaultValue () {
    self.mSymbolInstanceName = ""
  }

  //····················································································································

  final var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  final let mSymbolTypeName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolTypeName_toDefaultValue () {
    self.mSymbolTypeName = ""
  }

  //····················································································································

  final var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetX
  //····················································································································

  final let mDisplayComponentNameOffsetX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentNameOffsetX_toDefaultValue () {
    self.mDisplayComponentNameOffsetX = 0
  }

  //····················································································································

  final var mDisplayComponentNameOffsetX : Int {
    get { return self.mDisplayComponentNameOffsetX_property.propval }
    set { self.mDisplayComponentNameOffsetX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetY
  //····················································································································

  final let mDisplayComponentNameOffsetY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentNameOffsetY_toDefaultValue () {
    self.mDisplayComponentNameOffsetY = 457200
  }

  //····················································································································

  final var mDisplayComponentNameOffsetY : Int {
    get { return self.mDisplayComponentNameOffsetY_property.propval }
    set { self.mDisplayComponentNameOffsetY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValue
  //····················································································································

  final let mDisplayComponentValue_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mDisplayComponentValue_toDefaultValue () {
    self.mDisplayComponentValue = true
  }

  //····················································································································

  final var mDisplayComponentValue : Bool {
    get { return self.mDisplayComponentValue_property.propval }
    set { self.mDisplayComponentValue_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetX
  //····················································································································

  final let mDisplayComponentValueOffsetX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentValueOffsetX_toDefaultValue () {
    self.mDisplayComponentValueOffsetX = 0
  }

  //····················································································································

  final var mDisplayComponentValueOffsetX : Int {
    get { return self.mDisplayComponentValueOffsetX_property.propval }
    set { self.mDisplayComponentValueOffsetX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetY
  //····················································································································

  final let mDisplayComponentValueOffsetY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentValueOffsetY_toDefaultValue () {
    self.mDisplayComponentValueOffsetY = -457200
  }

  //····················································································································

  final var mDisplayComponentValueOffsetY : Int {
    get { return self.mDisplayComponentValueOffsetY_property.propval }
    set { self.mDisplayComponentValueOffsetY_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  final let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mPoints : EBReferenceArray  <PointInSchematic> {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: componentValueProxy
  //····················································································································

  let componentValueProxy_property = EBPropertyProxy_String ()

  //····················································································································

  var componentValueProxy : String? {
    get {
      switch self.componentValueProxy_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.componentValueProxy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

  final let mComponent_property = StoredObject_ComponentInProject (usedForSignature: false)

  //····················································································································

  final var mComponent : ComponentInProject? {
    get {
      return self.mComponent_property.propval
    }
    set {
      if self.mComponent_property.propval != nil {
        self.mComponent_property.setProp (nil)
      }
      if newValue != nil {
        self.mComponent_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mComponent_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  final let componentName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentName : String? {
    switch self.componentName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  final let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceName : String? {
    switch self.deviceName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInfo
  //····················································································································

  final let symbolInfo_property = EBTransientProperty_ComponentSymbolInfo ()

  //····················································································································

  final var symbolInfo : ComponentSymbolInfo? {
    switch self.symbolInfo_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInSchematic
  //····················································································································

  final let symbolInSchematic_property = EBTransientProperty_Bool ()

  //····················································································································

  final var symbolInSchematic : Bool? {
    switch self.symbolInSchematic_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: ebUndoManager)
    self.mMirror_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mDisplayComponentNameOffsetX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mDisplayComponentNameOffsetY_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: ebUndoManager)
    self.mDisplayComponentValue_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mDisplayComponentValueOffsetX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mDisplayComponentValueOffsetY_property = EBStoredProperty_Int (defaultValue: -457200, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.mComponent_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mComponent_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserver (self.mComponent_none)
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.ebUndoManager = self.ebUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mComponent_property {
        switch object.mComponentValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mComponent?.mComponentValue = inValue
    }
    self.componentValueProxy_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mComponent?.mComponentValue_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mComponent_property.mComponentValue_property.addEBObserver (self.componentValueProxy_property)
  //--- To one property: mComponent (has opposite to many relationship: mSymbols)
    self.mComponent_property.ebUndoManager = self.ebUndoManager
    self.mComponent_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.remove (me) } }
    )
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponent_property.componentName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_componentName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.componentName_property.addEBObserver (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponent_property.deviceName_property.selection) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_deviceName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.deviceName_property.addEBObserver (self.deviceName_property)
  //--- Atomic property: symbolInfo
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mRotation_property.selection, unwSelf.mMirror_property.selection, unwSelf.componentName_property.selection, unwSelf.mComponent_property.mComponentValue_property.selection, unwSelf.mComponent_property.deviceSymbolDictionary_property.selection, unwSelf.mSymbolInstanceName_property.selection, unwSelf.mSymbolTypeName_property.selection, unwSelf.mCenterX_property.selection, unwSelf.mCenterY_property.selection, preferences_pinNameFont_property.selection, unwSelf.mPoints_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
          return .single (transient_ComponentSymbolInProject_symbolInfo (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.addEBObserver (self.symbolInfo_property)
    self.mMirror_property.addEBObserver (self.symbolInfo_property)
    self.componentName_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.mComponentValue_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.deviceSymbolDictionary_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolInstanceName_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.addEBObserver (self.symbolInfo_property)
    self.mCenterX_property.addEBObserver (self.symbolInfo_property)
    self.mCenterY_property.addEBObserver (self.symbolInfo_property)
    preferences_pinNameFont_property.addEBObserver (self.symbolInfo_property)
    self.mPoints_property.addEBObserverOf_symbolNameNetName (self.symbolInfo_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponent_property.pinPadAssignments_property.selection) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (preferences_pinNameFont_property.selection, unwSelf.mDisplayComponentNameOffsetX_property.selection, unwSelf.mDisplayComponentNameOffsetY_property.selection, unwSelf.mDisplayComponentValue_property.selection, unwSelf.mDisplayComponentValueOffsetX_property.selection, unwSelf.mDisplayComponentValueOffsetY_property.selection, unwSelf.symbolInfo_property.selection, preferences_symbolColorForSchematic_property.selection, unwSelf.mSymbolInstanceName_property.selection, unwSelf.mSymbolTypeName_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
          return .single (transient_ComponentSymbolInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_pinNameFont_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (preferences_pinNameFont_property.selection, preferences_schematicBackColor_property.selection, unwSelf.mDisplayComponentNameOffsetX_property.selection, unwSelf.mDisplayComponentNameOffsetY_property.selection, unwSelf.mDisplayComponentValue_property.selection, unwSelf.mDisplayComponentValueOffsetX_property.selection, unwSelf.mDisplayComponentValueOffsetY_property.selection, unwSelf.symbolInfo_property.selection, unwSelf.mRotation_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
          return .single (transient_ComponentSymbolInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_pinNameFont_property.addEBObserver (self.selectionDisplay_property)
    preferences_schematicBackColor_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: symbolInSchematic
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.isPlacedInSchematic_property.selection) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_symbolInSchematic (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInSchematic_property.addEBObserver (self.symbolInSchematic_property)
  //--- Install undoers and opposite setter for relationships
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = nil
    self.componentValueProxy_property.mWriteModelFunction = nil
    self.componentValueProxy_property.mValidateAndWriteModelFunction = nil
    self.mComponent_property.mComponentValue_property.removeEBObserver (self.componentValueProxy_property)
    // self.mComponent_property.componentName_property.removeEBObserver (self.componentName_property)
    // self.mComponent_property.deviceName_property.removeEBObserver (self.deviceName_property)
    // self.mRotation_property.removeEBObserver (self.symbolInfo_property)
    // self.mMirror_property.removeEBObserver (self.symbolInfo_property)
    // self.componentName_property.removeEBObserver (self.symbolInfo_property)
    // self.mComponent_property.mComponentValue_property.removeEBObserver (self.symbolInfo_property)
    // self.mComponent_property.deviceSymbolDictionary_property.removeEBObserver (self.symbolInfo_property)
    // self.mSymbolInstanceName_property.removeEBObserver (self.symbolInfo_property)
    // self.mSymbolTypeName_property.removeEBObserver (self.symbolInfo_property)
    // self.mCenterX_property.removeEBObserver (self.symbolInfo_property)
    // self.mCenterY_property.removeEBObserver (self.symbolInfo_property)
    // preferences_pinNameFont_property.removeEBObserver (self.symbolInfo_property)
    // self.mPoints_property.removeEBObserverOf_symbolNameNetName (self.symbolInfo_property)
    // self.mComponent_property.pinPadAssignments_property.removeEBObserver (self.pinPadAssignments_property)
    // preferences_pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayComponentValue_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.objectDisplay_property)
    // self.symbolInfo_property.removeEBObserver (self.objectDisplay_property)
    // preferences_symbolColorForSchematic_property.removeEBObserver (self.objectDisplay_property)
    // self.mSymbolInstanceName_property.removeEBObserver (self.objectDisplay_property)
    // self.mSymbolTypeName_property.removeEBObserver (self.objectDisplay_property)
    // preferences_pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_schematicBackColor_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayComponentValue_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    // self.symbolInfo_property.removeEBObserver (self.selectionDisplay_property)
    // self.mRotation_property.removeEBObserver (self.selectionDisplay_property)
    // self.isPlacedInSchematic_property.removeEBObserver (self.symbolInSchematic_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mCenterX",
      idx: self.mCenterX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCenterX_property.mObserverExplorer,
      valueExplorer: &self.mCenterX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCenterY",
      idx: self.mCenterY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCenterY_property.mObserverExplorer,
      valueExplorer: &self.mCenterY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx: self.mRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRotation_property.mObserverExplorer,
      valueExplorer: &self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mMirror",
      idx: self.mMirror_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mMirror_property.mObserverExplorer,
      valueExplorer: &self.mMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolInstanceName",
      idx: self.mSymbolInstanceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolInstanceName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolTypeName",
      idx: self.mSymbolTypeName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolTypeName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetX",
      idx: self.mDisplayComponentNameOffsetX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentNameOffsetX_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentNameOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetY",
      idx: self.mDisplayComponentNameOffsetY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentNameOffsetY_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentNameOffsetY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValue",
      idx: self.mDisplayComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetX",
      idx: self.mDisplayComponentValueOffsetX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValueOffsetX_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValueOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetY",
      idx: self.mDisplayComponentValueOffsetY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValueOffsetY_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValueOffsetY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInfo",
      idx: self.symbolInfo_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolInfo_property.mObserverExplorer,
      valueExplorer: &self.symbolInfo_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinPadAssignments",
      idx: self.pinPadAssignments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.pinPadAssignments_property.mObserverExplorer,
      valueExplorer: &self.pinPadAssignments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInSchematic",
      idx: self.symbolInSchematic_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolInSchematic_property.mObserverExplorer,
      valueExplorer: &self.symbolInSchematic_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mPoints",
      idx:mPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPoints_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mComponent",
      idx:self.mComponent_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mComponent_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mCenterX
    self.mCenterX_property.mObserverExplorer = nil
    self.mCenterX_property.mValueExplorer = nil
  //--- Atomic property: mCenterY
    self.mCenterY_property.mObserverExplorer = nil
    self.mCenterY_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mMirror
    self.mMirror_property.mObserverExplorer = nil
    self.mMirror_property.mValueExplorer = nil
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.mObserverExplorer = nil
    self.mSymbolTypeName_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetY_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.mObserverExplorer = nil
    self.mDisplayComponentValue_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetY_property.mValueExplorer = nil
  //--- To many property: mPoints
    self.mPoints_property.mValueExplorer = nil
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mObserverExplorer = nil
    self.componentValueProxy_property.mValueExplorer = nil
  //--- To one property: mComponent
    self.mComponent_property.mObserverExplorer = nil
    self.mComponent_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mPoints.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mComponent = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey: "mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey: "mRotation")
  //--- Atomic property: mMirror
    self.mMirror_property.storeIn (dictionary: ioDictionary, forKey: "mMirror")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayComponentValueOffsetY")
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval.values,
      relationshipName: "mPoints",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mPoints
/*    self.mPoints_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPoints",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PointInSchematic]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPoints",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [PointInSchematic]
      self.mPoints_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mComponent
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mComponent",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentInProject {
        self.mComponent_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey: "mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey: "mRotation")
  //--- Atomic property: mMirror
    self.mMirror_property.readFrom (dictionary: inDictionary, forKey: "mMirror")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValueOffsetY")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mCenterX\n"
    ioString += "mCenterY\n"
    ioString += "mRotation\n"
    ioString += "mMirror\n"
    ioString += "mSymbolInstanceName\n"
    ioString += "mSymbolTypeName\n"
    ioString += "mDisplayComponentNameOffsetX\n"
    ioString += "mDisplayComponentNameOffsetY\n"
    ioString += "mDisplayComponentValue\n"
    ioString += "mDisplayComponentValueOffsetX\n"
    ioString += "mDisplayComponentValueOffsetY\n"
  //--- To one relationships
    ioString += "mComponent\n"
  //--- To many relationships
    ioString += "mPoints\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mCenterX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCenterY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mMirror.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolInstanceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolTypeName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentNameOffsetX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentNameOffsetY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValueOffsetX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValueOffsetY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mComponent {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPoints.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mCenterX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterX = value
      }
      if let range = inDictionary ["mCenterY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterY = value
      }
      if let range = inDictionary ["mRotation"], let value = QuadrantRotation.unarchiveFromDataRange (inData, range) {
        self.mRotation = value
      }
      if let range = inDictionary ["mMirror"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mMirror = value
      }
      if let range = inDictionary ["mSymbolInstanceName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mSymbolInstanceName = value
      }
      if let range = inDictionary ["mSymbolTypeName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mSymbolTypeName = value
      }
      if let range = inDictionary ["mDisplayComponentNameOffsetX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDisplayComponentNameOffsetX = value
      }
      if let range = inDictionary ["mDisplayComponentNameOffsetY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDisplayComponentNameOffsetY = value
      }
      if let range = inDictionary ["mDisplayComponentValue"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mDisplayComponentValue = value
      }
      if let range = inDictionary ["mDisplayComponentValueOffsetX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDisplayComponentValueOffsetX = value
      }
      if let range = inDictionary ["mDisplayComponentValueOffsetY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDisplayComponentValueOffsetY = value
      }
    //--- To one relationships
      if let range = inDictionary ["mComponent"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! ComponentInProject
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mComponent = object }
      }
    //--- To many relationships
      if let range = inDictionary ["mPoints"], range.length > 0 {
        var relationshipArray = EBReferenceArray  <PointInSchematic> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! PointInSchematic)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mPoints = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPoints
    for managedObject in self.mPoints.values {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mPoints
    for managedObject in self.mPoints.values {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

