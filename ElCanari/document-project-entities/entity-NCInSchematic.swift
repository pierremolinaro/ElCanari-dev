//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematic_mOrientation : AnyObject {
  var mOrientation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematic_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematic_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class NCInSchematic : SchematicObject,
         NCInSchematic_mOrientation,
         NCInSchematic_objectDisplay,
         NCInSchematic_selectionDisplay {

  //····················································································································
  //   Atomic property: mOrientation
  //····················································································································

  final let mOrientation_property : EBStoredProperty_QuadrantRotation

  //····················································································································

  final func reset_mOrientation_toDefaultValue () {
    self.mOrientation = QuadrantRotation.rotation0
  }

  //····················································································································

  final var mOrientation : QuadrantRotation {
    get { return self.mOrientation_property.propval }
    set { self.mOrientation_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mPoint
  //····················································································································

  final let mPoint_property = StoredObject_PointInSchematic (usedForSignature: false)

  //····················································································································

  final var mPoint : PointInSchematic? {
    get {
      return self.mPoint_property.propval
    }
    set {
      if self.mPoint_property.propval != nil {
        self.mPoint_property.setProp (nil)
      }
      if newValue != nil {
        self.mPoint_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final let mPoint_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mOrientation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.mPoint_none.mReadModelFunction = { [weak self] in // §
      if let uwSelf = self {
        return .single (uwSelf.mPoint_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserver (self.mPoint_none)
  //--- To one property: mPoint (has opposite to one relationship: mNC)
    self.mPoint_property.ebUndoManager = self.ebUndoManager
    self.mPoint_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNC_property.setProp (me) } },
      resetter: { inObject in inObject.mNC_property.setProp (nil) }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPoint_property.location_property.selection, unwSelf.mOrientation_property.selection, unwSelf.mPoint_property.symbolRotation_property.selection, preferences_pinNameFont_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_NCInSchematic_objectDisplay (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.location_property.addEBObserver (self.objectDisplay_property)
    self.mOrientation_property.addEBObserver (self.objectDisplay_property)
    self.mPoint_property.symbolRotation_property.addEBObserver (self.objectDisplay_property)
    preferences_pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mPoint_property.location_property.selection, unwSelf.mOrientation_property.selection, unwSelf.mPoint_property.symbolRotation_property.selection, preferences_pinNameFont_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
          return .single (transient_NCInSchematic_selectionDisplay (v0, v1, v2, v3))
        case (.multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.location_property.addEBObserver (self.selectionDisplay_property)
    self.mOrientation_property.addEBObserver (self.selectionDisplay_property)
    self.mPoint_property.symbolRotation_property.addEBObserver (self.selectionDisplay_property)
    preferences_pinNameFont_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mPoint_property.location_property.removeEBObserver (self.objectDisplay_property)
    // self.mOrientation_property.removeEBObserver (self.objectDisplay_property)
    // self.mPoint_property.symbolRotation_property.removeEBObserver (self.objectDisplay_property)
    // preferences_pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    // self.mPoint_property.location_property.removeEBObserver (self.selectionDisplay_property)
    // self.mOrientation_property.removeEBObserver (self.selectionDisplay_property)
    // self.mPoint_property.symbolRotation_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mOrientation",
        object: self.mOrientation_property,
        y: &y,
        view: view,
        observerExplorer: &self.mOrientation_property.mObserverExplorer,
        valueExplorer: &self.mOrientation_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForToOneRelationshipNamed (
        "mPoint",
        object: self.mPoint_property,
        y: &y,
        view: view,
        valueExplorer:&self.mPoint_property.mValueExplorer
      )
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mOrientation
    self.mOrientation_property.mObserverExplorer = nil
    self.mOrientation_property.mValueExplorer = nil
    //--- To one property: mPoint
      self.mPoint_property.mObserverExplorer = nil
      self.mPoint_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mPoint = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mOrientation
      self.mOrientation_property.storeIn (dictionary: ioDictionary, forKey: "mOrientation")
  //--- To one property: mPoint // Opposite is toOne mNC
    self.store (managedObject:self.mPoint_property.propval,
      relationshipName: "mPoint",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: mPoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PointInSchematic {
        self.mPoint_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mOrientation
    self.mOrientation_property.readFrom (dictionary: inDictionary, forKey: "mOrientation")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mOrientation\n"
  //--- To one relationships
    ioString += "mPoint\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mOrientation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mPoint {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mOrientation"], let value = QuadrantRotation.unarchiveFromDataRange (inData, range) {
        self.mOrientation = value
      }
    //--- To one relationships
      if let range = inDictionary ["mPoint"], let objectIndex = inData.base62EncodedInt (range: range) {
        let object = inObjectArray [objectIndex] as! PointInSchematic
        inParallelObjectSetupContext.addToOneSetupDeferredOperation { self.mPoint = object }
      }
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mPoint
    if let object = self.mPoint {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mPoint
    if let object = self.mPoint {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

