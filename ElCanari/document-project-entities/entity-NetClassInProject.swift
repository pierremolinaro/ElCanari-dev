//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetClassName : AnyObject {
  var mNetClassName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetClassColor : AnyObject {
  var mNetClassColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mTrackWidth : AnyObject {
  var mTrackWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mTrackWidthUnit : AnyObject {
  var mTrackWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaHoleDiameter : AnyObject {
  var mViaHoleDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaHoleDiameterUnit : AnyObject {
  var mViaHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaPadDiameter : AnyObject {
  var mViaPadDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaPadDiameterUnit : AnyObject {
  var mViaPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnFrontSide : AnyObject {
  var mAllowTracksOnFrontSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnBackSide : AnyObject {
  var mAllowTracksOnBackSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnInner1Layer : AnyObject {
  var mAllowTracksOnInner1Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnInner2Layer : AnyObject {
  var mAllowTracksOnInner2Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnInner3Layer : AnyObject {
  var mAllowTracksOnInner3Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mAllowTracksOnInner4Layer : AnyObject {
  var mAllowTracksOnInner4Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_trackWidthString : AnyObject {
  var trackWidthString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_viaHoleDiameter : AnyObject {
  var viaHoleDiameter : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_viaPadDiameter : AnyObject {
  var viaPadDiameter : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnFrontSideString : AnyObject {
  var allowTracksOnFrontSideString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnBackSideString : AnyObject {
  var allowTracksOnBackSideString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnInner1LayerString : AnyObject {
  var allowTracksOnInner1LayerString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnInner2LayerString : AnyObject {
  var allowTracksOnInner2LayerString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnInner3LayerString : AnyObject {
  var allowTracksOnInner3LayerString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_allowTracksOnInner4LayerString : AnyObject {
  var allowTracksOnInner4LayerString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_canRemove : AnyObject {
  var canRemove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_netUsage : AnyObject {
  var netUsage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_netsDescription : AnyObject {
  var netsDescription : NetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_netWarningCount : AnyObject {
  var netWarningCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class NetClassInProject : EBManagedObject,
         NetClassInProject_mNetClassName,
         NetClassInProject_mNetClassColor,
         NetClassInProject_mTrackWidth,
         NetClassInProject_mTrackWidthUnit,
         NetClassInProject_mViaHoleDiameter,
         NetClassInProject_mViaHoleDiameterUnit,
         NetClassInProject_mViaPadDiameter,
         NetClassInProject_mViaPadDiameterUnit,
         NetClassInProject_mAllowTracksOnFrontSide,
         NetClassInProject_mAllowTracksOnBackSide,
         NetClassInProject_mAllowTracksOnInner1Layer,
         NetClassInProject_mAllowTracksOnInner2Layer,
         NetClassInProject_mAllowTracksOnInner3Layer,
         NetClassInProject_mAllowTracksOnInner4Layer,
         NetClassInProject_trackWidthString,
         NetClassInProject_viaHoleDiameter,
         NetClassInProject_viaPadDiameter,
         NetClassInProject_allowTracksOnFrontSideString,
         NetClassInProject_allowTracksOnBackSideString,
         NetClassInProject_allowTracksOnInner1LayerString,
         NetClassInProject_allowTracksOnInner2LayerString,
         NetClassInProject_allowTracksOnInner3LayerString,
         NetClassInProject_allowTracksOnInner4LayerString,
         NetClassInProject_canRemove,
         NetClassInProject_netUsage,
         NetClassInProject_netsDescription,
         NetClassInProject_netWarningCount {

  //····················································································································
  //   Atomic property: mNetClassName
  //····················································································································

  final let mNetClassName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mNetClassName_toDefaultValue () {
    self.mNetClassName = "Default"
  }

  //····················································································································

  final var mNetClassName : String {
    get { return self.mNetClassName_property.propval }
    set { self.mNetClassName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNetClassColor
  //····················································································································

  final let mNetClassColor_property : EBStoredProperty_NSColor

  //····················································································································

  final func reset_mNetClassColor_toDefaultValue () {
    self.mNetClassColor = NSColor.blue
  }

  //····················································································································

  final var mNetClassColor : NSColor {
    get { return self.mNetClassColor_property.propval }
    set { self.mNetClassColor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTrackWidth
  //····················································································································

  final let mTrackWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mTrackWidth_toDefaultValue () {
    self.mTrackWidth = 45720
  }

  //····················································································································

  final var mTrackWidth : Int {
    get { return self.mTrackWidth_property.propval }
    set { self.mTrackWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTrackWidthUnit
  //····················································································································

  final let mTrackWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mTrackWidthUnit_toDefaultValue () {
    self.mTrackWidthUnit = 2286
  }

  //····················································································································

  final var mTrackWidthUnit : Int {
    get { return self.mTrackWidthUnit_property.propval }
    set { self.mTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mViaHoleDiameter
  //····················································································································

  final let mViaHoleDiameter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mViaHoleDiameter_toDefaultValue () {
    self.mViaHoleDiameter = 45720
  }

  //····················································································································

  final var mViaHoleDiameter : Int {
    get { return self.mViaHoleDiameter_property.propval }
    set { self.mViaHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mViaHoleDiameterUnit
  //····················································································································

  final let mViaHoleDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mViaHoleDiameterUnit_toDefaultValue () {
    self.mViaHoleDiameterUnit = 2286
  }

  //····················································································································

  final var mViaHoleDiameterUnit : Int {
    get { return self.mViaHoleDiameterUnit_property.propval }
    set { self.mViaHoleDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mViaPadDiameter
  //····················································································································

  final let mViaPadDiameter_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mViaPadDiameter_toDefaultValue () {
    self.mViaPadDiameter = 91440
  }

  //····················································································································

  final var mViaPadDiameter : Int {
    get { return self.mViaPadDiameter_property.propval }
    set { self.mViaPadDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mViaPadDiameterUnit
  //····················································································································

  final let mViaPadDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mViaPadDiameterUnit_toDefaultValue () {
    self.mViaPadDiameterUnit = 2286
  }

  //····················································································································

  final var mViaPadDiameterUnit : Int {
    get { return self.mViaPadDiameterUnit_property.propval }
    set { self.mViaPadDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnFrontSide
  //····················································································································

  final let mAllowTracksOnFrontSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnFrontSide_toDefaultValue () {
    self.mAllowTracksOnFrontSide = true
  }

  //····················································································································

  final var mAllowTracksOnFrontSide : Bool {
    get { return self.mAllowTracksOnFrontSide_property.propval }
    set { self.mAllowTracksOnFrontSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnBackSide
  //····················································································································

  final let mAllowTracksOnBackSide_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnBackSide_toDefaultValue () {
    self.mAllowTracksOnBackSide = true
  }

  //····················································································································

  final var mAllowTracksOnBackSide : Bool {
    get { return self.mAllowTracksOnBackSide_property.propval }
    set { self.mAllowTracksOnBackSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnInner1Layer
  //····················································································································

  final let mAllowTracksOnInner1Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnInner1Layer_toDefaultValue () {
    self.mAllowTracksOnInner1Layer = true
  }

  //····················································································································

  final var mAllowTracksOnInner1Layer : Bool {
    get { return self.mAllowTracksOnInner1Layer_property.propval }
    set { self.mAllowTracksOnInner1Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnInner2Layer
  //····················································································································

  final let mAllowTracksOnInner2Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnInner2Layer_toDefaultValue () {
    self.mAllowTracksOnInner2Layer = true
  }

  //····················································································································

  final var mAllowTracksOnInner2Layer : Bool {
    get { return self.mAllowTracksOnInner2Layer_property.propval }
    set { self.mAllowTracksOnInner2Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnInner3Layer
  //····················································································································

  final let mAllowTracksOnInner3Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnInner3Layer_toDefaultValue () {
    self.mAllowTracksOnInner3Layer = true
  }

  //····················································································································

  final var mAllowTracksOnInner3Layer : Bool {
    get { return self.mAllowTracksOnInner3Layer_property.propval }
    set { self.mAllowTracksOnInner3Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAllowTracksOnInner4Layer
  //····················································································································

  final let mAllowTracksOnInner4Layer_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mAllowTracksOnInner4Layer_toDefaultValue () {
    self.mAllowTracksOnInner4Layer = true
  }

  //····················································································································

  final var mAllowTracksOnInner4Layer : Bool {
    get { return self.mAllowTracksOnInner4Layer_property.propval }
    set { self.mAllowTracksOnInner4Layer_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mNets
  //····················································································································

  final let mNets_property = StoredArrayOf_NetInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mNets : [NetInProject] {
    get { return self.mNets_property.propval }
    set { self.mNets_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: trackWidthString
  //····················································································································

  final let trackWidthString_property = EBTransientProperty_String ()

  //····················································································································

  final var trackWidthString : String? {
    switch self.trackWidthString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaHoleDiameter
  //····················································································································

  final let viaHoleDiameter_property = EBTransientProperty_String ()

  //····················································································································

  final var viaHoleDiameter : String? {
    switch self.viaHoleDiameter_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaPadDiameter
  //····················································································································

  final let viaPadDiameter_property = EBTransientProperty_String ()

  //····················································································································

  final var viaPadDiameter : String? {
    switch self.viaPadDiameter_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnFrontSideString
  //····················································································································

  final let allowTracksOnFrontSideString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnFrontSideString : String? {
    switch self.allowTracksOnFrontSideString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnBackSideString
  //····················································································································

  final let allowTracksOnBackSideString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnBackSideString : String? {
    switch self.allowTracksOnBackSideString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnInner1LayerString
  //····················································································································

  final let allowTracksOnInner1LayerString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnInner1LayerString : String? {
    switch self.allowTracksOnInner1LayerString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnInner2LayerString
  //····················································································································

  final let allowTracksOnInner2LayerString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnInner2LayerString : String? {
    switch self.allowTracksOnInner2LayerString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnInner3LayerString
  //····················································································································

  final let allowTracksOnInner3LayerString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnInner3LayerString : String? {
    switch self.allowTracksOnInner3LayerString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnInner4LayerString
  //····················································································································

  final let allowTracksOnInner4LayerString_property = EBTransientProperty_String ()

  //····················································································································

  final var allowTracksOnInner4LayerString : String? {
    switch self.allowTracksOnInner4LayerString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  final let canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemove : Bool? {
    switch self.canRemove_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netUsage
  //····················································································································

  final let netUsage_property = EBTransientProperty_String ()

  //····················································································································

  final var netUsage : String? {
    switch self.netUsage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  final let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  final var netsDescription : NetInfoArray? {
    switch self.netsDescription_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netWarningCount
  //····················································································································

  final let netWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netWarningCount : Int? {
    switch self.netWarningCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mNetClassName_property = EBStoredProperty_String (defaultValue: "Default", undoManager: ebUndoManager)
    self.mNetClassColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.blue, undoManager: ebUndoManager)
    self.mTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: ebUndoManager)
    self.mTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mViaHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: ebUndoManager)
    self.mViaHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mViaPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440, undoManager: ebUndoManager)
    self.mViaPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mAllowTracksOnFrontSide_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mAllowTracksOnBackSide_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mAllowTracksOnInner1Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mAllowTracksOnInner2Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mAllowTracksOnInner3Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mAllowTracksOnInner4Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mNets (has opposite relationship)
    self.mNets_property.ebUndoManager = self.ebUndoManager
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Atomic property: trackWidthString
    self.trackWidthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mTrackWidth_property.selection, unwSelf.mTrackWidthUnit_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_NetClassInProject_trackWidthString (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTrackWidth_property.addEBObserver (self.trackWidthString_property)
    self.mTrackWidthUnit_property.addEBObserver (self.trackWidthString_property)
  //--- Atomic property: viaHoleDiameter
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mViaHoleDiameter_property.selection, unwSelf.mViaHoleDiameterUnit_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_NetClassInProject_viaHoleDiameter (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mViaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.addEBObserver (self.viaHoleDiameter_property)
  //--- Atomic property: viaPadDiameter
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mViaPadDiameter_property.selection, unwSelf.mViaPadDiameterUnit_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_NetClassInProject_viaPadDiameter (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mViaPadDiameter_property.addEBObserver (self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.addEBObserver (self.viaPadDiameter_property)
  //--- Atomic property: allowTracksOnFrontSideString
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnFrontSide_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnFrontSideString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnFrontSide_property.addEBObserver (self.allowTracksOnFrontSideString_property)
  //--- Atomic property: allowTracksOnBackSideString
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnBackSide_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnBackSideString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnBackSide_property.addEBObserver (self.allowTracksOnBackSideString_property)
  //--- Atomic property: allowTracksOnInner1LayerString
    self.allowTracksOnInner1LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnInner1Layer_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner1LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner1Layer_property.addEBObserver (self.allowTracksOnInner1LayerString_property)
  //--- Atomic property: allowTracksOnInner2LayerString
    self.allowTracksOnInner2LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnInner2Layer_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner2LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner2Layer_property.addEBObserver (self.allowTracksOnInner2LayerString_property)
  //--- Atomic property: allowTracksOnInner3LayerString
    self.allowTracksOnInner3LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnInner3Layer_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner3LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner3Layer_property.addEBObserver (self.allowTracksOnInner3LayerString_property)
  //--- Atomic property: allowTracksOnInner4LayerString
    self.allowTracksOnInner4LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mAllowTracksOnInner4Layer_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner4LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner4Layer_property.addEBObserver (self.allowTracksOnInner4LayerString_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNets_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_canRemove (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: netUsage
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNets_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_netUsage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.netUsage_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNets_property.selection, unwSelf.mNets_property.selection, unwSelf.mNets_property.selection, unwSelf.mNets_property.selection, unwSelf.mNetClassName_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_NetClassInProject_netsDescription (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_trackCount (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_mNetName (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_netSchematicPointsInfo (self.netsDescription_property)
    self.mNetClassName_property.addEBObserver (self.netsDescription_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.netsDescription_property.selection) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_netWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.netsDescription_property.addEBObserver (self.netWarningCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mTrackWidth_property.removeEBObserver (self.trackWidthString_property)
    // self.mTrackWidthUnit_property.removeEBObserver (self.trackWidthString_property)
    // self.mViaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property)
    // self.mViaHoleDiameterUnit_property.removeEBObserver (self.viaHoleDiameter_property)
    // self.mViaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property)
    // self.mViaPadDiameterUnit_property.removeEBObserver (self.viaPadDiameter_property)
    // self.mAllowTracksOnFrontSide_property.removeEBObserver (self.allowTracksOnFrontSideString_property)
    // self.mAllowTracksOnBackSide_property.removeEBObserver (self.allowTracksOnBackSideString_property)
    // self.mAllowTracksOnInner1Layer_property.removeEBObserver (self.allowTracksOnInner1LayerString_property)
    // self.mAllowTracksOnInner2Layer_property.removeEBObserver (self.allowTracksOnInner2LayerString_property)
    // self.mAllowTracksOnInner3Layer_property.removeEBObserver (self.allowTracksOnInner3LayerString_property)
    // self.mAllowTracksOnInner4Layer_property.removeEBObserver (self.allowTracksOnInner4LayerString_property)
    // self.mNets_property.removeEBObserver (self.canRemove_property)
    // self.mNets_property.removeEBObserver (self.netUsage_property)
    // self.mNets_property.removeEBObserver (self.netsDescription_property)
    // self.mNets_property.removeEBObserverOf_trackCount (self.netsDescription_property)
    // self.mNets_property.removeEBObserverOf_mNetName (self.netsDescription_property)
    // self.mNets_property.removeEBObserverOf_netSchematicPointsInfo (self.netsDescription_property)
    // self.mNetClassName_property.removeEBObserver (self.netsDescription_property)
    // self.netsDescription_property.removeEBObserver (self.netWarningCount_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNetClassName",
      idx: self.mNetClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNetClassName_property.mObserverExplorer,
      valueExplorer: &self.mNetClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNetClassColor",
      idx: self.mNetClassColor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNetClassColor_property.mObserverExplorer,
      valueExplorer: &self.mNetClassColor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTrackWidth",
      idx: self.mTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTrackWidthUnit",
      idx: self.mTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameter",
      idx: self.mViaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.mViaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameterUnit",
      idx: self.mViaHoleDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaHoleDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mViaHoleDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameter",
      idx: self.mViaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.mViaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameterUnit",
      idx: self.mViaPadDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaPadDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mViaPadDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnFrontSide",
      idx: self.mAllowTracksOnFrontSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnFrontSide_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnFrontSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnBackSide",
      idx: self.mAllowTracksOnBackSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnBackSide_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnBackSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnInner1Layer",
      idx: self.mAllowTracksOnInner1Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnInner1Layer_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnInner1Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnInner2Layer",
      idx: self.mAllowTracksOnInner2Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnInner2Layer_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnInner2Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnInner3Layer",
      idx: self.mAllowTracksOnInner3Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnInner3Layer_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnInner3Layer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnInner4Layer",
      idx: self.mAllowTracksOnInner4Layer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnInner4Layer_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnInner4Layer_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "trackWidthString",
      idx: self.trackWidthString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackWidthString_property.mObserverExplorer,
      valueExplorer: &self.trackWidthString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaHoleDiameter",
      idx: self.viaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaPadDiameter",
      idx: self.viaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnFrontSideString",
      idx: self.allowTracksOnFrontSideString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnFrontSideString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnFrontSideString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnBackSideString",
      idx: self.allowTracksOnBackSideString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnBackSideString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnBackSideString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnInner1LayerString",
      idx: self.allowTracksOnInner1LayerString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnInner1LayerString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnInner1LayerString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnInner2LayerString",
      idx: self.allowTracksOnInner2LayerString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnInner2LayerString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnInner2LayerString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnInner3LayerString",
      idx: self.allowTracksOnInner3LayerString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnInner3LayerString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnInner3LayerString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnInner4LayerString",
      idx: self.allowTracksOnInner4LayerString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnInner4LayerString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnInner4LayerString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canRemove",
      idx: self.canRemove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.canRemove_property.mObserverExplorer,
      valueExplorer: &self.canRemove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netUsage",
      idx: self.netUsage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netUsage_property.mObserverExplorer,
      valueExplorer: &self.netUsage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netsDescription",
      idx: self.netsDescription_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netsDescription_property.mObserverExplorer,
      valueExplorer: &self.netsDescription_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netWarningCount",
      idx: self.netWarningCount_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netWarningCount_property.mObserverExplorer,
      valueExplorer: &self.netWarningCount_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mNets",
      idx:mNets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNets_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.mObserverExplorer = nil
    self.mNetClassName_property.mValueExplorer = nil
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.mObserverExplorer = nil
    self.mNetClassColor_property.mValueExplorer = nil
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.mObserverExplorer = nil
    self.mTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.mObserverExplorer = nil
    self.mTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.mObserverExplorer = nil
    self.mViaHoleDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.mObserverExplorer = nil
    self.mViaHoleDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.mObserverExplorer = nil
    self.mViaPadDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.mObserverExplorer = nil
    self.mViaPadDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.mObserverExplorer = nil
    self.mAllowTracksOnFrontSide_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.mObserverExplorer = nil
    self.mAllowTracksOnBackSide_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnInner1Layer
    self.mAllowTracksOnInner1Layer_property.mObserverExplorer = nil
    self.mAllowTracksOnInner1Layer_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnInner2Layer
    self.mAllowTracksOnInner2Layer_property.mObserverExplorer = nil
    self.mAllowTracksOnInner2Layer_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnInner3Layer
    self.mAllowTracksOnInner3Layer_property.mObserverExplorer = nil
    self.mAllowTracksOnInner3Layer_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnInner4Layer
    self.mAllowTracksOnInner4Layer_property.mObserverExplorer = nil
    self.mAllowTracksOnInner4Layer_property.mValueExplorer = nil
  //--- To many property: mNets
    self.mNets_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mNets = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.storeIn (dictionary: ioDictionary, forKey: "mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.storeIn (dictionary: ioDictionary, forKey: "mNetClassColor")
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mTrackWidth")
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mTrackWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.storeIn (dictionary: ioDictionary, forKey: "mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey: "mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.storeIn (dictionary: ioDictionary, forKey: "mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey: "mViaPadDiameterUnit")
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnFrontSide")
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnBackSide")
  //--- Atomic property: mAllowTracksOnInner1Layer
    self.mAllowTracksOnInner1Layer_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnInner1Layer")
  //--- Atomic property: mAllowTracksOnInner2Layer
    self.mAllowTracksOnInner2Layer_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnInner2Layer")
  //--- Atomic property: mAllowTracksOnInner3Layer
    self.mAllowTracksOnInner3Layer_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnInner3Layer")
  //--- Atomic property: mAllowTracksOnInner4Layer
    self.mAllowTracksOnInner4Layer_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnInner4Layer")
  //--- To many property: mNets
    self.store (
      managedObjectArray: self.mNets_property.propval,
      relationshipName: "mNets",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mNets
    self.mNets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetInProject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.readFrom (dictionary: inDictionary, forKey: "mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.readFrom (dictionary: inDictionary, forKey: "mNetClassColor")
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mTrackWidth")
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mTrackWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.readFrom (dictionary: inDictionary, forKey: "mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.readFrom (dictionary: inDictionary, forKey: "mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.readFrom (dictionary: inDictionary, forKey: "mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.readFrom (dictionary: inDictionary, forKey: "mViaPadDiameterUnit")
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnFrontSide")
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnBackSide")
  //--- Atomic property: mAllowTracksOnInner1Layer
    self.mAllowTracksOnInner1Layer_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnInner1Layer")
  //--- Atomic property: mAllowTracksOnInner2Layer
    self.mAllowTracksOnInner2Layer_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnInner2Layer")
  //--- Atomic property: mAllowTracksOnInner3Layer
    self.mAllowTracksOnInner3Layer_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnInner3Layer")
  //--- Atomic property: mAllowTracksOnInner4Layer
    self.mAllowTracksOnInner4Layer_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnInner4Layer")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mNetClassName\n"
    ioString += "mNetClassColor\n"
    ioString += "mTrackWidth\n"
    ioString += "mTrackWidthUnit\n"
    ioString += "mViaHoleDiameter\n"
    ioString += "mViaHoleDiameterUnit\n"
    ioString += "mViaPadDiameter\n"
    ioString += "mViaPadDiameterUnit\n"
    ioString += "mAllowTracksOnFrontSide\n"
    ioString += "mAllowTracksOnBackSide\n"
    ioString += "mAllowTracksOnInner1Layer\n"
    ioString += "mAllowTracksOnInner2Layer\n"
    ioString += "mAllowTracksOnInner3Layer\n"
    ioString += "mAllowTracksOnInner4Layer\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mNets\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mNetClassName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNetClassColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaHoleDiameter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaHoleDiameterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaPadDiameter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaPadDiameterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnFrontSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnBackSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnInner1Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnInner2Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnInner3Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnInner4Layer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mNets {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mNetClassName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mNetClassName = value
      }
      if let range = inDictionary ["mNetClassColor"], let value = NSColor.unarchiveFromDataRange (inData, range) {
        self.mNetClassColor = value
      }
      if let range = inDictionary ["mTrackWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mTrackWidth = value
      }
      if let range = inDictionary ["mTrackWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mTrackWidthUnit = value
      }
      if let range = inDictionary ["mViaHoleDiameter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaHoleDiameter = value
      }
      if let range = inDictionary ["mViaHoleDiameterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaHoleDiameterUnit = value
      }
      if let range = inDictionary ["mViaPadDiameter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaPadDiameter = value
      }
      if let range = inDictionary ["mViaPadDiameterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaPadDiameterUnit = value
      }
      if let range = inDictionary ["mAllowTracksOnFrontSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnFrontSide = value
      }
      if let range = inDictionary ["mAllowTracksOnBackSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnBackSide = value
      }
      if let range = inDictionary ["mAllowTracksOnInner1Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnInner1Layer = value
      }
      if let range = inDictionary ["mAllowTracksOnInner2Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnInner2Layer = value
      }
      if let range = inDictionary ["mAllowTracksOnInner3Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnInner3Layer = value
      }
      if let range = inDictionary ["mAllowTracksOnInner4Layer"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnInner4Layer = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mNets"], range.length > 0 {
        var relationshipArray = [NetInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! NetInProject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mNets = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

