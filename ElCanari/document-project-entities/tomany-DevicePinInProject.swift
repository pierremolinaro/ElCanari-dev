//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DevicePinInProject : ReadOnlyAbstractArrayProperty <DevicePinInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DevicePinInProject>,
                                          addedSet inAddedSet : EBReferenceSet <DevicePinInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mPinName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinNameIsDisplayedInSchematic_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_pinQualifiedName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_descriptor_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mPinName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolTypeName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinNameIsDisplayedInSchematic_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_pinQualifiedName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_descriptor_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mPinName' stored property
  //····················································································································

  private final var mObserversOf_mPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mPinName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
          managedObject.mPinName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mSymbolInstanceName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
          managedObject.mSymbolInstanceName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSymbolInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolTypeName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mSymbolTypeName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
          managedObject.mSymbolTypeName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mSymbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private final var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinX_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mPinX.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
          managedObject.mPinX_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinX_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPinX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private final var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinY_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mPinY.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
          managedObject.mPinY_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinY_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPinY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mXName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
          managedObject.mXName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mXName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mYName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
          managedObject.mYName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mYName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mNameHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
          managedObject.mNameHorizontalAlignment_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematic' stored property
  //····················································································································

  private final var mObserversOf_mPinNameIsDisplayedInSchematic = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematic (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematic.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematic_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematic (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematic.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematic_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinNameIsDisplayedInSchematic_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mPinNameIsDisplayedInSchematic.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPinNameIsDisplayedInSchematic.apply { (_ observer : EBEvent) in
          managedObject.mPinNameIsDisplayedInSchematic_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinNameIsDisplayedInSchematic_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mPinNameIsDisplayedInSchematic.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mPinNameIsDisplayedInSchematic_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private final var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXNumber_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mXNumber.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
          managedObject.mXNumber_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXNumber_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mXNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private final var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYNumber_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mYNumber.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
          managedObject.mYNumber_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYNumber_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mYNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    if !self.mObserversOf_mNumberHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
          managedObject.mNumberHorizontalAlignment_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet.values {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinQualifiedName' transient property
  //····················································································································

  private final var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinQualifiedName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinQualifiedName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinQualifiedName_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinQualifiedName_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private final var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : EBReferenceSet <DevicePinInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : DevicePinInProject, _ right : DevicePinInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_DevicePinInProject? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DevicePinInProject,
                        sortCallback inSortCallBack : Optional < (_ left : DevicePinInProject, _ right : DevicePinInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <DevicePinInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DevicePinInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DevicePinInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_DevicePinInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.postEvent ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <DevicePinInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? DevicePinInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DevicePinInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DevicePinInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <DevicePinInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DevicePinInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DevicePinInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <DevicePinInProject>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <DevicePinInProject> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <DevicePinInProject>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [DevicePinInProject] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DevicePinInProject> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <DevicePinInProject>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DevicePinInProject>,
                                 addedSet inAddedSet : EBReferenceSet <DevicePinInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [DevicePinInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DevicePinInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <DevicePinInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : DevicePinInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : DevicePinInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject {

  //····················································································································

  override var selection : EBSelection < [DevicePinInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DevicePinInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <DevicePinInProject> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : DevicePinInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : DevicePinInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_DevicePinInProject : StoredArrayOf_DevicePinInProject {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <DevicePinInProject> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DevicePinInProject") as? DevicePinInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mPinName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSymbolInstanceName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSymbolTypeName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPinX (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPinY (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mXName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mYName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNameHorizontalAlignment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPinNameIsDisplayedInSchematic (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mXNumber (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mYNumber (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNumberHorizontalAlignment (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

