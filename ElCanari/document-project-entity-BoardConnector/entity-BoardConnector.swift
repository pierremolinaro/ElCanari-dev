//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mComponentPadName : AnyObject {
  var mComponentPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mPadIndex : AnyObject {
  var mPadIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mDefaultHoleDiameterUnit : AnyObject {
  var mDefaultHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mCustomHoleDiameter : AnyObject {
  var mCustomHoleDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mCustomHoleDiameterUnit : AnyObject {
  var mCustomHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mUsesCustomHoleDiameter : AnyObject {
  var mUsesCustomHoleDiameter : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mDefaultPadDiameterUnit : AnyObject {
  var mDefaultPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mCustomPadDiameter : AnyObject {
  var mCustomPadDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mCustomPadDiameterUnit : AnyObject {
  var mCustomPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_mUsesCustomPadDiameter : AnyObject {
  var mUsesCustomPadDiameter : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_isConnectedToSomePad : AnyObject {
  var isConnectedToSomePad : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_location : AnyObject {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_netNameFromComponentPad : AnyObject {
  var netNameFromComponentPad : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_netNameAndPadLocation : AnyObject {
  var netNameAndPadLocation : RastnetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_side : AnyObject {
  var side : ConnectorSide? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_isVia : AnyObject {
  var isVia : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_viaDefaultHoleDiameter : AnyObject {
  var viaDefaultHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_viaDefaultPadDiameter : AnyObject {
  var viaDefaultPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_netNameFromTracks : AnyObject {
  var netNameFromTracks : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_netClassName : AnyObject {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_connectedToComponent : AnyObject {
  var connectedToComponent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_actualHoleDiameter : AnyObject {
  var actualHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_actualPadDiameter : AnyObject {
  var actualPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardConnector_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardConnector : BoardObject,
         BoardConnector_mComponentPadName,
         BoardConnector_mPadIndex,
         BoardConnector_mX,
         BoardConnector_mY,
         BoardConnector_mDefaultHoleDiameterUnit,
         BoardConnector_mCustomHoleDiameter,
         BoardConnector_mCustomHoleDiameterUnit,
         BoardConnector_mUsesCustomHoleDiameter,
         BoardConnector_mDefaultPadDiameterUnit,
         BoardConnector_mCustomPadDiameter,
         BoardConnector_mCustomPadDiameterUnit,
         BoardConnector_mUsesCustomPadDiameter,
         BoardConnector_isConnectedToSomePad,
         BoardConnector_location,
         BoardConnector_netNameFromComponentPad,
         BoardConnector_netNameAndPadLocation,
         BoardConnector_side,
         BoardConnector_isVia,
         BoardConnector_issues,
         BoardConnector_viaDefaultHoleDiameter,
         BoardConnector_viaDefaultPadDiameter,
         BoardConnector_netNameFromTracks,
         BoardConnector_netClassName,
         BoardConnector_connectedToComponent,
         BoardConnector_actualHoleDiameter,
         BoardConnector_actualPadDiameter,
         BoardConnector_objectDisplay,
         BoardConnector_selectionDisplay,
         BoardConnector_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mComponentPadName
  //····················································································································

  final let mComponentPadName_property : EBStoredProperty_String

  //····················································································································

  final var mComponentPadName : String {
    get { return self.mComponentPadName_property.propval }
    set { self.mComponentPadName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPadIndex
  //····················································································································

  final let mPadIndex_property : EBStoredProperty_Int

  //····················································································································

  final var mPadIndex : Int {
    get { return self.mPadIndex_property.propval }
    set { self.mPadIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mTracksP2
  //····················································································································

  final let mTracksP2_property = StoredArrayOf_BoardTrack (usedForSignature: false, key: "mTracksP2")

  //····················································································································

  final var mTracksP2 : EBReferenceArray <BoardTrack> {
    get { return self.mTracksP2_property.propval }
    set { self.mTracksP2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultHoleDiameterUnit
  //····················································································································

  final let mDefaultHoleDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mDefaultHoleDiameterUnit : Int {
    get { return self.mDefaultHoleDiameterUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mCustomHoleDiameter
  //····················································································································

  final let mCustomHoleDiameter_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomHoleDiameter : Int {
    get { return self.mCustomHoleDiameter_property.propval }
    set { self.mCustomHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCustomHoleDiameterUnit
  //····················································································································

  final let mCustomHoleDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomHoleDiameterUnit : Int {
    get { return self.mCustomHoleDiameterUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mUsesCustomHoleDiameter
  //····················································································································

  final let mUsesCustomHoleDiameter_property : EBStoredProperty_Bool

  //····················································································································

  final var mUsesCustomHoleDiameter : Bool {
    get { return self.mUsesCustomHoleDiameter_property.propval }
    set { self.mUsesCustomHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultPadDiameterUnit
  //····················································································································

  final let mDefaultPadDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mDefaultPadDiameterUnit : Int {
    get { return self.mDefaultPadDiameterUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mCustomPadDiameter
  //····················································································································

  final let mCustomPadDiameter_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomPadDiameter : Int {
    get { return self.mCustomPadDiameter_property.propval }
    set { self.mCustomPadDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCustomPadDiameterUnit
  //····················································································································

  final let mCustomPadDiameterUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomPadDiameterUnit : Int {
    get { return self.mCustomPadDiameterUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mUsesCustomPadDiameter
  //····················································································································

  final let mUsesCustomPadDiameter_property : EBStoredProperty_Bool

  //····················································································································

  final var mUsesCustomPadDiameter : Bool {
    get { return self.mUsesCustomPadDiameter_property.propval }
    set { self.mUsesCustomPadDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mTracksP1
  //····················································································································

  final let mTracksP1_property = StoredArrayOf_BoardTrack (usedForSignature: false, key: "mTracksP1")

  //····················································································································

  final var mTracksP1 : EBReferenceArray <BoardTrack> {
    get { return self.mTracksP1_property.propval }
    set { self.mTracksP1_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: isConnectedToSomePad
  //····················································································································

  final let isConnectedToSomePad_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var isConnectedToSomePad : Bool? {
    return self.isConnectedToSomePad_property.optionalValue
  }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

  final let mComponent_property = StoredObject_ComponentInProject (usedForSignature: false, strongRef: false, key: "mComponent")

  //····················································································································

  final var mComponent : ComponentInProject? {
    get {
      return self.mComponent_property.propval
    }
    set {
      if self.mComponent_property.propval !== newValue {
        if self.mComponent_property.propval != nil {
          self.mComponent_property.setProp (nil)
        }
        if newValue != nil {
          self.mComponent_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mComponent_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: location
  //····················································································································

  final let location_property = EBTransientProperty <CanariPoint> ()

  //····················································································································

  final var location : CanariPoint? {
    return self.location_property.optionalValue
  }

  //····················································································································
  //   Transient property: netNameFromComponentPad
  //····················································································································

  final let netNameFromComponentPad_property = EBTransientProperty <String> ()

  //····················································································································

  final var netNameFromComponentPad : String? {
    return self.netNameFromComponentPad_property.optionalValue
  }

  //····················································································································
  //   Transient property: side
  //····················································································································

  final let side_property = EBTransientProperty <ConnectorSide> ()

  //····················································································································

  final var side : ConnectorSide? {
    return self.side_property.optionalValue
  }

  //····················································································································
  //   Transient property: viaDefaultHoleDiameter
  //····················································································································

  final let viaDefaultHoleDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var viaDefaultHoleDiameter : Int? {
    return self.viaDefaultHoleDiameter_property.optionalValue
  }

  //····················································································································
  //   Transient property: viaDefaultPadDiameter
  //····················································································································

  final let viaDefaultPadDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var viaDefaultPadDiameter : Int? {
    return self.viaDefaultPadDiameter_property.optionalValue
  }

  //····················································································································
  //   Transient property: netNameFromTracks
  //····················································································································

  final let netNameFromTracks_property = EBTransientProperty <String> ()

  //····················································································································

  final var netNameFromTracks : String? {
    return self.netNameFromTracks_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty <String> ()

  //····················································································································

  final var netClassName : String? {
    return self.netClassName_property.optionalValue
  }

  //····················································································································
  //   Transient property: connectedToComponent
  //····················································································································

  final let connectedToComponent_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var connectedToComponent : Bool? {
    return self.connectedToComponent_property.optionalValue
  }

  //····················································································································
  //   Transient property: actualHoleDiameter
  //····················································································································

  final let actualHoleDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var actualHoleDiameter : Int? {
    return self.actualHoleDiameter_property.optionalValue
  }

  //····················································································································
  //   Transient property: actualPadDiameter
  //····················································································································

  final let actualPadDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var actualPadDiameter : Int? {
    return self.actualPadDiameter_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mComponentPadName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mComponentPadName")
    self.mPadIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mPadIndex")
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mX")
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mY")
    self.mDefaultHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDefaultHoleDiameterUnit")
    self.mCustomHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: inUndoManager, key: "mCustomHoleDiameter")
    self.mCustomHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mCustomHoleDiameterUnit")
    self.mUsesCustomHoleDiameter_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mUsesCustomHoleDiameter")
    self.mDefaultPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDefaultPadDiameterUnit")
    self.mCustomPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440, undoManager: inUndoManager, key: "mCustomPadDiameter")
    self.mCustomPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mCustomPadDiameterUnit")
    self.mUsesCustomPadDiameter_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mUsesCustomPadDiameter")
    super.init (inUndoManager)
    self.mComponent_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mComponent_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mComponent_property.startsBeingObserved (by: self.mComponent_none)
  //--- To many property: mTracksP2 (has opposite relationship)
    self.mTracksP2_property.undoManager = inUndoManager
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
  //--- To many property: mTracksP1 (has opposite relationship)
    self.mTracksP1_property.undoManager = inUndoManager
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
  //--- Atomic property: isConnectedToSomePad
    self.isConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponentPadName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardConnector_isConnectedToSomePad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentPadName_property.startsBeingObserved (by: self.isConnectedToSomePad_property)
  //--- To one property: mComponent (has opposite to many relationship: mConnectors)
    self.mComponent_property.undoManager = inUndoManager
    self.mComponent_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectors_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mConnectors_property.remove (me) } }
    )
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.componentPadDictionary_property.selection
        let s1 = unwSelf.mComponentPadName_property.selection
        let s2 = unwSelf.mPadIndex_property.selection
        let s3 = unwSelf.mX_property.selection
        let s4 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardConnector_location (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.componentPadDictionary_property.startsBeingObserved (by: self.location_property)
    self.mComponentPadName_property.startsBeingObserved (by: self.location_property)
    self.mPadIndex_property.startsBeingObserved (by: self.location_property)
    self.mX_property.startsBeingObserved (by: self.location_property)
    self.mY_property.startsBeingObserved (by: self.location_property)
  //--- Atomic property: netNameFromComponentPad
    self.netNameFromComponentPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.padNetDictionary_property.selection
        let s1 = unwSelf.mComponentPadName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_netNameFromComponentPad (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.padNetDictionary_property.startsBeingObserved (by: self.netNameFromComponentPad_property)
    self.mComponentPadName_property.startsBeingObserved (by: self.netNameFromComponentPad_property)
  //--- Atomic property: netNameAndPadLocation
    self.netNameAndPadLocation_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.padNetDictionary_property.selection
        let s1 = unwSelf.mComponentPadName_property.selection
        let s2 = unwSelf.location_property.selection
        let s3 = unwSelf.mComponent_property.componentName_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_BoardConnector_netNameAndPadLocation (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.padNetDictionary_property.startsBeingObserved (by: self.netNameAndPadLocation_property)
    self.mComponentPadName_property.startsBeingObserved (by: self.netNameAndPadLocation_property)
    self.location_property.startsBeingObserved (by: self.netNameAndPadLocation_property)
    self.mComponent_property.componentName_property.startsBeingObserved (by: self.netNameAndPadLocation_property)
  //--- Atomic property: side
    self.side_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.componentPadDictionary_property.selection
        let s1 = unwSelf.mComponentPadName_property.selection
        let s2 = unwSelf.mPadIndex_property.selection
        let s3 = unwSelf.mTracksP1_property.selection
        let s4 = unwSelf.mTracksP2_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardConnector_side (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.componentPadDictionary_property.startsBeingObserved (by: self.side_property)
    self.mComponentPadName_property.startsBeingObserved (by: self.side_property)
    self.mPadIndex_property.startsBeingObserved (by: self.side_property)
    self.mTracksP1_property.toMany_mSide_StartsBeingObserved (by: self.side_property)
    self.mTracksP2_property.toMany_mSide_StartsBeingObserved (by: self.side_property)
  //--- Atomic property: isVia
    self.isVia_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracksP1_property.selection
        let s1 = unwSelf.mTracksP2_property.selection
        let s2 = unwSelf.mComponent_none.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardConnector_isVia (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.toMany_mSide_StartsBeingObserved (by: self.isVia_property)
    self.mTracksP2_property.toMany_mSide_StartsBeingObserved (by: self.isVia_property)
    self.mComponent_property.startsBeingObserved (by: self.isVia_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.location_property.selection
        let s1 = unwSelf.mComponent_none.selection
        let s2 = unwSelf.mComponentPadName_property.selection
        let s3 = unwSelf.mTracksP1_property.count_property.selection
        let s4 = unwSelf.mTracksP2_property.count_property.selection
        let s5 = unwSelf.errorOrWarningIssueSize_property.selection
        let s6 = unwSelf.mPadIndex_property.selection
        let s7 = unwSelf.mComponent_property.mSlavePadsShouldBeRouted_property.selection
        let s8 = unwSelf.mComponent_property.padNetDictionary_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_BoardConnector_issues (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.location_property.startsBeingObserved (by: self.issues_property)
    self.mComponent_property.startsBeingObserved (by: self.issues_property)
    self.mComponentPadName_property.startsBeingObserved (by: self.issues_property)
    self.mTracksP1_property.startsBeingObserved (by: self.issues_property)
    self.mTracksP2_property.startsBeingObserved (by: self.issues_property)
    self.errorOrWarningIssueSize_property.startsBeingObserved (by: self.issues_property)
    self.mPadIndex_property.startsBeingObserved (by: self.issues_property)
    self.mComponent_property.mSlavePadsShouldBeRouted_property.startsBeingObserved (by: self.issues_property)
    self.mComponent_property.padNetDictionary_property.startsBeingObserved (by: self.issues_property)
  //--- Atomic property: viaDefaultHoleDiameter
    self.viaDefaultHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracksP1_property.selection
        let s1 = unwSelf.mTracksP2_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_viaDefaultHoleDiameter (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.toMany_netClassViaHoleDiameter_StartsBeingObserved (by: self.viaDefaultHoleDiameter_property)
    self.mTracksP2_property.toMany_netClassViaHoleDiameter_StartsBeingObserved (by: self.viaDefaultHoleDiameter_property)
  //--- Atomic property: viaDefaultPadDiameter
    self.viaDefaultPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracksP1_property.selection
        let s1 = unwSelf.mTracksP2_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_viaDefaultPadDiameter (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.toMany_netClassViaPadDiameter_StartsBeingObserved (by: self.viaDefaultPadDiameter_property)
    self.mTracksP2_property.toMany_netClassViaPadDiameter_StartsBeingObserved (by: self.viaDefaultPadDiameter_property)
  //--- Atomic property: netNameFromTracks
    self.netNameFromTracks_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracksP1_property.selection
        let s1 = unwSelf.mTracksP2_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_netNameFromTracks (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.toMany_netName_StartsBeingObserved (by: self.netNameFromTracks_property)
    self.mTracksP2_property.toMany_netName_StartsBeingObserved (by: self.netNameFromTracks_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracksP1_property.selection
        let s1 = unwSelf.mTracksP2_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_netClassName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.toMany_netClassName_StartsBeingObserved (by: self.netClassName_property)
    self.mTracksP2_property.toMany_netClassName_StartsBeingObserved (by: self.netClassName_property)
  //--- Atomic property: connectedToComponent
    self.connectedToComponent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardConnector_connectedToComponent (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.startsBeingObserved (by: self.connectedToComponent_property)
  //--- Atomic property: actualHoleDiameter
    self.actualHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.viaDefaultHoleDiameter_property.selection
        let s1 = unwSelf.mUsesCustomHoleDiameter_property.selection
        let s2 = unwSelf.mCustomHoleDiameter_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardConnector_actualHoleDiameter (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.viaDefaultHoleDiameter_property.startsBeingObserved (by: self.actualHoleDiameter_property)
    self.mUsesCustomHoleDiameter_property.startsBeingObserved (by: self.actualHoleDiameter_property)
    self.mCustomHoleDiameter_property.startsBeingObserved (by: self.actualHoleDiameter_property)
  //--- Atomic property: actualPadDiameter
    self.actualPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.viaDefaultPadDiameter_property.selection
        let s1 = unwSelf.mUsesCustomPadDiameter_property.selection
        let s2 = unwSelf.mCustomPadDiameter_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardConnector_actualPadDiameter (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.viaDefaultPadDiameter_property.startsBeingObserved (by: self.actualPadDiameter_property)
    self.mUsesCustomPadDiameter_property.startsBeingObserved (by: self.actualPadDiameter_property)
    self.mCustomPadDiameter_property.startsBeingObserved (by: self.actualPadDiameter_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.isVia_property.selection
        let s1 = unwSelf.location_property.selection
        let s2 = unwSelf.actualHoleDiameter_property.selection
        let s3 = unwSelf.actualPadDiameter_property.selection
        let s4 = preferences_frontSidePadColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardConnector_objectDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.isVia_property.startsBeingObserved (by: self.objectDisplay_property)
    self.location_property.startsBeingObserved (by: self.objectDisplay_property)
    self.actualHoleDiameter_property.startsBeingObserved (by: self.objectDisplay_property)
    self.actualPadDiameter_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_frontSidePadColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.isVia_property.selection
        let s1 = unwSelf.location_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardConnector_selectionDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.isVia_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.location_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.location_property.selection
        let s1 = unwSelf.isVia_property.selection
        let s2 = unwSelf.actualPadDiameter_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardConnector_signatureForERCChecking (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.location_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.isVia_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.actualPadDiameter_property.startsBeingObserved (by: self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BoardConnector (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BoardConnector (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BoardConnector (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BoardConnector (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BoardConnector (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BoardConnector (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BoardConnector (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BoardConnector (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_BoardConnector ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BoardConnector ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_BoardConnector ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BoardConnector ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BoardConnector (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BoardConnector (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BoardConnector (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_BoardConnector (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BoardConnector (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BoardConnector ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BoardConnector ()
  }

  //····················································································································
  //  Can be deleted
  //····················································································································

  override func canBeDeleted () -> Bool {
    return false
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

