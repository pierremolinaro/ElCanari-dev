//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardConnector : ReadOnlyAbstractArrayProperty <BoardConnector> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardConnector>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardConnector>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mComponentPadName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPadIndex_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDefaultHoleDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomHoleDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomHoleDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mUsesCustomHoleDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDefaultPadDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomPadDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomPadDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mUsesCustomPadDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_isConnectedToSomePad_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_location_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netNameFromComponentPad_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_side_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_isVia_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_viaDefaultHoleDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_viaDefaultPadDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netNameFromTracks_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connectedToComponent_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_actualHoleDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_actualPadDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mComponentPadName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPadIndex_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDefaultHoleDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomHoleDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomHoleDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mUsesCustomHoleDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDefaultPadDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomPadDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomPadDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mUsesCustomPadDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_isConnectedToSomePad_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_location_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netNameFromComponentPad_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netNameAndPadLocation_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_side_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_isVia_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_viaDefaultHoleDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_viaDefaultPadDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netNameFromTracks_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connectedToComponent_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_actualHoleDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_actualPadDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mComponentPadName' stored property
  //····················································································································

  private final var mObserversOf_mComponentPadName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentPadName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentPadName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentPadName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentPadName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentPadName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentPadName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentPadName_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mComponentPadName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mComponentPadName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mComponentPadName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mComponentPadName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentPadName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mComponentPadName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mComponentPadName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mComponentPadName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mPadIndex' stored property
  //····················································································································

  private final var mObserversOf_mPadIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadIndex (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadIndex (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadIndex_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mPadIndex.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPadIndex.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mPadIndex_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPadIndex.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadIndex_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mPadIndex.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPadIndex_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPadIndex.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDefaultHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultHoleDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultHoleDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultHoleDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mDefaultHoleDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDefaultHoleDiameterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mDefaultHoleDiameterUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDefaultHoleDiameterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultHoleDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mDefaultHoleDiameterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDefaultHoleDiameterUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDefaultHoleDiameterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mCustomHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mCustomHoleDiameter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCustomHoleDiameter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCustomHoleDiameter_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCustomHoleDiameter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mCustomHoleDiameter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomHoleDiameter_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCustomHoleDiameter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomHoleDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mCustomHoleDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCustomHoleDiameterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCustomHoleDiameterUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCustomHoleDiameterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomHoleDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mCustomHoleDiameterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomHoleDiameterUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCustomHoleDiameterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mUsesCustomHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mUsesCustomHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mUsesCustomHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mUsesCustomHoleDiameter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mUsesCustomHoleDiameter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mUsesCustomHoleDiameter_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mUsesCustomHoleDiameter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUsesCustomHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mUsesCustomHoleDiameter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUsesCustomHoleDiameter_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mUsesCustomHoleDiameter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDefaultPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultPadDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultPadDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultPadDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mDefaultPadDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDefaultPadDiameterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mDefaultPadDiameterUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDefaultPadDiameterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultPadDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mDefaultPadDiameterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDefaultPadDiameterUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDefaultPadDiameterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mCustomPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mCustomPadDiameter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCustomPadDiameter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCustomPadDiameter_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCustomPadDiameter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mCustomPadDiameter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomPadDiameter_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCustomPadDiameter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomPadDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mCustomPadDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCustomPadDiameterUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCustomPadDiameterUnit_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCustomPadDiameterUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomPadDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mCustomPadDiameterUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomPadDiameterUnit_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCustomPadDiameterUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mUsesCustomPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mUsesCustomPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mUsesCustomPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    if !self.mObserversOf_mUsesCustomPadDiameter.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mUsesCustomPadDiameter.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mUsesCustomPadDiameter_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mUsesCustomPadDiameter.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUsesCustomPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for (_, entry) in self.mObserversOf_mUsesCustomPadDiameter.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUsesCustomPadDiameter_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mUsesCustomPadDiameter.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_isConnectedToSomePad = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnectedToSomePad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnectedToSomePad_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnectedToSomePad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnectedToSomePad_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnectedToSomePad_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isConnectedToSomePad.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isConnectedToSomePad_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isConnectedToSomePad.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnectedToSomePad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isConnectedToSomePad.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isConnectedToSomePad_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isConnectedToSomePad.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private final var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_location.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.location_property.addEBObserver (observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_location.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.location_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameFromComponentPad' transient property
  //····················································································································

  private final var mObserversOf_netNameFromComponentPad = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netNameFromComponentPad (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameFromComponentPad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromComponentPad_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameFromComponentPad (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameFromComponentPad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromComponentPad_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameFromComponentPad_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameFromComponentPad.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromComponentPad_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netNameFromComponentPad.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameFromComponentPad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameFromComponentPad.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromComponentPad_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netNameFromComponentPad.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  private final var mObserversOf_netNameAndPadLocation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netNameAndPadLocation (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameAndPadLocation (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameAndPadLocation_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameAndPadLocation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameAndPadLocation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'side' transient property
  //····················································································································

  private final var mObserversOf_side = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_side (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_side.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_side (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_side.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_side_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_side.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.side_property.addEBObserver (observer)
        }else{
          self.mObserversOf_side.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_side_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_side.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.side_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_side.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  private final var mObserversOf_isVia = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isVia (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isVia.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isVia (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isVia.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isVia_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isVia.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isVia_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isVia.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.addEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'viaDefaultHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaDefaultHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaDefaultHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaDefaultHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaDefaultHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_viaDefaultHoleDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultHoleDiameter_property.addEBObserver (observer)
        }else{
          self.mObserversOf_viaDefaultHoleDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaDefaultHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_viaDefaultHoleDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultHoleDiameter_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_viaDefaultHoleDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'viaDefaultPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaDefaultPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaDefaultPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaDefaultPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaDefaultPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaDefaultPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaDefaultPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_viaDefaultPadDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultPadDiameter_property.addEBObserver (observer)
        }else{
          self.mObserversOf_viaDefaultPadDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaDefaultPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_viaDefaultPadDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultPadDiameter_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_viaDefaultPadDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameFromTracks' transient property
  //····················································································································

  private final var mObserversOf_netNameFromTracks = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netNameFromTracks (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameFromTracks.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromTracks_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameFromTracks (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameFromTracks.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromTracks_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameFromTracks_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameFromTracks.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromTracks_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netNameFromTracks.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameFromTracks_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameFromTracks.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromTracks_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netNameFromTracks.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netClassName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netClassName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedToComponent' transient property
  //····················································································································

  private final var mObserversOf_connectedToComponent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedToComponent (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedToComponent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedToComponent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedToComponent (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedToComponent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedToComponent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedToComponent_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedToComponent.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedToComponent_property.addEBObserver (observer)
        }else{
          self.mObserversOf_connectedToComponent.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedToComponent_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedToComponent.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedToComponent_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_connectedToComponent.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'actualHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_actualHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_actualHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_actualHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_actualHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_actualHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_actualHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_actualHoleDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.actualHoleDiameter_property.addEBObserver (observer)
        }else{
          self.mObserversOf_actualHoleDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_actualHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_actualHoleDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.actualHoleDiameter_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_actualHoleDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'actualPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_actualPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_actualPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_actualPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_actualPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_actualPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_actualPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_actualPadDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.actualPadDiameter_property.addEBObserver (observer)
        }else{
          self.mObserversOf_actualPadDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_actualPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_actualPadDiameter.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.actualPadDiameter_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_actualPadDiameter.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.addEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_BoardConnector : ReadOnlyArrayOf_BoardConnector {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : BoardConnector, _ right : BoardConnector) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_BoardConnector? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BoardConnector,
                        sortCallback inSortCallBack : Optional < (_ left : BoardConnector, _ right : BoardConnector) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <BoardConnector>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardConnector] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardConnector> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardConnector <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardConnector {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardConnector> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardConnector {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardConnector] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardConnector> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardConnector : ReadOnlyArrayOf_BoardConnector {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardConnector>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardConnector : ReadWriteArrayOf_BoardConnector, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardConnector) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardConnector) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardConnector>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardConnector>,
                                 addedSet inAddedSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardConnector] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardConnector>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardConnector> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardConnector) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardConnector) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StandAloneArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

