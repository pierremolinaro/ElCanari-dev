//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardConnector : ReadOnlyAbstractArrayProperty <BoardConnector> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardConnector>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardConnector>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mComponentPadName_property.stopsBeingObserved (by: self.mObserversOf_mComponentPadName) // Stored property
      managedObject.mPadIndex_property.stopsBeingObserved (by: self.mObserversOf_mPadIndex) // Stored property
      managedObject.mX_property.stopsBeingObserved (by: self.mObserversOf_mX) // Stored property
      managedObject.mY_property.stopsBeingObserved (by: self.mObserversOf_mY) // Stored property
      managedObject.mDefaultHoleDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mDefaultHoleDiameterUnit) // Stored property
      managedObject.mCustomHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_mCustomHoleDiameter) // Stored property
      managedObject.mCustomHoleDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mCustomHoleDiameterUnit) // Stored property
      managedObject.mUsesCustomHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_mUsesCustomHoleDiameter) // Stored property
      managedObject.mDefaultPadDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mDefaultPadDiameterUnit) // Stored property
      managedObject.mCustomPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_mCustomPadDiameter) // Stored property
      managedObject.mCustomPadDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mCustomPadDiameterUnit) // Stored property
      managedObject.mUsesCustomPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_mUsesCustomPadDiameter) // Stored property
      managedObject.isConnectedToSomePad_property.stopsBeingObserved (by: self.mObserversOf_isConnectedToSomePad) // Transient property
      managedObject.location_property.stopsBeingObserved (by: self.mObserversOf_location) // Transient property
      managedObject.netNameFromComponentPad_property.stopsBeingObserved (by: self.mObserversOf_netNameFromComponentPad) // Transient property
      managedObject.netNameAndPadLocation_property.stopsBeingObserved (by: self.mObserversOf_netNameAndPadLocation) // Transient property
      managedObject.side_property.stopsBeingObserved (by: self.mObserversOf_side) // Transient property
      managedObject.isVia_property.stopsBeingObserved (by: self.mObserversOf_isVia) // Transient property
      managedObject.issues_property.stopsBeingObserved (by: self.mObserversOf_issues) // Transient property
      managedObject.viaDefaultHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_viaDefaultHoleDiameter) // Transient property
      managedObject.viaDefaultPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_viaDefaultPadDiameter) // Transient property
      managedObject.netNameFromTracks_property.stopsBeingObserved (by: self.mObserversOf_netNameFromTracks) // Transient property
      managedObject.netClassName_property.stopsBeingObserved (by: self.mObserversOf_netClassName) // Transient property
      managedObject.connectedToComponent_property.stopsBeingObserved (by: self.mObserversOf_connectedToComponent) // Transient property
      managedObject.actualHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_actualHoleDiameter) // Transient property
      managedObject.actualPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_actualPadDiameter) // Transient property
      managedObject.objectDisplay_property.stopsBeingObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.stopsBeingObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.signatureForERCChecking_property.stopsBeingObserved (by: self.mObserversOf_signatureForERCChecking) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mComponentPadName_property.startsToBeObserved (by: self.mObserversOf_mComponentPadName) // Stored property
      managedObject.mPadIndex_property.startsToBeObserved (by: self.mObserversOf_mPadIndex) // Stored property
      managedObject.mX_property.startsToBeObserved (by: self.mObserversOf_mX) // Stored property
      managedObject.mY_property.startsToBeObserved (by: self.mObserversOf_mY) // Stored property
      managedObject.mDefaultHoleDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mDefaultHoleDiameterUnit) // Stored property
      managedObject.mCustomHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_mCustomHoleDiameter) // Stored property
      managedObject.mCustomHoleDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mCustomHoleDiameterUnit) // Stored property
      managedObject.mUsesCustomHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_mUsesCustomHoleDiameter) // Stored property
      managedObject.mDefaultPadDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mDefaultPadDiameterUnit) // Stored property
      managedObject.mCustomPadDiameter_property.startsToBeObserved (by: self.mObserversOf_mCustomPadDiameter) // Stored property
      managedObject.mCustomPadDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mCustomPadDiameterUnit) // Stored property
      managedObject.mUsesCustomPadDiameter_property.startsToBeObserved (by: self.mObserversOf_mUsesCustomPadDiameter) // Stored property
      managedObject.isConnectedToSomePad_property.startsToBeObserved (by: self.mObserversOf_isConnectedToSomePad) // Transient property
      managedObject.location_property.startsToBeObserved (by: self.mObserversOf_location) // Transient property
      managedObject.netNameFromComponentPad_property.startsToBeObserved (by: self.mObserversOf_netNameFromComponentPad) // Transient property
      managedObject.netNameAndPadLocation_property.startsToBeObserved (by: self.mObserversOf_netNameAndPadLocation) // Transient property
      managedObject.side_property.startsToBeObserved (by: self.mObserversOf_side) // Transient property
      managedObject.isVia_property.startsToBeObserved (by: self.mObserversOf_isVia) // Transient property
      managedObject.issues_property.startsToBeObserved (by: self.mObserversOf_issues) // Transient property
      managedObject.viaDefaultHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_viaDefaultHoleDiameter) // Transient property
      managedObject.viaDefaultPadDiameter_property.startsToBeObserved (by: self.mObserversOf_viaDefaultPadDiameter) // Transient property
      managedObject.netNameFromTracks_property.startsToBeObserved (by: self.mObserversOf_netNameFromTracks) // Transient property
      managedObject.netClassName_property.startsToBeObserved (by: self.mObserversOf_netClassName) // Transient property
      managedObject.connectedToComponent_property.startsToBeObserved (by: self.mObserversOf_connectedToComponent) // Transient property
      managedObject.actualHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_actualHoleDiameter) // Transient property
      managedObject.actualPadDiameter_property.startsToBeObserved (by: self.mObserversOf_actualPadDiameter) // Transient property
      managedObject.objectDisplay_property.startsToBeObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.startsToBeObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.signatureForERCChecking_property.startsToBeObserved (by: self.mObserversOf_signatureForERCChecking) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mComponentPadName' stored property
  //····················································································································

  private final var mObserversOf_mComponentPadName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mComponentPadName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mComponentPadName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentPadName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mComponentPadName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mComponentPadName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentPadName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mComponentPadName_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mComponentPadName_property.startsToBeObserved (by: self.mObserversOf_mComponentPadName)
    }*/
    /* if !self.mObserversOf_mComponentPadName.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mComponentPadName.values () {
          if let observer = entry.possibleObserver {
            managedObject.mComponentPadName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mComponentPadName.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mComponentPadName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mComponentPadName_property.stopsBeingObserved (by: self.mObserversOf_mComponentPadName)
    }
    for entry in self.mObserversOf_mComponentPadName.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mComponentPadName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mComponentPadName.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mPadIndex' stored property
  //····················································································································

  private final var mObserversOf_mPadIndex = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mPadIndex_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mPadIndex.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadIndex_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mPadIndex_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mPadIndex.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadIndex_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mPadIndex_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mPadIndex_property.startsToBeObserved (by: self.mObserversOf_mPadIndex)
    }*/
    /* if !self.mObserversOf_mPadIndex.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mPadIndex.values () {
          if let observer = entry.possibleObserver {
            managedObject.mPadIndex_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mPadIndex.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mPadIndex_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mPadIndex_property.stopsBeingObserved (by: self.mObserversOf_mPadIndex)
    }
    for entry in self.mObserversOf_mPadIndex.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPadIndex_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mPadIndex.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mX_property.startsToBeObserved (by: self.mObserversOf_mX)
    }*/
    /* if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mX.values () {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mX_property.stopsBeingObserved (by: self.mObserversOf_mX)
    }
    for entry in self.mObserversOf_mX.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mY_property.startsToBeObserved (by: self.mObserversOf_mY)
    }*/
    /* if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mY.values () {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mY_property.stopsBeingObserved (by: self.mObserversOf_mY)
    }
    for entry in self.mObserversOf_mY.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDefaultHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultHoleDiameterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDefaultHoleDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultHoleDiameterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDefaultHoleDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultHoleDiameterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDefaultHoleDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mDefaultHoleDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mDefaultHoleDiameterUnit)
    }*/
    /* if !self.mObserversOf_mDefaultHoleDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDefaultHoleDiameterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDefaultHoleDiameterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDefaultHoleDiameterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDefaultHoleDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mDefaultHoleDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mDefaultHoleDiameterUnit)
    }
    for entry in self.mObserversOf_mDefaultHoleDiameterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDefaultHoleDiameterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDefaultHoleDiameterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCustomHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mCustomHoleDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCustomHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCustomHoleDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCustomHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCustomHoleDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCustomHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mCustomHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_mCustomHoleDiameter)
    }*/
    /* if !self.mObserversOf_mCustomHoleDiameter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCustomHoleDiameter.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCustomHoleDiameter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCustomHoleDiameter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCustomHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mCustomHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_mCustomHoleDiameter)
    }
    for entry in self.mObserversOf_mCustomHoleDiameter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomHoleDiameter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCustomHoleDiameter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCustomHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomHoleDiameterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCustomHoleDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCustomHoleDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomHoleDiameterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCustomHoleDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mCustomHoleDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mCustomHoleDiameterUnit)
    }*/
    /* if !self.mObserversOf_mCustomHoleDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCustomHoleDiameterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCustomHoleDiameterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCustomHoleDiameterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCustomHoleDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mCustomHoleDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mCustomHoleDiameterUnit)
    }
    for entry in self.mObserversOf_mCustomHoleDiameterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomHoleDiameterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCustomHoleDiameterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mUsesCustomHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomHoleDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mUsesCustomHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomHoleDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mUsesCustomHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomHoleDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mUsesCustomHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mUsesCustomHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_mUsesCustomHoleDiameter)
    }*/
    /* if !self.mObserversOf_mUsesCustomHoleDiameter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mUsesCustomHoleDiameter.values () {
          if let observer = entry.possibleObserver {
            managedObject.mUsesCustomHoleDiameter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mUsesCustomHoleDiameter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mUsesCustomHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mUsesCustomHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_mUsesCustomHoleDiameter)
    }
    for entry in self.mObserversOf_mUsesCustomHoleDiameter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUsesCustomHoleDiameter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mUsesCustomHoleDiameter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDefaultPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultPadDiameterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDefaultPadDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultPadDiameterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDefaultPadDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultPadDiameterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDefaultPadDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mDefaultPadDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mDefaultPadDiameterUnit)
    }*/
    /* if !self.mObserversOf_mDefaultPadDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDefaultPadDiameterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDefaultPadDiameterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDefaultPadDiameterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDefaultPadDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mDefaultPadDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mDefaultPadDiameterUnit)
    }
    for entry in self.mObserversOf_mDefaultPadDiameterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDefaultPadDiameterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDefaultPadDiameterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCustomPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mCustomPadDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCustomPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCustomPadDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCustomPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCustomPadDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCustomPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mCustomPadDiameter_property.startsToBeObserved (by: self.mObserversOf_mCustomPadDiameter)
    }*/
    /* if !self.mObserversOf_mCustomPadDiameter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCustomPadDiameter.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCustomPadDiameter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCustomPadDiameter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCustomPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mCustomPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_mCustomPadDiameter)
    }
    for entry in self.mObserversOf_mCustomPadDiameter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomPadDiameter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCustomPadDiameter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCustomPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomPadDiameterUnit = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCustomPadDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameterUnit_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCustomPadDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomPadDiameterUnit_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCustomPadDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mCustomPadDiameterUnit_property.startsToBeObserved (by: self.mObserversOf_mCustomPadDiameterUnit)
    }*/
    /* if !self.mObserversOf_mCustomPadDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCustomPadDiameterUnit.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCustomPadDiameterUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCustomPadDiameterUnit.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCustomPadDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mCustomPadDiameterUnit_property.stopsBeingObserved (by: self.mObserversOf_mCustomPadDiameterUnit)
    }
    for entry in self.mObserversOf_mCustomPadDiameterUnit.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCustomPadDiameterUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCustomPadDiameterUnit.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mUsesCustomPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomPadDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mUsesCustomPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomPadDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mUsesCustomPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomPadDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mUsesCustomPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    /* for managedObject in inSet.values {
      managedObject.mUsesCustomPadDiameter_property.startsToBeObserved (by: self.mObserversOf_mUsesCustomPadDiameter)
    }*/
    /* if !self.mObserversOf_mUsesCustomPadDiameter.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mUsesCustomPadDiameter.values () {
          if let observer = entry.possibleObserver {
            managedObject.mUsesCustomPadDiameter_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mUsesCustomPadDiameter.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mUsesCustomPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      managedObject.mUsesCustomPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_mUsesCustomPadDiameter)
    }
    for entry in self.mObserversOf_mUsesCustomPadDiameter.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mUsesCustomPadDiameter_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mUsesCustomPadDiameter.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'isConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_isConnectedToSomePad = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_isConnectedToSomePad_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_isConnectedToSomePad.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnectedToSomePad_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_isConnectedToSomePad_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_isConnectedToSomePad.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnectedToSomePad_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_isConnectedToSomePad_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_isConnectedToSomePad.values () {
        if let observer = entry.possibleObserver {
          managedObject.isConnectedToSomePad_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_isConnectedToSomePad.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_isConnectedToSomePad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_isConnectedToSomePad.values () {
        if let observer = entry.possibleObserver {
          managedObject.isConnectedToSomePad_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_isConnectedToSomePad.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private final var mObserversOf_location = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_location_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_location.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_location_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_location.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_location_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_location.values () {
        if let observer = entry.possibleObserver {
          managedObject.location_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_location_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_location.values () {
        if let observer = entry.possibleObserver {
          managedObject.location_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netNameFromComponentPad' transient property
  //····················································································································

  private final var mObserversOf_netNameFromComponentPad = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netNameFromComponentPad_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netNameFromComponentPad.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromComponentPad_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netNameFromComponentPad_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netNameFromComponentPad.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromComponentPad_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netNameFromComponentPad_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameFromComponentPad.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromComponentPad_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netNameFromComponentPad.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netNameFromComponentPad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameFromComponentPad.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromComponentPad_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netNameFromComponentPad.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  private final var mObserversOf_netNameAndPadLocation = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netNameAndPadLocation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netNameAndPadLocation.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netNameAndPadLocation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netNameAndPadLocation.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netNameAndPadLocation_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameAndPadLocation.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameAndPadLocation.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'side' transient property
  //····················································································································

  private final var mObserversOf_side = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_side_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_side.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_side_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_side.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_side_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_side.values () {
        if let observer = entry.possibleObserver {
          managedObject.side_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_side.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_side_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_side.values () {
        if let observer = entry.possibleObserver {
          managedObject.side_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_side.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  private final var mObserversOf_isVia = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_isVia_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_isVia.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_isVia_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_isVia.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_isVia_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_isVia.values () {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_isVia_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_isVia.values () {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_issues.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_issues.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_issues.values () {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_issues.values () {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'viaDefaultHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaDefaultHoleDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_viaDefaultHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultHoleDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_viaDefaultHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultHoleDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_viaDefaultHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_viaDefaultHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultHoleDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_viaDefaultHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_viaDefaultHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_viaDefaultHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultHoleDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_viaDefaultHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'viaDefaultPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaDefaultPadDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_viaDefaultPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_viaDefaultPadDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultPadDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_viaDefaultPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_viaDefaultPadDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaDefaultPadDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_viaDefaultPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_viaDefaultPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultPadDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_viaDefaultPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_viaDefaultPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_viaDefaultPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.viaDefaultPadDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_viaDefaultPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netNameFromTracks' transient property
  //····················································································································

  private final var mObserversOf_netNameFromTracks = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netNameFromTracks_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netNameFromTracks.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromTracks_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netNameFromTracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netNameFromTracks.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameFromTracks_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netNameFromTracks_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameFromTracks.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromTracks_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netNameFromTracks.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netNameFromTracks_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netNameFromTracks.values () {
        if let observer = entry.possibleObserver {
          managedObject.netNameFromTracks_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netNameFromTracks.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netClassName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netClassName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassName.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassName.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'connectedToComponent' transient property
  //····················································································································

  private final var mObserversOf_connectedToComponent = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_connectedToComponent_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_connectedToComponent.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedToComponent_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_connectedToComponent_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_connectedToComponent.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedToComponent_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_connectedToComponent_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_connectedToComponent.values () {
        if let observer = entry.possibleObserver {
          managedObject.connectedToComponent_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_connectedToComponent.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_connectedToComponent_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_connectedToComponent.values () {
        if let observer = entry.possibleObserver {
          managedObject.connectedToComponent_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_connectedToComponent.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'actualHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_actualHoleDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_actualHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_actualHoleDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualHoleDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_actualHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_actualHoleDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualHoleDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_actualHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_actualHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.actualHoleDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_actualHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_actualHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_actualHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.actualHoleDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_actualHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'actualPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_actualPadDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_actualPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_actualPadDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualPadDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_actualPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_actualPadDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualPadDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_actualPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_actualPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.actualPadDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_actualPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_actualPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_actualPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.actualPadDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_actualPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_signatureForERCChecking.values () {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_signatureForERCChecking.values () {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardConnector <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardConnector {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardConnector> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardConnector {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardConnector] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardConnector> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardConnector : ReadOnlyArrayOf_BoardConnector {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardConnector>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardConnector : ReadWriteArrayOf_BoardConnector, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardConnector> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardConnector)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BoardConnector> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BoardConnector)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardConnector) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardConnector) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardConnector>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardConnector>,
                                 addedSet inAddedSet : EBReferenceSet <BoardConnector>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardConnector] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardConnector>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardConnector> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardConnector) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardConnector) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardConnector is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

