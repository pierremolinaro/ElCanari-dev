//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BoardConnector : ReadOnlyAbstractObjectProperty <BoardConnector> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mComponentPadName_property.removeEBObserver (self.mComponentPadName_property) // Stored property
      oldValue.mPadIndex_property.removeEBObserver (self.mPadIndex_property) // Stored property
      oldValue.mX_property.removeEBObserver (self.mX_property) // Stored property
      oldValue.mY_property.removeEBObserver (self.mY_property) // Stored property
      oldValue.mDefaultHoleDiameterUnit_property.removeEBObserver (self.mDefaultHoleDiameterUnit_property) // Stored property
      oldValue.mCustomHoleDiameter_property.removeEBObserver (self.mCustomHoleDiameter_property) // Stored property
      oldValue.mCustomHoleDiameterUnit_property.removeEBObserver (self.mCustomHoleDiameterUnit_property) // Stored property
      oldValue.mUsesCustomHoleDiameter_property.removeEBObserver (self.mUsesCustomHoleDiameter_property) // Stored property
      oldValue.mDefaultPadDiameterUnit_property.removeEBObserver (self.mDefaultPadDiameterUnit_property) // Stored property
      oldValue.mCustomPadDiameter_property.removeEBObserver (self.mCustomPadDiameter_property) // Stored property
      oldValue.mCustomPadDiameterUnit_property.removeEBObserver (self.mCustomPadDiameterUnit_property) // Stored property
      oldValue.mUsesCustomPadDiameter_property.removeEBObserver (self.mUsesCustomPadDiameter_property) // Stored property
      oldValue.isConnectedToSomePad_property.removeEBObserver (self.isConnectedToSomePad_property) // Transient property
      oldValue.location_property.removeEBObserver (self.location_property) // Transient property
      oldValue.netNameFromComponentPad_property.removeEBObserver (self.netNameFromComponentPad_property) // Transient property
      oldValue.netNameAndPadLocation_property.removeEBObserver (self.netNameAndPadLocation_property) // Transient property
      oldValue.side_property.removeEBObserver (self.side_property) // Transient property
      oldValue.isVia_property.removeEBObserver (self.isVia_property) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
      oldValue.viaDefaultHoleDiameter_property.removeEBObserver (self.viaDefaultHoleDiameter_property) // Transient property
      oldValue.viaDefaultPadDiameter_property.removeEBObserver (self.viaDefaultPadDiameter_property) // Transient property
      oldValue.netNameFromTracks_property.removeEBObserver (self.netNameFromTracks_property) // Transient property
      oldValue.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
      oldValue.connectedToComponent_property.removeEBObserver (self.connectedToComponent_property) // Transient property
      oldValue.actualHoleDiameter_property.removeEBObserver (self.actualHoleDiameter_property) // Transient property
      oldValue.actualPadDiameter_property.removeEBObserver (self.actualPadDiameter_property) // Transient property
      oldValue.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
      oldValue.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mComponentPadName_property.addEBObserver (self.mComponentPadName_property) // Stored property
      newValue.mPadIndex_property.addEBObserver (self.mPadIndex_property) // Stored property
      newValue.mX_property.addEBObserver (self.mX_property) // Stored property
      newValue.mY_property.addEBObserver (self.mY_property) // Stored property
      newValue.mDefaultHoleDiameterUnit_property.addEBObserver (self.mDefaultHoleDiameterUnit_property) // Stored property
      newValue.mCustomHoleDiameter_property.addEBObserver (self.mCustomHoleDiameter_property) // Stored property
      newValue.mCustomHoleDiameterUnit_property.addEBObserver (self.mCustomHoleDiameterUnit_property) // Stored property
      newValue.mUsesCustomHoleDiameter_property.addEBObserver (self.mUsesCustomHoleDiameter_property) // Stored property
      newValue.mDefaultPadDiameterUnit_property.addEBObserver (self.mDefaultPadDiameterUnit_property) // Stored property
      newValue.mCustomPadDiameter_property.addEBObserver (self.mCustomPadDiameter_property) // Stored property
      newValue.mCustomPadDiameterUnit_property.addEBObserver (self.mCustomPadDiameterUnit_property) // Stored property
      newValue.mUsesCustomPadDiameter_property.addEBObserver (self.mUsesCustomPadDiameter_property) // Stored property
      newValue.isConnectedToSomePad_property.addEBObserver (self.isConnectedToSomePad_property) // Transient property
      newValue.location_property.addEBObserver (self.location_property) // Transient property
      newValue.netNameFromComponentPad_property.addEBObserver (self.netNameFromComponentPad_property) // Transient property
      newValue.netNameAndPadLocation_property.addEBObserver (self.netNameAndPadLocation_property) // Transient property
      newValue.side_property.addEBObserver (self.side_property) // Transient property
      newValue.isVia_property.addEBObserver (self.isVia_property) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
      newValue.viaDefaultHoleDiameter_property.addEBObserver (self.viaDefaultHoleDiameter_property) // Transient property
      newValue.viaDefaultPadDiameter_property.addEBObserver (self.viaDefaultPadDiameter_property) // Transient property
      newValue.netNameFromTracks_property.addEBObserver (self.netNameFromTracks_property) // Transient property
      newValue.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
      newValue.connectedToComponent_property.addEBObserver (self.connectedToComponent_property) // Transient property
      newValue.actualHoleDiameter_property.addEBObserver (self.actualHoleDiameter_property) // Transient property
      newValue.actualPadDiameter_property.addEBObserver (self.actualPadDiameter_property) // Transient property
      newValue.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
      newValue.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
      newValue.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mComponentPadName' stored property
  //····················································································································

  final let mComponentPadName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mPadIndex' stored property
  //····················································································································

  final let mPadIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDefaultHoleDiameterUnit' stored property
  //····················································································································

  final let mDefaultHoleDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomHoleDiameter' stored property
  //····················································································································

  final let mCustomHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomHoleDiameterUnit' stored property
  //····················································································································

  final let mCustomHoleDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mUsesCustomHoleDiameter' stored property
  //····················································································································

  final let mUsesCustomHoleDiameter_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mDefaultPadDiameterUnit' stored property
  //····················································································································

  final let mDefaultPadDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomPadDiameter' stored property
  //····················································································································

  final let mCustomPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomPadDiameterUnit' stored property
  //····················································································································

  final let mCustomPadDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mUsesCustomPadDiameter' stored property
  //····················································································································

  final let mUsesCustomPadDiameter_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'isConnectedToSomePad' transient property
  //····················································································································

  final let isConnectedToSomePad_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  final let location_property = EBGenericTransientProperty <CanariPoint?> ()

  //····················································································································
  //   Observers of 'netNameFromComponentPad' transient property
  //····················································································································

  final let netNameFromComponentPad_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  final let netNameAndPadLocation_property = EBGenericTransientProperty <RastnetInfoArray?> ()

  //····················································································································
  //   Observers of 'side' transient property
  //····················································································································

  final let side_property = EBGenericTransientProperty <ConnectorSide?> ()

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  final let isVia_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observers of 'viaDefaultHoleDiameter' transient property
  //····················································································································

  final let viaDefaultHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'viaDefaultPadDiameter' transient property
  //····················································································································

  final let viaDefaultPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netNameFromTracks' transient property
  //····················································································································

  final let netNameFromTracks_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'connectedToComponent' transient property
  //····················································································································

  final let connectedToComponent_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'actualHoleDiameter' transient property
  //····················································································································

  final let actualHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'actualPadDiameter' transient property
  //····················································································································

  final let actualPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observable toMany property: mTracksP2
  //····················································································································

  private final var mObserversOf_mTracksP2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTracksP2 (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracksP2.insert (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP2 (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracksP2.remove (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mTracksP1
  //····················································································································

  private final var mObserversOf_mTracksP1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTracksP1 (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracksP1.insert (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP1 (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracksP1.remove (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mComponentPadName simple stored property
    self.mComponentPadName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mComponentPadName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPadIndex simple stored property
    self.mPadIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPadIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDefaultHoleDiameterUnit simple stored property
    self.mDefaultHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDefaultHoleDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomHoleDiameter simple stored property
    self.mCustomHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCustomHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomHoleDiameterUnit simple stored property
    self.mCustomHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCustomHoleDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mUsesCustomHoleDiameter simple stored property
    self.mUsesCustomHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mUsesCustomHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDefaultPadDiameterUnit simple stored property
    self.mDefaultPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDefaultPadDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomPadDiameter simple stored property
    self.mCustomPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCustomPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomPadDiameterUnit simple stored property
    self.mCustomPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mCustomPadDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mUsesCustomPadDiameter simple stored property
    self.mUsesCustomPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mUsesCustomPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure isConnectedToSomePad transient property
    self.isConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.isConnectedToSomePad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure location transient property
    self.location_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.location_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netNameFromComponentPad transient property
    self.netNameFromComponentPad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netNameFromComponentPad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netNameAndPadLocation transient property
    self.netNameAndPadLocation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netNameAndPadLocation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure side transient property
    self.side_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.side_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure isVia transient property
    self.isVia_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.isVia_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaDefaultHoleDiameter transient property
    self.viaDefaultHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viaDefaultHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaDefaultPadDiameter transient property
    self.viaDefaultPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viaDefaultPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netNameFromTracks transient property
    self.netNameFromTracks_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netNameFromTracks_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure connectedToComponent transient property
    self.connectedToComponent_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.connectedToComponent_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure actualHoleDiameter transient property
    self.actualHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.actualHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure actualPadDiameter transient property
    self.actualPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.actualPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_BoardConnector : ReadOnlyObject_BoardConnector {

  //····················································································································

  func setProp (_ inValue : BoardConnector?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BoardConnector : ReadWriteObject_BoardConnector, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorableProperty {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! BoardConnector
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! BoardConnector
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardConnector) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardConnector) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardConnector? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardConnector? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : BoardConnector? = nil

  //····················································································································

  override func setProp (_ inValue : BoardConnector?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

