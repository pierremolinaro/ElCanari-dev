//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mThreshold : AnyObject {
  var mThreshold : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mImageData : AnyObject {
  var mImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mInvert : AnyObject {
  var mInvert : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mHorizontalFlip : AnyObject {
  var mHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mVerticalFlip : AnyObject {
  var mVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mScale : AnyObject {
  var mScale : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mPixelSize : AnyObject {
  var mPixelSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mPixelSizeUnit : AnyObject {
  var mPixelSizeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mActualWidthUnit : AnyObject {
  var mActualWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mActualHeightUnit : AnyObject {
  var mActualHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mImageDisplay : AnyObject {
  var mImageDisplay : BoardImageDisplay { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mLayer : AnyObject {
  var mLayer : BoardQRCodeLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mText : AnyObject {
  var mText : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mRotation : AnyObject {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_imageDataByteCount : AnyObject {
  var imageDataByteCount : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardImageCodeDescriptor : AnyObject {
  var boardImageCodeDescriptor : BoardImageDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardOriginalImageWidth : AnyObject {
  var boardOriginalImageWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardOriginalImageHeight : AnyObject {
  var boardOriginalImageHeight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardScaledImageWidth : AnyObject {
  var boardScaledImageWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardScaledImageHeight : AnyObject {
  var boardScaledImageHeight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardActualImageWidth : AnyObject {
  var boardActualImageWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_boardActualImageHeight : AnyObject {
  var boardActualImageHeight : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardImage_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardImage : BoardObject,
         BoardImage_mXUnit,
         BoardImage_mCenterY,
         BoardImage_mYUnit,
         BoardImage_mThreshold,
         BoardImage_mImageData,
         BoardImage_mInvert,
         BoardImage_mHorizontalFlip,
         BoardImage_mVerticalFlip,
         BoardImage_mScale,
         BoardImage_mPixelSize,
         BoardImage_mPixelSizeUnit,
         BoardImage_mActualWidthUnit,
         BoardImage_mActualHeightUnit,
         BoardImage_mImageDisplay,
         BoardImage_mLayer,
         BoardImage_mText,
         BoardImage_mRotation,
         BoardImage_mCenterX,
         BoardImage_imageDataByteCount,
         BoardImage_boardImageCodeDescriptor,
         BoardImage_boardOriginalImageWidth,
         BoardImage_boardOriginalImageHeight,
         BoardImage_boardScaledImageWidth,
         BoardImage_boardScaledImageHeight,
         BoardImage_boardActualImageWidth,
         BoardImage_boardActualImageHeight,
         BoardImage_objectDisplay,
         BoardImage_selectionDisplay,
         BoardImage_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mXUnit
  //····················································································································

  final let mXUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYUnit
  //····················································································································

  final let mYUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mThreshold
  //····················································································································

  final let mThreshold_property : EBStoredProperty_Int

  //····················································································································

  final var mThreshold : Int {
    get { return self.mThreshold_property.propval }
  }

  //····················································································································
  //   Atomic property: mImageData
  //····················································································································

  final let mImageData_property : EBStoredProperty_Data

  //····················································································································

  final var mImageData : Data {
    get { return self.mImageData_property.propval }
    set { self.mImageData_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mInvert
  //····················································································································

  final let mInvert_property : EBStoredProperty_Bool

  //····················································································································

  final var mInvert : Bool {
    get { return self.mInvert_property.propval }
  }

  //····················································································································
  //   Atomic property: mHorizontalFlip
  //····················································································································

  final let mHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final var mHorizontalFlip : Bool {
    get { return self.mHorizontalFlip_property.propval }
  }

  //····················································································································
  //   Atomic property: mVerticalFlip
  //····················································································································

  final let mVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final var mVerticalFlip : Bool {
    get { return self.mVerticalFlip_property.propval }
  }

  //····················································································································
  //   Atomic property: mScale
  //····················································································································

  final let mScale_property : EBStoredProperty_Double

  //····················································································································

  final var mScale : Double {
    get { return self.mScale_property.propval }
  }

  //····················································································································
  //   Atomic property: mPixelSize
  //····················································································································

  final let mPixelSize_property : EBStoredProperty_Int

  //····················································································································

  final var mPixelSize : Int {
    get { return self.mPixelSize_property.propval }
  }

  //····················································································································
  //   Atomic property: mPixelSizeUnit
  //····················································································································

  final let mPixelSizeUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mPixelSizeUnit : Int {
    get { return self.mPixelSizeUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mActualWidthUnit
  //····················································································································

  final let mActualWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mActualWidthUnit : Int {
    get { return self.mActualWidthUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mActualHeightUnit
  //····················································································································

  final let mActualHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mActualHeightUnit : Int {
    get { return self.mActualHeightUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mImageDisplay
  //····················································································································

  final let mImageDisplay_property : EBStoredProperty_BoardImageDisplay

  //····················································································································

  final var mImageDisplay : BoardImageDisplay {
    get { return self.mImageDisplay_property.propval }
  }

  //····················································································································
  //   Atomic property: mLayer
  //····················································································································

  final let mLayer_property : EBStoredProperty_BoardQRCodeLayer

  //····················································································································

  final var mLayer : BoardQRCodeLayer {
    get { return self.mLayer_property.propval }
    set { self.mLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mText
  //····················································································································

  final let mText_property : EBStoredProperty_String

  //····················································································································

  final var mText : String {
    get { return self.mText_property.propval }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_Int

  //····················································································································

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: computedDataImage
  //····················································································································

  final let computedDataImage_property = EBComputedProperty_Data ()

  //····················································································································
  //   Transient property: imageDataByteCount
  //····················································································································

  final let imageDataByteCount_property = EBTransientProperty <String> ()

  //····················································································································

  final var imageDataByteCount : String? {
    return self.imageDataByteCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardImageCodeDescriptor
  //····················································································································

  final let boardImageCodeDescriptor_property = EBTransientProperty <BoardImageDescriptor> ()

  //····················································································································

  final var boardImageCodeDescriptor : BoardImageDescriptor? {
    return self.boardImageCodeDescriptor_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardOriginalImageWidth
  //····················································································································

  final let boardOriginalImageWidth_property = EBTransientProperty <String> ()

  //····················································································································

  final var boardOriginalImageWidth : String? {
    return self.boardOriginalImageWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardOriginalImageHeight
  //····················································································································

  final let boardOriginalImageHeight_property = EBTransientProperty <String> ()

  //····················································································································

  final var boardOriginalImageHeight : String? {
    return self.boardOriginalImageHeight_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardScaledImageWidth
  //····················································································································

  final let boardScaledImageWidth_property = EBTransientProperty <String> ()

  //····················································································································

  final var boardScaledImageWidth : String? {
    return self.boardScaledImageWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardScaledImageHeight
  //····················································································································

  final let boardScaledImageHeight_property = EBTransientProperty <String> ()

  //····················································································································

  final var boardScaledImageHeight : String? {
    return self.boardScaledImageHeight_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardActualImageWidth
  //····················································································································

  final let boardActualImageWidth_property = EBTransientProperty <Int> ()

  //····················································································································

  final var boardActualImageWidth : Int? {
    return self.boardActualImageWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardActualImageHeight
  //····················································································································

  final let boardActualImageHeight_property = EBTransientProperty <Int> ()

  //····················································································································

  final var boardActualImageHeight : Int? {
    return self.boardActualImageHeight_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mXUnit")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mYUnit")
    self.mThreshold_property = EBStoredProperty_Int (defaultValue: 200, undoManager: inUndoManager, key: "mThreshold")
    self.mImageData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: inUndoManager, key: "mImageData")
    self.mInvert_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mInvert")
    self.mHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mHorizontalFlip")
    self.mVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mVerticalFlip")
    self.mScale_property = EBStoredProperty_Double (defaultValue: 0.5, undoManager: inUndoManager, key: "mScale")
    self.mPixelSize_property = EBStoredProperty_Int (defaultValue: 31750, undoManager: inUndoManager, key: "mPixelSize")
    self.mPixelSizeUnit_property = EBStoredProperty_Int (defaultValue: 31750, undoManager: inUndoManager, key: "mPixelSizeUnit")
    self.mActualWidthUnit_property = EBStoredProperty_Int (defaultValue: 900000, undoManager: inUndoManager, key: "mActualWidthUnit")
    self.mActualHeightUnit_property = EBStoredProperty_Int (defaultValue: 900000, undoManager: inUndoManager, key: "mActualHeightUnit")
    self.mImageDisplay_property = EBStoredProperty_BoardImageDisplay (defaultValue: BoardImageDisplay.original, undoManager: inUndoManager, key: "mImageDisplay")
    self.mLayer_property = EBStoredProperty_BoardQRCodeLayer (defaultValue: BoardQRCodeLayer.legendFront, undoManager: inUndoManager, key: "mLayer")
    self.mText_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mText")
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mRotation")
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    super.init (inUndoManager)
  //--- Computed property: computedDataImage
    self.computedDataImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mImageData_property.selection
        let s1 = unwSelf.mScale_property.selection
        let s2 = unwSelf.mImageDisplay_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (computed_BoardImage_computedDataImage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.computedDataImage_property.mWriteModelFunction = { [weak self] in self?.compute_computedDataImage_property ($0) }
    self.mImageData_property.startsBeingObserved (by: self.computedDataImage_property)
    self.mScale_property.startsBeingObserved (by: self.computedDataImage_property)
    self.mImageDisplay_property.startsBeingObserved (by: self.computedDataImage_property)
  //--- Atomic property: imageDataByteCount
    self.imageDataByteCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mImageData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardImage_imageDataByteCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.startsBeingObserved (by: self.imageDataByteCount_property)
  //--- Atomic property: boardImageCodeDescriptor
    self.boardImageCodeDescriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mImageData_property.selection
        let s1 = unwSelf.mThreshold_property.selection
        let s2 = unwSelf.mInvert_property.selection
        let s3 = unwSelf.mScale_property.selection
        let s4 = unwSelf.mHorizontalFlip_property.selection
        let s5 = unwSelf.mVerticalFlip_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardImage_boardImageCodeDescriptor (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
    self.mThreshold_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
    self.mInvert_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
    self.mScale_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
    self.mHorizontalFlip_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
    self.mVerticalFlip_property.startsBeingObserved (by: self.boardImageCodeDescriptor_property)
  //--- Atomic property: boardOriginalImageWidth
    self.boardOriginalImageWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardImage_boardOriginalImageWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardOriginalImageWidth_property)
  //--- Atomic property: boardOriginalImageHeight
    self.boardOriginalImageHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardImage_boardOriginalImageHeight (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardOriginalImageHeight_property)
  //--- Atomic property: boardScaledImageWidth
    self.boardScaledImageWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardImage_boardScaledImageWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardScaledImageWidth_property)
  //--- Atomic property: boardScaledImageHeight
    self.boardScaledImageHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardImage_boardScaledImageHeight (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardScaledImageHeight_property)
  //--- Atomic property: boardActualImageWidth
    self.boardActualImageWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        let s1 = unwSelf.mPixelSize_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardImage_boardActualImageWidth (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardActualImageWidth_property)
    self.mPixelSize_property.startsBeingObserved (by: self.boardActualImageWidth_property)
  //--- Atomic property: boardActualImageHeight
    self.boardActualImageHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardImageCodeDescriptor_property.selection
        let s1 = unwSelf.mPixelSize_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardImage_boardActualImageHeight (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.boardActualImageHeight_property)
    self.mPixelSize_property.startsBeingObserved (by: self.boardActualImageHeight_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.boardImageCodeDescriptor_property.selection
        let s3 = unwSelf.mLayer_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = unwSelf.mPixelSize_property.selection
        var s6 = unwSelf.displayFrontLegendForBoard_property.selection
        switch s6 {
        case .single :
          ()
        case .empty, .multiple :
          s6 = .single (true)
        }
        var s7 = unwSelf.displayBackLegendForBoard_property.selection
        switch s7 {
        case .single :
          ()
        case .empty, .multiple :
          s7 = .single (true)
        }
        let s8 = preferences_frontSideLegendColorForBoard_property.selection
        let s9 = preferences_backSideLegendColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_BoardImage_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mCenterY_property.startsBeingObserved (by: self.objectDisplay_property)
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mLayer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mPixelSize_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayFrontLegendForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayBackLegendForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.mCenterX_property.selection
        let s2 = unwSelf.mCenterY_property.selection
        let s3 = unwSelf.boardImageCodeDescriptor_property.selection
        let s4 = unwSelf.mLayer_property.selection
        let s5 = unwSelf.mRotation_property.selection
        let s6 = unwSelf.mPixelSize_property.selection
        let s7 = preferences_frontSideLegendColorForBoard_property.selection
        let s8 = preferences_backSideLegendColorForBoard_property.selection
        let s9 = preferences_hiliteWidthMultipliedByTen_property.selection
        let s10 = preferences_mShowTextRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10)) :
          return .single (transient_BoardImage_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mCenterX_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mCenterY_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.boardImageCodeDescriptor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mLayer_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mPixelSize_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_frontSideLegendColorForBoard_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_backSideLegendColorForBoard_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_mShowTextRotationKnobInBoard_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLayer_property.selection
        let s1 = unwSelf.mCenterX_property.selection
        let s2 = unwSelf.mCenterY_property.selection
        let s3 = unwSelf.mImageData_property.selection
        let s4 = unwSelf.mRotation_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_BoardImage_signatureForERCChecking (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mCenterX_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mCenterY_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mImageData_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mRotation_property.startsBeingObserved (by: self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BoardImage (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BoardImage (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BoardImage (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BoardImage (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BoardImage (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BoardImage (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BoardImage (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BoardImage (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_BoardImage ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BoardImage ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_BoardImage ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BoardImage ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BoardImage (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BoardImage (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BoardImage (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_BoardImage (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BoardImage (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BoardImage ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BoardImage ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

