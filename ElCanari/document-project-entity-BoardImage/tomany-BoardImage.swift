//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardImage : EBReadOnlyAbstractArrayProperty <BoardImage> {

  //································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardImage>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardImage>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mThreshold { // Stored property
        managedObject.mThreshold_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mImageData { // Stored property
        managedObject.mImageData_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mInvert { // Stored property
        managedObject.mInvert_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalFlip { // Stored property
        managedObject.mHorizontalFlip_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalFlip { // Stored property
        managedObject.mVerticalFlip_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mScale { // Stored property
        managedObject.mScale_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPixelSize { // Stored property
        managedObject.mPixelSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPixelSizeUnit { // Stored property
        managedObject.mPixelSizeUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualWidthUnit { // Stored property
        managedObject.mActualWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualHeightUnit { // Stored property
        managedObject.mActualHeightUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mImageDisplay { // Stored property
        managedObject.mImageDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageDataByteCount { // Transient property
        managedObject.imageDataByteCount_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardImageCodeDescriptor { // Transient property
        managedObject.boardImageCodeDescriptor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardOriginalImageWidth { // Transient property
        managedObject.boardOriginalImageWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardOriginalImageHeight { // Transient property
        managedObject.boardOriginalImageHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardScaledImageWidth { // Transient property
        managedObject.boardScaledImageWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardScaledImageHeight { // Transient property
        managedObject.boardScaledImageHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardActualImageWidth { // Transient property
        managedObject.boardActualImageWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardActualImageHeight { // Transient property
        managedObject.boardActualImageHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedDataImage { // Computed property
        managedObject.computedDataImage_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mThreshold { // Stored property
        managedObject.mThreshold_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mImageData { // Stored property
        managedObject.mImageData_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mInvert { // Stored property
        managedObject.mInvert_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalFlip { // Stored property
        managedObject.mHorizontalFlip_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalFlip { // Stored property
        managedObject.mVerticalFlip_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mScale { // Stored property
        managedObject.mScale_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPixelSize { // Stored property
        managedObject.mPixelSize_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPixelSizeUnit { // Stored property
        managedObject.mPixelSizeUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualWidthUnit { // Stored property
        managedObject.mActualWidthUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualHeightUnit { // Stored property
        managedObject.mActualHeightUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mImageDisplay { // Stored property
        managedObject.mImageDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_imageDataByteCount { // Transient property
        managedObject.imageDataByteCount_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardImageCodeDescriptor { // Transient property
        managedObject.boardImageCodeDescriptor_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardOriginalImageWidth { // Transient property
        managedObject.boardOriginalImageWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardOriginalImageHeight { // Transient property
        managedObject.boardOriginalImageHeight_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardScaledImageWidth { // Transient property
        managedObject.boardScaledImageWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardScaledImageHeight { // Transient property
        managedObject.boardScaledImageHeight_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardActualImageWidth { // Transient property
        managedObject.boardActualImageWidth_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_boardActualImageHeight { // Transient property
        managedObject.boardActualImageHeight_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedDataImage { // Computed property
        managedObject.computedDataImage_property.startsBeingObserved (by: relay)
      }
    }
  }

  //································································································
  //   Observers of 'mXUnit' stored property
  //································································································

  private final var mObserversOf_mXUnit : EBObservedObserver? = nil

  //································································································

  final func toMany_mXUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mXUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXUnit?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mCenterY' stored property
  //································································································

  private final var mObserversOf_mCenterY : EBObservedObserver? = nil

  //································································································

  final func toMany_mCenterY_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mCenterY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mCenterY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCenterY?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mYUnit' stored property
  //································································································

  private final var mObserversOf_mYUnit : EBObservedObserver? = nil

  //································································································

  final func toMany_mYUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mYUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYUnit?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mThreshold' stored property
  //································································································

  private final var mObserversOf_mThreshold : EBObservedObserver? = nil

  //································································································

  final func toMany_mThreshold_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mThreshold {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mThreshold_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mThreshold = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mThreshold_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mThreshold?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mImageData' stored property
  //································································································

  private final var mObserversOf_mImageData : EBObservedObserver? = nil

  //································································································

  final func toMany_mImageData_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mImageData {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mImageData_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mImageData = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mImageData_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mImageData?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mInvert' stored property
  //································································································

  private final var mObserversOf_mInvert : EBObservedObserver? = nil

  //································································································

  final func toMany_mInvert_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mInvert {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mInvert_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mInvert = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mInvert_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mInvert?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mHorizontalFlip' stored property
  //································································································

  private final var mObserversOf_mHorizontalFlip : EBObservedObserver? = nil

  //································································································

  final func toMany_mHorizontalFlip_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mHorizontalFlip {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mHorizontalFlip_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mHorizontalFlip = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mHorizontalFlip_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mHorizontalFlip?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mVerticalFlip' stored property
  //································································································

  private final var mObserversOf_mVerticalFlip : EBObservedObserver? = nil

  //································································································

  final func toMany_mVerticalFlip_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mVerticalFlip {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mVerticalFlip_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mVerticalFlip = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mVerticalFlip_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mVerticalFlip?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mScale' stored property
  //································································································

  private final var mObserversOf_mScale : EBObservedObserver? = nil

  //································································································

  final func toMany_mScale_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mScale {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mScale_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mScale = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mScale_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mScale?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mPixelSize' stored property
  //································································································

  private final var mObserversOf_mPixelSize : EBObservedObserver? = nil

  //································································································

  final func toMany_mPixelSize_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPixelSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPixelSize_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPixelSize = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mPixelSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPixelSize?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mPixelSizeUnit' stored property
  //································································································

  private final var mObserversOf_mPixelSizeUnit : EBObservedObserver? = nil

  //································································································

  final func toMany_mPixelSizeUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPixelSizeUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPixelSizeUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPixelSizeUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mPixelSizeUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPixelSizeUnit?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mActualWidthUnit' stored property
  //································································································

  private final var mObserversOf_mActualWidthUnit : EBObservedObserver? = nil

  //································································································

  final func toMany_mActualWidthUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mActualWidthUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mActualWidthUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mActualWidthUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mActualWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mActualWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mActualHeightUnit' stored property
  //································································································

  private final var mObserversOf_mActualHeightUnit : EBObservedObserver? = nil

  //································································································

  final func toMany_mActualHeightUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mActualHeightUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mActualHeightUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mActualHeightUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mActualHeightUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mActualHeightUnit?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mImageDisplay' stored property
  //································································································

  private final var mObserversOf_mImageDisplay : EBObservedObserver? = nil

  //································································································

  final func toMany_mImageDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mImageDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mImageDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mImageDisplay = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mImageDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mImageDisplay?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mLayer' stored property
  //································································································

  private final var mObserversOf_mLayer : EBObservedObserver? = nil

  //································································································

  final func toMany_mLayer_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mLayer {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mLayer_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mLayer = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mLayer?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mText' stored property
  //································································································

  private final var mObserversOf_mText : EBObservedObserver? = nil

  //································································································

  final func toMany_mText_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mText {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mText_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mText = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mText_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mText?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mRotation' stored property
  //································································································

  private final var mObserversOf_mRotation : EBObservedObserver? = nil

  //································································································

  final func toMany_mRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mRotation?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'mCenterX' stored property
  //································································································

  private final var mObserversOf_mCenterX : EBObservedObserver? = nil

  //································································································

  final func toMany_mCenterX_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mCenterX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mCenterX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCenterX?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'imageDataByteCount' transient property
  //································································································

  private final var mObserversOf_imageDataByteCount : EBObservedObserver? = nil

  //································································································

  final func toMany_imageDataByteCount_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_imageDataByteCount {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.imageDataByteCount_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_imageDataByteCount = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_imageDataByteCount_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_imageDataByteCount?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardImageCodeDescriptor' transient property
  //································································································

  private final var mObserversOf_boardImageCodeDescriptor : EBObservedObserver? = nil

  //································································································

  final func toMany_boardImageCodeDescriptor_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardImageCodeDescriptor {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardImageCodeDescriptor_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardImageCodeDescriptor = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardImageCodeDescriptor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardImageCodeDescriptor?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardOriginalImageWidth' transient property
  //································································································

  private final var mObserversOf_boardOriginalImageWidth : EBObservedObserver? = nil

  //································································································

  final func toMany_boardOriginalImageWidth_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardOriginalImageWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardOriginalImageWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardOriginalImageWidth = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardOriginalImageWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardOriginalImageWidth?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardOriginalImageHeight' transient property
  //································································································

  private final var mObserversOf_boardOriginalImageHeight : EBObservedObserver? = nil

  //································································································

  final func toMany_boardOriginalImageHeight_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardOriginalImageHeight {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardOriginalImageHeight_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardOriginalImageHeight = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardOriginalImageHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardOriginalImageHeight?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardScaledImageWidth' transient property
  //································································································

  private final var mObserversOf_boardScaledImageWidth : EBObservedObserver? = nil

  //································································································

  final func toMany_boardScaledImageWidth_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardScaledImageWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardScaledImageWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardScaledImageWidth = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardScaledImageWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardScaledImageWidth?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardScaledImageHeight' transient property
  //································································································

  private final var mObserversOf_boardScaledImageHeight : EBObservedObserver? = nil

  //································································································

  final func toMany_boardScaledImageHeight_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardScaledImageHeight {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardScaledImageHeight_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardScaledImageHeight = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardScaledImageHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardScaledImageHeight?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardActualImageWidth' transient property
  //································································································

  private final var mObserversOf_boardActualImageWidth : EBObservedObserver? = nil

  //································································································

  final func toMany_boardActualImageWidth_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardActualImageWidth {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardActualImageWidth_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardActualImageWidth = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardActualImageWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardActualImageWidth?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'boardActualImageHeight' transient property
  //································································································

  private final var mObserversOf_boardActualImageHeight : EBObservedObserver? = nil

  //································································································

  final func toMany_boardActualImageHeight_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_boardActualImageHeight {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.boardActualImageHeight_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_boardActualImageHeight = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_boardActualImageHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_boardActualImageHeight?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'objectDisplay' transient property
  //································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //································································································

  final func toMany_objectDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'selectionDisplay' transient property
  //································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //································································································

  final func toMany_selectionDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'signatureForERCChecking' transient property
  //································································································

  private final var mObserversOf_signatureForERCChecking : EBObservedObserver? = nil

  //································································································

  final func toMany_signatureForERCChecking_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'computedDataImage' computed property
  //································································································

  private final var mObserversOf_computedDataImage : EBObservedObserver? = nil

  //································································································

  final func toMany_computedDataImage_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_computedDataImage {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.computedDataImage_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_computedDataImage = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_computedDataImage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_computedDataImage?.stopsBeingObserved (by: inObserver)
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardImage is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardImage <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardImage {

  //································································································
  //   Data provider
  //································································································

  private weak var mDataProvider : EBReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
//  private let mModelEvent = EBModelEvent ()

  //································································································

/*  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  } */

  //································································································

  func setDataProvider (_ inProvider : EBReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //································································································

  override func notifyModelDidChange () {
    if !self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = true
      DispatchQueue.main.async {
        self.computeModelArray ()
      }
    }
//    self.mModelArrayShouldBeComputed = true
//    self.mModelEvent.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardImage> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardImage {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //································································································

  override var selection : EBSelection < [BoardImage] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //································································································

  override var propval : EBReferenceArray <BoardImage> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ReadWriteArrayOf_BoardImage is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardImage is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_BoardImage is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardImage
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardImage is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

