//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mWidthUnit : AnyObject {
  var mWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mX1 : AnyObject {
  var mX1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mX1Unit : AnyObject {
  var mX1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mY1 : AnyObject {
  var mY1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mY1Unit : AnyObject {
  var mY1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mX2 : AnyObject {
  var mX2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mX2Unit : AnyObject {
  var mX2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mY2 : AnyObject {
  var mY2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mY2Unit : AnyObject {
  var mY2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mLayer : AnyObject {
  var mLayer : BoardLineLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardLine_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardLine : BoardObject,
         BoardLine_mWidthUnit,
         BoardLine_mX1,
         BoardLine_mX1Unit,
         BoardLine_mY1,
         BoardLine_mY1Unit,
         BoardLine_mX2,
         BoardLine_mX2Unit,
         BoardLine_mY2,
         BoardLine_mY2Unit,
         BoardLine_mLayer,
         BoardLine_mWidth,
         BoardLine_objectDisplay,
         BoardLine_selectionDisplay {

  //····················································································································
  //   Atomic property: mWidthUnit
  //····················································································································

  final let mWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidthUnit_toDefaultValue () {
    self.mWidthUnit = 2286
  }

  //····················································································································

  final var mWidthUnit : Int {
    get { return self.mWidthUnit_property.propval }
    set { self.mWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX1
  //····················································································································

  final let mX1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX1_toDefaultValue () {
    self.mX1 = 0
  }

  //····················································································································

  final var mX1 : Int {
    get { return self.mX1_property.propval }
    set { self.mX1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX1Unit
  //····················································································································

  final let mX1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX1Unit_toDefaultValue () {
    self.mX1Unit = 2286
  }

  //····················································································································

  final var mX1Unit : Int {
    get { return self.mX1Unit_property.propval }
    set { self.mX1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY1
  //····················································································································

  final let mY1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY1_toDefaultValue () {
    self.mY1 = 0
  }

  //····················································································································

  final var mY1 : Int {
    get { return self.mY1_property.propval }
    set { self.mY1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY1Unit
  //····················································································································

  final let mY1Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY1Unit_toDefaultValue () {
    self.mY1Unit = 2286
  }

  //····················································································································

  final var mY1Unit : Int {
    get { return self.mY1Unit_property.propval }
    set { self.mY1Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX2
  //····················································································································

  final let mX2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX2_toDefaultValue () {
    self.mX2 = 457200
  }

  //····················································································································

  final var mX2 : Int {
    get { return self.mX2_property.propval }
    set { self.mX2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX2Unit
  //····················································································································

  final let mX2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX2Unit_toDefaultValue () {
    self.mX2Unit = 2286
  }

  //····················································································································

  final var mX2Unit : Int {
    get { return self.mX2Unit_property.propval }
    set { self.mX2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY2
  //····················································································································

  final let mY2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY2_toDefaultValue () {
    self.mY2 = 457200
  }

  //····················································································································

  final var mY2 : Int {
    get { return self.mY2_property.propval }
    set { self.mY2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY2Unit
  //····················································································································

  final let mY2Unit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY2Unit_toDefaultValue () {
    self.mY2Unit = 2286
  }

  //····················································································································

  final var mY2Unit : Int {
    get { return self.mY2Unit_property.propval }
    set { self.mY2Unit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayer
  //····················································································································

  final let mLayer_property : EBStoredProperty_BoardLineLayer

  //····················································································································

  final func reset_mLayer_toDefaultValue () {
    self.mLayer = BoardLineLayer.legendFront
  }

  //····················································································································

  final var mLayer : BoardLineLayer {
    get { return self.mLayer_property.propval }
    set { self.mLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 57150
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mX1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mX1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mY1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mY1Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mX2_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: ebUndoManager)
    self.mX2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mY2_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: ebUndoManager)
    self.mY2Unit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mLayer_property = EBStoredProperty_BoardLineLayer (defaultValue: BoardLineLayer.legendFront, undoManager: ebUndoManager)
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    // gInitSemaphore.wait ()
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX1_property.selection
        let s1 = unwSelf.mY1_property.selection
        let s2 = unwSelf.mX2_property.selection
        let s3 = unwSelf.mY2_property.selection
        let s4 = unwSelf.mWidth_property.selection
        let s5 = unwSelf.mLayer_property.selection
        let s6 = preferences_frontSideLegendColorForBoard_property.selection
        let s7 = preferences_backSideLegendColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_BoardLine_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX1_property.addEBObserver (self.objectDisplay_property)
    self.mY1_property.addEBObserver (self.objectDisplay_property)
    self.mX2_property.addEBObserver (self.objectDisplay_property)
    self.mY2_property.addEBObserver (self.objectDisplay_property)
    self.mWidth_property.addEBObserver (self.objectDisplay_property)
    self.mLayer_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX1_property.selection
        let s1 = unwSelf.mY1_property.selection
        let s2 = unwSelf.mX2_property.selection
        let s3 = unwSelf.mY2_property.selection
        let s4 = unwSelf.mWidth_property.selection
        let s5 = unwSelf.mLayer_property.selection
        let s6 = preferences_hiliteWidthMultipliedByTen_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6)) :
          return .single (transient_BoardLine_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX1_property.addEBObserver (self.selectionDisplay_property)
    self.mY1_property.addEBObserver (self.selectionDisplay_property)
    self.mX2_property.addEBObserver (self.selectionDisplay_property)
    self.mY2_property.addEBObserver (self.selectionDisplay_property)
    self.mWidth_property.addEBObserver (self.selectionDisplay_property)
    self.mLayer_property.addEBObserver (self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    // gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mWidthUnit
      self.mWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mWidthUnit")
    //--- Atomic property: mX1
      self.mX1_property.storeIn (dictionary: ioDictionary, forKey: "mX1")
    //--- Atomic property: mX1Unit
      self.mX1Unit_property.storeIn (dictionary: ioDictionary, forKey: "mX1Unit")
    //--- Atomic property: mY1
      self.mY1_property.storeIn (dictionary: ioDictionary, forKey: "mY1")
    //--- Atomic property: mY1Unit
      self.mY1Unit_property.storeIn (dictionary: ioDictionary, forKey: "mY1Unit")
    //--- Atomic property: mX2
      self.mX2_property.storeIn (dictionary: ioDictionary, forKey: "mX2")
    //--- Atomic property: mX2Unit
      self.mX2Unit_property.storeIn (dictionary: ioDictionary, forKey: "mX2Unit")
    //--- Atomic property: mY2
      self.mY2_property.storeIn (dictionary: ioDictionary, forKey: "mY2")
    //--- Atomic property: mY2Unit
      self.mY2Unit_property.storeIn (dictionary: ioDictionary, forKey: "mY2Unit")
    //--- Atomic property: mLayer
      self.mLayer_property.storeIn (dictionary: ioDictionary, forKey: "mLayer")
    //--- Atomic property: mWidth
      self.mWidth_property.storeIn (dictionary: ioDictionary, forKey: "mWidth")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mWidthUnit
    self.mWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mWidthUnit")
  //--- Atomic property: mX1
    self.mX1_property.readFrom (dictionary: inDictionary, forKey: "mX1")
  //--- Atomic property: mX1Unit
    self.mX1Unit_property.readFrom (dictionary: inDictionary, forKey: "mX1Unit")
  //--- Atomic property: mY1
    self.mY1_property.readFrom (dictionary: inDictionary, forKey: "mY1")
  //--- Atomic property: mY1Unit
    self.mY1Unit_property.readFrom (dictionary: inDictionary, forKey: "mY1Unit")
  //--- Atomic property: mX2
    self.mX2_property.readFrom (dictionary: inDictionary, forKey: "mX2")
  //--- Atomic property: mX2Unit
    self.mX2Unit_property.readFrom (dictionary: inDictionary, forKey: "mX2Unit")
  //--- Atomic property: mY2
    self.mY2_property.readFrom (dictionary: inDictionary, forKey: "mY2")
  //--- Atomic property: mY2Unit
    self.mY2Unit_property.readFrom (dictionary: inDictionary, forKey: "mY2Unit")
  //--- Atomic property: mLayer
    self.mLayer_property.readFrom (dictionary: inDictionary, forKey: "mLayer")
  //--- Atomic property: mWidth
    self.mWidth_property.readFrom (dictionary: inDictionary, forKey: "mWidth")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mWidthUnit\n"
    ioString += "mX1\n"
    ioString += "mX1Unit\n"
    ioString += "mY1\n"
    ioString += "mY1Unit\n"
    ioString += "mX2\n"
    ioString += "mX2Unit\n"
    ioString += "mY2\n"
    ioString += "mY2Unit\n"
    ioString += "mLayer\n"
    ioString += "mWidth\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLayer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidthUnit = value
      }
      if let range = inDictionary ["mX1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX1 = value
      }
      if let range = inDictionary ["mX1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX1Unit = value
      }
      if let range = inDictionary ["mY1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY1 = value
      }
      if let range = inDictionary ["mY1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY1Unit = value
      }
      if let range = inDictionary ["mX2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX2 = value
      }
      if let range = inDictionary ["mX2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX2Unit = value
      }
      if let range = inDictionary ["mY2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY2 = value
      }
      if let range = inDictionary ["mY2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY2Unit = value
      }
      if let range = inDictionary ["mLayer"], let value = BoardLineLayer.unarchiveFromDataRange (inData, range) {
        self.mLayer = value
      }
      if let range = inDictionary ["mWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidth = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_BoardLine (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_BoardLine (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_BoardLine (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    translate_BoardLine (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_BoardLine (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_BoardLine (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_BoardLine (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_BoardLine (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_BoardLine ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_BoardLine ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_BoardLine ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_BoardLine ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_BoardLine (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90Clockwise_BoardLine (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90CounterClockwise_BoardLine (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_BoardLine (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_BoardLine (additionalDictionary: inDictionary,
                                                 optionalDocument: inOptionalDocument,
                                                 objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_BoardLine ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_BoardLine ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

