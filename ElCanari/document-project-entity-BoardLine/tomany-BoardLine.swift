//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardLine : ReadOnlyAbstractArrayProperty <BoardLine> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardLine>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardLine>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mWidthUnit { // Stored property
        managedObject.mWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX1 { // Stored property
        managedObject.mX1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX1Unit { // Stored property
        managedObject.mX1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY1 { // Stored property
        managedObject.mY1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY1Unit { // Stored property
        managedObject.mY1Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX2 { // Stored property
        managedObject.mX2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX2Unit { // Stored property
        managedObject.mX2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY2 { // Stored property
        managedObject.mY2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY2Unit { // Stored property
        managedObject.mY2Unit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWidth { // Stored property
        managedObject.mWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mWidthUnit { // Stored property
        managedObject.mWidthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX1 { // Stored property
        managedObject.mX1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX1Unit { // Stored property
        managedObject.mX1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY1 { // Stored property
        managedObject.mY1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY1Unit { // Stored property
        managedObject.mY1Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX2 { // Stored property
        managedObject.mX2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX2Unit { // Stored property
        managedObject.mX2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY2 { // Stored property
        managedObject.mY2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY2Unit { // Stored property
        managedObject.mY2Unit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWidth { // Stored property
        managedObject.mWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mWidthUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mWidthUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mWidthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mWidthUnit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWidthUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX1' stored property
  //····················································································································

  private final var mObserversOf_mX1 : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX1 {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX1 = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX1?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX1Unit' stored property
  //····················································································································

  private final var mObserversOf_mX1Unit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX1Unit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX1Unit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX1Unit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY1' stored property
  //····················································································································

  private final var mObserversOf_mY1 : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY1 {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY1 = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY1?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY1Unit' stored property
  //····················································································································

  private final var mObserversOf_mY1Unit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY1Unit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY1Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY1Unit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY1Unit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX2' stored property
  //····················································································································

  private final var mObserversOf_mX2 : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX2 {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX2 = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX2?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX2Unit' stored property
  //····················································································································

  private final var mObserversOf_mX2Unit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX2Unit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX2Unit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX2Unit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY2' stored property
  //····················································································································

  private final var mObserversOf_mY2 : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY2 {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY2 = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY2?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY2Unit' stored property
  //····················································································································

  private final var mObserversOf_mY2Unit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY2Unit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY2Unit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY2Unit = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY2Unit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mObserversOf_mLayer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mLayer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mLayer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mLayer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  private final var mObserversOf_mWidth : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mWidth {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mWidth = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWidth?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardLine <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardLine {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardLine> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardLine {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardLine] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardLine> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardLine : ReadOnlyArrayOf_BoardLine {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardLine>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

