//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardLine : ReadOnlyAbstractArrayProperty <BoardLine> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardLine>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardLine>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX1_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX1Unit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY1_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY1Unit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX2_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX2Unit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY2_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY2Unit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLayer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX1_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX1Unit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY1_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY1Unit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX2_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX2Unit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY2_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY2Unit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLayer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidthUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidthUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mWidthUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mWidthUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mWidthUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mWidthUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mWidthUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mWidthUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mWidthUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX1' stored property
  //····················································································································

  private final var mObserversOf_mX1 = EBWeakEventSet ()

  //····················································································································

  final func toMany_mX1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX1_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mX1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX1_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX1_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mX1.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX1.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX1_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX1.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX1_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mX1.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX1_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX1.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX1Unit' stored property
  //····················································································································

  private final var mObserversOf_mX1Unit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mX1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX1Unit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mX1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX1Unit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX1Unit_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mX1Unit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX1Unit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX1Unit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX1Unit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX1Unit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mX1Unit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX1Unit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX1Unit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY1' stored property
  //····················································································································

  private final var mObserversOf_mY1 = EBWeakEventSet ()

  //····················································································································

  final func toMany_mY1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY1_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mY1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY1_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY1_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mY1.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY1.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY1_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY1.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY1_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mY1.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY1_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY1.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY1Unit' stored property
  //····················································································································

  private final var mObserversOf_mY1Unit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mY1Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY1Unit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mY1Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY1Unit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY1Unit_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mY1Unit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY1Unit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY1Unit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY1Unit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY1Unit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mY1Unit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY1Unit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY1Unit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX2' stored property
  //····················································································································

  private final var mObserversOf_mX2 = EBWeakEventSet ()

  //····················································································································

  final func toMany_mX2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX2_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mX2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX2_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX2_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mX2.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX2.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX2_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX2.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX2_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mX2.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX2_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX2.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX2Unit' stored property
  //····················································································································

  private final var mObserversOf_mX2Unit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mX2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX2Unit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mX2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX2Unit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX2Unit_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mX2Unit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX2Unit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX2Unit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX2Unit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX2Unit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mX2Unit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX2Unit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX2Unit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY2' stored property
  //····················································································································

  private final var mObserversOf_mY2 = EBWeakEventSet ()

  //····················································································································

  final func toMany_mY2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY2_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mY2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY2_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY2_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mY2.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY2.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY2_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY2.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY2_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mY2.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY2_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY2.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY2Unit' stored property
  //····················································································································

  private final var mObserversOf_mY2Unit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mY2Unit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY2Unit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mY2Unit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY2Unit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY2Unit_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mY2Unit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY2Unit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY2Unit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY2Unit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY2Unit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mY2Unit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY2Unit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY2Unit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mObserversOf_mLayer = EBWeakEventSet ()

  //····················································································································

  final func toMany_mLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mLayer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayer_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mLayer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayer_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayer_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mLayer.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mLayer.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mLayer_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mLayer.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayer_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mLayer.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mLayer_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mLayer.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  private final var mObserversOf_mWidth = EBWeakEventSet ()

  //····················································································································

  final func toMany_mWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    if !self.mObserversOf_mWidth.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mWidth.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mWidth_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mWidth.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for (_, entry) in self.mObserversOf_mWidth.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mWidth_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mWidth.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardLine>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardLine <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardLine {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardLine> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardLine {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardLine] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardLine> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardLine : ReadOnlyArrayOf_BoardLine {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardLine>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardLine
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardLine is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

