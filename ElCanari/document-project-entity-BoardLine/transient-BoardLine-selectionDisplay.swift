//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_BoardLine_selectionDisplay (
       _ self_mX1 : Int,                   
       _ self_mY1 : Int,                   
       _ self_mX2 : Int,                   
       _ self_mY2 : Int,                   
       _ self_mWidth : Int,                
       _ self_mLayer : BoardLineLayer,     
       _ prefs_hiliteWidthMultipliedByTen : Int
) -> EBShape {
//--- START OF USER ZONE 2
      var bp = EBBezierPath ()
      bp.lineWidth = CGFloat (prefs_hiliteWidthMultipliedByTen) / 10.0
      bp.lineCapStyle = .round
      bp.lineJoinStyle = .round
      let p1 = CanariPoint (x: self_mX1, y: self_mY1).cocoaPoint
      let p2 = CanariPoint (x: self_mX2, y: self_mY2).cocoaPoint
      bp.move (to: p1)
      bp.line (to: p2)
      var shape = EBShape (stroke: [bp], .cyan)
    //--- Knobs
      shape.add (knobAt: p1, knobIndex: BOARD_LINE_P1, .diamond, 2.0)
      shape.add (knobAt: p2, knobIndex: BOARD_LINE_P2, .diamond, 2.0)
    //---
      return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
