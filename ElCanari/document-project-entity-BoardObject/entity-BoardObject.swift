//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_isPlacedInBoard : AnyObject {
  var isPlacedInBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_isVia : AnyObject {
  var isVia : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_trackLengthInCanariUnit : AnyObject {
  var trackLengthInCanariUnit : Double? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_netNameAndPadLocation : AnyObject {
  var netNameAndPadLocation : RastnetInfoArray? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_componentName : AnyObject {
  var componentName : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayFrontLegendForBoard : AnyObject {
  var displayFrontLegendForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayBackLegendForBoard : AnyObject {
  var displayBackLegendForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayFrontLayoutForBoard : AnyObject {
  var displayFrontLayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayBackLayoutForBoard : AnyObject {
  var displayBackLayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner1LayoutForBoard : AnyObject {
  var displayInner1LayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner2LayoutForBoard : AnyObject {
  var displayInner2LayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner3LayoutForBoard : AnyObject {
  var displayInner3LayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner4LayoutForBoard : AnyObject {
  var displayInner4LayoutForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayFrontPadsForBoard : AnyObject {
  var displayFrontPadsForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayBackPadsForBoard : AnyObject {
  var displayBackPadsForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayPadNumbersForBoard : AnyObject {
  var displayPadNumbersForBoard : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayFrontRestrictRectangles : AnyObject {
  var displayFrontRestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayBackRestrictRectangles : AnyObject {
  var displayBackRestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner1RestrictRectangles : AnyObject {
  var displayInner1RestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner2RestrictRectangles : AnyObject {
  var displayInner2RestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner3RestrictRectangles : AnyObject {
  var displayInner3RestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_displayInner4RestrictRectangles : AnyObject {
  var displayInner4RestrictRectangles : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_packageDrawingWidthMultpliedByTenForBoard : AnyObject {
  var packageDrawingWidthMultpliedByTenForBoard : Int? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_errorOrWarningIssueSize : AnyObject {
  var errorOrWarningIssueSize : Double? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol BoardObject_trackSide : AnyObject {
  var trackSide : TrackSide? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: BoardObject
//--------------------------------------------------------------------------------------------------

class BoardObject : EBGraphicManagedObject,
         BoardObject_isPlacedInBoard,
         BoardObject_issues,
         BoardObject_isVia,
         BoardObject_trackLengthInCanariUnit,
         BoardObject_signatureForERCChecking,
         BoardObject_netNameAndPadLocation,
         BoardObject_componentName,
         BoardObject_displayFrontLegendForBoard,
         BoardObject_displayBackLegendForBoard,
         BoardObject_displayFrontLayoutForBoard,
         BoardObject_displayBackLayoutForBoard,
         BoardObject_displayInner1LayoutForBoard,
         BoardObject_displayInner2LayoutForBoard,
         BoardObject_displayInner3LayoutForBoard,
         BoardObject_displayInner4LayoutForBoard,
         BoardObject_displayFrontPadsForBoard,
         BoardObject_displayBackPadsForBoard,
         BoardObject_displayPadNumbersForBoard,
         BoardObject_displayFrontRestrictRectangles,
         BoardObject_displayBackRestrictRectangles,
         BoardObject_displayInner1RestrictRectangles,
         BoardObject_displayInner2RestrictRectangles,
         BoardObject_displayInner3RestrictRectangles,
         BoardObject_displayInner4RestrictRectangles,
         BoardObject_packageDrawingWidthMultpliedByTenForBoard,
         BoardObject_selectionDisplay,
         BoardObject_objectDisplay,
         BoardObject_errorOrWarningIssueSize,
         BoardObject_trackSide {

  //------------------------------------------------------------------------------------------------
  //   To one property: mRoot
  //------------------------------------------------------------------------------------------------

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false, strongRef: false, key: "mRoot")

  //------------------------------------------------------------------------------------------------

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      // self.mRoot_property.setProp (newValue)
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //------------------------------------------------------------------------------------------------

  final let mRoot_none = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Transient property: isPlacedInBoard
  //------------------------------------------------------------------------------------------------

  final let isPlacedInBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var isPlacedInBoard : Bool? {
    return self.isPlacedInBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: issues
  //------------------------------------------------------------------------------------------------

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: isVia
  //------------------------------------------------------------------------------------------------

  final let isVia_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var isVia : Bool? {
    return self.isVia_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: trackLengthInCanariUnit
  //------------------------------------------------------------------------------------------------

  final let trackLengthInCanariUnit_property = EBTransientProperty <Double> ()

  //------------------------------------------------------------------------------------------------

  final var trackLengthInCanariUnit : Double? {
    return self.trackLengthInCanariUnit_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: signatureForERCChecking
  //------------------------------------------------------------------------------------------------

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //------------------------------------------------------------------------------------------------

  final var signatureForERCChecking : UInt32? {
    return self.signatureForERCChecking_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: netNameAndPadLocation
  //------------------------------------------------------------------------------------------------

  final let netNameAndPadLocation_property = EBTransientProperty <RastnetInfoArray> ()

  //------------------------------------------------------------------------------------------------

  final var netNameAndPadLocation : RastnetInfoArray? {
    return self.netNameAndPadLocation_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: componentName
  //------------------------------------------------------------------------------------------------

  final let componentName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var componentName : String? {
    return self.componentName_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayFrontLegendForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontLegendForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayFrontLegendForBoard : Bool? {
    return self.displayFrontLegendForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayBackLegendForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackLegendForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayBackLegendForBoard : Bool? {
    return self.displayBackLegendForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayFrontLayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontLayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayFrontLayoutForBoard : Bool? {
    return self.displayFrontLayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayBackLayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackLayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayBackLayoutForBoard : Bool? {
    return self.displayBackLayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner1LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner1LayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner1LayoutForBoard : Bool? {
    return self.displayInner1LayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner2LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner2LayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner2LayoutForBoard : Bool? {
    return self.displayInner2LayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner3LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner3LayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner3LayoutForBoard : Bool? {
    return self.displayInner3LayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner4LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner4LayoutForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner4LayoutForBoard : Bool? {
    return self.displayInner4LayoutForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayFrontPadsForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontPadsForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayFrontPadsForBoard : Bool? {
    return self.displayFrontPadsForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayBackPadsForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackPadsForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayBackPadsForBoard : Bool? {
    return self.displayBackPadsForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayPadNumbersForBoard
  //------------------------------------------------------------------------------------------------

  final let displayPadNumbersForBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayPadNumbersForBoard : Bool? {
    return self.displayPadNumbersForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayFrontRestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayFrontRestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayFrontRestrictRectangles : Bool? {
    return self.displayFrontRestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayBackRestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayBackRestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayBackRestrictRectangles : Bool? {
    return self.displayBackRestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner1RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner1RestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner1RestrictRectangles : Bool? {
    return self.displayInner1RestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner2RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner2RestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner2RestrictRectangles : Bool? {
    return self.displayInner2RestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner3RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner3RestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner3RestrictRectangles : Bool? {
    return self.displayInner3RestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: displayInner4RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner4RestrictRectangles_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var displayInner4RestrictRectangles : Bool? {
    return self.displayInner4RestrictRectangles_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: packageDrawingWidthMultpliedByTenForBoard
  //------------------------------------------------------------------------------------------------

  final let packageDrawingWidthMultpliedByTenForBoard_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var packageDrawingWidthMultpliedByTenForBoard : Int? {
    return self.packageDrawingWidthMultpliedByTenForBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: errorOrWarningIssueSize
  //------------------------------------------------------------------------------------------------

  final let errorOrWarningIssueSize_property = EBTransientProperty <Double> ()

  //------------------------------------------------------------------------------------------------

  final var errorOrWarningIssueSize : Double? {
    return self.errorOrWarningIssueSize_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: trackSide
  //------------------------------------------------------------------------------------------------

  final let trackSide_property = EBTransientProperty <TrackSide> ()

  //------------------------------------------------------------------------------------------------

  final var trackSide : TrackSide? {
    return self.trackSide_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.startsBeingObserved (by: self.mRoot_none)
  //--- To one property: mRoot (has opposite to many relationship: mBoardObjects)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.remove (me) } }
    )
  //--- Atomic property: isPlacedInBoard
    self.isPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_isPlacedInBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.startsBeingObserved (by: self.isPlacedInBoard_property)
  //--- Atomic property: displayFrontLegendForBoard
    self.displayFrontLegendForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayFrontLegendForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayFrontLegendForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayFrontLegendForBoard_property.startsBeingObserved (by: self.displayFrontLegendForBoard_property)
  //--- Atomic property: displayBackLegendForBoard
    self.displayBackLegendForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayBackLegendForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayBackLegendForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayBackLegendForBoard_property.startsBeingObserved (by: self.displayBackLegendForBoard_property)
  //--- Atomic property: displayFrontLayoutForBoard
    self.displayFrontLayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayFrontLayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayFrontLayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayFrontLayoutForBoard_property.startsBeingObserved (by: self.displayFrontLayoutForBoard_property)
  //--- Atomic property: displayBackLayoutForBoard
    self.displayBackLayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayBackLayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayBackLayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayBackLayoutForBoard_property.startsBeingObserved (by: self.displayBackLayoutForBoard_property)
  //--- Atomic property: displayInner1LayoutForBoard
    self.displayInner1LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner1LayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner1LayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner1LayoutForBoard_property.startsBeingObserved (by: self.displayInner1LayoutForBoard_property)
  //--- Atomic property: displayInner2LayoutForBoard
    self.displayInner2LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner2LayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner2LayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner2LayoutForBoard_property.startsBeingObserved (by: self.displayInner2LayoutForBoard_property)
  //--- Atomic property: displayInner3LayoutForBoard
    self.displayInner3LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner3LayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner3LayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner3LayoutForBoard_property.startsBeingObserved (by: self.displayInner3LayoutForBoard_property)
  //--- Atomic property: displayInner4LayoutForBoard
    self.displayInner4LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner4LayoutForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner4LayoutForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner4LayoutForBoard_property.startsBeingObserved (by: self.displayInner4LayoutForBoard_property)
  //--- Atomic property: displayFrontPadsForBoard
    self.displayFrontPadsForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayFrontPadsForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayFrontPadsForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayFrontPadsForBoard_property.startsBeingObserved (by: self.displayFrontPadsForBoard_property)
  //--- Atomic property: displayBackPadsForBoard
    self.displayBackPadsForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayBackPadsForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayBackPadsForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayBackPadsForBoard_property.startsBeingObserved (by: self.displayBackPadsForBoard_property)
  //--- Atomic property: displayPadNumbersForBoard
    self.displayPadNumbersForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayPadNumbersForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayPadNumbersForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayPadNumbersForBoard_property.startsBeingObserved (by: self.displayPadNumbersForBoard_property)
  //--- Atomic property: displayFrontRestrictRectangles
    self.displayFrontRestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayFrontRestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayFrontRestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayFrontRestrictRectangles_property.startsBeingObserved (by: self.displayFrontRestrictRectangles_property)
  //--- Atomic property: displayBackRestrictRectangles
    self.displayBackRestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayBackRestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayBackRestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayBackRestrictRectangles_property.startsBeingObserved (by: self.displayBackRestrictRectangles_property)
  //--- Atomic property: displayInner1RestrictRectangles
    self.displayInner1RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner1RestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner1RestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner1RestrictRectangles_property.startsBeingObserved (by: self.displayInner1RestrictRectangles_property)
  //--- Atomic property: displayInner2RestrictRectangles
    self.displayInner2RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner2RestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner2RestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner2RestrictRectangles_property.startsBeingObserved (by: self.displayInner2RestrictRectangles_property)
  //--- Atomic property: displayInner3RestrictRectangles
    self.displayInner3RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner3RestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner3RestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner3RestrictRectangles_property.startsBeingObserved (by: self.displayInner3RestrictRectangles_property)
  //--- Atomic property: displayInner4RestrictRectangles
    self.displayInner4RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.displayInner4RestrictRectangles_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_displayInner4RestrictRectangles (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.displayInner4RestrictRectangles_property.startsBeingObserved (by: self.displayInner4RestrictRectangles_property)
  //--- Atomic property: packageDrawingWidthMultpliedByTenForBoard
    self.packageDrawingWidthMultpliedByTenForBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.packageDrawingWidthMultpliedByTenForBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_packageDrawingWidthMultpliedByTenForBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.packageDrawingWidthMultpliedByTenForBoard_property.startsBeingObserved (by: self.packageDrawingWidthMultpliedByTenForBoard_property)
  //--- Atomic property: errorOrWarningIssueSize
    self.errorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.mErrorOrWarningIssueSize_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardObject_errorOrWarningIssueSize (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.mErrorOrWarningIssueSize_property.startsBeingObserved (by: self.errorOrWarningIssueSize_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

