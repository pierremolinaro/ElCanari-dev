//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardObject : ReadOnlyAbstractArrayProperty <BoardObject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardObject>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardObject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_isPlacedInBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_isVia_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackLengthInCanariUnit_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayFrontLegendForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayBackLegendForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayFrontLayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayBackLayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner1LayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner2LayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner3LayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner4LayoutForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayFrontPadsForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayBackPadsForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayPadNumbersForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayFrontRestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayBackRestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner1RestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner2RestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner3RestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_displayInner4RestrictRectangles_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_packageDrawingWidthMultpliedByTenForBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_errorOrWarningIssueSize_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackSide_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_isPlacedInBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_isVia_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackLengthInCanariUnit_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netNameAndPadLocation_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayFrontLegendForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayBackLegendForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayFrontLayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayBackLayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner1LayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner2LayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner3LayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner4LayoutForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayFrontPadsForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayBackPadsForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayPadNumbersForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayFrontRestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayBackRestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner1RestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner2RestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner3RestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_displayInner4RestrictRectangles_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_packageDrawingWidthMultpliedByTenForBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_errorOrWarningIssueSize_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackSide_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'isPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_isPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isPlacedInBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isPlacedInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isPlacedInBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isPlacedInBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isPlacedInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isPlacedInBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isPlacedInBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isPlacedInBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isPlacedInBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isPlacedInBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isPlacedInBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isPlacedInBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isPlacedInBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isPlacedInBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.addEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  private final var mObserversOf_isVia = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isVia (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isVia.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isVia (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isVia.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isVia_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isVia_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isVia.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isVia_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isVia.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isVia_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isVia.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_trackLengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackLengthInCanariUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthInCanariUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackLengthInCanariUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthInCanariUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackLengthInCanariUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_trackLengthInCanariUnit.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.trackLengthInCanariUnit_property.addEBObserver (observer)
        }else{
          self.mObserversOf_trackLengthInCanariUnit.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackLengthInCanariUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_trackLengthInCanariUnit.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.trackLengthInCanariUnit_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_trackLengthInCanariUnit.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.addEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  private final var mObserversOf_netNameAndPadLocation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netNameAndPadLocation (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameAndPadLocation (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNameAndPadLocation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameAndPadLocation_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameAndPadLocation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netNameAndPadLocation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netNameAndPadLocation_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netNameAndPadLocation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontLegendForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontLegendForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontLegendForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayFrontLegendForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontLegendForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontLegendForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayFrontLegendForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontLegendForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontLegendForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontLegendForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontLegendForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontLegendForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontLegendForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontLegendForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontLegendForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontLegendForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackLegendForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackLegendForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackLegendForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayBackLegendForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackLegendForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackLegendForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayBackLegendForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackLegendForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackLegendForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackLegendForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackLegendForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayBackLegendForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackLegendForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackLegendForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackLegendForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayBackLegendForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontLayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontLayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontLayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayFrontLayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontLayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontLayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayFrontLayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontLayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontLayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontLayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontLayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontLayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontLayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontLayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontLayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontLayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackLayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackLayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackLayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayBackLayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackLayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackLayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayBackLayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackLayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackLayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackLayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackLayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayBackLayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackLayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackLayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackLayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayBackLayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner1LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner1LayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner1LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner1LayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner1LayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner1LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner1LayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner1LayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner1LayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner1LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner1LayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner1LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner1LayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner1LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner1LayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner1LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner2LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner2LayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner2LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner2LayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner2LayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner2LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner2LayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner2LayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner2LayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner2LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner2LayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner2LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner2LayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner2LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner2LayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner2LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner3LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner3LayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner3LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner3LayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner3LayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner3LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner3LayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner3LayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner3LayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner3LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner3LayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner3LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner3LayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner3LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner3LayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner3LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner4LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner4LayoutForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner4LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner4LayoutForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner4LayoutForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner4LayoutForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner4LayoutForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner4LayoutForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner4LayoutForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner4LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner4LayoutForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner4LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner4LayoutForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner4LayoutForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner4LayoutForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner4LayoutForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontPadsForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontPadsForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontPadsForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayFrontPadsForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontPadsForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontPadsForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayFrontPadsForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontPadsForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontPadsForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontPadsForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontPadsForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontPadsForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontPadsForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontPadsForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontPadsForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontPadsForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackPadsForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackPadsForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackPadsForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayBackPadsForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackPadsForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackPadsForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayBackPadsForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackPadsForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackPadsForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackPadsForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackPadsForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayBackPadsForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackPadsForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackPadsForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackPadsForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayBackPadsForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayPadNumbersForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayPadNumbersForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayPadNumbersForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayPadNumbersForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayPadNumbersForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayPadNumbersForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayPadNumbersForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayPadNumbersForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayPadNumbersForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayPadNumbersForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayPadNumbersForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayPadNumbersForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayPadNumbersForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayPadNumbersForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayPadNumbersForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayPadNumbersForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontRestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayFrontRestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontRestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayFrontRestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontRestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontRestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayFrontRestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayFrontRestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontRestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontRestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontRestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontRestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontRestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayFrontRestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayFrontRestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayFrontRestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackRestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayBackRestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackRestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayBackRestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackRestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackRestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayBackRestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayBackRestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackRestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackRestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackRestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayBackRestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackRestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayBackRestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayBackRestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayBackRestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner1RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner1RestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner1RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner1RestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner1RestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner1RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner1RestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner1RestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner1RestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner1RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner1RestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner1RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner1RestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner1RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner1RestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner1RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner2RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner2RestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner2RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner2RestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner2RestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner2RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner2RestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner2RestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner2RestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner2RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner2RestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner2RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner2RestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner2RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner2RestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner2RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner3RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner3RestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner3RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner3RestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner3RestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner3RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner3RestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner3RestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner3RestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner3RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner3RestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner3RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner3RestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner3RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner3RestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner3RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'displayInner4RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner4RestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayInner4RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_displayInner4RestrictRectangles.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner4RestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayInner4RestrictRectangles (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_displayInner4RestrictRectangles.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.displayInner4RestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayInner4RestrictRectangles_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner4RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner4RestrictRectangles_property.addEBObserver (observer)
        }else{
          self.mObserversOf_displayInner4RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayInner4RestrictRectangles_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_displayInner4RestrictRectangles.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.displayInner4RestrictRectangles_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_displayInner4RestrictRectangles.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'packageDrawingWidthMultpliedByTenForBoard' transient property
  //····················································································································

  private final var mObserversOf_packageDrawingWidthMultpliedByTenForBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageDrawingWidthMultpliedByTenForBoard (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageDrawingWidthMultpliedByTenForBoard (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageDrawingWidthMultpliedByTenForBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packageDrawingWidthMultpliedByTenForBoard_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (observer)
        }else{
          self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packageDrawingWidthMultpliedByTenForBoard_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.packageDrawingWidthMultpliedByTenForBoard_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'errorOrWarningIssueSize' transient property
  //····················································································································

  private final var mObserversOf_errorOrWarningIssueSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_errorOrWarningIssueSize (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_errorOrWarningIssueSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.errorOrWarningIssueSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_errorOrWarningIssueSize (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_errorOrWarningIssueSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.errorOrWarningIssueSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_errorOrWarningIssueSize_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_errorOrWarningIssueSize.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.errorOrWarningIssueSize_property.addEBObserver (observer)
        }else{
          self.mObserversOf_errorOrWarningIssueSize.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_errorOrWarningIssueSize_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_errorOrWarningIssueSize.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.errorOrWarningIssueSize_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_errorOrWarningIssueSize.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'trackSide' transient property
  //····················································································································

  private final var mObserversOf_trackSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackSide (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackSide (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackSide_toElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_trackSide.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.trackSide_property.addEBObserver (observer)
        }else{
          self.mObserversOf_trackSide.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackSide_fromElementsOfSet (_ inSet : EBReferenceSet <BoardObject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_trackSide.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.trackSide_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_trackSide.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardObject : ReadOnlyArrayOf_BoardObject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardObject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardObject : ReadWriteArrayOf_BoardObject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardObject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardObject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BoardObject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BoardObject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardObject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardObject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardObject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardObject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardObject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardObject>,
                                 addedSet inAddedSet : EBReferenceSet <BoardObject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardObject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardObject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardObject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardObject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardObject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

