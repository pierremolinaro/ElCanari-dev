//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardObject : ReadOnlyAbstractArrayProperty <BoardObject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardObject>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardObject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_isPlacedInBoard { // Transient property
        managedObject.isPlacedInBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_isVia { // Transient property
        managedObject.isVia_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackLengthInCanariUnit { // Transient property
        managedObject.trackLengthInCanariUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netNameAndPadLocation { // Transient property
        managedObject.netNameAndPadLocation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontLegendForBoard { // Transient property
        managedObject.displayFrontLegendForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackLegendForBoard { // Transient property
        managedObject.displayBackLegendForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontLayoutForBoard { // Transient property
        managedObject.displayFrontLayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackLayoutForBoard { // Transient property
        managedObject.displayBackLayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner1LayoutForBoard { // Transient property
        managedObject.displayInner1LayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner2LayoutForBoard { // Transient property
        managedObject.displayInner2LayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner3LayoutForBoard { // Transient property
        managedObject.displayInner3LayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner4LayoutForBoard { // Transient property
        managedObject.displayInner4LayoutForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontPadsForBoard { // Transient property
        managedObject.displayFrontPadsForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackPadsForBoard { // Transient property
        managedObject.displayBackPadsForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayPadNumbersForBoard { // Transient property
        managedObject.displayPadNumbersForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontRestrictRectangles { // Transient property
        managedObject.displayFrontRestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackRestrictRectangles { // Transient property
        managedObject.displayBackRestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner1RestrictRectangles { // Transient property
        managedObject.displayInner1RestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner2RestrictRectangles { // Transient property
        managedObject.displayInner2RestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner3RestrictRectangles { // Transient property
        managedObject.displayInner3RestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner4RestrictRectangles { // Transient property
        managedObject.displayInner4RestrictRectangles_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard { // Transient property
        managedObject.packageDrawingWidthMultpliedByTenForBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorOrWarningIssueSize { // Transient property
        managedObject.errorOrWarningIssueSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackSide { // Transient property
        managedObject.trackSide_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_isPlacedInBoard { // Transient property
        managedObject.isPlacedInBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_isVia { // Transient property
        managedObject.isVia_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackLengthInCanariUnit { // Transient property
        managedObject.trackLengthInCanariUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netNameAndPadLocation { // Transient property
        managedObject.netNameAndPadLocation_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontLegendForBoard { // Transient property
        managedObject.displayFrontLegendForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackLegendForBoard { // Transient property
        managedObject.displayBackLegendForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontLayoutForBoard { // Transient property
        managedObject.displayFrontLayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackLayoutForBoard { // Transient property
        managedObject.displayBackLayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner1LayoutForBoard { // Transient property
        managedObject.displayInner1LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner2LayoutForBoard { // Transient property
        managedObject.displayInner2LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner3LayoutForBoard { // Transient property
        managedObject.displayInner3LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner4LayoutForBoard { // Transient property
        managedObject.displayInner4LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontPadsForBoard { // Transient property
        managedObject.displayFrontPadsForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackPadsForBoard { // Transient property
        managedObject.displayBackPadsForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayPadNumbersForBoard { // Transient property
        managedObject.displayPadNumbersForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayFrontRestrictRectangles { // Transient property
        managedObject.displayFrontRestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayBackRestrictRectangles { // Transient property
        managedObject.displayBackRestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner1RestrictRectangles { // Transient property
        managedObject.displayInner1RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner2RestrictRectangles { // Transient property
        managedObject.displayInner2RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner3RestrictRectangles { // Transient property
        managedObject.displayInner3RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_displayInner4RestrictRectangles { // Transient property
        managedObject.displayInner4RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard { // Transient property
        managedObject.packageDrawingWidthMultpliedByTenForBoard_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_errorOrWarningIssueSize { // Transient property
        managedObject.errorOrWarningIssueSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackSide { // Transient property
        managedObject.trackSide_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'isPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_isPlacedInBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_isPlacedInBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_isPlacedInBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.isPlacedInBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_isPlacedInBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_isPlacedInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_isPlacedInBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  private final var mObserversOf_isVia : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_isVia_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_isVia {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.isVia_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_isVia = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_isVia_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_isVia?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_trackLengthInCanariUnit : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_trackLengthInCanariUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_trackLengthInCanariUnit {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackLengthInCanariUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackLengthInCanariUnit = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_trackLengthInCanariUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackLengthInCanariUnit?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  private final var mObserversOf_netNameAndPadLocation : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_netNameAndPadLocation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_netNameAndPadLocation {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netNameAndPadLocation_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netNameAndPadLocation = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_netNameAndPadLocation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netNameAndPadLocation?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_componentName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_componentName {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_componentName = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_componentName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentName?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayFrontLegendForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontLegendForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayFrontLegendForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayFrontLegendForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayFrontLegendForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayFrontLegendForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayFrontLegendForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayFrontLegendForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayBackLegendForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackLegendForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayBackLegendForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayBackLegendForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayBackLegendForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayBackLegendForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayBackLegendForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayBackLegendForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayFrontLayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontLayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayFrontLayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayFrontLayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayFrontLayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayFrontLayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayFrontLayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayFrontLayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayBackLayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackLayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayBackLayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayBackLayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayBackLayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayBackLayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayBackLayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayBackLayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner1LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner1LayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner1LayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner1LayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner1LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner1LayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner1LayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner1LayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner2LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner2LayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner2LayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner2LayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner2LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner2LayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner2LayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner2LayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner3LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner3LayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner3LayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner3LayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner3LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner3LayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner3LayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner3LayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner4LayoutForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayInner4LayoutForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner4LayoutForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner4LayoutForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner4LayoutForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner4LayoutForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner4LayoutForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner4LayoutForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayFrontPadsForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayFrontPadsForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayFrontPadsForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayFrontPadsForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayFrontPadsForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayFrontPadsForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayFrontPadsForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayFrontPadsForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayBackPadsForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayBackPadsForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayBackPadsForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayBackPadsForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayBackPadsForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayBackPadsForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayBackPadsForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayBackPadsForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayPadNumbersForBoard' transient property
  //····················································································································

  private final var mObserversOf_displayPadNumbersForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayPadNumbersForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayPadNumbersForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayPadNumbersForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayPadNumbersForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayPadNumbersForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayPadNumbersForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayFrontRestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayFrontRestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayFrontRestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayFrontRestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayFrontRestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayFrontRestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayFrontRestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayFrontRestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayBackRestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayBackRestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayBackRestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayBackRestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayBackRestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayBackRestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayBackRestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayBackRestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner1RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner1RestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner1RestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner1RestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner1RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner1RestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner1RestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner1RestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner2RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner2RestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner2RestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner2RestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner2RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner2RestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner2RestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner2RestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner3RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner3RestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner3RestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner3RestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner3RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner3RestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner3RestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner3RestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'displayInner4RestrictRectangles' transient property
  //····················································································································

  private final var mObserversOf_displayInner4RestrictRectangles : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_displayInner4RestrictRectangles_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_displayInner4RestrictRectangles {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.displayInner4RestrictRectangles_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_displayInner4RestrictRectangles = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_displayInner4RestrictRectangles_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_displayInner4RestrictRectangles?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'packageDrawingWidthMultpliedByTenForBoard' transient property
  //····················································································································

  private final var mObserversOf_packageDrawingWidthMultpliedByTenForBoard : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_packageDrawingWidthMultpliedByTenForBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.packageDrawingWidthMultpliedByTenForBoard_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_packageDrawingWidthMultpliedByTenForBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_packageDrawingWidthMultpliedByTenForBoard?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'errorOrWarningIssueSize' transient property
  //····················································································································

  private final var mObserversOf_errorOrWarningIssueSize : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_errorOrWarningIssueSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_errorOrWarningIssueSize {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.errorOrWarningIssueSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_errorOrWarningIssueSize = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_errorOrWarningIssueSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_errorOrWarningIssueSize?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'trackSide' transient property
  //····················································································································

  private final var mObserversOf_trackSide : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_trackSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_trackSide {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackSide = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_trackSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackSide?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardObject : ReadOnlyArrayOf_BoardObject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardObject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardObject : ReadWriteArrayOf_BoardObject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardObject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardObject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BoardObject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BoardObject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardObject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardObject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardObject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardObject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardObject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardObject>,
                                 addedSet inAddedSet : EBReferenceSet <BoardObject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardObject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardObject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <BoardObject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardObject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardObject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardObject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

