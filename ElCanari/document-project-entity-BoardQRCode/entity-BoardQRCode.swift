//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mMinWidthUnit : AnyObject {
  var mMinWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mMinHeightUnit : AnyObject {
  var mMinHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mDrawFrame : AnyObject {
  var mDrawFrame : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mLayer : AnyObject {
  var mLayer : BoardQRCodeLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mText : AnyObject {
  var mText : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mCorrectionLevel : AnyObject {
  var mCorrectionLevel : QRCodeCorrectionLevel { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mRotation : AnyObject {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_qrCodeDescriptor : AnyObject {
  var qrCodeDescriptor : QRCodeDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_minWidthInCanariUnit : AnyObject {
  var minWidthInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_minHeightInCanariUnit : AnyObject {
  var minHeightInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardQRCode_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardQRCode : BoardObject,
         BoardQRCode_mXUnit,
         BoardQRCode_mCenterY,
         BoardQRCode_mYUnit,
         BoardQRCode_mMinWidthUnit,
         BoardQRCode_mMinHeightUnit,
         BoardQRCode_mDrawFrame,
         BoardQRCode_mLayer,
         BoardQRCode_mText,
         BoardQRCode_mCorrectionLevel,
         BoardQRCode_mRotation,
         BoardQRCode_mCenterX,
         BoardQRCode_qrCodeDescriptor,
         BoardQRCode_minWidthInCanariUnit,
         BoardQRCode_minHeightInCanariUnit,
         BoardQRCode_objectDisplay,
         BoardQRCode_selectionDisplay,
         BoardQRCode_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mXUnit
  //····················································································································

  final let mXUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXUnit_toDefaultValue () {
    self.mXUnit = 2286
  }

  //····················································································································

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
    set { self.mXUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYUnit
  //····················································································································

  final let mYUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYUnit_toDefaultValue () {
    self.mYUnit = 2286
  }

  //····················································································································

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
    set { self.mYUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mMinWidthUnit
  //····················································································································

  final let mMinWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mMinWidthUnit_toDefaultValue () {
    self.mMinWidthUnit = 31750
  }

  //····················································································································

  final var mMinWidthUnit : Int {
    get { return self.mMinWidthUnit_property.propval }
    set { self.mMinWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mMinHeightUnit
  //····················································································································

  final let mMinHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mMinHeightUnit_toDefaultValue () {
    self.mMinHeightUnit = 31750
  }

  //····················································································································

  final var mMinHeightUnit : Int {
    get { return self.mMinHeightUnit_property.propval }
    set { self.mMinHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDrawFrame
  //····················································································································

  final let mDrawFrame_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mDrawFrame_toDefaultValue () {
    self.mDrawFrame = true
  }

  //····················································································································

  final var mDrawFrame : Bool {
    get { return self.mDrawFrame_property.propval }
    set { self.mDrawFrame_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayer
  //····················································································································

  final let mLayer_property : EBStoredProperty_BoardQRCodeLayer

  //····················································································································

  final func reset_mLayer_toDefaultValue () {
    self.mLayer = BoardQRCodeLayer.legendFront
  }

  //····················································································································

  final var mLayer : BoardQRCodeLayer {
    get { return self.mLayer_property.propval }
    set { self.mLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mText
  //····················································································································

  final let mText_property : EBStoredProperty_String

  //····················································································································

  final func reset_mText_toDefaultValue () {
    self.mText = ""
  }

  //····················································································································

  final var mText : String {
    get { return self.mText_property.propval }
    set { self.mText_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCorrectionLevel
  //····················································································································

  final let mCorrectionLevel_property : EBStoredProperty_QRCodeCorrectionLevel

  //····················································································································

  final func reset_mCorrectionLevel_toDefaultValue () {
    self.mCorrectionLevel = QRCodeCorrectionLevel.quality
  }

  //····················································································································

  final var mCorrectionLevel : QRCodeCorrectionLevel {
    get { return self.mCorrectionLevel_property.propval }
    set { self.mCorrectionLevel_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = 0
  }

  //····················································································································

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: qrCodeDescriptor
  //····················································································································

  final let qrCodeDescriptor_property = EBTransientProperty_QRCodeDescriptor ()

  //····················································································································

  final var qrCodeDescriptor : QRCodeDescriptor? {
    return self.qrCodeDescriptor_property.optionalValue
  }

  //····················································································································
  //   Transient property: minWidthInCanariUnit
  //····················································································································

  final let minWidthInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  final var minWidthInCanariUnit : Int? {
    return self.minWidthInCanariUnit_property.optionalValue
  }

  //····················································································································
  //   Transient property: minHeightInCanariUnit
  //····················································································································

  final let minHeightInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  final var minHeightInCanariUnit : Int? {
    return self.minHeightInCanariUnit_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mXUnit")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mYUnit")
    self.mMinWidthUnit_property = EBStoredProperty_Int (defaultValue: 31750, undoManager: inUndoManager, key: "mMinWidthUnit")
    self.mMinHeightUnit_property = EBStoredProperty_Int (defaultValue: 31750, undoManager: inUndoManager, key: "mMinHeightUnit")
    self.mDrawFrame_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mDrawFrame")
    self.mLayer_property = EBStoredProperty_BoardQRCodeLayer (defaultValue: BoardQRCodeLayer.legendFront, undoManager: inUndoManager, key: "mLayer")
    self.mText_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mText")
    self.mCorrectionLevel_property = EBStoredProperty_QRCodeCorrectionLevel (defaultValue: QRCodeCorrectionLevel.quality, undoManager: inUndoManager, key: "mCorrectionLevel")
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mRotation")
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    super.init (inUndoManager)
  //--- Atomic property: qrCodeDescriptor
    self.qrCodeDescriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mText_property.selection
        let s1 = unwSelf.mCorrectionLevel_property.selection
        let s2 = unwSelf.mDrawFrame_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardQRCode_qrCodeDescriptor (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mText_property.startsToBeObserved (by: self.qrCodeDescriptor_property)
    self.mCorrectionLevel_property.startsToBeObserved (by: self.qrCodeDescriptor_property)
    self.mDrawFrame_property.startsToBeObserved (by: self.qrCodeDescriptor_property)
  //--- Atomic property: minWidthInCanariUnit
    self.minWidthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.qrCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardQRCode_minWidthInCanariUnit (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.qrCodeDescriptor_property.startsToBeObserved (by: self.minWidthInCanariUnit_property)
  //--- Atomic property: minHeightInCanariUnit
    self.minHeightInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.qrCodeDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardQRCode_minHeightInCanariUnit (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.qrCodeDescriptor_property.startsToBeObserved (by: self.minHeightInCanariUnit_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.qrCodeDescriptor_property.selection
        let s3 = unwSelf.mLayer_property.selection
        let s4 = unwSelf.mRotation_property.selection
        var s5 = unwSelf.displayFrontLegendForBoard_property.selection
        switch s5 {
        case .single :
          ()
        case .empty, .multiple :
          s5 = .single (true)
        }
        var s6 = unwSelf.displayBackLegendForBoard_property.selection
        switch s6 {
        case .single :
          ()
        case .empty, .multiple :
          s6 = .single (true)
        }
        var s7 = unwSelf.displayFrontLayoutForBoard_property.selection
        switch s7 {
        case .single :
          ()
        case .empty, .multiple :
          s7 = .single (true)
        }
        var s8 = unwSelf.displayBackLayoutForBoard_property.selection
        switch s8 {
        case .single :
          ()
        case .empty, .multiple :
          s8 = .single (true)
        }
        let s9 = preferences_frontSideLegendColorForBoard_property.selection
        let s10 = preferences_frontSideLayoutColorForBoard_property.selection
        let s11 = preferences_backSideLayoutColorForBoard_property.selection
        let s12 = preferences_backSideLegendColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12)) :
          return .single (transient_BoardQRCode_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mCenterY_property.startsToBeObserved (by: self.objectDisplay_property)
    self.qrCodeDescriptor_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mLayer_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mRotation_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayFrontLegendForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayBackLegendForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayFrontLayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayBackLayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_backSideLayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.qrCodeDescriptor_property.selection
        let s3 = unwSelf.mLayer_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = preferences_frontSideLegendColorForBoard_property.selection
        let s6 = preferences_frontSideLayoutColorForBoard_property.selection
        let s7 = preferences_backSideLayoutColorForBoard_property.selection
        let s8 = preferences_backSideLegendColorForBoard_property.selection
        let s9 = preferences_hiliteWidthMultipliedByTen_property.selection
        let s10 = preferences_mShowTextRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10)) :
          return .single (transient_BoardQRCode_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mCenterY_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.qrCodeDescriptor_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mLayer_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mRotation_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_frontSideLegendColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_backSideLayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_backSideLegendColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_mShowTextRotationKnobInBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLayer_property.selection
        let s1 = unwSelf.mCenterX_property.selection
        let s2 = unwSelf.mCenterY_property.selection
        let s3 = unwSelf.mText_property.selection
        let s4 = unwSelf.mCorrectionLevel_property.selection
        let s5 = unwSelf.mRotation_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardQRCode_signatureForERCChecking (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.mCenterX_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.mCenterY_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.mText_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.mCorrectionLevel_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.mRotation_property.startsToBeObserved (by: self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BoardQRCode (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BoardQRCode (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BoardQRCode (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BoardQRCode (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BoardQRCode (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BoardQRCode (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BoardQRCode (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BoardQRCode (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_BoardQRCode ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BoardQRCode ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_BoardQRCode ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BoardQRCode ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BoardQRCode (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BoardQRCode (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BoardQRCode (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_BoardQRCode (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BoardQRCode (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BoardQRCode ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BoardQRCode ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

