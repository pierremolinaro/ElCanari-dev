//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardQRCode : ReadOnlyAbstractArrayProperty <BoardQRCode> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardQRCode>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardQRCode>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDrawFrame { // Stored property
        managedObject.mDrawFrame_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mModuleSize { // Stored property
        managedObject.mModuleSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mModuleSizeUnit { // Stored property
        managedObject.mModuleSizeUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualSizeUnit { // Stored property
        managedObject.mActualSizeUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCorrectionLevel { // Stored property
        managedObject.mCorrectionLevel_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_qrCodeDescriptor { // Transient property
        managedObject.qrCodeDescriptor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_moduleCount { // Transient property
        managedObject.moduleCount_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_actualImageSize { // Transient property
        managedObject.actualImageSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDrawFrame { // Stored property
        managedObject.mDrawFrame_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mModuleSize { // Stored property
        managedObject.mModuleSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mModuleSizeUnit { // Stored property
        managedObject.mModuleSizeUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mActualSizeUnit { // Stored property
        managedObject.mActualSizeUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCorrectionLevel { // Stored property
        managedObject.mCorrectionLevel_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_qrCodeDescriptor { // Transient property
        managedObject.qrCodeDescriptor_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_moduleCount { // Transient property
        managedObject.moduleCount_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_actualImageSize { // Transient property
        managedObject.actualImageSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  private final var mObserversOf_mXUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mXUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  private final var mObserversOf_mCenterY : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mCenterY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCenterY = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCenterY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCenterY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  private final var mObserversOf_mYUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mYUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mDrawFrame' stored property
  //····················································································································

  private final var mObserversOf_mDrawFrame : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mDrawFrame_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDrawFrame {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDrawFrame_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mDrawFrame = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mDrawFrame_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mDrawFrame?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mModuleSize' stored property
  //····················································································································

  private final var mObserversOf_mModuleSize : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mModuleSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mModuleSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mModuleSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mModuleSize = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mModuleSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mModuleSize?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mModuleSizeUnit' stored property
  //····················································································································

  private final var mObserversOf_mModuleSizeUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mModuleSizeUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mModuleSizeUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mModuleSizeUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mModuleSizeUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mModuleSizeUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mModuleSizeUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mActualSizeUnit' stored property
  //····················································································································

  private final var mObserversOf_mActualSizeUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mActualSizeUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mActualSizeUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mActualSizeUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mActualSizeUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mActualSizeUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mActualSizeUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mObserversOf_mLayer : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mLayer {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mLayer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mLayer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mText' stored property
  //····················································································································

  private final var mObserversOf_mText : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mText_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mText {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mText_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mText = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mText_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mText?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCorrectionLevel' stored property
  //····················································································································

  private final var mObserversOf_mCorrectionLevel : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mCorrectionLevel_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCorrectionLevel {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCorrectionLevel_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCorrectionLevel = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCorrectionLevel_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCorrectionLevel?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mRotation_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mRotation = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  private final var mObserversOf_mCenterX : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mCenterX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCenterX = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCenterX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCenterX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'qrCodeDescriptor' transient property
  //····················································································································

  private final var mObserversOf_qrCodeDescriptor : EBObservedObserver? = nil

  //····················································································································

  final func toMany_qrCodeDescriptor_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_qrCodeDescriptor {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.qrCodeDescriptor_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_qrCodeDescriptor = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_qrCodeDescriptor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_qrCodeDescriptor?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'moduleCount' transient property
  //····················································································································

  private final var mObserversOf_moduleCount : EBObservedObserver? = nil

  //····················································································································

  final func toMany_moduleCount_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_moduleCount {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.moduleCount_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_moduleCount = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_moduleCount_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_moduleCount?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'actualImageSize' transient property
  //····················································································································

  private final var mObserversOf_actualImageSize : EBObservedObserver? = nil

  //····················································································································

  final func toMany_actualImageSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_actualImageSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.actualImageSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_actualImageSize = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_actualImageSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_actualImageSize?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBObservedObserver? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardQRCode is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardQRCode <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardQRCode {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardQRCode> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardQRCode {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardQRCode] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardQRCode> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ReadWriteArrayOf_BoardQRCode is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardQRCode is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_BoardQRCode is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardQRCode
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardQRCode is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

