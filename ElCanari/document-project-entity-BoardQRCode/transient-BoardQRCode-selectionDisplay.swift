//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_BoardQRCode_selectionDisplay (
       _ prefs_selectionHiliteColor : NSColor,          
       _ self_mCenterX : Int,                           
       _ self_mCenterY : Int,                           
       _ self_qrCodeDescriptor : QRCodeDescriptor,      
       _ self_mLayer : BoardQRCodeLayer,                
       _ self_mRotation : Int,                          
       _ self_mModuleSize : Int,                        
       _ prefs_frontSideLegendColorForBoard : NSColor,  
       _ prefs_backSideLegendColorForBoard : NSColor,   
       _ prefs_hiliteWidthMultipliedByTen : Int,        
       _ prefs_mShowTextRotationKnobInBoard : Bool
) -> EBShape {
//--- START OF USER ZONE 2
        let foreColor : NSColor
        switch self_mLayer {
        case .legendFront :
          foreColor = prefs_frontSideLegendColorForBoard
        case .legendBack :
          foreColor = prefs_backSideLegendColorForBoard
        }
        let displayInfos = boardQRCode_displayInfos (
          centerX: self_mCenterX,
          centerY: self_mCenterY,
          self_qrCodeDescriptor,
          frontSide: self_mLayer == .legendFront,
          moduleSizeInCanariUnit: self_mModuleSize,
          rotation: self_mRotation
        )
        var shape = EBShape ()
      //--- Background
        shape.add (filled: [displayInfos.backgroundBP], (foreColor == .white) ? .lightGray : .white)
        shape.add (stroke: [displayInfos.backgroundBP], prefs_selectionHiliteColor)
      //--- QR Code
        shape.add (filled: [displayInfos.qrCodeBP], foreColor)
      //--- Rotation knob
        let center = NSPoint (x: canariUnitToCocoa (self_mCenterX), y: canariUnitToCocoa (self_mCenterY))
        if prefs_mShowTextRotationKnobInBoard {
          var knobLine = BÃ©zierPath ()
          knobLine.move (to : center)
          knobLine.line (to : displayInfos.rotationKnobLocation)
          knobLine.lineWidth = CGFloat (prefs_hiliteWidthMultipliedByTen) / 10.0
          knobLine.lineCapStyle = .round
          knobLine.lineJoinStyle = .round
          shape.add (stroke: [knobLine], prefs_selectionHiliteColor)
          shape.add (knobAt:  displayInfos.rotationKnobLocation, knobIndex: BOARD_QRCODE_ROTATION_KNOB, .circ, 2.0)
        }
      //--- Knob
         shape.add (knobAt: center, knobIndex: BOARD_QRCODE_ORIGIN_KNOB, .rect, 2.0)
      //---
        return shape
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
