//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mWidthUnit : AnyObject {
  var mWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mHeightUnit : AnyObject {
  var mHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInFrontLayer : AnyObject {
  var mIsInFrontLayer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInBackLayer : AnyObject {
  var mIsInBackLayer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInInner1Layer : AnyObject {
  var mIsInInner1Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInInner2Layer : AnyObject {
  var mIsInInner2Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInInner3Layer : AnyObject {
  var mIsInInner3Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mIsInInner4Layer : AnyObject {
  var mIsInInner4Layer : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardRestrictRectangle_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardRestrictRectangle : BoardObject,
         BoardRestrictRectangle_mXUnit,
         BoardRestrictRectangle_mY,
         BoardRestrictRectangle_mYUnit,
         BoardRestrictRectangle_mWidth,
         BoardRestrictRectangle_mWidthUnit,
         BoardRestrictRectangle_mHeight,
         BoardRestrictRectangle_mHeightUnit,
         BoardRestrictRectangle_mIsInFrontLayer,
         BoardRestrictRectangle_mIsInBackLayer,
         BoardRestrictRectangle_mIsInInner1Layer,
         BoardRestrictRectangle_mIsInInner2Layer,
         BoardRestrictRectangle_mIsInInner3Layer,
         BoardRestrictRectangle_mIsInInner4Layer,
         BoardRestrictRectangle_mX,
         BoardRestrictRectangle_objectDisplay,
         BoardRestrictRectangle_selectionDisplay,
         BoardRestrictRectangle_signatureForERCChecking {

  //································································································
  //   Atomic property: mXUnit
  //································································································

  final let mXUnit_property : EBStoredProperty_Int

  //································································································

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
  }

  //································································································
  //   Atomic property: mY
  //································································································

  final let mY_property : EBStoredProperty_Int

  //································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mYUnit
  //································································································

  final let mYUnit_property : EBStoredProperty_Int

  //································································································

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
  }

  //································································································
  //   Atomic property: mWidth
  //································································································

  final let mWidth_property : EBStoredProperty_Int

  //································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mWidthUnit
  //································································································

  final let mWidthUnit_property : EBStoredProperty_Int

  //································································································

  final var mWidthUnit : Int {
    get { return self.mWidthUnit_property.propval }
  }

  //································································································
  //   Atomic property: mHeight
  //································································································

  final let mHeight_property : EBStoredProperty_Int

  //································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHeightUnit
  //································································································

  final let mHeightUnit_property : EBStoredProperty_Int

  //································································································

  final var mHeightUnit : Int {
    get { return self.mHeightUnit_property.propval }
  }

  //································································································
  //   Atomic property: mIsInFrontLayer
  //································································································

  final let mIsInFrontLayer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInFrontLayer : Bool {
    get { return self.mIsInFrontLayer_property.propval }
    set { self.mIsInFrontLayer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsInBackLayer
  //································································································

  final let mIsInBackLayer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInBackLayer : Bool {
    get { return self.mIsInBackLayer_property.propval }
    set { self.mIsInBackLayer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsInInner1Layer
  //································································································

  final let mIsInInner1Layer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInInner1Layer : Bool {
    get { return self.mIsInInner1Layer_property.propval }
    set { self.mIsInInner1Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsInInner2Layer
  //································································································

  final let mIsInInner2Layer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInInner2Layer : Bool {
    get { return self.mIsInInner2Layer_property.propval }
    set { self.mIsInInner2Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsInInner3Layer
  //································································································

  final let mIsInInner3Layer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInInner3Layer : Bool {
    get { return self.mIsInInner3Layer_property.propval }
    set { self.mIsInInner3Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mIsInInner4Layer
  //································································································

  final let mIsInInner4Layer_property : EBStoredProperty_Bool

  //································································································

  final var mIsInInner4Layer : Bool {
    get { return self.mIsInInner4Layer_property.propval }
    set { self.mIsInInner4Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mX
  //································································································

  final let mX_property : EBStoredProperty_Int

  //································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //································································································
  //    init
  //································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mXUnit")
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mY")
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mYUnit")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 2286000, undoManager: inUndoManager, key: "mWidth")
    self.mWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mWidthUnit")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 2286000, undoManager: inUndoManager, key: "mHeight")
    self.mHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mHeightUnit")
    self.mIsInFrontLayer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mIsInFrontLayer")
    self.mIsInBackLayer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mIsInBackLayer")
    self.mIsInInner1Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsInInner1Layer")
    self.mIsInInner2Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsInInner2Layer")
    self.mIsInInner3Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsInInner3Layer")
    self.mIsInInner4Layer_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsInInner4Layer")
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mX")
    super.init (inUndoManager)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mIsInFrontLayer_property.selection
        let s5 = unwSelf.mIsInBackLayer_property.selection
        let s6 = unwSelf.mIsInInner1Layer_property.selection
        let s7 = unwSelf.mIsInInner2Layer_property.selection
        let s8 = unwSelf.mIsInInner3Layer_property.selection
        let s9 = unwSelf.mIsInInner4Layer_property.selection
        var s10 = unwSelf.displayFrontRestrictRectangles_property.selection
        switch s10 {
        case .single :
          ()
        case .empty, .multiple :
          s10 = .single (true)
        }
        var s11 = unwSelf.displayBackRestrictRectangles_property.selection
        switch s11 {
        case .single :
          ()
        case .empty, .multiple :
          s11 = .single (true)
        }
        var s12 = unwSelf.displayInner1RestrictRectangles_property.selection
        switch s12 {
        case .single :
          ()
        case .empty, .multiple :
          s12 = .single (true)
        }
        var s13 = unwSelf.displayInner2RestrictRectangles_property.selection
        switch s13 {
        case .single :
          ()
        case .empty, .multiple :
          s13 = .single (true)
        }
        var s14 = unwSelf.displayInner3RestrictRectangles_property.selection
        switch s14 {
        case .single :
          ()
        case .empty, .multiple :
          s14 = .single (true)
        }
        var s15 = unwSelf.displayInner4RestrictRectangles_property.selection
        switch s15 {
        case .single :
          ()
        case .empty, .multiple :
          s15 = .single (true)
        }
        let s16 = preferences_frontSideRestrictRectangleColorForBoard_property.selection
        let s17 = preferences_inner1SideRestrictRectangleColorForBoard_property.selection
        let s18 = preferences_inner2SideRestrictRectangleColorForBoard_property.selection
        let s19 = preferences_inner3SideRestrictRectangleColorForBoard_property.selection
        let s20 = preferences_inner4SideRestrictRectangleColorForBoard_property.selection
        let s21 = preferences_backSideRestrictRectangleColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18),
              .single (let v19),
              .single (let v20),
              .single (let v21)) :
          return .single (transient_BoardRestrictRectangle_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mY_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mWidth_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mHeight_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInFrontLayer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInBackLayer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInInner1Layer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInInner2Layer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInInner3Layer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mIsInInner4Layer_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayFrontRestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayBackRestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayInner1RestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayInner2RestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayInner3RestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    self.displayInner4RestrictRectangles_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_frontSideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_inner1SideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_inner2SideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_inner3SideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_inner4SideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    preferences_backSideRestrictRectangleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.mX_property.selection
        let s2 = unwSelf.mY_property.selection
        let s3 = unwSelf.mWidth_property.selection
        let s4 = unwSelf.mHeight_property.selection
        let s5 = preferences_hiliteWidthMultipliedByTen_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_BoardRestrictRectangle_selectionDisplay (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mX_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mY_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mWidth_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mHeight_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mIsInFrontLayer_property.selection
        let s5 = unwSelf.mIsInBackLayer_property.selection
        let s6 = unwSelf.mIsInInner1Layer_property.selection
        let s7 = unwSelf.mIsInInner2Layer_property.selection
        let s8 = unwSelf.mIsInInner3Layer_property.selection
        let s9 = unwSelf.mIsInInner4Layer_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_BoardRestrictRectangle_signatureForERCChecking (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mY_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mWidth_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mHeight_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInFrontLayer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInBackLayer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInInner1Layer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInInner2Layer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInInner3Layer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mIsInInner4Layer_property.startsBeingObserved (by: self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //································································································
  //    Extern delegates
  //································································································


  //································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BoardRestrictRectangle (knob: inKnobIndex)
  }

  //································································································
  //  Translate
  //································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BoardRestrictRectangle (xBy: inDx, yBy: inDy)
  }

  //································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BoardRestrictRectangle (xBy: inDx, yBy: inDy)
  }

  //································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BoardRestrictRectangle (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //································································································
  //   Move
  //································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BoardRestrictRectangle (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BoardRestrictRectangle (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //································································································
  //  Snap to grid
  //································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BoardRestrictRectangle (inGrid)
  }

  //································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BoardRestrictRectangle (inGrid)
  }

  //································································································
  //  HORIZONTAL FLIP
  //································································································

  override func flipHorizontally () {
    self.flipHorizontally_BoardRestrictRectangle ()
  }

  //································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BoardRestrictRectangle ()
  }

  //································································································
  //  VERTICAL FLIP
  //································································································

  override func flipVertically () {
    self.flipVertically_BoardRestrictRectangle ()
  }

  //································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BoardRestrictRectangle ()
  }

  //································································································
  //  ROTATE 90
  //································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BoardRestrictRectangle (accumulatedPoints: &accumulatedPoints)
  }

  //································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BoardRestrictRectangle (from: inRotationCenter, userSet: &ioSet)
  }

  //································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BoardRestrictRectangle (from: inRotationCenter, userSet: &ioSet)
  }

  //································································································
  //  Save into additional dictionary
  //································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_BoardRestrictRectangle (&ioDictionary)
  }

  //································································································
  //  operationAfterPasting
  //································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BoardRestrictRectangle (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //································································································
  //  Alignment Points
  //································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BoardRestrictRectangle ()
  }

  //································································································
  //  operationBeforeRemoving
  //································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BoardRestrictRectangle ()
  }

  //································································································
  //  COPY AND PASTE
  //································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

