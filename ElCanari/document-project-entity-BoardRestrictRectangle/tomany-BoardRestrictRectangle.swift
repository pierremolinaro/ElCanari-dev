//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardRestrictRectangle : ReadOnlyAbstractArrayProperty <BoardRestrictRectangle> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardRestrictRectangle>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardRestrictRectangle>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWidth { // Stored property
        managedObject.mWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHeight { // Stored property
        managedObject.mHeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInFrontLayer { // Stored property
        managedObject.mIsInFrontLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInBackLayer { // Stored property
        managedObject.mIsInBackLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner1Layer { // Stored property
        managedObject.mIsInInner1Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner2Layer { // Stored property
        managedObject.mIsInInner2Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner3Layer { // Stored property
        managedObject.mIsInInner3Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner4Layer { // Stored property
        managedObject.mIsInInner4Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWidth { // Stored property
        managedObject.mWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHeight { // Stored property
        managedObject.mHeight_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInFrontLayer { // Stored property
        managedObject.mIsInFrontLayer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInBackLayer { // Stored property
        managedObject.mIsInBackLayer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner1Layer { // Stored property
        managedObject.mIsInInner1Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner2Layer { // Stored property
        managedObject.mIsInInner2Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner3Layer { // Stored property
        managedObject.mIsInInner3Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsInInner4Layer { // Stored property
        managedObject.mIsInInner4Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  private final var mObserversOf_mWidth : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mWidth {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mWidth = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWidth?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mHeight' stored property
  //····················································································································

  private final var mObserversOf_mHeight : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mHeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mHeight {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mHeight_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mHeight = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mHeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mHeight?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInFrontLayer' stored property
  //····················································································································

  private final var mObserversOf_mIsInFrontLayer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInFrontLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInFrontLayer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInFrontLayer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInFrontLayer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInFrontLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInFrontLayer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInBackLayer' stored property
  //····················································································································

  private final var mObserversOf_mIsInBackLayer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInBackLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInBackLayer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInBackLayer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInBackLayer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInBackLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInBackLayer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_mIsInInner1Layer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInInner1Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInInner1Layer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInInner1Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInInner1Layer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInInner1Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInInner1Layer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_mIsInInner2Layer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInInner2Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInInner2Layer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInInner2Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInInner2Layer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInInner2Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInInner2Layer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_mIsInInner3Layer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInInner3Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInInner3Layer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInInner3Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInInner3Layer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInInner3Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInInner3Layer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsInInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_mIsInInner4Layer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mIsInInner4Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mIsInInner4Layer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsInInner4Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsInInner4Layer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mIsInInner4Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsInInner4Layer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardRestrictRectangle is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardRestrictRectangle <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardRestrictRectangle {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardRestrictRectangle> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardRestrictRectangle {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardRestrictRectangle] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardRestrictRectangle> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardRestrictRectangle : ReadOnlyArrayOf_BoardRestrictRectangle {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardRestrictRectangle>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardRestrictRectangle is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_BoardRestrictRectangle is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardRestrictRectangle
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardRestrictRectangle is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

