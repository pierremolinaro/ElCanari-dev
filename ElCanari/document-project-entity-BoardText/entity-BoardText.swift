//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mFontSize : AnyObject {
  var mFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mLayer : AnyObject {
  var mLayer : BoardTextLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mText : AnyObject {
  var mText : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mHorizontalAlignment : AnyObject {
  var mHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mVerticalAlignment : AnyObject {
  var mVerticalAlignment : BoardTextVerticalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mRotation : AnyObject {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mWeight : AnyObject {
  var mWeight : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mOblique : AnyObject {
  var mOblique : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_fontName : AnyObject {
  var fontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardText : BoardObject,
         BoardText_mX,
         BoardText_mY,
         BoardText_mFontSize,
         BoardText_mLayer,
         BoardText_mText,
         BoardText_mHorizontalAlignment,
         BoardText_mVerticalAlignment,
         BoardText_mRotation,
         BoardText_mWeight,
         BoardText_mOblique,
         BoardText_objectDisplay,
         BoardText_selectionDisplay,
         BoardText_fontName,
         BoardText_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFontSize
  //····················································································································

  final let mFontSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mFontSize_toDefaultValue () {
    self.mFontSize = 4
  }

  //····················································································································

  final var mFontSize : Double {
    get { return self.mFontSize_property.propval }
    set { self.mFontSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayer
  //····················································································································

  final let mLayer_property : EBStoredProperty_BoardTextLayer

  //····················································································································

  final func reset_mLayer_toDefaultValue () {
    self.mLayer = BoardTextLayer.legendFront
  }

  //····················································································································

  final var mLayer : BoardTextLayer {
    get { return self.mLayer_property.propval }
    set { self.mLayer_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mText
  //····················································································································

  final let mText_property : EBStoredProperty_String

  //····················································································································

  final func reset_mText_toDefaultValue () {
    self.mText = ""
  }

  //····················································································································

  final var mText : String {
    get { return self.mText_property.propval }
    set { self.mText_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHorizontalAlignment
  //····················································································································

  final let mHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mHorizontalAlignment_toDefaultValue () {
    self.mHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mHorizontalAlignment : HorizontalAlignment {
    get { return self.mHorizontalAlignment_property.propval }
    set { self.mHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mVerticalAlignment
  //····················································································································

  final let mVerticalAlignment_property : EBStoredProperty_BoardTextVerticalAlignment

  //····················································································································

  final func reset_mVerticalAlignment_toDefaultValue () {
    self.mVerticalAlignment = BoardTextVerticalAlignment.base
  }

  //····················································································································

  final var mVerticalAlignment : BoardTextVerticalAlignment {
    get { return self.mVerticalAlignment_property.propval }
    set { self.mVerticalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = 0
  }

  //····················································································································

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWeight
  //····················································································································

  final let mWeight_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mWeight_toDefaultValue () {
    self.mWeight = 1
  }

  //····················································································································

  final var mWeight : Double {
    get { return self.mWeight_property.propval }
    set { self.mWeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mOblique
  //····················································································································

  final let mOblique_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mOblique_toDefaultValue () {
    self.mOblique = false
  }

  //····················································································································

  final var mOblique : Bool {
    get { return self.mOblique_property.propval }
    set { self.mOblique_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mFont
  //····················································································································

  final let mFont_property = StoredObject_FontInProject (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mFont : FontInProject? {
    get {
      return self.mFont_property.propval
    }
    set {
      if self.mFont_property.propval !== newValue {
        if self.mFont_property.propval != nil {
          self.mFont_property.setProp (nil)
        }
        if newValue != nil {
          self.mFont_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mFont_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: fontName
  //····················································································································

  final let fontName_property = EBTransientProperty_String ()

  //····················································································································

  final var fontName : String? {
    switch self.fontName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mFontSize_property = EBStoredProperty_Double (defaultValue: 4, undoManager: ebUndoManager)
    self.mLayer_property = EBStoredProperty_BoardTextLayer (defaultValue: BoardTextLayer.legendFront, undoManager: ebUndoManager)
    self.mText_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    self.mVerticalAlignment_property = EBStoredProperty_BoardTextVerticalAlignment (defaultValue: BoardTextVerticalAlignment.base, undoManager: ebUndoManager)
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mWeight_property = EBStoredProperty_Double (defaultValue: 1, undoManager: ebUndoManager)
    self.mOblique_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.mFont_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mFont_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mFont_property.addEBObserver (self.mFont_none)
    // gInitSemaphore.wait ()
  //--- To one property: mFont (has opposite to many relationship: mTexts)
    self.mFont_property.ebUndoManager = self.ebUndoManager
    self.mFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTexts_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTexts_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mText_property.selection
        let s3 = unwSelf.mFontSize_property.selection
        let s4 = unwSelf.mFont_property.descriptor_property.selection
        let s5 = unwSelf.mHorizontalAlignment_property.selection
        let s6 = unwSelf.mVerticalAlignment_property.selection
        let s7 = unwSelf.mLayer_property.selection
        let s8 = unwSelf.mRotation_property.selection
        let s9 = unwSelf.mWeight_property.selection
        let s10 = unwSelf.mOblique_property.selection
        var s11 = unwSelf.displayFrontLegendForBoard_property.selection
        switch s11 {
        case .single :
          ()
        case .empty, .multiple :
          s11 = .single (true)
        }
        var s12 = unwSelf.displayBackLegendForBoard_property.selection
        switch s12 {
        case .single :
          ()
        case .empty, .multiple :
          s12 = .single (true)
        }
        var s13 = unwSelf.displayFrontLayoutForBoard_property.selection
        switch s13 {
        case .single :
          ()
        case .empty, .multiple :
          s13 = .single (true)
        }
        var s14 = unwSelf.displayBackLayoutForBoard_property.selection
        switch s14 {
        case .single :
          ()
        case .empty, .multiple :
          s14 = .single (true)
        }
        let s15 = preferences_frontSideLegendColorForBoard_property.selection
        let s16 = preferences_frontSideLayoutColorForBoard_property.selection
        let s17 = preferences_backSideLayoutColorForBoard_property.selection
        let s18 = preferences_backSideLegendColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18)) :
          return .single (transient_BoardText_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mText_property.addEBObserver (self.objectDisplay_property)
    self.mFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mFont_property.descriptor_property.addEBObserver (self.objectDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mLayer_property.addEBObserver (self.objectDisplay_property)
    self.mRotation_property.addEBObserver (self.objectDisplay_property)
    self.mWeight_property.addEBObserver (self.objectDisplay_property)
    self.mOblique_property.addEBObserver (self.objectDisplay_property)
    self.displayFrontLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayBackLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayFrontLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayBackLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mText_property.selection
        let s3 = unwSelf.mFontSize_property.selection
        let s4 = unwSelf.mFont_property.descriptor_property.selection
        let s5 = unwSelf.mHorizontalAlignment_property.selection
        let s6 = unwSelf.mVerticalAlignment_property.selection
        let s7 = unwSelf.mLayer_property.selection
        let s8 = unwSelf.mRotation_property.selection
        let s9 = unwSelf.mWeight_property.selection
        let s10 = unwSelf.mOblique_property.selection
        let s11 = preferences_frontSideLegendColorForBoard_property.selection
        let s12 = preferences_frontSideLayoutColorForBoard_property.selection
        let s13 = preferences_backSideLayoutColorForBoard_property.selection
        let s14 = preferences_backSideLegendColorForBoard_property.selection
        let s15 = preferences_hiliteWidthMultipliedByTen_property.selection
        let s16 = preferences_mShowTextRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16)) :
          return .single (transient_BoardText_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mText_property.addEBObserver (self.selectionDisplay_property)
    self.mFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mFont_property.descriptor_property.addEBObserver (self.selectionDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.mLayer_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mWeight_property.addEBObserver (self.selectionDisplay_property)
    self.mOblique_property.addEBObserver (self.selectionDisplay_property)
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_backSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    preferences_mShowTextRotationKnobInBoard_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: fontName
    self.fontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFont_property.mFontName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardText_fontName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFont_property.mFontName_property.addEBObserver (self.fontName_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLayer_property.selection
        let s1 = unwSelf.mX_property.selection
        let s2 = unwSelf.mY_property.selection
        let s3 = unwSelf.mText_property.selection
        let s4 = unwSelf.mFontSize_property.selection
        let s5 = unwSelf.mFont_property.descriptor_property.selection
        let s6 = unwSelf.mHorizontalAlignment_property.selection
        let s7 = unwSelf.mVerticalAlignment_property.selection
        let s8 = unwSelf.mRotation_property.selection
        let s9 = unwSelf.mWeight_property.selection
        let s10 = unwSelf.mOblique_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10)) :
          return .single (transient_BoardText_signatureForERCChecking (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.addEBObserver (self.signatureForERCChecking_property)
    self.mX_property.addEBObserver (self.signatureForERCChecking_property)
    self.mY_property.addEBObserver (self.signatureForERCChecking_property)
    self.mText_property.addEBObserver (self.signatureForERCChecking_property)
    self.mFontSize_property.addEBObserver (self.signatureForERCChecking_property)
    self.mFont_property.descriptor_property.addEBObserver (self.signatureForERCChecking_property)
    self.mHorizontalAlignment_property.addEBObserver (self.signatureForERCChecking_property)
    self.mVerticalAlignment_property.addEBObserver (self.signatureForERCChecking_property)
    self.mRotation_property.addEBObserver (self.signatureForERCChecking_property)
    self.mWeight_property.addEBObserver (self.signatureForERCChecking_property)
    self.mOblique_property.addEBObserver (self.signatureForERCChecking_property)
    // gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mFontSize
      self.mFontSize_property.storeIn (dictionary: ioDictionary, forKey: "mFontSize")
    //--- Atomic property: mLayer
      self.mLayer_property.storeIn (dictionary: ioDictionary, forKey: "mLayer")
    //--- Atomic property: mText
      self.mText_property.storeIn (dictionary: ioDictionary, forKey: "mText")
    //--- Atomic property: mHorizontalAlignment
      self.mHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mHorizontalAlignment")
    //--- Atomic property: mVerticalAlignment
      self.mVerticalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mVerticalAlignment")
    //--- Atomic property: mRotation
      self.mRotation_property.storeIn (dictionary: ioDictionary, forKey: "mRotation")
    //--- Atomic property: mWeight
      self.mWeight_property.storeIn (dictionary: ioDictionary, forKey: "mWeight")
    //--- Atomic property: mOblique
      self.mOblique_property.storeIn (dictionary: ioDictionary, forKey: "mOblique")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: mFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mFont_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mFontSize
    self.mFontSize_property.readFrom (dictionary: inDictionary, forKey: "mFontSize")
  //--- Atomic property: mLayer
    self.mLayer_property.readFrom (dictionary: inDictionary, forKey: "mLayer")
  //--- Atomic property: mText
    self.mText_property.readFrom (dictionary: inDictionary, forKey: "mText")
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mHorizontalAlignment")
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mVerticalAlignment")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey: "mRotation")
  //--- Atomic property: mWeight
    self.mWeight_property.readFrom (dictionary: inDictionary, forKey: "mWeight")
  //--- Atomic property: mOblique
    self.mOblique_property.readFrom (dictionary: inDictionary, forKey: "mOblique")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mFontSize\n"
    ioString += "mLayer\n"
    ioString += "mText\n"
    ioString += "mHorizontalAlignment\n"
    ioString += "mVerticalAlignment\n"
    ioString += "mRotation\n"
    ioString += "mWeight\n"
    ioString += "mOblique\n"
  //--- To one relationships
    ioString += "mFont\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFontSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLayer.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mText.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mVerticalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mOblique.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mFont {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX = value
      }
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY = value
      }
      if let range = inDictionary ["mFontSize"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mFontSize = value
      }
      if let range = inDictionary ["mLayer"], let value = BoardTextLayer.unarchiveFromDataRange (inData, range) {
        self.mLayer = value
      }
      if let range = inDictionary ["mText"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mText = value
      }
      if let range = inDictionary ["mHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.mHorizontalAlignment = value
      }
      if let range = inDictionary ["mVerticalAlignment"], let value = BoardTextVerticalAlignment.unarchiveFromDataRange (inData, range) {
        self.mVerticalAlignment = value
      }
      if let range = inDictionary ["mRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mRotation = value
      }
      if let range = inDictionary ["mWeight"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mWeight = value
      }
      if let range = inDictionary ["mOblique"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mOblique = value
      }
 //   }
  //--- End of addOperation
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mFont"], let objectIndex = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [objectIndex].object as! FontInProject
      self.mFont = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mFont
    if let object = self.mFont {
      objects.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_BoardText (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_BoardText (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_BoardText (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    translate_BoardText (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_BoardText (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_BoardText (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_BoardText (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_BoardText (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_BoardText ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_BoardText ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_BoardText ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_BoardText ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_BoardText (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90Clockwise_BoardText (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90CounterClockwise_BoardText (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_BoardText (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_BoardText (additionalDictionary: inDictionary,
                                                 optionalDocument: inOptionalDocument,
                                                 objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_BoardText ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_BoardText ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

