//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardText : ReadOnlyAbstractArrayProperty <BoardText> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardText>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardText>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mFontSize_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLayer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mText_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mVerticalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRotation_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mWeight_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mOblique_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_fontName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mFontSize_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLayer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mText_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mVerticalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRotation_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mWeight_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mOblique_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_fontName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.observer {
            managedObject.mX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.observer {
            managedObject.mY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mFontSize' stored property
  //····················································································································

  private final var mObserversOf_mFontSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFontSize (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFontSize (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFontSize_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mFontSize.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mFontSize.dictionary {
          if let observer = entry.observer {
            managedObject.mFontSize_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mFontSize.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFontSize_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mFontSize.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mFontSize_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mFontSize.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mObserversOf_mLayer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayer (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayer (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayer_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mLayer.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mLayer.dictionary {
          if let observer = entry.observer {
            managedObject.mLayer_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mLayer.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayer_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mLayer.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mLayer_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mLayer.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mText' stored property
  //····················································································································

  private final var mObserversOf_mText = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mText (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mText.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mText_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mText (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mText.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mText_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mText_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mText.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mText.dictionary {
          if let observer = entry.observer {
            managedObject.mText_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mText.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mText_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mText.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mText_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mText.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mHorizontalAlignment.dictionary {
          if let observer = entry.observer {
            managedObject.mHorizontalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mHorizontalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mHorizontalAlignment.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mHorizontalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mHorizontalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mVerticalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mVerticalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVerticalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVerticalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVerticalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVerticalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVerticalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVerticalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVerticalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mVerticalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mVerticalAlignment.dictionary {
          if let observer = entry.observer {
            managedObject.mVerticalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mVerticalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVerticalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mVerticalAlignment.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mVerticalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mVerticalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRotation_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mRotation.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mRotation.dictionary {
          if let observer = entry.observer {
            managedObject.mRotation_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mRotation.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRotation_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mRotation.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mRotation_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mRotation.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mWeight' stored property
  //····················································································································

  private final var mObserversOf_mWeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mWeight (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWeight (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWeight_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mWeight.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mWeight.dictionary {
          if let observer = entry.observer {
            managedObject.mWeight_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mWeight.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWeight_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mWeight.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mWeight_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mWeight.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mOblique' stored property
  //····················································································································

  private final var mObserversOf_mOblique = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mOblique (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mOblique.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOblique_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mOblique (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mOblique.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOblique_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mOblique_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    if !self.mObserversOf_mOblique.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mOblique.dictionary {
          if let observer = entry.observer {
            managedObject.mOblique_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mOblique.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mOblique_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for (_, entry) in self.mObserversOf_mOblique.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mOblique_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mOblique.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'fontName' transient property
  //····················································································································

  private final var mObserversOf_fontName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fontName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_fontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fontName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fontName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_fontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fontName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fontName_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_fontName.dictionary {
        if let observer = entry.observer {
          managedObject.fontName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_fontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fontName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_fontName.dictionary {
        if let observer = entry.observer {
          managedObject.fontName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_fontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.observer {
          managedObject.signatureForERCChecking_property.addEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <BoardText>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.observer {
          managedObject.signatureForERCChecking_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_BoardText : ReadOnlyArrayOf_BoardText {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : BoardText, _ right : BoardText) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_BoardText? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BoardText,
                        sortCallback inSortCallBack : Optional < (_ left : BoardText, _ right : BoardText) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <BoardText>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardText] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardText> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardText <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardText {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardText> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardText {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardText] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardText> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardText : ReadOnlyArrayOf_BoardText {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardText>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_BoardText : ReadWriteArrayOf_BoardText {

  //····················································································································

  private var mModel : ReadWriteArrayOf_BoardText? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_BoardText?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <BoardText>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <BoardText> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <BoardText>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [BoardText] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardText> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardText : ReadWriteArrayOf_BoardText, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardText) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardText) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardText>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardText>,
                                 addedSet inAddedSet : EBReferenceSet <BoardText>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardText] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardText>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardText> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardText) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardText) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_BoardText : ReadWriteArrayOf_BoardText {

  //····················································································································

  override var selection : EBSelection < [BoardText] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardText>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <BoardText> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : BoardText) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : BoardText) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_BoardText : StoredArrayOf_BoardText {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <BoardText> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "BoardText") as? BoardText {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mX (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mY (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mFontSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mText (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mHorizontalAlignment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mVerticalAlignment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRotation (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mWeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mOblique (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

