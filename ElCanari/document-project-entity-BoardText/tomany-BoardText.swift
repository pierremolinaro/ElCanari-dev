//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardText : ReadOnlyAbstractArrayProperty <BoardText> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardText>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardText>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mFontSize { // Stored property
        managedObject.mFontSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalAlignment { // Stored property
        managedObject.mHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalAlignment { // Stored property
        managedObject.mVerticalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWeight { // Stored property
        managedObject.mWeight_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mOblique { // Stored property
        managedObject.mOblique_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_fontName { // Transient property
        managedObject.fontName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mFontSize { // Stored property
        managedObject.mFontSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mLayer { // Stored property
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mText { // Stored property
        managedObject.mText_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalAlignment { // Stored property
        managedObject.mHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalAlignment { // Stored property
        managedObject.mVerticalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWeight { // Stored property
        managedObject.mWeight_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mOblique { // Stored property
        managedObject.mOblique_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_fontName { // Transient property
        managedObject.fontName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mFontSize' stored property
  //····················································································································

  private final var mObserversOf_mFontSize : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mFontSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mFontSize {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mFontSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mFontSize = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mFontSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mFontSize?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mObserversOf_mLayer : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mLayer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mLayer {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mLayer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mLayer = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mLayer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mLayer?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mText' stored property
  //····················································································································

  private final var mObserversOf_mText : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mText_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mText {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mText_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mText = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mText_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mText?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mHorizontalAlignment : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mHorizontalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mHorizontalAlignment {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mHorizontalAlignment = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mHorizontalAlignment?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mVerticalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mVerticalAlignment : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mVerticalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mVerticalAlignment {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mVerticalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mVerticalAlignment = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mVerticalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mVerticalAlignment?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mRotation {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mRotation_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mRotation = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mRotation?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mWeight' stored property
  //····················································································································

  private final var mObserversOf_mWeight : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mWeight_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mWeight {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mWeight_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mWeight = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mWeight_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWeight?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mOblique' stored property
  //····················································································································

  private final var mObserversOf_mOblique : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mOblique_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mOblique {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mOblique_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mOblique = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mOblique_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mOblique?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'fontName' transient property
  //····················································································································

  private final var mObserversOf_fontName : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_fontName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_fontName {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.fontName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_fontName = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_fontName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_fontName?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardText <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardText {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardText> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardText {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardText] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardText> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardText : ReadOnlyArrayOf_BoardText {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardText>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardText : ReadWriteArrayOf_BoardText, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardText> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardText)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BoardText> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BoardText)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardText) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardText) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardText>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardText>,
                                 addedSet inAddedSet : EBReferenceSet <BoardText>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardText] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardText>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <BoardText> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardText) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardText) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

