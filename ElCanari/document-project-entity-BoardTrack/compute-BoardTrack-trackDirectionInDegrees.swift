//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension BoardTrack {

  //····················································································································

  func compute_trackDirectionInDegrees_property (_ inCandidateValue : Int, _ inWindow : NSWindow?) -> Bool {
//--- START OF USER ZONE 2
    let p1CanMove = self.p1CanMove ?? false
    let p2CanMove = self.p2CanMove ?? false
    let angleInRadian = Double (inCandidateValue) * .pi / 180_000.0
    if p1CanMove && p2CanMove { // Rotation around center
      let p1 = self.mConnectorP1!.location!
      let p2 = self.mConnectorP2!.location!
      let halfLength : Double = CanariPoint.squareOfCanariDistance (p1, p2).squareRoot () / 2.0
      let center = CanariPoint.center (p1, p2)
      let dx = Int ((halfLength * cos (angleInRadian)).rounded ())
      let dy = Int ((halfLength * sin (angleInRadian)).rounded ())
      let newP1x = center.x - dx
      let newP1y = center.y - dy
      let newP2x = center.x + dx
      let newP2y = center.y + dy
      self.mConnectorP1?.mX = newP1x
      self.mConnectorP1?.mY = newP1y
      self.mConnectorP2?.mX = newP2x
      self.mConnectorP2?.mY = newP2y
    }else if p1CanMove { // Rotation around p2
      let p1 = self.mConnectorP1!.location!
      let p2 = self.mConnectorP2!.location!
      let length : Double = CanariPoint.squareOfCanariDistance (p1, p2).squareRoot ()
      let newP1x = p2.x - Int ((length * cos (angleInRadian)).rounded ())
      let newP1y = p2.y - Int ((length * sin (angleInRadian)).rounded ())
      self.mConnectorP1?.mX = newP1x
      self.mConnectorP1?.mY = newP1y
    }else if p2CanMove {  // Rotation around p1
      let p1 = self.mConnectorP1!.location!
      let p2 = self.mConnectorP2!.location!
      let length : Double = CanariPoint.squareOfCanariDistance (p1, p2).squareRoot ()
      let newP2x = p1.x + Int ((length * cos (angleInRadian)).rounded ())
      let newP2y = p1.y + Int ((length * sin (angleInRadian)).rounded ())
      self.mConnectorP2?.mX = newP2x
      self.mConnectorP2?.mY = newP2y
    }
    return true
//--- END OF USER ZONE 2
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

