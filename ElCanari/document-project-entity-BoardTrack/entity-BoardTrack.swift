//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mSide : AnyObject {
  var mSide : TrackSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mDefaultTrackWidthUnit : AnyObject {
  var mDefaultTrackWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mCustomTrackWidth : AnyObject {
  var mCustomTrackWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mCustomTrackWidthUnit : AnyObject {
  var mCustomTrackWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mUsesCustomTrackWidth : AnyObject {
  var mUsesCustomTrackWidth : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mIsPreservedByAutoRouter : AnyObject {
  var mIsPreservedByAutoRouter : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mP1XUnit : AnyObject {
  var mP1XUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mP1YUnit : AnyObject {
  var mP1YUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mP2XUnit : AnyObject {
  var mP2XUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mP2YUnit : AnyObject {
  var mP2YUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mManualLockP1 : AnyObject {
  var mManualLockP1 : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mManualLockP2 : AnyObject {
  var mManualLockP2 : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_mDirectionLockOnKnobDragging : AnyObject {
  var mDirectionLockOnKnobDragging : TrackLockDirection { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_actualTrackWidth : AnyObject {
  var actualTrackWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_netName : AnyObject {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_netClassName : AnyObject {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_netClassTrackWidth : AnyObject {
  var netClassTrackWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_netClassViaHoleDiameter : AnyObject {
  var netClassViaHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_netClassViaPadDiameter : AnyObject {
  var netClassViaPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_trackLengthInCanariUnit : AnyObject {
  var trackLengthInCanariUnit : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_trackSide : AnyObject {
  var trackSide : TrackSide? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_p1ConnectedToSomePad : AnyObject {
  var p1ConnectedToSomePad : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_p2ConnectedToSomePad : AnyObject {
  var p2ConnectedToSomePad : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_p1CanMove : AnyObject {
  var p1CanMove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_p2CanMove : AnyObject {
  var p2CanMove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_trackCanRotate : AnyObject {
  var trackCanRotate : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BoardTrack_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BoardTrack : BoardObject,
         BoardTrack_mSide,
         BoardTrack_mDefaultTrackWidthUnit,
         BoardTrack_mCustomTrackWidth,
         BoardTrack_mCustomTrackWidthUnit,
         BoardTrack_mUsesCustomTrackWidth,
         BoardTrack_mIsPreservedByAutoRouter,
         BoardTrack_mP1XUnit,
         BoardTrack_mP1YUnit,
         BoardTrack_mP2XUnit,
         BoardTrack_mP2YUnit,
         BoardTrack_mManualLockP1,
         BoardTrack_mManualLockP2,
         BoardTrack_mDirectionLockOnKnobDragging,
         BoardTrack_actualTrackWidth,
         BoardTrack_netName,
         BoardTrack_netClassName,
         BoardTrack_netClassTrackWidth,
         BoardTrack_netClassViaHoleDiameter,
         BoardTrack_netClassViaPadDiameter,
         BoardTrack_trackLengthInCanariUnit,
         BoardTrack_trackSide,
         BoardTrack_signatureForERCChecking,
         BoardTrack_p1ConnectedToSomePad,
         BoardTrack_p2ConnectedToSomePad,
         BoardTrack_objectDisplay,
         BoardTrack_p1CanMove,
         BoardTrack_p2CanMove,
         BoardTrack_trackCanRotate,
         BoardTrack_selectionDisplay {

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  final let mSide_property : EBStoredProperty_TrackSide

  //····················································································································

  final var mSide : TrackSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultTrackWidthUnit
  //····················································································································

  final let mDefaultTrackWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mDefaultTrackWidthUnit : Int {
    get { return self.mDefaultTrackWidthUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mCustomTrackWidth
  //····················································································································

  final let mCustomTrackWidth_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomTrackWidth : Int {
    get { return self.mCustomTrackWidth_property.propval }
    set { self.mCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCustomTrackWidthUnit
  //····················································································································

  final let mCustomTrackWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mCustomTrackWidthUnit : Int {
    get { return self.mCustomTrackWidthUnit_property.propval }
  }

  //····················································································································
  //   Atomic property: mUsesCustomTrackWidth
  //····················································································································

  final let mUsesCustomTrackWidth_property : EBStoredProperty_Bool

  //····················································································································

  final var mUsesCustomTrackWidth : Bool {
    get { return self.mUsesCustomTrackWidth_property.propval }
    set { self.mUsesCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mIsPreservedByAutoRouter
  //····················································································································

  final let mIsPreservedByAutoRouter_property : EBStoredProperty_Bool

  //····················································································································

  final var mIsPreservedByAutoRouter : Bool {
    get { return self.mIsPreservedByAutoRouter_property.propval }
    set { self.mIsPreservedByAutoRouter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mP1XUnit
  //····················································································································

  final let mP1XUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mP1XUnit : Int {
    get { return self.mP1XUnit_property.propval }
    set { self.mP1XUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mP1YUnit
  //····················································································································

  final let mP1YUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mP1YUnit : Int {
    get { return self.mP1YUnit_property.propval }
    set { self.mP1YUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mP2XUnit
  //····················································································································

  final let mP2XUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mP2XUnit : Int {
    get { return self.mP2XUnit_property.propval }
    set { self.mP2XUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mP2YUnit
  //····················································································································

  final let mP2YUnit_property : EBStoredProperty_Int

  //····················································································································

  final var mP2YUnit : Int {
    get { return self.mP2YUnit_property.propval }
    set { self.mP2YUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mManualLockP1
  //····················································································································

  final let mManualLockP1_property : EBStoredProperty_Bool

  //····················································································································

  final var mManualLockP1 : Bool {
    get { return self.mManualLockP1_property.propval }
  }

  //····················································································································
  //   Atomic property: mManualLockP2
  //····················································································································

  final let mManualLockP2_property : EBStoredProperty_Bool

  //····················································································································

  final var mManualLockP2 : Bool {
    get { return self.mManualLockP2_property.propval }
  }

  //····················································································································
  //   Atomic property: mDirectionLockOnKnobDragging
  //····················································································································

  final let mDirectionLockOnKnobDragging_property : EBStoredProperty_TrackLockDirection

  //····················································································································

  final var mDirectionLockOnKnobDragging : TrackLockDirection {
    get { return self.mDirectionLockOnKnobDragging_property.propval }
  }

  //····················································································································
  //   To one property: mConnectorP1
  //····················································································································

  final let mConnectorP1_property = StoredObject_BoardConnector (usedForSignature: false, strongRef: false, key: "mConnectorP1")

  //····················································································································

  final var mConnectorP1 : BoardConnector? {
    get {
      return self.mConnectorP1_property.propval
    }
    set {
      if self.mConnectorP1_property.propval !== newValue {
        if self.mConnectorP1_property.propval != nil {
          self.mConnectorP1_property.setProp (nil)
        }
        if newValue != nil {
          self.mConnectorP1_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mConnectorP1_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mConnectorP2
  //····················································································································

  final let mConnectorP2_property = StoredObject_BoardConnector (usedForSignature: false, strongRef: false, key: "mConnectorP2")

  //····················································································································

  final var mConnectorP2 : BoardConnector? {
    get {
      return self.mConnectorP2_property.propval
    }
    set {
      if self.mConnectorP2_property.propval !== newValue {
        if self.mConnectorP2_property.propval != nil {
          self.mConnectorP2_property.setProp (nil)
        }
        if newValue != nil {
          self.mConnectorP2_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mConnectorP2_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mNet
  //····················································································································

  final let mNet_property = StoredObject_NetInProject (usedForSignature: false, strongRef: false, key: "mNet")

  //····················································································································

  final var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval !== newValue {
        if self.mNet_property.propval != nil {
          self.mNet_property.setProp (nil)
        }
        if newValue != nil {
          self.mNet_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNet_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: actualTrackWidth
  //····················································································································

  final let actualTrackWidth_property = EBTransientProperty <Int> ()

  //····················································································································

  final var actualTrackWidth : Int? {
    return self.actualTrackWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  final let netName_property = EBTransientProperty <String> ()

  //····················································································································

  final var netName : String? {
    return self.netName_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty <String> ()

  //····················································································································

  final var netClassName : String? {
    return self.netClassName_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassTrackWidth
  //····················································································································

  final let netClassTrackWidth_property = EBTransientProperty <Int> ()

  //····················································································································

  final var netClassTrackWidth : Int? {
    return self.netClassTrackWidth_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassViaHoleDiameter
  //····················································································································

  final let netClassViaHoleDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var netClassViaHoleDiameter : Int? {
    return self.netClassViaHoleDiameter_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassViaPadDiameter
  //····················································································································

  final let netClassViaPadDiameter_property = EBTransientProperty <Int> ()

  //····················································································································

  final var netClassViaPadDiameter : Int? {
    return self.netClassViaPadDiameter_property.optionalValue
  }

  //····················································································································
  //   Transient property: p1ConnectedToSomePad
  //····················································································································

  final let p1ConnectedToSomePad_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var p1ConnectedToSomePad : Bool? {
    return self.p1ConnectedToSomePad_property.optionalValue
  }

  //····················································································································
  //   Transient property: p2ConnectedToSomePad
  //····················································································································

  final let p2ConnectedToSomePad_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var p2ConnectedToSomePad : Bool? {
    return self.p2ConnectedToSomePad_property.optionalValue
  }

  //····················································································································
  //   Transient property: trackDirectionInDegrees
  //····················································································································

  final let trackDirectionInDegrees_property = EBComputedProperty_Int ()

  //····················································································································
  //   Transient property: computedP1X
  //····················································································································

  final let computedP1X_property = EBComputedProperty_Int ()

  //····················································································································
  //   Transient property: computedP1Y
  //····················································································································

  final let computedP1Y_property = EBComputedProperty_Int ()

  //····················································································································
  //   Transient property: computedP2X
  //····················································································································

  final let computedP2X_property = EBComputedProperty_Int ()

  //····················································································································
  //   Transient property: computedP2Y
  //····················································································································

  final let computedP2Y_property = EBComputedProperty_Int ()

  //····················································································································
  //   Transient property: p1CanMove
  //····················································································································

  final let p1CanMove_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var p1CanMove : Bool? {
    return self.p1CanMove_property.optionalValue
  }

  //····················································································································
  //   Transient property: p2CanMove
  //····················································································································

  final let p2CanMove_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var p2CanMove : Bool? {
    return self.p2CanMove_property.optionalValue
  }

  //····················································································································
  //   Transient property: trackCanRotate
  //····················································································································

  final let trackCanRotate_property = EBTransientProperty <Bool> ()

  //····················································································································

  final var trackCanRotate : Bool? {
    return self.trackCanRotate_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSide_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front, undoManager: inUndoManager, key: "mSide")
    self.mDefaultTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mDefaultTrackWidthUnit")
    self.mCustomTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: inUndoManager, key: "mCustomTrackWidth")
    self.mCustomTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mCustomTrackWidthUnit")
    self.mUsesCustomTrackWidth_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mUsesCustomTrackWidth")
    self.mIsPreservedByAutoRouter_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mIsPreservedByAutoRouter")
    self.mP1XUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mP1XUnit")
    self.mP1YUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mP1YUnit")
    self.mP2XUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mP2XUnit")
    self.mP2YUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mP2YUnit")
    self.mManualLockP1_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mManualLockP1")
    self.mManualLockP2_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mManualLockP2")
    self.mDirectionLockOnKnobDragging_property = EBStoredProperty_TrackLockDirection (defaultValue: TrackLockDirection.unlocked, undoManager: inUndoManager, key: "mDirectionLockOnKnobDragging")
    super.init (inUndoManager)
    self.mConnectorP1_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mConnectorP1_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.startsToBeObserved (by: self.mConnectorP1_none)
    self.mConnectorP2_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mConnectorP2_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mConnectorP2_property.startsToBeObserved (by: self.mConnectorP2_none)
    self.mNet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNet_property.startsToBeObserved (by: self.mNet_none)
  //--- To one property: mConnectorP1 (has opposite to many relationship: mTracksP1)
    self.mConnectorP1_property.undoManager = inUndoManager
    self.mConnectorP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.remove (me) } }
    )
  //--- To one property: mConnectorP2 (has opposite to many relationship: mTracksP2)
    self.mConnectorP2_property.undoManager = inUndoManager
    self.mConnectorP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mTracks)
    self.mNet_property.undoManager = inUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracks_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracks_property.remove (me) } }
    )
  //--- Atomic property: actualTrackWidth
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassTrackWidth_property.selection
        let s1 = unwSelf.mUsesCustomTrackWidth_property.selection
        let s2 = unwSelf.mCustomTrackWidth_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_BoardTrack_actualTrackWidth (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassTrackWidth_property.startsToBeObserved (by: self.actualTrackWidth_property)
    self.mUsesCustomTrackWidth_property.startsToBeObserved (by: self.actualTrackWidth_property)
    self.mCustomTrackWidth_property.startsToBeObserved (by: self.actualTrackWidth_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.mNetName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_netName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.mNetName_property.startsToBeObserved (by: self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_netClassName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassName_property.startsToBeObserved (by: self.netClassName_property)
  //--- Atomic property: netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassTrackWidth_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_netClassTrackWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassTrackWidth_property.startsToBeObserved (by: self.netClassTrackWidth_property)
  //--- Atomic property: netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassViaHoleDiameter_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_netClassViaHoleDiameter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassViaHoleDiameter_property.startsToBeObserved (by: self.netClassViaHoleDiameter_property)
  //--- Atomic property: netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassViaPadDiameter_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_netClassViaPadDiameter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassViaPadDiameter_property.startsToBeObserved (by: self.netClassViaPadDiameter_property)
  //--- Atomic property: trackLengthInCanariUnit
    self.trackLengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        let s1 = unwSelf.mConnectorP2_property.location_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardTrack_trackLengthInCanariUnit (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.trackLengthInCanariUnit_property)
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.trackLengthInCanariUnit_property)
  //--- Atomic property: trackSide
    self.trackSide_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSide_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_trackSide (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.startsToBeObserved (by: self.trackSide_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSide_property.selection
        let s1 = unwSelf.actualTrackWidth_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardTrack_signatureForERCChecking (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.startsToBeObserved (by: self.signatureForERCChecking_property)
    self.actualTrackWidth_property.startsToBeObserved (by: self.signatureForERCChecking_property)
  //--- Atomic property: p1ConnectedToSomePad
    self.p1ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.isConnectedToSomePad_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_p1ConnectedToSomePad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.isConnectedToSomePad_property.startsToBeObserved (by: self.p1ConnectedToSomePad_property)
  //--- Atomic property: p2ConnectedToSomePad
    self.p2ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP2_property.isConnectedToSomePad_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BoardTrack_p2ConnectedToSomePad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP2_property.isConnectedToSomePad_property.startsToBeObserved (by: self.p2ConnectedToSomePad_property)
  //--- Computed property: trackDirectionInDegrees
    self.trackDirectionInDegrees_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        let s1 = unwSelf.mConnectorP2_property.location_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (computed_BoardTrack_trackDirectionInDegrees (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.trackDirectionInDegrees_property.mWriteModelFunction = { [weak self] in self?.compute_trackDirectionInDegrees_property ($0) }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.trackDirectionInDegrees_property)
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.trackDirectionInDegrees_property)
  //--- Computed property: computedP1X
    self.computedP1X_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (computed_BoardTrack_computedP1X (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.computedP1X_property.mWriteModelFunction = { [weak self] in self?.compute_computedP1X_property ($0) }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.computedP1X_property)
  //--- Computed property: computedP1Y
    self.computedP1Y_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (computed_BoardTrack_computedP1Y (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.computedP1Y_property.mWriteModelFunction = { [weak self] in self?.compute_computedP1Y_property ($0) }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.computedP1Y_property)
  //--- Computed property: computedP2X
    self.computedP2X_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP2_property.location_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (computed_BoardTrack_computedP2X (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.computedP2X_property.mWriteModelFunction = { [weak self] in self?.compute_computedP2X_property ($0) }
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.computedP2X_property)
  //--- Computed property: computedP2Y
    self.computedP2Y_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP2_property.location_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (computed_BoardTrack_computedP2Y (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.computedP2Y_property.mWriteModelFunction = { [weak self] in self?.compute_computedP2Y_property ($0) }
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.computedP2Y_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        let s1 = unwSelf.mConnectorP2_property.location_property.selection
        var s2 = unwSelf.displayFrontLayoutForBoard_property.selection
        switch s2 {
        case .single :
          ()
        case .empty, .multiple :
          s2 = .single (true)
        }
        let s3 = preferences_frontSideLayoutColorForBoard_property.selection
        var s4 = unwSelf.displayBackLayoutForBoard_property.selection
        switch s4 {
        case .single :
          ()
        case .empty, .multiple :
          s4 = .single (true)
        }
        let s5 = preferences_backSideLayoutColorForBoard_property.selection
        var s6 = unwSelf.displayInner1LayoutForBoard_property.selection
        switch s6 {
        case .single :
          ()
        case .empty, .multiple :
          s6 = .single (true)
        }
        let s7 = preferences_inner1LayoutColorForBoard_property.selection
        var s8 = unwSelf.displayInner2LayoutForBoard_property.selection
        switch s8 {
        case .single :
          ()
        case .empty, .multiple :
          s8 = .single (true)
        }
        let s9 = preferences_inner2LayoutColorForBoard_property.selection
        var s10 = unwSelf.displayInner3LayoutForBoard_property.selection
        switch s10 {
        case .single :
          ()
        case .empty, .multiple :
          s10 = .single (true)
        }
        let s11 = preferences_inner3LayoutColorForBoard_property.selection
        var s12 = unwSelf.displayInner4LayoutForBoard_property.selection
        switch s12 {
        case .single :
          ()
        case .empty, .multiple :
          s12 = .single (true)
        }
        let s13 = preferences_inner4LayoutColorForBoard_property.selection
        let s14 = unwSelf.actualTrackWidth_property.selection
        let s15 = unwSelf.mSide_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15)) :
          return .single (transient_BoardTrack_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayFrontLayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayBackLayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_backSideLayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayInner1LayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_inner1LayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayInner2LayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_inner2LayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayInner3LayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_inner3LayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.displayInner4LayoutForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_inner4LayoutColorForBoard_property.startsToBeObserved (by: self.objectDisplay_property)
    self.actualTrackWidth_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mSide_property.startsToBeObserved (by: self.objectDisplay_property)
  //--- Atomic property: p1CanMove
    self.p1CanMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mManualLockP1_property.selection
        let s1 = unwSelf.p1ConnectedToSomePad_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardTrack_p1CanMove (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP1_property.startsToBeObserved (by: self.p1CanMove_property)
    self.p1ConnectedToSomePad_property.startsToBeObserved (by: self.p1CanMove_property)
  //--- Atomic property: p2CanMove
    self.p2CanMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mManualLockP2_property.selection
        let s1 = unwSelf.p2ConnectedToSomePad_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardTrack_p2CanMove (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP2_property.startsToBeObserved (by: self.p2CanMove_property)
    self.p2ConnectedToSomePad_property.startsToBeObserved (by: self.p2CanMove_property)
  //--- Atomic property: trackCanRotate
    self.trackCanRotate_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.p1CanMove_property.selection
        let s1 = unwSelf.p2CanMove_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BoardTrack_trackCanRotate (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.p1CanMove_property.startsToBeObserved (by: self.trackCanRotate_property)
    self.p2CanMove_property.startsToBeObserved (by: self.trackCanRotate_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectorP1_property.location_property.selection
        let s1 = unwSelf.p1CanMove_property.selection
        let s2 = unwSelf.mConnectorP2_property.location_property.selection
        let s3 = unwSelf.p2CanMove_property.selection
        let s4 = preferences_frontSideLayoutColorForBoard_property.selection
        let s5 = preferences_inner1LayoutColorForBoard_property.selection
        let s6 = preferences_inner2LayoutColorForBoard_property.selection
        let s7 = preferences_inner3LayoutColorForBoard_property.selection
        let s8 = preferences_inner4LayoutColorForBoard_property.selection
        let s9 = preferences_backSideLayoutColorForBoard_property.selection
        let s10 = unwSelf.mSide_property.selection
        let s11 = unwSelf.actualTrackWidth_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_BoardTrack_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.location_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.p1CanMove_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mConnectorP2_property.location_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.p2CanMove_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_inner1LayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_inner2LayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_inner3LayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_inner4LayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_backSideLayoutColorForBoard_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mSide_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.actualTrackWidth_property.startsToBeObserved (by: self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BoardTrack (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BoardTrack (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BoardTrack (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BoardTrack (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BoardTrack (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BoardTrack (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BoardTrack (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BoardTrack (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_BoardTrack ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BoardTrack ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_BoardTrack ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BoardTrack ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BoardTrack (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BoardTrack (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BoardTrack (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_BoardTrack (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BoardTrack (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BoardTrack ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BoardTrack ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

