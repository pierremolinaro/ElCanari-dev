//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardTrack : ReadOnlyAbstractArrayProperty <BoardTrack> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardTrack>,
                                 addedSet inAddedSet : EBReferenceSet <BoardTrack>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSide_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDefaultTrackWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomTrackWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCustomTrackWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mUsesCustomTrackWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mIsPreservedByAutoRouter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mP1XUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mP1YUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mP2XUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mP2YUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mManualLockP1_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mManualLockP2_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDirectionLockOnKnobDragging_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_actualTrackWidth_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassTrackWidth_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassViaHoleDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassViaPadDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackLengthInCanariUnit_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackSide_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_p1ConnectedToSomePad_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_p2ConnectedToSomePad_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_p1CanMove_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_p2CanMove_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackCanRotate_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackDirectionInDegrees_fromElementsOfSet (inRemovedSet) // Computed property
      self.removeEBObserversOf_computedP1X_fromElementsOfSet (inRemovedSet) // Computed property
      self.removeEBObserversOf_computedP1Y_fromElementsOfSet (inRemovedSet) // Computed property
      self.removeEBObserversOf_computedP2X_fromElementsOfSet (inRemovedSet) // Computed property
      self.removeEBObserversOf_computedP2Y_fromElementsOfSet (inRemovedSet) // Computed property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSide_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDefaultTrackWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomTrackWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCustomTrackWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mUsesCustomTrackWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mIsPreservedByAutoRouter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mP1XUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mP1YUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mP2XUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mP2YUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mManualLockP1_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mManualLockP2_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDirectionLockOnKnobDragging_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_actualTrackWidth_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassTrackWidth_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassViaHoleDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassViaPadDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackLengthInCanariUnit_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackSide_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_p1ConnectedToSomePad_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_p2ConnectedToSomePad_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_p1CanMove_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_p2CanMove_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackCanRotate_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackDirectionInDegrees_toElementsOfSet (inAddedSet) // Computed property
      self.addEBObserversOf_computedP1X_toElementsOfSet (inAddedSet) // Computed property
      self.addEBObserversOf_computedP1Y_toElementsOfSet (inAddedSet) // Computed property
      self.addEBObserversOf_computedP2X_toElementsOfSet (inAddedSet) // Computed property
      self.addEBObserversOf_computedP2Y_toElementsOfSet (inAddedSet) // Computed property
   }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private final var mObserversOf_mSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSide (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSide (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSide_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSide.apply { (_ observer : EBObserverProtocol) in
          managedObject.mSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSide_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mSide.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDefaultTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultTrackWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultTrackWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultTrackWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mDefaultTrackWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDefaultTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDefaultTrackWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultTrackWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mDefaultTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDefaultTrackWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mCustomTrackWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomTrackWidth (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomTrackWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomTrackWidth (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomTrackWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mCustomTrackWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mCustomTrackWidth.apply { (_ observer : EBObserverProtocol) in
          managedObject.mCustomTrackWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mCustomTrackWidth.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mCustomTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCustomTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomTrackWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCustomTrackWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomTrackWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mCustomTrackWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mCustomTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mCustomTrackWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomTrackWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mCustomTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mCustomTrackWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mUsesCustomTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomTrackWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mUsesCustomTrackWidth (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUsesCustomTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomTrackWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomTrackWidth (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUsesCustomTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mUsesCustomTrackWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mUsesCustomTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mUsesCustomTrackWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mUsesCustomTrackWidth.apply { (_ observer : EBObserverProtocol) in
          managedObject.mUsesCustomTrackWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUsesCustomTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mUsesCustomTrackWidth.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mUsesCustomTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mIsPreservedByAutoRouter' stored property
  //····················································································································

  private final var mObserversOf_mIsPreservedByAutoRouter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mIsPreservedByAutoRouter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mIsPreservedByAutoRouter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mIsPreservedByAutoRouter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mIsPreservedByAutoRouter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mIsPreservedByAutoRouter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mIsPreservedByAutoRouter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mIsPreservedByAutoRouter_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mIsPreservedByAutoRouter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mIsPreservedByAutoRouter.apply { (_ observer : EBObserverProtocol) in
          managedObject.mIsPreservedByAutoRouter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mIsPreservedByAutoRouter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mIsPreservedByAutoRouter.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mIsPreservedByAutoRouter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mP1XUnit' stored property
  //····················································································································

  private final var mObserversOf_mP1XUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mP1XUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mP1XUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP1XUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mP1XUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mP1XUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP1XUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mP1XUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mP1XUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mP1XUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mP1XUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mP1XUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mP1XUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mP1XUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mP1YUnit' stored property
  //····················································································································

  private final var mObserversOf_mP1YUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mP1YUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mP1YUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP1YUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mP1YUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mP1YUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP1YUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mP1YUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mP1YUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mP1YUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mP1YUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mP1YUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mP1YUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mP1YUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mP2XUnit' stored property
  //····················································································································

  private final var mObserversOf_mP2XUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mP2XUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mP2XUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP2XUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mP2XUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mP2XUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP2XUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mP2XUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mP2XUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mP2XUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mP2XUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mP2XUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mP2XUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mP2XUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mP2YUnit' stored property
  //····················································································································

  private final var mObserversOf_mP2YUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mP2YUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mP2YUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP2YUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mP2YUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mP2YUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mP2YUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mP2YUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mP2YUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mP2YUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mP2YUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mP2YUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mP2YUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mP2YUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mManualLockP1' stored property
  //····················································································································

  private final var mObserversOf_mManualLockP1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mManualLockP1 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mManualLockP1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mManualLockP1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mManualLockP1 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mManualLockP1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mManualLockP1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mManualLockP1_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mManualLockP1.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mManualLockP1.apply { (_ observer : EBObserverProtocol) in
          managedObject.mManualLockP1_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mManualLockP1_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mManualLockP1.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mManualLockP1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mManualLockP2' stored property
  //····················································································································

  private final var mObserversOf_mManualLockP2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mManualLockP2 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mManualLockP2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mManualLockP2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mManualLockP2 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mManualLockP2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mManualLockP2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mManualLockP2_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mManualLockP2.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mManualLockP2.apply { (_ observer : EBObserverProtocol) in
          managedObject.mManualLockP2_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mManualLockP2_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mManualLockP2.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mManualLockP2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDirectionLockOnKnobDragging' stored property
  //····················································································································

  private final var mObserversOf_mDirectionLockOnKnobDragging = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDirectionLockOnKnobDragging (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDirectionLockOnKnobDragging.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDirectionLockOnKnobDragging_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDirectionLockOnKnobDragging (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDirectionLockOnKnobDragging.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDirectionLockOnKnobDragging_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDirectionLockOnKnobDragging_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    if !self.mObserversOf_mDirectionLockOnKnobDragging.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDirectionLockOnKnobDragging.apply { (_ observer : EBObserverProtocol) in
          managedObject.mDirectionLockOnKnobDragging_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDirectionLockOnKnobDragging_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    self.mObserversOf_mDirectionLockOnKnobDragging.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDirectionLockOnKnobDragging_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'actualTrackWidth' transient property
  //····················································································································

  private final var mObserversOf_actualTrackWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_actualTrackWidth (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_actualTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualTrackWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_actualTrackWidth (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_actualTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.actualTrackWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_actualTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_actualTrackWidth.apply { (_ observer : EBObserverProtocol) in
        managedObject.actualTrackWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_actualTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_actualTrackWidth.apply { (_ observer : EBObserverProtocol) in
        managedObject.actualTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private final var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netName.apply { (_ observer : EBObserverProtocol) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netName.apply { (_ observer : EBObserverProtocol) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassName.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassName.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  private final var mObserversOf_netClassTrackWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassTrackWidth (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassTrackWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassTrackWidth (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassTrackWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassTrackWidth.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassTrackWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassTrackWidth.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassViaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassViaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassViaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassViaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassViaHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassViaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassViaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassViaHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassViaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassViaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassViaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassViaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassViaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassViaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassViaPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassViaPadDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassViaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassViaPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_netClassViaPadDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.netClassViaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_trackLengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackLengthInCanariUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthInCanariUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackLengthInCanariUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthInCanariUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackLengthInCanariUnit_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackLengthInCanariUnit.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackLengthInCanariUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackLengthInCanariUnit_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackLengthInCanariUnit.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackLengthInCanariUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackSide' transient property
  //····················································································································

  private final var mObserversOf_trackSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackSide (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackSide (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackSide_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackSide.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackSide_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackSide.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBObserverProtocol) in
        managedObject.signatureForERCChecking_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBObserverProtocol) in
        managedObject.signatureForERCChecking_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p1ConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_p1ConnectedToSomePad = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p1ConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p1ConnectedToSomePad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1ConnectedToSomePad_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p1ConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p1ConnectedToSomePad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1ConnectedToSomePad_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p1ConnectedToSomePad_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p1ConnectedToSomePad.apply { (_ observer : EBObserverProtocol) in
        managedObject.p1ConnectedToSomePad_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p1ConnectedToSomePad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p1ConnectedToSomePad.apply { (_ observer : EBObserverProtocol) in
        managedObject.p1ConnectedToSomePad_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2ConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_p2ConnectedToSomePad = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2ConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2ConnectedToSomePad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2ConnectedToSomePad_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2ConnectedToSomePad (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2ConnectedToSomePad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2ConnectedToSomePad_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2ConnectedToSomePad_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p2ConnectedToSomePad.apply { (_ observer : EBObserverProtocol) in
        managedObject.p2ConnectedToSomePad_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2ConnectedToSomePad_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p2ConnectedToSomePad.apply { (_ observer : EBObserverProtocol) in
        managedObject.p2ConnectedToSomePad_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p1CanMove' transient property
  //····················································································································

  private final var mObserversOf_p1CanMove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p1CanMove (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p1CanMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1CanMove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p1CanMove (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p1CanMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1CanMove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p1CanMove_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p1CanMove.apply { (_ observer : EBObserverProtocol) in
        managedObject.p1CanMove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p1CanMove_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p1CanMove.apply { (_ observer : EBObserverProtocol) in
        managedObject.p1CanMove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2CanMove' transient property
  //····················································································································

  private final var mObserversOf_p2CanMove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2CanMove (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2CanMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2CanMove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2CanMove (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2CanMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2CanMove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2CanMove_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p2CanMove.apply { (_ observer : EBObserverProtocol) in
        managedObject.p2CanMove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2CanMove_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_p2CanMove.apply { (_ observer : EBObserverProtocol) in
        managedObject.p2CanMove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackCanRotate' transient property
  //····················································································································

  private final var mObserversOf_trackCanRotate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackCanRotate (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackCanRotate.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCanRotate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackCanRotate (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackCanRotate.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCanRotate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackCanRotate_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackCanRotate.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackCanRotate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackCanRotate_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackCanRotate.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackCanRotate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBObserverProtocol) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackDirectionInDegrees' computed property
  //····················································································································

  private final var mObserversOf_trackDirectionInDegrees = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackDirectionInDegrees (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackDirectionInDegrees.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackDirectionInDegrees_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackDirectionInDegrees (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackDirectionInDegrees.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackDirectionInDegrees_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackDirectionInDegrees_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackDirectionInDegrees.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackDirectionInDegrees_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackDirectionInDegrees_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackDirectionInDegrees.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackDirectionInDegrees_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'computedP1X' computed property
  //····················································································································

  private final var mObserversOf_computedP1X = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_computedP1X (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_computedP1X.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP1X_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_computedP1X (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_computedP1X.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP1X_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_computedP1X_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP1X.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP1X_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_computedP1X_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP1X.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP1X_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'computedP1Y' computed property
  //····················································································································

  private final var mObserversOf_computedP1Y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_computedP1Y (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_computedP1Y.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP1Y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_computedP1Y (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_computedP1Y.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP1Y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_computedP1Y_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP1Y.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP1Y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_computedP1Y_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP1Y.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP1Y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'computedP2X' computed property
  //····················································································································

  private final var mObserversOf_computedP2X = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_computedP2X (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_computedP2X.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP2X_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_computedP2X (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_computedP2X.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP2X_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_computedP2X_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP2X.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP2X_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_computedP2X_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP2X.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP2X_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'computedP2Y' computed property
  //····················································································································

  private final var mObserversOf_computedP2Y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_computedP2Y (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_computedP2Y.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP2Y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_computedP2Y (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_computedP2Y.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.computedP2Y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_computedP2Y_toElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP2Y.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP2Y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_computedP2Y_fromElementsOfSet (_ inSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inSet.values {
      self.mObserversOf_computedP2Y.apply { (_ observer : EBObserverProtocol) in
        managedObject.computedP2Y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_BoardTrack : ReadOnlyArrayOf_BoardTrack {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : BoardTrack, _ right : BoardTrack) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_BoardTrack? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BoardTrack,
                        sortCallback inSortCallBack : Optional < (_ left : BoardTrack, _ right : BoardTrack) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <BoardTrack>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardTrack] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardTrack> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardTrack <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardTrack {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardTrack> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardTrack {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardTrack] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardTrack> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardTrack : ReadOnlyArrayOf_BoardTrack {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardTrack>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_BoardTrack : ReadWriteArrayOf_BoardTrack {

  //····················································································································

  private var mModel : ReadWriteArrayOf_BoardTrack? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_BoardTrack?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <BoardTrack>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <BoardTrack> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <BoardTrack>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [BoardTrack] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardTrack> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardTrack : ReadWriteArrayOf_BoardTrack, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardTrack) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardTrack) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardTrack>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardTrack>,
                                 addedSet inAddedSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardTrack] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardTrack>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BoardTrack> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardTrack) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardTrack) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_BoardTrack : ReadWriteArrayOf_BoardTrack {

  //····················································································································

  override var selection : EBSelection < [BoardTrack] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardTrack>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <BoardTrack> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : BoardTrack) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : BoardTrack) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_BoardTrack : StoredArrayOf_BoardTrack {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <BoardTrack> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "BoardTrack") as? BoardTrack {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDefaultTrackWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mCustomTrackWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mCustomTrackWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mUsesCustomTrackWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mIsPreservedByAutoRouter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mP1XUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mP1YUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mP2XUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mP2YUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mManualLockP1 (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mManualLockP2 (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDirectionLockOnKnobDragging (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

