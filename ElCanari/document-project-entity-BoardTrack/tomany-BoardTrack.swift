//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardTrack : ReadOnlyAbstractArrayProperty <BoardTrack> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardTrack>,                            
                                 addedSet inAddedSet : EBReferenceSet <BoardTrack>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mSide { // Stored property
        managedObject.mSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDefaultTrackWidthUnit { // Stored property
        managedObject.mDefaultTrackWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCustomTrackWidth { // Stored property
        managedObject.mCustomTrackWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCustomTrackWidthUnit { // Stored property
        managedObject.mCustomTrackWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mUsesCustomTrackWidth { // Stored property
        managedObject.mUsesCustomTrackWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsPreservedByAutoRouter { // Stored property
        managedObject.mIsPreservedByAutoRouter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP1XUnit { // Stored property
        managedObject.mP1XUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP1YUnit { // Stored property
        managedObject.mP1YUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP2XUnit { // Stored property
        managedObject.mP2XUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP2YUnit { // Stored property
        managedObject.mP2YUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mManualLockP1 { // Stored property
        managedObject.mManualLockP1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mManualLockP2 { // Stored property
        managedObject.mManualLockP2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDirectionLockOnKnobDragging { // Stored property
        managedObject.mDirectionLockOnKnobDragging_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_actualTrackWidth { // Transient property
        managedObject.actualTrackWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netName { // Transient property
        managedObject.netName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassName { // Transient property
        managedObject.netClassName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassTrackWidth { // Transient property
        managedObject.netClassTrackWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassViaHoleDiameter { // Transient property
        managedObject.netClassViaHoleDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassViaPadDiameter { // Transient property
        managedObject.netClassViaPadDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackLengthInCanariUnit { // Transient property
        managedObject.trackLengthInCanariUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackSide { // Transient property
        managedObject.trackSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p1ConnectedToSomePad { // Transient property
        managedObject.p1ConnectedToSomePad_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2ConnectedToSomePad { // Transient property
        managedObject.p2ConnectedToSomePad_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p1CanMove { // Transient property
        managedObject.p1CanMove_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2CanMove { // Transient property
        managedObject.p2CanMove_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackCanRotate { // Transient property
        managedObject.trackCanRotate_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackDirectionInDegrees { // Computed property
        managedObject.trackDirectionInDegrees_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP1X { // Computed property
        managedObject.computedP1X_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP1Y { // Computed property
        managedObject.computedP1Y_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP2X { // Computed property
        managedObject.computedP2X_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP2Y { // Computed property
        managedObject.computedP2Y_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mSide { // Stored property
        managedObject.mSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDefaultTrackWidthUnit { // Stored property
        managedObject.mDefaultTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCustomTrackWidth { // Stored property
        managedObject.mCustomTrackWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCustomTrackWidthUnit { // Stored property
        managedObject.mCustomTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mUsesCustomTrackWidth { // Stored property
        managedObject.mUsesCustomTrackWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mIsPreservedByAutoRouter { // Stored property
        managedObject.mIsPreservedByAutoRouter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP1XUnit { // Stored property
        managedObject.mP1XUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP1YUnit { // Stored property
        managedObject.mP1YUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP2XUnit { // Stored property
        managedObject.mP2XUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mP2YUnit { // Stored property
        managedObject.mP2YUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mManualLockP1 { // Stored property
        managedObject.mManualLockP1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mManualLockP2 { // Stored property
        managedObject.mManualLockP2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDirectionLockOnKnobDragging { // Stored property
        managedObject.mDirectionLockOnKnobDragging_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_actualTrackWidth { // Transient property
        managedObject.actualTrackWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netName { // Transient property
        managedObject.netName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassName { // Transient property
        managedObject.netClassName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassTrackWidth { // Transient property
        managedObject.netClassTrackWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassViaHoleDiameter { // Transient property
        managedObject.netClassViaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassViaPadDiameter { // Transient property
        managedObject.netClassViaPadDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackLengthInCanariUnit { // Transient property
        managedObject.trackLengthInCanariUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackSide { // Transient property
        managedObject.trackSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p1ConnectedToSomePad { // Transient property
        managedObject.p1ConnectedToSomePad_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2ConnectedToSomePad { // Transient property
        managedObject.p2ConnectedToSomePad_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p1CanMove { // Transient property
        managedObject.p1CanMove_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2CanMove { // Transient property
        managedObject.p2CanMove_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackCanRotate { // Transient property
        managedObject.trackCanRotate_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackDirectionInDegrees { // Computed property
        managedObject.trackDirectionInDegrees_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP1X { // Computed property
        managedObject.computedP1X_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP1Y { // Computed property
        managedObject.computedP1Y_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP2X { // Computed property
        managedObject.computedP2X_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_computedP2Y { // Computed property
        managedObject.computedP2Y_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private final var mObserversOf_mSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_mSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mDefaultTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mDefaultTrackWidthUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mDefaultTrackWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mDefaultTrackWidthUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDefaultTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mDefaultTrackWidthUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mDefaultTrackWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mDefaultTrackWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mCustomTrackWidth : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCustomTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCustomTrackWidth {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCustomTrackWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCustomTrackWidth = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCustomTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCustomTrackWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mCustomTrackWidthUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCustomTrackWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCustomTrackWidthUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCustomTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCustomTrackWidthUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCustomTrackWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCustomTrackWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mUsesCustomTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mUsesCustomTrackWidth : EBObservedObject? = nil

  //····················································································································

  final func toMany_mUsesCustomTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mUsesCustomTrackWidth {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mUsesCustomTrackWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mUsesCustomTrackWidth = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mUsesCustomTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mUsesCustomTrackWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mIsPreservedByAutoRouter' stored property
  //····················································································································

  private final var mObserversOf_mIsPreservedByAutoRouter : EBObservedObject? = nil

  //····················································································································

  final func toMany_mIsPreservedByAutoRouter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mIsPreservedByAutoRouter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mIsPreservedByAutoRouter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mIsPreservedByAutoRouter = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mIsPreservedByAutoRouter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mIsPreservedByAutoRouter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mP1XUnit' stored property
  //····················································································································

  private final var mObserversOf_mP1XUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mP1XUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mP1XUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mP1XUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mP1XUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mP1XUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mP1XUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mP1YUnit' stored property
  //····················································································································

  private final var mObserversOf_mP1YUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mP1YUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mP1YUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mP1YUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mP1YUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mP1YUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mP1YUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mP2XUnit' stored property
  //····················································································································

  private final var mObserversOf_mP2XUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mP2XUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mP2XUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mP2XUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mP2XUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mP2XUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mP2XUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mP2YUnit' stored property
  //····················································································································

  private final var mObserversOf_mP2YUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mP2YUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mP2YUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mP2YUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mP2YUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mP2YUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mP2YUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mManualLockP1' stored property
  //····················································································································

  private final var mObserversOf_mManualLockP1 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mManualLockP1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mManualLockP1 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mManualLockP1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mManualLockP1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mManualLockP1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mManualLockP1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mManualLockP2' stored property
  //····················································································································

  private final var mObserversOf_mManualLockP2 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mManualLockP2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mManualLockP2 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mManualLockP2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mManualLockP2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mManualLockP2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mManualLockP2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mDirectionLockOnKnobDragging' stored property
  //····················································································································

  private final var mObserversOf_mDirectionLockOnKnobDragging : EBObservedObject? = nil

  //····················································································································

  final func toMany_mDirectionLockOnKnobDragging_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mDirectionLockOnKnobDragging {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDirectionLockOnKnobDragging_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mDirectionLockOnKnobDragging = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mDirectionLockOnKnobDragging_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mDirectionLockOnKnobDragging?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'actualTrackWidth' transient property
  //····················································································································

  private final var mObserversOf_actualTrackWidth : EBObservedObject? = nil

  //····················································································································

  final func toMany_actualTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_actualTrackWidth {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.actualTrackWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_actualTrackWidth = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_actualTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_actualTrackWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private final var mObserversOf_netName : EBObservedObject? = nil

  //····················································································································

  final func toMany_netName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netName = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName : EBObservedObject? = nil

  //····················································································································

  final func toMany_netClassName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netClassName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netClassName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netClassName = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netClassName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netClassName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  private final var mObserversOf_netClassTrackWidth : EBObservedObject? = nil

  //····················································································································

  final func toMany_netClassTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netClassTrackWidth {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netClassTrackWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netClassTrackWidth = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netClassTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netClassTrackWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaHoleDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_netClassViaHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netClassViaHoleDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netClassViaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netClassViaHoleDiameter = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netClassViaHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netClassViaHoleDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaPadDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_netClassViaPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netClassViaPadDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netClassViaPadDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netClassViaPadDiameter = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netClassViaPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netClassViaPadDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_trackLengthInCanariUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_trackLengthInCanariUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_trackLengthInCanariUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackLengthInCanariUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackLengthInCanariUnit = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_trackLengthInCanariUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackLengthInCanariUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'trackSide' transient property
  //····················································································································

  private final var mObserversOf_trackSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_trackSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_trackSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackSide = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_trackSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBObservedObject? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p1ConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_p1ConnectedToSomePad : EBObservedObject? = nil

  //····················································································································

  final func toMany_p1ConnectedToSomePad_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p1ConnectedToSomePad {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p1ConnectedToSomePad_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p1ConnectedToSomePad = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p1ConnectedToSomePad_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p1ConnectedToSomePad?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p2ConnectedToSomePad' transient property
  //····················································································································

  private final var mObserversOf_p2ConnectedToSomePad : EBObservedObject? = nil

  //····················································································································

  final func toMany_p2ConnectedToSomePad_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p2ConnectedToSomePad {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p2ConnectedToSomePad_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p2ConnectedToSomePad = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p2ConnectedToSomePad_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p2ConnectedToSomePad?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p1CanMove' transient property
  //····················································································································

  private final var mObserversOf_p1CanMove : EBObservedObject? = nil

  //····················································································································

  final func toMany_p1CanMove_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p1CanMove {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p1CanMove_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p1CanMove = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p1CanMove_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p1CanMove?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p2CanMove' transient property
  //····················································································································

  private final var mObserversOf_p2CanMove : EBObservedObject? = nil

  //····················································································································

  final func toMany_p2CanMove_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p2CanMove {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p2CanMove_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p2CanMove = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p2CanMove_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p2CanMove?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'trackCanRotate' transient property
  //····················································································································

  private final var mObserversOf_trackCanRotate : EBObservedObject? = nil

  //····················································································································

  final func toMany_trackCanRotate_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_trackCanRotate {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackCanRotate_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackCanRotate = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_trackCanRotate_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackCanRotate?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'trackDirectionInDegrees' computed property
  //····················································································································

  private final var mObserversOf_trackDirectionInDegrees : EBObservedObject? = nil

  //····················································································································

  final func toMany_trackDirectionInDegrees_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_trackDirectionInDegrees {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackDirectionInDegrees_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackDirectionInDegrees = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_trackDirectionInDegrees_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackDirectionInDegrees?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'computedP1X' computed property
  //····················································································································

  private final var mObserversOf_computedP1X : EBObservedObject? = nil

  //····················································································································

  final func toMany_computedP1X_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_computedP1X {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.computedP1X_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_computedP1X = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_computedP1X_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_computedP1X?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'computedP1Y' computed property
  //····················································································································

  private final var mObserversOf_computedP1Y : EBObservedObject? = nil

  //····················································································································

  final func toMany_computedP1Y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_computedP1Y {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.computedP1Y_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_computedP1Y = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_computedP1Y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_computedP1Y?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'computedP2X' computed property
  //····················································································································

  private final var mObserversOf_computedP2X : EBObservedObject? = nil

  //····················································································································

  final func toMany_computedP2X_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_computedP2X {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.computedP2X_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_computedP2X = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_computedP2X_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_computedP2X?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'computedP2Y' computed property
  //····················································································································

  private final var mObserversOf_computedP2Y : EBObservedObject? = nil

  //····················································································································

  final func toMany_computedP2Y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_computedP2Y {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.computedP2Y_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_computedP2Y = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_computedP2Y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_computedP2Y?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BoardTrack is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_BoardTrack <SUPER : EBManagedObject> : ReadOnlyArrayOf_BoardTrack {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <BoardTrack> ()
      for superObject in newModelArray.values {
        if let object = superObject as? BoardTrack {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [BoardTrack] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <BoardTrack> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardTrack : ReadOnlyArrayOf_BoardTrack {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BoardTrack>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BoardTrack is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BoardTrack : ReadWriteArrayOf_BoardTrack, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BoardTrack> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BoardTrack)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <BoardTrack> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! BoardTrack)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardTrack) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BoardTrack) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BoardTrack>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BoardTrack>,
                                 addedSet inAddedSet : EBReferenceSet <BoardTrack>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BoardTrack] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BoardTrack>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <BoardTrack> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BoardTrack) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BoardTrack) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BoardTrack is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

