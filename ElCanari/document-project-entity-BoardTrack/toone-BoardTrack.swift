//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BoardTrack : ReadOnlyAbstractObjectProperty <BoardTrack> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSide_property.removeEBObserver (self.mSide_property) // Stored property
      oldValue.mDefaultTrackWidthUnit_property.removeEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
      oldValue.mCustomTrackWidth_property.removeEBObserver (self.mCustomTrackWidth_property) // Stored property
      oldValue.mCustomTrackWidthUnit_property.removeEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
      oldValue.mUsesCustomTrackWidth_property.removeEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
      oldValue.mIsPreservedByAutoRouter_property.removeEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
      oldValue.mP1XUnit_property.removeEBObserver (self.mP1XUnit_property) // Stored property
      oldValue.mP1YUnit_property.removeEBObserver (self.mP1YUnit_property) // Stored property
      oldValue.mP2XUnit_property.removeEBObserver (self.mP2XUnit_property) // Stored property
      oldValue.mP2YUnit_property.removeEBObserver (self.mP2YUnit_property) // Stored property
      oldValue.mManualLockP1_property.removeEBObserver (self.mManualLockP1_property) // Stored property
      oldValue.mManualLockP2_property.removeEBObserver (self.mManualLockP2_property) // Stored property
      oldValue.mDirectionLockOnKnobDragging_property.removeEBObserver (self.mDirectionLockOnKnobDragging_property) // Stored property
      oldValue.actualTrackWidth_property.removeEBObserver (self.actualTrackWidth_property) // Transient property
      oldValue.netName_property.removeEBObserver (self.netName_property) // Transient property
      oldValue.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
      oldValue.netClassTrackWidth_property.removeEBObserver (self.netClassTrackWidth_property) // Transient property
      oldValue.netClassViaHoleDiameter_property.removeEBObserver (self.netClassViaHoleDiameter_property) // Transient property
      oldValue.netClassViaPadDiameter_property.removeEBObserver (self.netClassViaPadDiameter_property) // Transient property
      oldValue.trackLengthInCanariUnit_property.removeEBObserver (self.trackLengthInCanariUnit_property) // Transient property
      oldValue.trackSide_property.removeEBObserver (self.trackSide_property) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
      oldValue.p1ConnectedToSomePad_property.removeEBObserver (self.p1ConnectedToSomePad_property) // Transient property
      oldValue.p2ConnectedToSomePad_property.removeEBObserver (self.p2ConnectedToSomePad_property) // Transient property
      oldValue.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
      oldValue.p1CanMove_property.removeEBObserver (self.p1CanMove_property) // Transient property
      oldValue.p2CanMove_property.removeEBObserver (self.p2CanMove_property) // Transient property
      oldValue.trackCanRotate_property.removeEBObserver (self.trackCanRotate_property) // Transient property
      oldValue.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
      oldValue.trackDirectionInDegrees_property.removeEBObserver (self.trackDirectionInDegrees_property) // Computed property
      oldValue.computedP1X_property.removeEBObserver (self.computedP1X_property) // Computed property
      oldValue.computedP1Y_property.removeEBObserver (self.computedP1Y_property) // Computed property
      oldValue.computedP2X_property.removeEBObserver (self.computedP2X_property) // Computed property
      oldValue.computedP2Y_property.removeEBObserver (self.computedP2Y_property) // Computed property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mSide_property.addEBObserver (self.mSide_property) // Stored property
      newValue.mDefaultTrackWidthUnit_property.addEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
      newValue.mCustomTrackWidth_property.addEBObserver (self.mCustomTrackWidth_property) // Stored property
      newValue.mCustomTrackWidthUnit_property.addEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
      newValue.mUsesCustomTrackWidth_property.addEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
      newValue.mIsPreservedByAutoRouter_property.addEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
      newValue.mP1XUnit_property.addEBObserver (self.mP1XUnit_property) // Stored property
      newValue.mP1YUnit_property.addEBObserver (self.mP1YUnit_property) // Stored property
      newValue.mP2XUnit_property.addEBObserver (self.mP2XUnit_property) // Stored property
      newValue.mP2YUnit_property.addEBObserver (self.mP2YUnit_property) // Stored property
      newValue.mManualLockP1_property.addEBObserver (self.mManualLockP1_property) // Stored property
      newValue.mManualLockP2_property.addEBObserver (self.mManualLockP2_property) // Stored property
      newValue.mDirectionLockOnKnobDragging_property.addEBObserver (self.mDirectionLockOnKnobDragging_property) // Stored property
      newValue.actualTrackWidth_property.addEBObserver (self.actualTrackWidth_property) // Transient property
      newValue.netName_property.addEBObserver (self.netName_property) // Transient property
      newValue.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
      newValue.netClassTrackWidth_property.addEBObserver (self.netClassTrackWidth_property) // Transient property
      newValue.netClassViaHoleDiameter_property.addEBObserver (self.netClassViaHoleDiameter_property) // Transient property
      newValue.netClassViaPadDiameter_property.addEBObserver (self.netClassViaPadDiameter_property) // Transient property
      newValue.trackLengthInCanariUnit_property.addEBObserver (self.trackLengthInCanariUnit_property) // Transient property
      newValue.trackSide_property.addEBObserver (self.trackSide_property) // Transient property
      newValue.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
      newValue.p1ConnectedToSomePad_property.addEBObserver (self.p1ConnectedToSomePad_property) // Transient property
      newValue.p2ConnectedToSomePad_property.addEBObserver (self.p2ConnectedToSomePad_property) // Transient property
      newValue.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
      newValue.p1CanMove_property.addEBObserver (self.p1CanMove_property) // Transient property
      newValue.p2CanMove_property.addEBObserver (self.p2CanMove_property) // Transient property
      newValue.trackCanRotate_property.addEBObserver (self.trackCanRotate_property) // Transient property
      newValue.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
      newValue.trackDirectionInDegrees_property.addEBObserver (self.trackDirectionInDegrees_property) // Computed property
      newValue.computedP1X_property.addEBObserver (self.computedP1X_property) // Computed property
      newValue.computedP1Y_property.addEBObserver (self.computedP1Y_property) // Computed property
      newValue.computedP2X_property.addEBObserver (self.computedP2X_property) // Computed property
      newValue.computedP2Y_property.addEBObserver (self.computedP2Y_property) // Computed property
    }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  final let mSide_property = EBGenericTransientProperty <TrackSide?> ()

  //····················································································································
  //   Observers of 'mDefaultTrackWidthUnit' stored property
  //····················································································································

  final let mDefaultTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomTrackWidth' stored property
  //····················································································································

  final let mCustomTrackWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCustomTrackWidthUnit' stored property
  //····················································································································

  final let mCustomTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mUsesCustomTrackWidth' stored property
  //····················································································································

  final let mUsesCustomTrackWidth_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mIsPreservedByAutoRouter' stored property
  //····················································································································

  final let mIsPreservedByAutoRouter_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mP1XUnit' stored property
  //····················································································································

  final let mP1XUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mP1YUnit' stored property
  //····················································································································

  final let mP1YUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mP2XUnit' stored property
  //····················································································································

  final let mP2XUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mP2YUnit' stored property
  //····················································································································

  final let mP2YUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mManualLockP1' stored property
  //····················································································································

  final let mManualLockP1_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mManualLockP2' stored property
  //····················································································································

  final let mManualLockP2_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mDirectionLockOnKnobDragging' stored property
  //····················································································································

  final let mDirectionLockOnKnobDragging_property = EBGenericTransientProperty <TrackLockDirection?> ()

  //····················································································································
  //   Observers of 'actualTrackWidth' transient property
  //····················································································································

  final let actualTrackWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  final let netName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  final let netClassTrackWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  final let netClassViaHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  final let netClassViaPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  final let trackLengthInCanariUnit_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'trackSide' transient property
  //····················································································································

  final let trackSide_property = EBGenericTransientProperty <TrackSide?> ()

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observers of 'p1ConnectedToSomePad' transient property
  //····················································································································

  final let p1ConnectedToSomePad_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'p2ConnectedToSomePad' transient property
  //····················································································································

  final let p2ConnectedToSomePad_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'p1CanMove' transient property
  //····················································································································

  final let p1CanMove_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'p2CanMove' transient property
  //····················································································································

  final let p2CanMove_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'trackCanRotate' transient property
  //····················································································································

  final let trackCanRotate_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'trackDirectionInDegrees' computed property
  //····················································································································

  final let trackDirectionInDegrees_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'computedP1X' computed property
  //····················································································································

  final let computedP1X_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'computedP1Y' computed property
  //····················································································································

  final let computedP1Y_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'computedP2X' computed property
  //····················································································································

  final let computedP2X_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'computedP2Y' computed property
  //····················································································································

  final let computedP2Y_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSide simple stored property
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDefaultTrackWidthUnit simple stored property
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDefaultTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomTrackWidth simple stored property
    self.mCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCustomTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomTrackWidthUnit simple stored property
    self.mCustomTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCustomTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mUsesCustomTrackWidth simple stored property
    self.mUsesCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mUsesCustomTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mIsPreservedByAutoRouter simple stored property
    self.mIsPreservedByAutoRouter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mIsPreservedByAutoRouter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP1XUnit simple stored property
    self.mP1XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP1XUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP1YUnit simple stored property
    self.mP1YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP1YUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP2XUnit simple stored property
    self.mP2XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP2XUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP2YUnit simple stored property
    self.mP2YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP2YUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mManualLockP1 simple stored property
    self.mManualLockP1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mManualLockP1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mManualLockP2 simple stored property
    self.mManualLockP2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mManualLockP2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDirectionLockOnKnobDragging simple stored property
    self.mDirectionLockOnKnobDragging_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDirectionLockOnKnobDragging_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure actualTrackWidth transient property
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.actualTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netName transient property
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassTrackWidth transient property
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaHoleDiameter transient property
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassViaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaPadDiameter transient property
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassViaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackLengthInCanariUnit transient property
    self.trackLengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackLengthInCanariUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackSide transient property
    self.trackSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p1ConnectedToSomePad transient property
    self.p1ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p1ConnectedToSomePad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2ConnectedToSomePad transient property
    self.p2ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2ConnectedToSomePad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p1CanMove transient property
    self.p1CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p1CanMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2CanMove transient property
    self.p2CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2CanMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackCanRotate transient property
    self.trackCanRotate_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackCanRotate_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackDirectionInDegrees computed property
    self.trackDirectionInDegrees_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackDirectionInDegrees_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP1X computed property
    self.computedP1X_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP1X_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP1Y computed property
    self.computedP1Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP1Y_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP2X computed property
    self.computedP2X_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP2X_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP2Y computed property
    self.computedP2Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP2Y_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardTrack? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardTrack?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardTrack?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································

  func setProp (_ inValue : BoardTrack?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_BoardTrack : ReadWriteObject_BoardTrack {

  //····················································································································

  private var mModel : ReadWriteObject_BoardTrack? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardTrack?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardTrack?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardTrack? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BoardTrack : ReadWriteObject_BoardTrack, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardTrack) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardTrack) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    var mValueExplorer : NSButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
          }
        }
      }
    }
  #endif
  
  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

