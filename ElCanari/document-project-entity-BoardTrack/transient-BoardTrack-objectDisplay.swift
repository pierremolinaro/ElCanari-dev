//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_BoardTrack_objectDisplay (
       _ self_mConnectorP1_location : CanariPoint?, 
       _ self_mConnectorP2_location : CanariPoint?, 
       _ self_mAddedToSolderMask : Bool,            
       _ prefs_frontSidePadColorForBoard : NSColor, 
       _ self_BoardObject_displayFrontPadsForBoard : Bool,
       _ prefs_backSidePadColorForBoard : NSColor,  
       _ self_BoardObject_displayBackPadsForBoard : Bool,
       _ self_BoardObject_displayFrontLayoutForBoard : Bool,
       _ prefs_frontSideLayoutColorForBoard : NSColor,
       _ self_BoardObject_displayBackLayoutForBoard : Bool,
       _ prefs_backSideLayoutColorForBoard : NSColor,
       _ self_BoardObject_displayInner1LayoutForBoard : Bool,
       _ prefs_inner1LayoutColorForBoard : NSColor, 
       _ self_BoardObject_displayInner2LayoutForBoard : Bool,
       _ prefs_inner2LayoutColorForBoard : NSColor, 
       _ self_BoardObject_displayInner3LayoutForBoard : Bool,
       _ prefs_inner3LayoutColorForBoard : NSColor, 
       _ self_BoardObject_displayInner4LayoutForBoard : Bool,
       _ prefs_inner4LayoutColorForBoard : NSColor, 
       _ self_actualTrackWidth : Int,               
       _ self_mSide : TrackSide
) -> EBShape {
//--- START OF USER ZONE 2
       var shape = EBShape ()
       if let p1 = self_mConnectorP1_location?.cocoaPoint, let p2 = self_mConnectorP2_location?.cocoaPoint {
         let color : NSColor
         let display : Bool
         switch self_mSide {
         case .front :
           if self_mAddedToSolderMask {
             color = prefs_frontSidePadColorForBoard
             display = self_BoardObject_displayFrontPadsForBoard
           }else{
             color = prefs_frontSideLayoutColorForBoard
             display = self_BoardObject_displayFrontLayoutForBoard
           }
         case .back :
           if self_mAddedToSolderMask {
             display = self_BoardObject_displayBackPadsForBoard
             color = prefs_backSidePadColorForBoard
           }else{
             display = self_BoardObject_displayBackLayoutForBoard
             color = prefs_backSideLayoutColorForBoard
           }
         case .inner1 :
           display = self_BoardObject_displayInner1LayoutForBoard
           color = prefs_inner1LayoutColorForBoard
         case .inner2 :
           display = self_BoardObject_displayInner2LayoutForBoard
           color = prefs_inner2LayoutColorForBoard
         case .inner3 :
           display = self_BoardObject_displayInner3LayoutForBoard
           color = prefs_inner3LayoutColorForBoard
         case .inner4 :
           display = self_BoardObject_displayInner4LayoutForBoard
           color = prefs_inner4LayoutColorForBoard
         }
         if display {
      //     let w = canariUnitToCocoa ((self_actualTrackWidth == 0) ? milsToCanariUnit (fromInt: 10) : self_actualTrackWidth)
           let w = canariUnitToCocoa (max (self_actualTrackWidth, milsToCanariUnit (fromInt: 10)))
           var bp = EBBezierPath ()
           bp.lineWidth = w
           bp.lineCapStyle = .round
           bp.lineJoinStyle = .round
           bp.move (to: p1)
           bp.line (to: p2)
           shape.add (stroke: [bp], color)
         }
       }
       return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
