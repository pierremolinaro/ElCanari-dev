//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_BoardTrack_selectionDisplay (
       _ prefs_selectionHiliteColor : NSColor,         
       _ self_mConnectorP1_location : CanariPoint?,    
       _ self_p1CanMove : Bool,                        
       _ self_mConnectorP2_location : CanariPoint?,    
       _ self_p2CanMove : Bool,                        
       _ self_mAddedToSolderMask : Bool,               
       _ self_mEndStyle : TrackEndStyle,               
       _ prefs_frontSidePadColorForBoard : NSColor,    
       _ prefs_backSidePadColorForBoard : NSColor,     
       _ prefs_frontSideLayoutColorForBoard : NSColor, 
       _ prefs_inner1LayoutColorForBoard : NSColor,    
       _ prefs_inner2LayoutColorForBoard : NSColor,    
       _ prefs_inner3LayoutColorForBoard : NSColor,    
       _ prefs_inner4LayoutColorForBoard : NSColor,    
       _ prefs_backSideLayoutColorForBoard : NSColor,  
       _ self_mSide : TrackSide,                       
       _ self_actualTrackWidth : Int
) -> EBShape {
//--- START OF USER ZONE 2
      var shape = EBShape ()
      if let p1 = self_mConnectorP1_location?.cocoaPoint, let p2 = self_mConnectorP2_location?.cocoaPoint {
      //--- Hilite
        let color : NSColor
        switch self_mSide {
        case .front :
          if self_mAddedToSolderMask {
            color = prefs_frontSidePadColorForBoard
          }else{
            color = prefs_frontSideLayoutColorForBoard
          }
        case .back :
          if self_mAddedToSolderMask {
            color = prefs_backSidePadColorForBoard
          }else{
            color = prefs_backSideLayoutColorForBoard
          }
        case .inner1 :
          color = prefs_inner1LayoutColorForBoard
        case .inner2 :
          color = prefs_inner2LayoutColorForBoard
        case .inner3 :
          color = prefs_inner3LayoutColorForBoard
        case .inner4 :
          color = prefs_inner4LayoutColorForBoard
        }
        var bp = BezierPath ()
        bp.lineWidth = canariUnitToCocoa (self_actualTrackWidth) + 1.0
        switch self_mEndStyle {
        case .round :
          bp.lineCapStyle = .round
        case .square :
          bp.lineCapStyle = .square
        }
        bp.lineJoinStyle = .round
        bp.move (to: p1)
        bp.line (to: p2)
        shape.add (stroke: [bp], prefs_selectionHiliteColor)
        bp.lineWidth = canariUnitToCocoa (self_actualTrackWidth)
        shape.add (stroke: [bp], color)
      //--- Knobs
        if self_p1CanMove {
          shape.add (knobAt: p1, knobIndex: BOARD_TRACK_P1, .diamond, 2.0)
        }
        if self_p2CanMove {
          shape.add (knobAt: p2, knobIndex: BOARD_TRACK_P2, .diamond, 2.0)
        }
      }
      return shape
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
