//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mCPX1 : AnyObject {
  var mCPX1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mCPY1 : AnyObject {
  var mCPY1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mCPX2 : AnyObject {
  var mCPX2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mCPY2 : AnyObject {
  var mCPY2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mShape : AnyObject {
  var mShape : BorderCurveShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mNextX : AnyObject {
  var mNextX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_mNextY : AnyObject {
  var mNextY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_p2Xvalue : AnyObject {
  var p2Xvalue : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_p2Yvalue : AnyObject {
  var p2Yvalue : Double? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_descriptor : AnyObject {
  var descriptor : BorderCurveDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_isLine : AnyObject {
  var isLine : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol BorderCurve_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class BorderCurve : EBGraphicManagedObject,
         BorderCurve_mX,
         BorderCurve_mY,
         BorderCurve_mCPX1,
         BorderCurve_mCPY1,
         BorderCurve_mCPX2,
         BorderCurve_mCPY2,
         BorderCurve_mShape,
         BorderCurve_mNextX,
         BorderCurve_mNextY,
         BorderCurve_p2Xvalue,
         BorderCurve_p2Yvalue,
         BorderCurve_descriptor,
         BorderCurve_objectDisplay,
         BorderCurve_isLine,
         BorderCurve_selectionDisplay {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPX1
  //····················································································································

  final let mCPX1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPX1_toDefaultValue () {
    self.mCPX1 = 0
  }

  //····················································································································

  final var mCPX1 : Int {
    get { return self.mCPX1_property.propval }
    set { self.mCPX1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPY1
  //····················································································································

  final let mCPY1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPY1_toDefaultValue () {
    self.mCPY1 = 0
  }

  //····················································································································

  final var mCPY1 : Int {
    get { return self.mCPY1_property.propval }
    set { self.mCPY1_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPX2
  //····················································································································

  final let mCPX2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPX2_toDefaultValue () {
    self.mCPX2 = 0
  }

  //····················································································································

  final var mCPX2 : Int {
    get { return self.mCPX2_property.propval }
    set { self.mCPX2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCPY2
  //····················································································································

  final let mCPY2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCPY2_toDefaultValue () {
    self.mCPY2 = 0
  }

  //····················································································································

  final var mCPY2 : Int {
    get { return self.mCPY2_property.propval }
    set { self.mCPY2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_BorderCurveShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = BorderCurveShape.line
  }

  //····················································································································

  final var mShape : BorderCurveShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: mNextX
  //····················································································································

  final let mNextX_property = EBComputedProperty_Int ()

  //····················································································································

  var mNextX : Int? {
    get {
      switch self.mNextX_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mNextX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: mNextY
  //····················································································································

  final let mNextY_property = EBComputedProperty_Int ()

  //····················································································································

  var mNextY : Int? {
    get {
      switch self.mNextY_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mNextY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mNext
  //····················································································································

  final let mNext_property = StoredObject_BorderCurve (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mNext : BorderCurve? {
    get {
      return self.mNext_property.propval
    }
    set {
      if self.mNext_property.propval !== newValue {
        if self.mNext_property.propval != nil {
          self.mNext_property.setProp (nil)
        }
        if newValue != nil {
          self.mNext_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNext_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mPrevious
  //····················································································································

  final let mPrevious_property = StoredObject_BorderCurve (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mPrevious : BorderCurve? {
    get {
      return self.mPrevious_property.propval
    }
    set {
      if self.mPrevious_property.propval !== newValue {
        if self.mPrevious_property.propval != nil {
          self.mPrevious_property.setProp (nil)
        }
        if newValue != nil {
          self.mPrevious_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mPrevious_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: p2Xvalue
  //····················································································································

  final let p2Xvalue_property = EBTransientProperty_Double ()

  //····················································································································

  final var p2Xvalue : Double? {
    switch self.p2Xvalue_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2Yvalue
  //····················································································································

  final let p2Yvalue_property = EBTransientProperty_Double ()

  //····················································································································

  final var p2Yvalue : Double? {
    switch self.p2Yvalue_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_BorderCurveDescriptor ()

  //····················································································································

  final var descriptor : BorderCurveDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isLine
  //····················································································································

  final let isLine_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isLine : Bool? {
    switch self.isLine_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mCPX1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mCPY1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mCPX2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mCPY2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mShape_property = EBStoredProperty_BorderCurveShape (defaultValue: BorderCurveShape.line, undoManager: inUndoManager)
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.mRoot_none)
    self.mNext_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNext_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNext_property.addEBObserver (self.mNext_none)
    self.mPrevious_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mPrevious_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPrevious_property.addEBObserver (self.mPrevious_none)
//    gInitSemaphore.wait ()
  //--- Atomic proxy property: mNextX
    self.mNextX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mNext_property {
        switch object.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mNext?.mX = inValue
    }
    self.mNext_property.mX_property.addEBObserver (self.mNextX_property)
  //--- Atomic proxy property: mNextY
    self.mNextY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mNext_property {
        switch object.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNextY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mNext?.mY = inValue
    }
    self.mNext_property.mY_property.addEBObserver (self.mNextY_property)
  //--- To one property: mRoot (has opposite to many relationship: mBorderCurves)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.remove (me) } }
    )
  //--- To one property: mNext (has opposite to one relationship: mPrevious)
    self.mNext_property.undoManager = inUndoManager
    self.mNext_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPrevious_property.setProp (me) } },
      resetter: { inObject in inObject.mPrevious_property.setProp (nil) }
    )
  //--- To one property: mPrevious (has opposite to one relationship: mNext)
    self.mPrevious_property.undoManager = inUndoManager
    self.mPrevious_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNext_property.setProp (me) } },
      resetter: { inObject in inObject.mNext_property.setProp (nil) }
    )
  //--- Atomic property: p2Xvalue
    self.p2Xvalue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNext_property.mX_property.selection
        let s1 = unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BorderCurve_p2Xvalue (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.mX_property.addEBObserver (self.p2Xvalue_property)
    self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.p2Xvalue_property)
  //--- Atomic property: p2Yvalue
    self.p2Yvalue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNext_property.mY_property.selection
        let s1 = unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_BorderCurve_p2Yvalue (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.mY_property.addEBObserver (self.p2Yvalue_property)
    self.mRoot_property.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.p2Yvalue_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mNext_property.mX_property.selection
        let s3 = unwSelf.mNext_property.mY_property.selection
        let s4 = unwSelf.mCPX1_property.selection
        let s5 = unwSelf.mCPY1_property.selection
        let s6 = unwSelf.mCPX2_property.selection
        let s7 = unwSelf.mCPY2_property.selection
        let s8 = unwSelf.mShape_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_BorderCurve_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.descriptor_property)
    self.mY_property.addEBObserver (self.descriptor_property)
    self.mNext_property.mX_property.addEBObserver (self.descriptor_property)
    self.mNext_property.mY_property.addEBObserver (self.descriptor_property)
    self.mCPX1_property.addEBObserver (self.descriptor_property)
    self.mCPY1_property.addEBObserver (self.descriptor_property)
    self.mCPX2_property.addEBObserver (self.descriptor_property)
    self.mCPY2_property.addEBObserver (self.descriptor_property)
    self.mShape_property.addEBObserver (self.descriptor_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mNext_property.mX_property.selection
        let s3 = unwSelf.mNext_property.mY_property.selection
        let s4 = unwSelf.mCPX1_property.selection
        let s5 = unwSelf.mCPY1_property.selection
        let s6 = unwSelf.mCPX2_property.selection
        let s7 = unwSelf.mCPY2_property.selection
        let s8 = unwSelf.mShape_property.selection
        let s9 = unwSelf.mRoot_property.mBoardLimitsWidth_property.selection
        let s10 = unwSelf.mRoot_property.mBoardClearance_property.selection
        let s11 = unwSelf.mRoot_property.mBoardShape_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_BorderCurve_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mNext_property.mX_property.addEBObserver (self.objectDisplay_property)
    self.mNext_property.mY_property.addEBObserver (self.objectDisplay_property)
    self.mCPX1_property.addEBObserver (self.objectDisplay_property)
    self.mCPY1_property.addEBObserver (self.objectDisplay_property)
    self.mCPX2_property.addEBObserver (self.objectDisplay_property)
    self.mCPY2_property.addEBObserver (self.objectDisplay_property)
    self.mShape_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardLimitsWidth_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardClearance_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.mBoardShape_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: isLine
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mShape_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_BorderCurve_isLine (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mShape_property.addEBObserver (self.isLine_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mNext_property.mX_property.selection
        let s3 = unwSelf.mNext_property.mY_property.selection
        let s4 = unwSelf.mCPX1_property.selection
        let s5 = unwSelf.mCPY1_property.selection
        let s6 = unwSelf.mCPX2_property.selection
        let s7 = unwSelf.mCPY2_property.selection
        let s8 = unwSelf.mShape_property.selection
        let s9 = unwSelf.mRoot_property.mBoardShape_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_BorderCurve_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mNext_property.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mNext_property.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mCPX1_property.addEBObserver (self.selectionDisplay_property)
    self.mCPY1_property.addEBObserver (self.selectionDisplay_property)
    self.mCPX2_property.addEBObserver (self.selectionDisplay_property)
    self.mCPY2_property.addEBObserver (self.selectionDisplay_property)
    self.mShape_property.addEBObserver (self.selectionDisplay_property)
    self.mRoot_property.mBoardShape_property.addEBObserver (self.selectionDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mCPX1
      self.mCPX1_property.storeIn (dictionary: ioDictionary, forKey: "mCPX1")
    //--- Atomic property: mCPY1
      self.mCPY1_property.storeIn (dictionary: ioDictionary, forKey: "mCPY1")
    //--- Atomic property: mCPX2
      self.mCPX2_property.storeIn (dictionary: ioDictionary, forKey: "mCPX2")
    //--- Atomic property: mCPY2
      self.mCPY2_property.storeIn (dictionary: ioDictionary, forKey: "mCPY2")
    //--- Atomic property: mShape
      self.mShape_property.storeIn (dictionary: ioDictionary, forKey: "mShape")
  //--- To one property: mNext // Opposite is toOne mPrevious
    self.store (managedObject:self.mNext_property.propval,
      relationshipName: "mNext",
      intoDictionary: ioDictionary)
  //--- To one property: mPrevious // Opposite is toOne mNext
    self.store (managedObject:self.mPrevious_property.propval,
      relationshipName: "mPrevious",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  //--- To one property: mNext
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNext",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mNext_property.setProp (entity)
      }
    }
  //--- To one property: mPrevious
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPrevious",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mPrevious_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mCPX1
    self.mCPX1_property.readFrom (dictionary: inDictionary, forKey: "mCPX1")
  //--- Atomic property: mCPY1
    self.mCPY1_property.readFrom (dictionary: inDictionary, forKey: "mCPY1")
  //--- Atomic property: mCPX2
    self.mCPX2_property.readFrom (dictionary: inDictionary, forKey: "mCPX2")
  //--- Atomic property: mCPY2
    self.mCPY2_property.readFrom (dictionary: inDictionary, forKey: "mCPY2")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey: "mShape")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mCPX1\n"
    ioString += "mCPY1\n"
    ioString += "mCPX2\n"
    ioString += "mCPY2\n"
    ioString += "mShape\n"
  //--- To one relationships
    ioString += "mRoot\n"
    ioString += "mNext\n"
    ioString += "mPrevious\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPX1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPY1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPX2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCPY2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNext {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mPrevious {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mX = value
    }
    if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mY = value
    }
    if let range = inDictionary ["mCPX1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCPX1 = value
    }
    if let range = inDictionary ["mCPY1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCPY1 = value
    }
    if let range = inDictionary ["mCPX2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCPX2 = value
    }
    if let range = inDictionary ["mCPY2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCPY2 = value
    }
    if let range = inDictionary ["mShape"], let value = BorderCurveShape.unarchiveFromDataRange (inData, range) {
      self.mShape = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mRoot"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! ProjectRoot
      self.mRoot = object
    }
    if let range = inDictionary ["mNext"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! BorderCurve
      self.mNext = object
    }
    if let range = inDictionary ["mPrevious"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! BorderCurve
      self.mPrevious = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: mRoot
    if let object = self.mRoot {
      ioObjectArray.append (object)
    }
  //--- To one property: mNext
    if let object = self.mNext {
      ioObjectArray.append (object)
    }
  //--- To one property: mPrevious
    if let object = self.mPrevious {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_BorderCurve (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_BorderCurve (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_BorderCurve (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_BorderCurve (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_BorderCurve (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_BorderCurve (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_BorderCurve (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_BorderCurve (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_BorderCurve ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_BorderCurve ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_BorderCurve ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_BorderCurve ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_BorderCurve (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_BorderCurve (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_BorderCurve (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    self.saveIntoAdditionalDictionary_BorderCurve (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_BorderCurve (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_BorderCurve ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_BorderCurve ()
  }

  //····················································································································
  //  Can be deleted
  //····················································································································

  override func canBeDeleted () -> Bool {
    return false
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

