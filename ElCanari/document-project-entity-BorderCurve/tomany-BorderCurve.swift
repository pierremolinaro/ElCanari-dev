//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BorderCurve : ReadOnlyAbstractArrayProperty <BorderCurve> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BorderCurve>,                            
                                 addedSet inAddedSet : EBReferenceSet <BorderCurve>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCPX1_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCPY1_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCPX2_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCPY2_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mShape_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_p2Xvalue_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_p2Yvalue_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_descriptor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_isLine_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCPX1_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCPY1_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCPX2_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCPY2_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mShape_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_p2Xvalue_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_p2Yvalue_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_descriptor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_isLine_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  private final var mObserversOf_mCPX1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPX1 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX1 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX1_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mCPX1.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCPX1.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCPX1_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCPX1.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX1_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mCPX1.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCPX1_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCPX1.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  private final var mObserversOf_mCPY1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPY1 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY1 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY1_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mCPY1.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCPY1.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCPY1_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCPY1.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY1_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mCPY1.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCPY1_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCPY1.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  private final var mObserversOf_mCPX2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPX2 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX2 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX2_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mCPX2.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCPX2.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCPX2_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCPX2.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX2_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mCPX2.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCPX2_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCPX2.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  private final var mObserversOf_mCPY2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPY2 (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY2 (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY2_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mCPY2.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mCPY2.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mCPY2_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mCPY2.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY2_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mCPY2.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCPY2_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mCPY2.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private final var mObserversOf_mShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShape (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShape (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShape_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    if !self.mObserversOf_mShape.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mShape.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mShape_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mShape.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShape_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mShape.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mShape_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mShape.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNextX' proxy property
  //····················································································································

  private final var mObserversOf_mNextX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNextX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNextX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNextX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNextX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNextX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNextX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNextX_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_mNextX.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.mNextX_property.addEBObserver (observer)
        }else{
          self.mObserversOf_mNextX.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNextX_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mNextX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNextX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mNextX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNextY' proxy property
  //····················································································································

  private final var mObserversOf_mNextY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNextY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNextY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNextY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNextY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNextY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNextY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNextY_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_mNextY.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.mNextY_property.addEBObserver (observer)
        }else{
          self.mObserversOf_mNextY.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNextY_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for (_, entry) in self.mObserversOf_mNextY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNextY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mNextY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Xvalue' transient property
  //····················································································································

  private final var mObserversOf_p2Xvalue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2Xvalue (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Xvalue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Xvalue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Xvalue (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Xvalue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Xvalue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Xvalue_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_p2Xvalue.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.p2Xvalue_property.addEBObserver (observer)
        }else{
          self.mObserversOf_p2Xvalue.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Xvalue_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_p2Xvalue.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.p2Xvalue_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_p2Xvalue.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Yvalue' transient property
  //····················································································································

  private final var mObserversOf_p2Yvalue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2Yvalue (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Yvalue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Yvalue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Yvalue (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Yvalue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Yvalue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Yvalue_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_p2Yvalue.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.p2Yvalue_property.addEBObserver (observer)
        }else{
          self.mObserversOf_p2Yvalue.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Yvalue_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_p2Yvalue.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.p2Yvalue_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_p2Yvalue.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private final var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_descriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.descriptor_property.addEBObserver (observer)
        }else{
          self.mObserversOf_descriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_descriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.descriptor_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_descriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  private final var mObserversOf_isLine = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isLine (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isLine.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isLine_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isLine (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isLine.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isLine_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isLine_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isLine.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isLine_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isLine.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isLine_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isLine.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isLine_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isLine.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BorderCurve : ReadOnlyArrayOf_BorderCurve {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BorderCurve>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BorderCurve> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BorderCurve)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <BorderCurve> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! BorderCurve)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BorderCurve>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BorderCurve>,
                                 addedSet inAddedSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BorderCurve] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BorderCurve>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <BorderCurve> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BorderCurve) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BorderCurve) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve {

  //····················································································································

  override var selection : EBSelection < [BorderCurve] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BorderCurve>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <BorderCurve> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : BorderCurve) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : BorderCurve) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

